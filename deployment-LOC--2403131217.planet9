{"API":[{"id":"c1df0e15-2bb4-4673-9f6d-96d31994e43f","createdAt":"2024-03-12T00:06:27.000Z","updatedAt":"2024-03-13T11:16:07.000Z","createdBy":"admin","changedBy":"admin","auth":[],"endpoints":[],"paths":[{"id":"99bcbf90-5878-4614-a22c-7853be95f6eb","path":"/placesdata","method":"GET","headers":[],"parameters":[{"name":"where","description":"{ \"fieldName\": \"value\"}  or { \"fieldName\": \"Not(value)\"} or { \"fieldName\": \"Between(1,10)\"}\n            or {fieldName: In([\"value1\", \"value2\"])}\n            Other operators - LessThan(value), LessThanOrEqual(value), MoreThan(value), MoreThanOrEqual(value), Like(value), Any(value), IsNull(value), Raw(value)"},{"name":"select","description":"fieldName1, fieldname2, fieldName3"},{"name":"take","description":"Limit (paginated) - max number of entities that should be taken"},{"name":"skip","description":"Offset (paginated) from where entities should be taken"},{"name":"order","description":"{\"fieldName1\": \"ASC\", \"fieldName2\": \"DESC\"}"}],"content":[],"responses":[{"status":200,"headers":[],"content":[{"objectType":"array","name":"placesdata"}]},{"status":400,"headers":[],"content":[{"objectType":"object","name":"Error"}]}]},{"id":"0630ef39-90d7-4569-a793-291a6bac6b14","path":"/placesdata","method":"PUT","headers":[],"parameters":[],"content":[{"objectTyoe":"array","name":"placesdata"}],"responses":[{"status":200,"headers":[],"content":[{"objectType":"array","name":"placesdata"}]},{"status":400,"headers":[],"content":[{"objectType":"object","name":"Error"}]}]},{"id":"09250854-8be6-4646-8eb3-fdc15dd73a2e","path":"/placesdata","method":"POST","headers":[],"parameters":[{"name":"where","example":"{ \"fieldName\": \"value\"}  or { \"fieldName\": \"Not(value)\"} or { \"fieldName\": \"Between(1,10)\"}\n            or {fieldName: In([\"value1\", \"value2\"])}\n            Other operators - LessThan(value), LessThanOrEqual(value), MoreThan(value), MoreThanOrEqual(value), Like(value), Any(value), IsNull(value), Raw(value)"}],"content":[{"objectTyoe":"array","name":"placesdata"}],"responses":[{"status":200,"headers":[],"content":[{"objectType":"array","name":"placesdata"}]},{"status":400,"headers":[],"content":[{"objectType":"object","name":"Error"}]}]},{"id":"c8ac5923-cc7a-4055-8b25-ed4bf1aea291","path":"/placesdata","method":"DELETE","headers":[],"parameters":[{"name":"where","example":"{ \"fieldName\": \"value\"}  or { \"fieldName\": \"Not(value)\"} or { \"fieldName\": \"Between(1,10)\"}\n            or {fieldName: In([\"value1\", \"value2\"])}\n            Other operators - LessThan(value), LessThanOrEqual(value), MoreThan(value), MoreThanOrEqual(value), Like(value), Any(value), IsNull(value), Raw(value)"}],"content":[],"responses":[{"status":200,"headers":[],"content":[{"objectType":"array","name":"placesdata"}]},{"status":400,"headers":[],"content":[{"objectType":"object","name":"Error"}]}]},{"id":"b1b0d37c-2698-451f-8e89-f03911a274f2","path":"/placesdata/count","method":"GET","headers":[],"parameters":[{"name":"where","description":"{ \"fieldName\": \"value\"}  or { \"fieldName\": \"Not(value)\"} or { \"fieldName\": \"Between(1,10)\"}\n            or {fieldName: In([\"value1\", \"value2\"])}\n            Other operators - LessThan(value), LessThanOrEqual(value), MoreThan(value), MoreThanOrEqual(value), Like(value), Any(value), IsNull(value), Raw(value)"}],"content":[],"responses":[{"status":200,"headers":[],"content":[{"objectType":"object","name":"count"}]},{"status":400,"headers":[],"content":[{"objectType":"object","name":"Error"}]}]}],"definitions":[{"id":"74be4985-3170-499d-a17c-7767bf6d6fe7","name":"placesdata","properties":[{"id":"c796e581-977c-4e18-82a3-47eddfc94a4e","parent":"","name":"id","description":"Unique record ID","objectType":"string"},{"id":"986f782e-da5b-4028-911d-681f5a5d1be8","parent":"","name":"city","objectType":"string"},{"id":"252e44bd-82b2-46ea-96dc-e31a4c2cf493","parent":"","name":"country","objectType":"string"},{"id":"a0b661ff-b8bb-4e39-a45f-dcba1038541e","parent":"","name":"country_code","objectType":"string"},{"id":"00c10073-efde-4bbf-a4a1-8f94a64956f2","parent":"","name":"createdAt","description":"Date when record was created","objectType":"number"},{"id":"ca50537c-9d1f-4828-9c3b-b1635d1b61f8","parent":"","name":"createdBy","description":"Created by","objectType":"string"},{"id":"e81ee042-f918-4afd-853f-232eada1ec53","parent":"","name":"updatedAt","description":"Date when record was updated","objectType":"number"},{"id":"0cdc90ec-2132-4966-87a7-f6143bc43bde","parent":"","name":"updatedBy","description":"Updated by","objectType":"string"}]},{"id":"2310be1b-88dc-4c2a-86ff-cf8d29496e3b","name":"Error","properties":[{"id":"70203be5-2fb1-417d-b518-0c0b43f5814a","parent":"","name":"status","objectType":"string"},{"id":"20753eb9-802e-4fb5-90d0-00914a78b684","parent":"","name":"message","objectType":"string"}]},{"id":"f4e0439d-b99c-4122-9e62-4f01bef30d5b","name":"count","properties":[{"id":"d6887d6b-9190-4302-afd4-626ab17217fa","parent":"","name":"count","objectType":"number"}]}],"documentation":[],"name":"weatherAPI","endpoint":"/api/entity","ver":"24.03.12.0006","version":null,"description":null,"mediaType":"application/json","securitySchemes":null,"swaggerURI":null,"swaggerSystem":null,"apiType":"table","about":null,"enableProxy":false,"forwardProxy":null,"restrictAccess":false,"enableTrace":false,"enableIDE":true,"internalAPI":false,"isPublic":false,"tlsAllowUntrusted":false,"useOwnProcess":false,"package":"c3588c14-4083-4933-baab-7d3a0b4e4064","apiGroup":null,"apiFormat":0,"apps":[{"id":"8567e671-8044-4f81-86e3-1d1758a753f1","createdAt":"2024-03-13T11:16:08.000Z","updatedAt":"2024-03-13T12:15:54.000Z","createdBy":"admin","changedBy":"admin","ver":"24.03.13.1215","application":"weatherapp","title":"","description":"","enableFileStorage":false,"enableManifest":false,"enableStylesheet":true,"enableObfuscate":false,"onlyRunLaunchpad":false,"disabled":false,"loadLaunchpadCode":null,"loadApplicationCode":null,"appType":"A","ui5_m":true,"ui5_f":true,"ui5_table":false,"ui5_tnt":false,"ui5_uxap":false,"ui5_chart":false,"ui5_theme":"sap_horizon","ui5_version":"","ui5_language":null,"ui5_url":"","cus_theme":"","globalScript":null,"deleted":false,"libHighchart":false,"libHighmap":false,"publicAccess":false,"ui5_bootstrap":false,"ui5_ionic":false,"useV2AppHandler":false,"compilerTarget":3,"tabWidth":null,"printWidth":null,"generateVersionOnActivation":false,"activationHistoryCount":0}],"roles":[],"webapps":[]}],"Application":[{"id":"8567e671-8044-4f81-86e3-1d1758a753f1","createdAt":"2024-03-13T11:16:08.000Z","updatedAt":"2024-03-13T12:15:54.000Z","createdBy":"admin","changedBy":"admin","objects":[{"fieldNo":"7c424e30-f8d9-49ed-9ebe-b739b865c24c","fieldName":"Shell","fieldParent":0,"fieldPos":1,"fieldType":"sap.m.Shell","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"2918b082-d0fa-47e2-e83d-d18f386dcb2d","fieldName":"App","fieldParent":"7c424e30-f8d9-49ed-9ebe-b739b865c24c","fieldPos":2,"fieldType":"sap.m.App","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"0479f32c-94de-4f6a-fa2d-fae4a98449d1","fieldName":"currentLocation","fieldParent":"2918b082-d0fa-47e2-e83d-d18f386dcb2d","fieldPos":3,"fieldType":"sap.m.Page","description":"Test","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"Weather App","script":"","translation":[{"language":"PT","value":"Aplicação de Clima"}]},{"attribute":"titleAlignment","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"cce8f8d4-1212-42d4-f3e8-246f404334cd","fieldName":"Bar","fieldParent":"0479f32c-94de-4f6a-fa2d-fae4a98449d1","fieldPos":4,"fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}]},{"fieldNo":"9297ed47-d175-4b15-e33b-080f2cd7a1fe","fieldName":"Left","fieldParent":"cce8f8d4-1212-42d4-f3e8-246f404334cd","fieldPos":5,"fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentLeft","script":"","translation":[]}]},{"fieldNo":"c77f0f9d-964a-4452-bbc7-bb60624143fb","fieldName":"Button2","fieldParent":"9297ed47-d175-4b15-e33b-080f2cd7a1fe","fieldPos":6,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Search by location","script":"","translation":[{"language":"PT","value":"Pesquisar por localização"}]},{"attribute":"press","grouping":"Events","value":"App.to(searchLocation);","script":"App.to(searchLocation);","translation":[]}]},{"fieldNo":"dc04fe97-91d6-4287-cbb2-7fc19df7f407","fieldName":"HBox","fieldParent":"0479f32c-94de-4f6a-fa2d-fae4a98449d1","fieldPos":7,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"direction","grouping":"Properties","value":"Column","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"7e9830c1-d274-4aa9-bbf1-4432fbcc1ee7","fieldName":"Title","fieldParent":"dc04fe97-91d6-4287-cbb2-7fc19df7f407","fieldPos":8,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"LOCAL WEATHER","script":"","translation":[{"language":"PT","value":"CLIMA LOCAL"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMargin","script":"","translation":[]}]},{"fieldNo":"99b08d77-b1bd-4a41-f85f-b19915c91c64","fieldName":"Card","fieldParent":"dc04fe97-91d6-4287-cbb2-7fc19df7f407","fieldPos":9,"fieldType":"sap.f.Card","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"300px","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"300px","script":"","translation":[]}]},{"fieldNo":"a252cd7e-70ae-403a-a10f-e69d792daa9b","fieldName":"VBox","fieldParent":"99b08d77-b1bd-4a41-f85f-b19915c91c64","fieldPos":10,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"cardContent","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Start","script":"","translation":[]}]},{"fieldNo":"b4589e9d-4e88-426d-d489-f1488e34527e","fieldName":"weatherIcon","fieldParent":"a252cd7e-70ae-403a-a10f-e69d792daa9b","fieldPos":11,"fieldType":"sap.m.Image","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"17b80ed2-de4f-4b51-df20-0dd5f69387d3","fieldName":"Temperature","fieldParent":"a252cd7e-70ae-403a-a10f-e69d792daa9b","fieldPos":12,"fieldType":"sap.m.Label","script":"","customComponent":false,"bindingType":"h","request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Temperature:","script":"","translation":[{"language":"PT","value":"Temperatura:"}]}]},{"fieldNo":"44810474-41f5-41eb-d0ee-395622fd7ac0","fieldName":"Description","fieldParent":"a252cd7e-70ae-403a-a10f-e69d792daa9b","fieldPos":13,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Description:","script":"","translation":[{"language":"PT","value":"Descrição:"}]}]},{"fieldNo":"842679e5-a86f-4ff4-93ea-e0e9be912605","fieldName":"Humidity","fieldParent":"a252cd7e-70ae-403a-a10f-e69d792daa9b","fieldPos":14,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Humidity:","script":"","translation":[{"language":"PT","value":"Humidade:"}]}]},{"fieldNo":"dc6ad27d-b4f0-41b8-bc0d-6129733ca2c9","fieldName":"WindSpeed","fieldParent":"a252cd7e-70ae-403a-a10f-e69d792daa9b","fieldPos":15,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Wind Speed:","script":"","translation":[{"language":"PT","value":"Velocidade do Vento:"}]}]},{"fieldNo":"87080e0c-f9e8-48dc-9d46-dd03aa119e24","fieldName":"weatherCoordBtn","fieldParent":"dc04fe97-91d6-4287-cbb2-7fc19df7f407","fieldPos":16,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Get weather","script":"","translation":[{"language":"PT","value":"Obter clima"}]},{"attribute":"press","grouping":"Events","value":"getCurrentLocation();","script":"getCurrentLocation();","translation":[]}]},{"fieldNo":"7bb8fa41-da37-41eb-c1d2-c9b9b67573c9","fieldName":"searchLocation","fieldParent":"2918b082-d0fa-47e2-e83d-d18f386dcb2d","fieldPos":17,"fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"1a8fe79d-d4a0-4d5e-abb5-f3bc03256db2","fieldName":"Bar1","fieldParent":"7bb8fa41-da37-41eb-c1d2-c9b9b67573c9","fieldPos":18,"fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}]},{"fieldNo":"5bb7df1a-714d-4693-a39f-e83f2732eb82","fieldName":"Left1","fieldParent":"1a8fe79d-d4a0-4d5e-abb5-f3bc03256db2","fieldPos":19,"fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentLeft","script":"","translation":[]}]},{"fieldNo":"43143fe4-2cbb-4e64-e5ef-f9bba259a3cc","fieldName":"Button3","fieldParent":"5bb7df1a-714d-4693-a39f-e83f2732eb82","fieldPos":20,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Current coordinates","script":"","translation":[{"language":"PT","value":"Coordenadas atuais"}]},{"attribute":"press","grouping":"Events","value":"App.to(currentLocation);","script":"App.to(currentLocation);","translation":[]}]},{"fieldNo":"909a7ff8-5a64-4e70-a4c2-161afb6cc35b","fieldName":"VBox2","fieldParent":"7bb8fa41-da37-41eb-c1d2-c9b9b67573c9","fieldPos":21,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"a1ac6847-32e0-4dbc-e021-3b076f4d6dfa","fieldName":"Title1","fieldParent":"909a7ff8-5a64-4e70-a4c2-161afb6cc35b","fieldPos":22,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"LOCATION WEATHER","script":"","translation":[{"language":"PT","value":"CLIMA POR LOCALIZAÇÃO"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMargin","script":"","translation":[]}]},{"fieldNo":"41886440-4d83-4e99-a6fb-0b79801a173a","fieldName":"HBox1","fieldParent":"7bb8fa41-da37-41eb-c1d2-c9b9b67573c9","fieldPos":23,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"direction","grouping":"Properties","value":"Row","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"a6e85c0f-617f-4e71-97e1-20ef3c3b2a73","fieldName":"HBox2","fieldParent":"41886440-4d83-4e99-a6fb-0b79801a173a","fieldPos":24,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"alignItems","grouping":"Properties","value":"Start","script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Start","script":"","translation":[]}]},{"fieldNo":"902ba16c-18ec-41a1-be10-a21401bbc8a4","fieldName":"Card1","fieldParent":"a6e85c0f-617f-4e71-97e1-20ef3c3b2a73","fieldPos":25,"fieldType":"sap.f.Card","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"300px","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"300px","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMargin","script":"","translation":[]}]},{"fieldNo":"39b85dec-f4a7-4ff6-e886-58b324363a61","fieldName":"VBox1","fieldParent":"902ba16c-18ec-41a1-be10-a21401bbc8a4","fieldPos":26,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"cardContent","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Start","script":"","translation":[]}]},{"fieldNo":"eace5734-0fb4-4f79-c509-46ac8cd3073d","fieldName":"weatherIcon1","fieldParent":"39b85dec-f4a7-4ff6-e886-58b324363a61","fieldPos":27,"fieldType":"sap.m.Image","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"3e2f65bd-f6cf-4ed6-d9ba-138807870f1e","fieldName":"Temperature1","fieldParent":"39b85dec-f4a7-4ff6-e886-58b324363a61","fieldPos":28,"fieldType":"sap.m.Label","script":"","customComponent":false,"bindingType":"h","request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Temperature:","script":"","translation":[{"language":"PT","value":"Temperatura:"}]}]},{"fieldNo":"3a112aac-b01d-41c3-ca56-a36659c90f67","fieldName":"Description1","fieldParent":"39b85dec-f4a7-4ff6-e886-58b324363a61","fieldPos":29,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Description:","script":"","translation":[{"language":"PT","value":"Descrição:"}]}]},{"fieldNo":"3f91998f-5a84-498c-8c3d-ecdec4fafe94","fieldName":"Humidity1","fieldParent":"39b85dec-f4a7-4ff6-e886-58b324363a61","fieldPos":30,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Humidity:","script":"","translation":[{"language":"PT","value":"Humidade:"}]}]},{"fieldNo":"ab612b52-b972-45ad-f671-255e6bf17616","fieldName":"WindSpeed1","fieldParent":"39b85dec-f4a7-4ff6-e886-58b324363a61","fieldPos":31,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Wind Speed:","script":"","translation":[{"language":"PT","value":"Velocidade do Vento:"}]}]},{"fieldNo":"7590396f-d803-459d-dc85-c0729fa8950d","fieldName":"HBox3","fieldParent":"41886440-4d83-4e99-a6fb-0b79801a173a","fieldPos":32,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"formContent","script":"","translation":[]},{"attribute":"direction","grouping":"Properties","value":"Column","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Inherit","script":"","translation":[]}]},{"fieldNo":"20c44b09-bae0-4530-d938-44c62e5f19ce","fieldName":"cityInput","fieldParent":"7590396f-d803-459d-dc85-c0729fa8950d","fieldPos":33,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"200px","script":"","translation":[]},{"attribute":"placeholder","grouping":"Properties","value":"City","script":"","translation":[{"language":"PT","value":"Cidade"}]}]},{"fieldNo":"0ed00eee-4f17-43fe-e42c-70e6fd17d548","fieldName":"countryInput","fieldParent":"7590396f-d803-459d-dc85-c0729fa8950d","fieldPos":34,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"200px","script":"","translation":[]},{"attribute":"placeholder","grouping":"Properties","value":"Country","script":"","translation":[{"language":"PT","value":"País"}]}]},{"fieldNo":"a5a28e97-85ab-4e98-d653-5443c263d8cd","fieldName":"countryCodeInput","fieldParent":"7590396f-d803-459d-dc85-c0729fa8950d","fieldPos":35,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"200px","script":"","translation":[]},{"attribute":"placeholder","grouping":"Properties","value":"Country code","script":"","translation":[{"language":"PT","value":"Código do país"}]},{"attribute":"maxLength","grouping":"Properties","value":"2","script":"","translation":[]}]},{"fieldNo":"19bae48a-a0e1-4ccb-98c4-6479758b2cbe","fieldName":"addLocalButton","fieldParent":"7590396f-d803-459d-dc85-c0729fa8950d","fieldPos":36,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Add city","script":"","translation":[{"language":"PT","value":"Adicionar cidade"}]},{"attribute":"press","grouping":"Events","value":"submitForm();","script":"submitForm();","translation":[]}]},{"fieldNo":"43ed6362-98a4-4dac-8843-3f48cfeeb369","fieldName":"ComboBox","fieldParent":"7590396f-d803-459d-dc85-c0729fa8950d","fieldPos":37,"fieldType":"sap.m.ComboBox","script":"","customComponent":false,"bindingValue":"weatherAPI>placesdata","bindingType":"h","bindingSource":"API","bindingParentID":"c1df0e15-2bb4-4673-9f6d-96d31994e43f","bindingPathID":"74be4985-3170-499d-a17c-7767bf6d6fe7","request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"200px","script":"","translation":[]},{"attribute":"selectionChange","grouping":"Events","value":"Anonymous Function","script":"locationKey = ComboBox.getSelectedKey().toString();\r\n\r\n//locationKey = \"city countryCode\"\r\n\r\nfunction transformLocation(locationString) {\r\n    if (locationString.length > 0) {\r\n        const [city, countryCode] = locationString.split(\" \");\r\n        CITY = city;\r\n        COUNTRY_CODE = countryCode;\r\n    } else {\r\n        locationKey = undefined;\r\n        CITY = '';\r\n        COUNTRY_CODE = '';\r\n    }\r\n}\r\n\r\ntransformLocation(locationKey);\r\n","language":"javascript","translation":[]}]},{"fieldNo":"7b1f1b95-65c7-4ae3-f423-10aeeac0c590","fieldName":"itemLocation","fieldParent":"43ed6362-98a4-4dac-8843-3f48cfeeb369","fieldPos":38,"fieldType":"sap.ui.core.Item","script":"","customComponent":false,"bindingType":"h","request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{city}, {country}","script":"","translation":[]},{"attribute":"key","grouping":"Properties","value":"{city},{country_code}","script":"","translation":[]}]},{"fieldNo":"62704b01-b3e3-4646-a11c-46c4b9f9a6b9","fieldName":"VBox3","fieldParent":"7590396f-d803-459d-dc85-c0729fa8950d","fieldPos":39,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"200px","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]},{"attribute":"direction","grouping":"Properties","value":"Row","script":"","translation":[]}]},{"fieldNo":"cef1b119-5257-4571-97dc-329d31bfba7f","fieldName":"removePlaceBtn","fieldParent":"62704b01-b3e3-4646-a11c-46c4b9f9a6b9","fieldPos":40,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Remove city","script":"","translation":[{"language":"PT","value":"Remover cidade"}]},{"attribute":"press","grouping":"Events","value":"removePlace();","script":"removePlace();","translation":[]}]},{"fieldNo":"b239641b-0d3a-4337-844e-85cd7faa02c5","fieldName":"weatherLocalBtn","fieldParent":"62704b01-b3e3-4646-a11c-46c4b9f9a6b9","fieldPos":41,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Get weather","script":"","translation":[{"language":"PT","value":"Obter clima"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"console.log(locationKey);\r\nif (locationKey) {\r\n    getCurrentWeatherCity(CITY, COUNTRY_CODE);\r\n} else {\r\n    sap.m.MessageToast.show(\"Please select a location.\");\r\n}\r\n","language":"typescript","translation":[]}]},{"fieldNo":"480f4138-402a-4309-c996-54c1e41781fe","fieldName":"getPlaces","fieldParent":99999,"fieldPos":42,"fieldType":"neptune.restapi","script":"","customComponent":false,"restSource":"c1df0e15-2bb4-4673-9f6d-96d31994e43f","restOperation":"99bcbf90-5878-4614-a22c-7853be95f6eb","request":[],"response":[{"status":200,"dataId":"74be4985-3170-499d-a17c-7767bf6d6fe7","modelFieldNo":"43ed6362-98a4-4dac-8843-3f48cfeeb369"}],"attributes":[{"attribute":"setInitLoad","grouping":"Model","value":"online","script":"","translation":[]}]},{"fieldNo":"edb296a6-5944-4c64-a88e-334172d25f3a","fieldName":"addPlaces","fieldParent":99999,"fieldPos":43,"fieldType":"neptune.restapi","script":"","customComponent":false,"restSource":"c1df0e15-2bb4-4673-9f6d-96d31994e43f","restOperation":"09250854-8be6-4646-8eb3-fdc15dd73a2e","request":[],"response":[],"attributes":[]},{"fieldNo":"e504b6e1-844d-48f8-9a1c-d274fd085890","fieldName":"removePlaces","fieldParent":99999,"fieldPos":44,"fieldType":"neptune.restapi","script":"","customComponent":false,"restSource":"c1df0e15-2bb4-4673-9f6d-96d31994e43f","restOperation":"c8ac5923-cc7a-4055-8b25-ed4bf1aea291","request":[],"response":[],"attributes":[]},{"fieldNo":"eaba92f2-819b-4b41-d8af-af71e16e47ef","fieldName":"_Interfaces","fieldParent":99999,"fieldPos":45,"fieldType":"neptune.Typescript","script":"interface IWeatherData {\r\n    description: string;\r\n    temperature: string;\r\n    humidity: string;\r\n    windSpeed: string;\r\n    city?: string;\r\n    countryCode?: string;\r\n    localName?: string;\r\n    icon: string;\r\n}\r\n","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"063de36d-8542-4ffa-c3b5-d353bfcdbd6c","fieldName":"_functionsGeneral","fieldParent":99999,"fieldPos":46,"fieldType":"neptune.Typescript","script":"function infoToComponent(id: string, propType: string, data: any) {\r\n    let item = sap.ui.getCore().byId(id);\r\n    item.setProperty(propType, data);\r\n}\r\n\r\nfunction submitForm() {\r\n    let city = cityInput.getValue();\r\n    let country = countryInput.getValue();\r\n    let countryCode = countryCodeInput.getValue();\r\n\r\n    if (city && country && countryCode) {\r\n        var options = {\r\n            parameters: {},\r\n            data: {\r\n                city: city,\r\n                country: country,\r\n                country_code: countryCode,\r\n            },\r\n        };\r\n        apiaddPlaces(options);\r\n        cityInput.setValue(\"\");\r\n        countryInput.setValue(\"\");\r\n        countryCodeInput.setValue(\"\");\r\n        apigetPlaces();\r\n        ComboBox.rerender(); //needs this for launchpad to update combobox\r\n    } else {\r\n        sap.m.MessageToast.show(\"All fields must be provided.\");\r\n    }\r\n}\r\n\r\nfunction removePlace() {\r\n    if (ComboBox.getValue()) {\r\n        console.log(\"removing\");\r\n        var options = {\r\n            parameters: {\r\n                where: `{\"city\": \"${CITY}\",\"country_code\": \"${COUNTRY_CODE}\"}`, // Optional\r\n            },\r\n        };\r\n\r\n        apiremovePlaces(options);\r\n        ComboBox.setValue(undefined);\r\n        apigetPlaces();\r\n    } else {\r\n        sap.m.MessageToast.show(\"Please select a location.\");\r\n    }\r\n}\r\n","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"2c0fe5ea-33b1-4896-96b2-2d8de24f8204","fieldName":"init","fieldParent":99999,"fieldPos":47,"fieldType":"neptune.Typescript","script":"// Custom Init - Happens only once when mounting the component\r\nsap.ui.getCore().attachInit(function(startParams) {\r\n\r\n    // data = startParameters from Cockpit Tile application settings (action tab)\r\n\r\n    getCurrentLocation();\r\n\r\n});","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"42f61fd0-e83b-43a4-ef33-0896d51fba60","fieldName":"functionsAPI","fieldParent":99999,"fieldPos":48,"fieldType":"neptune.Typescript","script":"const API_KEY = \"7a34ac24df0f2584cca6124850fd77aa\";\r\nvar CITY = \"YOUR_CITY_NAME\"; // 'New York'\r\nvar COUNTRY_CODE = \"YOUR_COUNTRY_CODE\"; // 'US'\r\nvar LATITUDE = \"YOUR_LATITUDE\"; // '40.7128'\r\nvar LONGITUDE = \"YOUR_LONGITUDE\"; // '-74.0060'\r\n\r\nvar weatherCoord: IWeatherData;\r\nvar weatherLocation: IWeatherData;\r\nvar locationKey;\r\n\r\nfunction getCurrentLocation() {\r\n    if (\"geolocation\" in navigator) {\r\n        navigator.geolocation.getCurrentPosition(\r\n            (position) => {\r\n                this.LATITUDE = position.coords.latitude;\r\n                this.LONGITUDE = position.coords.longitude;\r\n                console.log(`Current Location Coordinates:`);\r\n                console.log(`Latitude: ${this.LATITUDE}`);\r\n                console.log(`Longitude: ${this.LONGITUDE}`);\r\n                getCurrentWeatherLocation();\r\n            },\r\n            (error) => {\r\n                console.error(\"Error getting location:\", error.message);\r\n            }\r\n        );\r\n    } else {\r\n        console.error(\"Geolocation is not supported by this browser.\");\r\n    }\r\n}\r\n\r\nasync function getCurrentWeatherCity(city: string, countryCode: string) {\r\n    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city},${countryCode}&appid=${API_KEY}&units=metric`;\r\n\r\n    try {\r\n        const response = await fetch(apiUrl);\r\n        const data = await response.json();\r\n\r\n        if (response.ok) {\r\n            weatherLocation = {\r\n                temperature: data.main.temp + \"°C\",\r\n                description: data.weather[0].description,\r\n                humidity: data.main.humidity + \"%\",\r\n                windSpeed: data.wind.speed + \"m/s\",\r\n                localName: data.name,\r\n                icon: data.weather[0].icon,\r\n                city: city,\r\n                countryCode: countryCode,\r\n            };\r\n            Temperature1.setText(\"Temperature: \" + weatherCoord.temperature);\r\n            Description1.setText(\"Description: \" + weatherCoord.description);\r\n            Humidity1.setText(\"Humidity: \" + weatherCoord.humidity);\r\n            WindSpeed1.setText(\"WindSpeed: \" + weatherCoord.windSpeed);\r\n            weatherIcon1.setSrc(`/media/root/weatherMedia/${weatherCoord.icon}.png`);\r\n\r\n            /*             infoToComponent(\"Temperature1\", \"text\", \"Temperature: \" + weatherLocation.temperature);\r\n            infoToComponent(\"Description1\", \"text\", \"Description: \" + weatherLocation.description);\r\n            infoToComponent(\"Humidity1\", \"text\", \"Humidity: \" + weatherLocation.humidity);\r\n            infoToComponent(\"WindSpeed1\", \"text\", \"Wind Speed: \" + weatherLocation.windSpeed);\r\n            infoToComponent(\r\n                \"weatherIcon1\",\r\n                \"src\",\r\n                `/media/root/weatherMedia/${weatherLocation.icon}.png`\r\n            ); */\r\n        } else {\r\n            console.error(`Failed to fetch weather data: ${data.message}`);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error fetching weather data:\", error);\r\n    }\r\n}\r\n\r\nasync function getCurrentWeatherLocation() {\r\n    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${this.LATITUDE}&lon=${this.LONGITUDE}&appid=${API_KEY}&units=metric`;\r\n\r\n    try {\r\n        const response = await fetch(apiUrl);\r\n        const data = await response.json();\r\n\r\n        if (response.ok) {\r\n            weatherCoord = {\r\n                temperature: data.main.temp + \"°C\",\r\n                description: data.weather[0].description,\r\n                humidity: data.main.humidity + \"%\",\r\n                windSpeed: data.wind.speed + \"m/s\",\r\n                localName: data.name,\r\n                icon: data.weather[0].icon,\r\n            };\r\n            Temperature.setText(\"Temperature: \" + weatherCoord.temperature);\r\n            Description.setText(\"Description: \" + weatherCoord.description);\r\n            Humidity.setText(\"Humidity: \" + weatherCoord.humidity);\r\n            WindSpeed.setText(\"WindSpeed: \" + weatherCoord.windSpeed);\r\n            weatherIcon.setSrc(`http://localhost:8080/media/root/weatherMedia/${weatherCoord.icon}.png`);\r\n\r\n            /*             infoToComponent(\"Temperature\", \"text\", \"Temperature: \" + weatherCoord.temperature);\r\n            infoToComponent(\"Description\", \"text\", \"Description: \" + weatherCoord.description);\r\n            infoToComponent(\"Humidity\", \"text\", \"Humidity: \" + weatherCoord.humidity);\r\n            infoToComponent(\"WindSpeed\", \"text\", \"Wind Speed: \" + weatherCoord.windSpeed);\r\n            infoToComponent(\r\n                \"weatherIcon\",\r\n                \"src\",\r\n                `/media/root/weatherMedia/${weatherCoord.icon}.png`\r\n            ); */\r\n        } else {\r\n            console.error(`Failed to fetch weather data: ${data.message}`);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error fetching weather data:\", error);\r\n    }\r\n}\r\n","customComponent":false,"request":[],"response":[],"attributes":[]}],"componentInterface":[],"ver":"24.03.13.1215","application":"weatherapp","title":"","description":"","enableFileStorage":false,"enableManifest":false,"enableStylesheet":true,"enableObfuscate":false,"onlyRunLaunchpad":false,"disabled":false,"loadLaunchpadCode":null,"loadApplicationCode":null,"appType":"A","ui5_m":true,"ui5_f":true,"ui5_table":false,"ui5_tnt":false,"ui5_uxap":false,"ui5_chart":false,"ui5_theme":"sap_horizon","ui5_version":"","ui5_language":null,"ui5_url":"","cus_theme":"","css":".cardContent:hover {\r\n    background-color: rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.cardContent {\r\n    gap: 8px;\r\n}\r\n\r\n.cardIcons {\r\n    padding: 20px;\r\n}\r\n\r\n.formContent {\r\n    gap: 10px;\r\n}\r\n","compiledCss":".cardContent:hover {\n  background-color: rgba(0, 0, 0, 0.05);\n}\n\n.cardContent {\n  gap: 8px;\n}\n\n.cardIcons {\n  padding: 20px;\n}\n\n.formContent {\n  gap: 10px;\n}","header":"","manifest":"","globalScript":null,"deleted":false,"libHighchart":false,"libHighmap":false,"publicAccess":false,"ui5_bootstrap":false,"ui5_ionic":false,"useV2AppHandler":false,"compilerTarget":3,"tabWidth":null,"printWidth":null,"generateVersionOnActivation":false,"activationHistoryCount":0,"apis":[{"id":"c1df0e15-2bb4-4673-9f6d-96d31994e43f","createdAt":"2024-03-12T00:06:27.000Z","updatedAt":"2024-03-13T11:16:07.000Z","createdBy":"admin","changedBy":"admin","auth":[],"endpoints":[],"paths":[{"id":"99bcbf90-5878-4614-a22c-7853be95f6eb","path":"/placesdata","method":"GET","headers":[],"parameters":[{"name":"where","description":"{ \"fieldName\": \"value\"}  or { \"fieldName\": \"Not(value)\"} or { \"fieldName\": \"Between(1,10)\"}\n            or {fieldName: In([\"value1\", \"value2\"])}\n            Other operators - LessThan(value), LessThanOrEqual(value), MoreThan(value), MoreThanOrEqual(value), Like(value), Any(value), IsNull(value), Raw(value)"},{"name":"select","description":"fieldName1, fieldname2, fieldName3"},{"name":"take","description":"Limit (paginated) - max number of entities that should be taken"},{"name":"skip","description":"Offset (paginated) from where entities should be taken"},{"name":"order","description":"{\"fieldName1\": \"ASC\", \"fieldName2\": \"DESC\"}"}],"content":[],"responses":[{"status":200,"headers":[],"content":[{"objectType":"array","name":"placesdata"}]},{"status":400,"headers":[],"content":[{"objectType":"object","name":"Error"}]}]},{"id":"0630ef39-90d7-4569-a793-291a6bac6b14","path":"/placesdata","method":"PUT","headers":[],"parameters":[],"content":[{"objectTyoe":"array","name":"placesdata"}],"responses":[{"status":200,"headers":[],"content":[{"objectType":"array","name":"placesdata"}]},{"status":400,"headers":[],"content":[{"objectType":"object","name":"Error"}]}]},{"id":"09250854-8be6-4646-8eb3-fdc15dd73a2e","path":"/placesdata","method":"POST","headers":[],"parameters":[{"name":"where","example":"{ \"fieldName\": \"value\"}  or { \"fieldName\": \"Not(value)\"} or { \"fieldName\": \"Between(1,10)\"}\n            or {fieldName: In([\"value1\", \"value2\"])}\n            Other operators - LessThan(value), LessThanOrEqual(value), MoreThan(value), MoreThanOrEqual(value), Like(value), Any(value), IsNull(value), Raw(value)"}],"content":[{"objectTyoe":"array","name":"placesdata"}],"responses":[{"status":200,"headers":[],"content":[{"objectType":"array","name":"placesdata"}]},{"status":400,"headers":[],"content":[{"objectType":"object","name":"Error"}]}]},{"id":"c8ac5923-cc7a-4055-8b25-ed4bf1aea291","path":"/placesdata","method":"DELETE","headers":[],"parameters":[{"name":"where","example":"{ \"fieldName\": \"value\"}  or { \"fieldName\": \"Not(value)\"} or { \"fieldName\": \"Between(1,10)\"}\n            or {fieldName: In([\"value1\", \"value2\"])}\n            Other operators - LessThan(value), LessThanOrEqual(value), MoreThan(value), MoreThanOrEqual(value), Like(value), Any(value), IsNull(value), Raw(value)"}],"content":[],"responses":[{"status":200,"headers":[],"content":[{"objectType":"array","name":"placesdata"}]},{"status":400,"headers":[],"content":[{"objectType":"object","name":"Error"}]}]},{"id":"b1b0d37c-2698-451f-8e89-f03911a274f2","path":"/placesdata/count","method":"GET","headers":[],"parameters":[{"name":"where","description":"{ \"fieldName\": \"value\"}  or { \"fieldName\": \"Not(value)\"} or { \"fieldName\": \"Between(1,10)\"}\n            or {fieldName: In([\"value1\", \"value2\"])}\n            Other operators - LessThan(value), LessThanOrEqual(value), MoreThan(value), MoreThanOrEqual(value), Like(value), Any(value), IsNull(value), Raw(value)"}],"content":[],"responses":[{"status":200,"headers":[],"content":[{"objectType":"object","name":"count"}]},{"status":400,"headers":[],"content":[{"objectType":"object","name":"Error"}]}]}],"definitions":[{"id":"74be4985-3170-499d-a17c-7767bf6d6fe7","name":"placesdata","properties":[{"id":"c796e581-977c-4e18-82a3-47eddfc94a4e","parent":"","name":"id","description":"Unique record ID","objectType":"string"},{"id":"986f782e-da5b-4028-911d-681f5a5d1be8","parent":"","name":"city","objectType":"string"},{"id":"252e44bd-82b2-46ea-96dc-e31a4c2cf493","parent":"","name":"country","objectType":"string"},{"id":"a0b661ff-b8bb-4e39-a45f-dcba1038541e","parent":"","name":"country_code","objectType":"string"},{"id":"00c10073-efde-4bbf-a4a1-8f94a64956f2","parent":"","name":"createdAt","description":"Date when record was created","objectType":"number"},{"id":"ca50537c-9d1f-4828-9c3b-b1635d1b61f8","parent":"","name":"createdBy","description":"Created by","objectType":"string"},{"id":"e81ee042-f918-4afd-853f-232eada1ec53","parent":"","name":"updatedAt","description":"Date when record was updated","objectType":"number"},{"id":"0cdc90ec-2132-4966-87a7-f6143bc43bde","parent":"","name":"updatedBy","description":"Updated by","objectType":"string"}]},{"id":"2310be1b-88dc-4c2a-86ff-cf8d29496e3b","name":"Error","properties":[{"id":"70203be5-2fb1-417d-b518-0c0b43f5814a","parent":"","name":"status","objectType":"string"},{"id":"20753eb9-802e-4fb5-90d0-00914a78b684","parent":"","name":"message","objectType":"string"}]},{"id":"f4e0439d-b99c-4122-9e62-4f01bef30d5b","name":"count","properties":[{"id":"d6887d6b-9190-4302-afd4-626ab17217fa","parent":"","name":"count","objectType":"number"}]}],"documentation":[],"name":"weatherAPI","endpoint":"/api/entity","ver":"24.03.12.0006","version":null,"description":null,"mediaType":"application/json","securitySchemes":null,"swaggerURI":null,"swaggerSystem":null,"apiType":"table","about":null,"enableProxy":false,"forwardProxy":null,"restrictAccess":false,"enableTrace":false,"enableIDE":true,"internalAPI":false,"isPublic":false,"tlsAllowUntrusted":false,"useOwnProcess":false,"package":"c3588c14-4083-4933-baab-7d3a0b4e4064","apiGroup":null,"apiFormat":0}],"package":"c3588c14-4083-4933-baab-7d3a0b4e4064","customComponents":[]},{"id":"479ca632-13f8-4b0e-a8a0-eb1ed336432c","createdAt":"2020-03-19T09:06:43.350Z","updatedAt":"2024-01-30T16:49:02.290Z","createdBy":"oah","changedBy":"adeel","objects":[{"fieldNo":"8447f113-5868-47cc-cc90-05652669235a","fieldName":"onLoad","fieldParent":0,"fieldType":"neptune.Script","script":"// Neptune Namespace\nsap.n = {\n    Shell: {},\n    Launchpad: {},\n    Phonegap: {\n        loaded: false\n    },\n    Fingerprint: {},\n    Documentation: {},\n    Push: {},\n    PDF: {},\n    Apps: {},\n    Enhancement: {}\n};\n\nif (typeof nep === 'undefined') nep = {};\n\nfunction isCordova() {\n    return window.hasOwnProperty('cordova') || typeof (cordova) === 'object';\n}\n\n// Browser/Phonegap Startup\nif (isCordova()) {\n    document.addEventListener('deviceready', onDeviceReady, false);\n} else {\n    onDeviceReady();\n}\n\n// onDeviceReady\nfunction onDeviceReady() {\n    sap.n.Phonegap.loaded = true;\n    // Catch error on Windows 10\n    if (typeof MSApp !== 'undefined') {\n        window.onerror = function (message, file, line, col, error) {\n            console.error(message);\n            return true;\n        };\n\n        alert = navigator.notification.alert;\n\n        // Hide Backbutton on App\n        setTimeout(function () {\n            let currentView = Windows.UI.Core.SystemNavigationManager.getForCurrentView();\n            currentView.appViewBackButtonVisibility = Windows.UI.Core.AppViewBackButtonVisibility.collapsed;\n        }, 200);\n    }\n\n    document.addEventListener('pause', onPause, false);\n    document.addEventListener('resume', onResume, false);\n    document.addEventListener('backbutton', onBackButton, false);\n\n    if (navigator.app) {\n        try {\n            navigator.app.overrideButton('menubutton', true);\n        } catch (error) {\n\n        }\n    }\n\n    document.addEventListener('menubutton', onMenuButton, false);\n\n    if (isCordova()) {\n        document.addEventListener('online', onOnline, false);\n        document.addEventListener('offline', onOffline, false);\n    } else {\n        window.addEventListener('online', onOnline, false);\n        window.addEventListener('offline', onOffline, false);\n    }\n\n    document.addEventListener('searchbutton', onSearchButton, false);\n    document.addEventListener('volumedownbutton', onVolumeDownButton, false);\n    document.addEventListener('volumeupbutton', onVolumeUpButton, false);\n\n    // Android (API>19) supports VIBRATION natively - fallback for existing apps\n    if (sap.ui.Device.os.android) {\n        if (typeof navigator.notification === 'object' && typeof navigator.notification.vibrate === 'undefined') {\n            navigator.notification.vibrate = function (mSecs) {\n                navigator.vibrate(mSecs);\n            }\n        }\n    }\n\n    // Android SSL \n    if (isCordova() && cordova.plugins && cordova.plugins.certificates) cordova.plugins.certificates.trustUnsecureCerts(true);\n\n    // InAppBrowser \n    if (isCordova()) window.open = cordova.InAppBrowser.open;\n\n    if (isCordova()) {\n        let fnAjaxTransportProxy = function (options, originalOptions, jqXHR) {\n            const { dataType, dataTypes, contentType } = options;\n            if (\n                (dataType === \"*\" || (Array.isArray(dataTypes) && dataTypes.join(\"\") === \"*\")) &&\n                contentType.includes('json')\n            ) {\n                options.dataTypes = [\"text\", \"json\"];\n            }\n\n            return {\n                send: function (headers, completeCallback) {\n                    if (isCordova() && cordova.plugin && cordova.plugin.http) {\n                        cordovaRequest(options)\n                            .then((result) => {\n                                let text = '';\n                                let json = {};\n\n                                try {\n                                    json = result;\n                                    text = JSON.stringify(json);\n                                } catch (e) {}\n                                \n                                completeCallback(200, \"success\", {\n                                    json,\n                                    text,\n                                });\n                            })\n                            .catch((err, status) => {\n                                completeCallback(status, \"error\", {\n                                    \"*\": err,\n                                });\n                            });\n                        return;\n                    }\n\n                    return jQuery.ajax(Object.assign({}, options));\n                },\n                abort: function () {\n                    console.log(\"abort\", options);\n                },\n            };\n        };\n\n        jQuery.ajaxTransport(\"+*\", fnAjaxTransportProxy);\n    }\n}\n\nfunction isOffline() {\n    if (isCordova()) {\n        return navigator.connection.type === Connection.NONE;\n    }\n\n    return !window.navigator.onLine;\n}\n\nfunction onOffline() {\n    AppCache.isOffline = true;\n    AppCacheShellNetwork.setVisible(true);\n    AppCache_butNewUser.setEnabled(false);\n\n    if (AppCache.isMobile && AppCache.isRestricted) return;\n\n    sap.n.Launchpad.RebuildTiles();\n\n    if (typeof sap.n.Phonegap.onOfflineCustom === 'function') {\n        sap.n.Phonegap.onOfflineCustom();\n        return;\n    }\n}\n\nfunction onOnline() {\n    if (isCordova()) {\n        AppCache.isOffline = navigator.connection.type === Connection.NONE;\n    } else {\n        AppCache.isOffline = false;\n    }\n\n    if (!AppCache.isOffline) {\n        fetchAppUpdates();\n    }\n    \n    AppCacheShellNetwork.setVisible(false);\n    AppCache_butNewUser.setEnabled(true);\n\n    if (AppCache.isMobile && AppCache.isRestricted) return;\n\n    sap.n.Launchpad.RebuildTiles();\n\n    if (typeof sap.n.Phonegap.onOnlineCustom === 'function') {\n        sap.n.Phonegap.onOnlineCustom();\n        return;\n    }\n}\n\nwindow.onOffline = onOffline;\nwindow.onOnline = onOnline;\n\nfunction onPause() {\n    AppCache.inBackground = true;\n\n    if (typeof sap.n.Phonegap.onPauseCustom === 'function') {\n        sap.n.Phonegap.onPauseCustom();\n        return;\n    }\n}\n\nfunction onResume() {\n    setTimeout(function () {\n        AppCache.inBackground = false;\n        AppCache.isOffline = isOffline();\n\n        if (typeof navigator.splashscreen !== 'undefined') navigator.splashscreen.hide();\n        sap.ui.core.BusyIndicator.hide();\n\n        if (typeof sap.n.Phonegap.onResumeCustom === 'function') {\n            sap.n.Phonegap.onResumeCustom();\n            return;\n        }\n    }, 100);\n}\n\nfunction onBackButton() {\n\n    if (typeof sap.n.Phonegap.onBackButtonCustom === 'function') {\n        sap.n.Phonegap.onBackButtonCustom();\n        return;\n    }\n\n    if (AppCache.CurrentApp === AppCache.StartApp && AppCache.enablePasscode === true) {\n        AppCache.Lock();\n    }\n\n}\n\nfunction onMenuButton() {\n\n    if (typeof sap.n.Phonegap.onMenuButtonCustom === 'function') {\n        sap.n.Phonegap.onMenuButtonCustom();\n        return;\n    }\n\n}\n\nfunction onSearchButton() {\n\n    if (typeof sap.n.Phonegap.onSearchButtonCustom === 'function') {\n        sap.n.Phonegap.onSearchButtonCustom();\n        return;\n    }\n\n}\n\nfunction onVolumeDownButton() {\n\n    if (typeof sap.n.Phonegap.onVolumeDownButtonCustom === 'function') {\n        sap.n.Phonegap.onVolumeDownButtonCustom();\n        return;\n    }\n\n}\n\nfunction onVolumeUpButton() {\n\n    if (typeof sap.n.Phonegap.onVolumeUpButtonCustom === 'function') {\n        sap.n.Phonegap.onVolumeUpButtonCustom();\n        return;\n    }\n\n}","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":1},{"fieldNo":"cc953eb9-626e-4c4a-87de-9bb923d35090","fieldName":"topShell","fieldParent":0,"fieldType":"sap.m.Shell","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadShell nepPage","script":"","translation":[]},{"attribute":"appWidthLimited","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":2},{"fieldNo":"cd066348-ca46-4f89-9904-13d74a63fbcb","fieldName":"appShell","fieldParent":"cc953eb9-626e-4c4a-87de-9bb923d35090","fieldType":"sap.m.App","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"autoFocus","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":3},{"fieldNo":"63351f31-547d-43db-8b6a-898b9977f552","fieldName":"pageShell","fieldParent":"cd066348-ca46-4f89-9904-13d74a63fbcb","fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage pageShell","script":"","translation":[]},{"attribute":"showSubHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":4},{"fieldNo":"b8bab2c5-8e19-4416-eae9-ff3a28d1cf24","fieldName":"launchpadContainer","fieldParent":"63351f31-547d-43db-8b6a-898b9977f552","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"direction","grouping":"Properties","value":"Column","script":"","translation":[]}],"fieldPos":5},{"fieldNo":"f0f258ae-7569-468a-c773-a7819488c33c","fieldName":"topMenu","fieldParent":"b8bab2c5-8e19-4416-eae9-ff3a28d1cf24","fieldType":"sap.m.Panel","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenu","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"49px","script":"","translation":[]},{"attribute":"expandAnimation","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"accessibleRole","grouping":"Properties","value":"Region","script":"","translation":[]}],"fieldPos":6},{"fieldNo":"766bdea0-e6f4-485b-a0c5-7103482992a6","fieldName":"topMenuToolbar","fieldParent":"f0f258ae-7569-468a-c773-a7819488c33c","fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}],"fieldPos":7},{"fieldNo":"a619f5c3-0886-47af-9882-8b0c0e84a7a2","fieldName":"toolTopMenu","fieldParent":"f0f258ae-7569-468a-c773-a7819488c33c","fieldType":"sap.m.HBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenuContent","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]}],"fieldPos":8},{"fieldNo":"ab18c413-4f59-40ae-8cd8-5b52a6433023","fieldName":"topContainerLeft","fieldParent":"a619f5c3-0886-47af-9882-8b0c0e84a7a2","fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":9},{"fieldNo":"2e2b96ab-9829-41bb-fa2f-65f6065ff13a","fieldName":"topLayoutLeft","fieldParent":"ab18c413-4f59-40ae-8cd8-5b52a6433023","fieldType":"sap.m.HBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"height","grouping":"Properties","value":"48px","script":"","translation":[]}],"fieldPos":10},{"fieldNo":"333db848-5a32-4194-fe57-7cb103a9e608","fieldName":"layoutShellBoxOverflow","fieldParent":"2e2b96ab-9829-41bb-fa2f-65f6065ff13a","fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]}],"fieldPos":11},{"fieldNo":"57373720-9f7b-4811-a2ed-4184ef1d256e","fieldName":"AppCacheShellMenu","fieldParent":"333db848-5a32-4194-fe57-7cb103a9e608","fieldType":"sap.m.Button","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"48px","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"Menu","script":"","translation":[{"language":"1","value":"菜单"},{"language":"A","value":"قائمة طعام"},{"language":"AF","value":"Spyskaart"},{"language":"AR","value":"قائمة طعام"},{"language":"BG","value":"Меню"},{"language":"CA","value":"Menú"},{"language":"CS","value":"Jídelní lístek"},{"language":"D","value":"Menü"},{"language":"DA","value":"Menu"},{"language":"DE","value":"Menü"},{"language":"EL","value":"Μενού"},{"language":"EN","value":"Menu"},{"language":"ES","value":"Menú"},{"language":"ET","value":"Menüü"},{"language":"F","value":"Menu"},{"language":"FI","value":"Valikko"},{"language":"FR","value":"Menu"},{"language":"H","value":"Menü"},{"language":"HE","value":"תַפרִיט"},{"language":"HR","value":"Jelovnik"},{"language":"HU","value":"Menü"},{"language":"ID","value":"Menu"},{"language":"IS","value":"Matseðill"},{"language":"IT","value":"Menù"},{"language":"JA","value":"メニュー"},{"language":"K","value":"Menu"},{"language":"KO","value":"메뉴"},{"language":"LT","value":"Meniu"},{"language":"LV","value":"Izvēlne"},{"language":"MS","value":"Menu"},{"language":"NL","value":"Menu"},{"language":"NN","value":"Meny"},{"language":"NO","value":"Meny"},{"language":"O","value":"Meny"},{"language":"P","value":"Cardápio"},{"language":"PL","value":"Menu"},{"language":"PT","value":"Cardápio"},{"language":"R","value":"Меню"},{"language":"RO","value":"Meniul"},{"language":"RU","value":"Меню"},{"language":"S","value":"Menú"},{"language":"SE","value":"Bargu"},{"language":"SH","value":"Meni"},{"language":"SK","value":"Ponuka"},{"language":"SL","value":"meni"},{"language":"SR","value":"Мени"},{"language":"SV","value":"Meny"},{"language":"TH","value":"เมนู"},{"language":"TR","value":"Menü"},{"language":"UK","value":"Меню"},{"language":"W","value":"Меню"},{"language":"ZF","value":"菜單"},{"language":"ZH","value":"菜单"}]},{"attribute":"styleClass","grouping":"Properties","value":"nep","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://grid","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"// verticalMenu = Pin main menu to the left side bar. Slide out from left on small screens\nif (AppCache.config.verticalMenu) {\n    if (launchpadContentMenu.getVisible()) {\n        sap.n.Launchpad.overflowMenuClose();\n    } else {\n        sap.n.Launchpad.overflowMenuOpen();\n    }\n\n    return;\n}\n\nif (launchpadContentMenu.getVisible()) {\n    sap.n.Launchpad.overflowMenuClose();\n    return;\n}\n\nconst isSmallScreen = sap.ui.Device.resize.width < sap.n.Launchpad.verticalMenuLimit;\nif (isSmallScreen) launchpadContentMenu.setWidth(\"0px\");\n\nif (isSmallScreen) {\n    launchpadOverflow.addItem(pageVerticalMenu);\n    applyCSSToElmId('launchpadOverflowContainer', { width: '100%' });\n    applyCSSToElmId('launchpadOverflowClickArea', { display: 'block' });\n} else {\n    let size = (launchpadContentMenu.getWidth() === \"0px\") ? \"300px\" : \"0px\";\n    launchpadContentMenu.addItem(pageVerticalMenu).setWidth(size);    \n}\n\nsap.n.Launchpad.setLaunchpadContentWidth();\nopenAppMaster.setVisible(openApps.getItems().length > 0);\nsap.n.Layout.setHeaderPadding();\n\nsap.n.Launchpad.overflowMenuOpen();\nlaunchpadOverflowContainer.setVisible(true);","translation":[]}],"fieldPos":12},{"fieldNo":"6878a189-5b7d-4391-cb46-c1bcc4d6f9a9","fieldName":"topLayoutLogo","fieldParent":"2e2b96ab-9829-41bb-fa2f-65f6065ff13a","fieldType":"sap.m.HBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}],"fieldPos":13},{"fieldNo":"77d5b786-2ede-4611-b5c5-5465c01c71de","fieldName":"boxShellLogoDesktop","fieldParent":"6878a189-5b7d-4391-cb46-c1bcc4d6f9a9","fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClassVisibility","grouping":"Properties","value":"sapUiHideOnPhone","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenuIconContainerDesktop","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"48px","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":14},{"fieldNo":"680ccd38-3804-492a-dff9-554f1ea5611b","fieldName":"AppCacheShellLogoDesktop","fieldParent":"77d5b786-2ede-4611-b5c5-5465c01c71de","fieldType":"sap.m.Image","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenuIcon nepTopMenuIconDesktop","script":"","translation":[]},{"attribute":"alt","grouping":"Properties","value":"Home Icon","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"if (AppCache.isMobile && AppCache.isRestricted) return;\nAppCache._Home();\n","translation":[]}],"fieldPos":15},{"fieldNo":"15a62493-286c-477a-dfbb-79b6f011c104","fieldName":"boxShellLogoMobile","fieldParent":"6878a189-5b7d-4391-cb46-c1bcc4d6f9a9","fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"48px","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClassVisibility","grouping":"Properties","value":"sapUiVisibleOnlyOnPhone","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenuIconContainerMobile","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"48px","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":16},{"fieldNo":"7cfd6cc9-fad8-422a-c5b4-6bb0fa34891a","fieldName":"AppCacheShellLogoMobile","fieldParent":"15a62493-286c-477a-dfbb-79b6f011c104","fieldType":"sap.m.Image","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenuIcon nepTopMenuIconMobile","script":"","translation":[]},{"attribute":"alt","grouping":"Properties","value":"Home Icon","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"if (AppCache.isMobile && AppCache.isRestricted) return;\nAppCache._Home();\n","translation":[]}],"fieldPos":17},{"fieldNo":"94974f6b-4247-4f3a-ed9d-7e0415b012a2","fieldName":"AppCacheShellBack","fieldParent":"6878a189-5b7d-4391-cb46-c1bcc4d6f9a9","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://nav-back","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"AppCache.Back();","script":"AppCache.Back();","translation":[]}],"fieldPos":18},{"fieldNo":"d2007d73-f435-4b35-93e7-3bfd1f090c97","fieldName":"layoutShellTitle","fieldParent":"2e2b96ab-9829-41bb-fa2f-65f6065ff13a","fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"48px","script":"","translation":[]}],"fieldPos":19},{"fieldNo":"b74e1ed2-e58e-49cb-de8b-eb2917943afc","fieldName":"AppCacheShellTitle","fieldParent":"d2007d73-f435-4b35-93e7-3bfd1f090c97","fieldType":"sap.m.Title","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"titleStyle","grouping":"Properties","value":"H5","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileTitle","script":"","translation":[]}],"fieldPos":20},{"fieldNo":"7ef41e7f-b943-44ca-e1a6-b43d054d298b","fieldName":"AppCacheAppButton","fieldParent":"2e2b96ab-9829-41bb-fa2f-65f6065ff13a","fieldType":"sap.m.FlexBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepTopGroups","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Start","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":21},{"fieldNo":"4528a700-5d73-4b29-d25e-6a5c62d9d73b","fieldName":"AppCacheShellAppTitle","fieldParent":"7ef41e7f-b943-44ca-e1a6-b43d054d298b","fieldType":"sap.m.Title","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H5","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileTitle","script":"","translation":[]}],"fieldPos":22},{"fieldNo":"846e90a2-99fd-4241-b5df-b99ad24d159d","fieldName":"topContainerRight","fieldParent":"a619f5c3-0886-47af-9882-8b0c0e84a7a2","fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]}],"fieldPos":23},{"fieldNo":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldName":"topLayoutRight","fieldParent":"846e90a2-99fd-4241-b5df-b99ad24d159d","fieldType":"sap.m.HBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Start","script":"","translation":[]}],"fieldPos":24},{"fieldNo":"b0fd88f6-6c5a-4018-c5b9-123442d3c836","fieldName":"AppCacheShellOpenApps","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldType":"sap.m.HBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"wrap","grouping":"Properties","value":"Wrap","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepShellOpenApps","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"End","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":true,"script":"","translation":[]}],"fieldPos":25},{"fieldNo":"45e5206a-563a-4315-fbd8-4632ac63577c","fieldName":"btnAddNewPage","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Add New Screen","script":"","translation":[{"language":"AF","value":"Voeg nuwe skerm by"},{"language":"AR","value":"إضافة شاشة جديدة"},{"language":"BG","value":"Добавете нов екран"},{"language":"CA","value":"Afegeix una pantalla nova"},{"language":"CS","value":"Přidat novou obrazovku"},{"language":"DA","value":"Tilføj ny skærm"},{"language":"DE","value":"Neuen Bildschirm hinzufügen"},{"language":"EL","value":"Προσθήκη νέας οθόνης"},{"language":"ES","value":"Agregar nueva pantalla"},{"language":"ET","value":"Lisa uus ekraan"},{"language":"FI","value":"Lisää uusi näyttö"},{"language":"FR","value":"Ajouter un nouvel écran"},{"language":"HE","value":"הוסף מסך חדש"},{"language":"HR","value":"Dodaj novi zaslon"},{"language":"HU","value":"Új képernyő hozzáadása"},{"language":"ID","value":"Tambahkan Layar Baru"},{"language":"IS","value":"Bæta við nýjum skjá"},{"language":"IT","value":"Aggiungi nuova schermata"},{"language":"JA","value":"新しい画面の追加"},{"language":"KO","value":"새 화면 추가"},{"language":"LT","value":"Pridėti naują ekraną"},{"language":"LV","value":"Pievienot jaunu ekrānu"},{"language":"MS","value":"Tambah Skrin Baharu"},{"language":"NL","value":"Nieuw scherm toevoegen"},{"language":"NN","value":"Legg til ny skjerm"},{"language":"NO","value":"Legg til ny skjerm"},{"language":"PL","value":"Dodaj nowy ekran"},{"language":"PT","value":"Adicionar nova tela"},{"language":"RO","value":"Adăugați un ecran nou"},{"language":"RU","value":"Добавить новый экран"},{"language":"SE","value":"Leatnu skáhpi"},{"language":"SH","value":"Dodaj novi ekran"},{"language":"SK","value":"Pridať novú obrazovku"},{"language":"SL","value":"Dodaj nov zaslon"},{"language":"SR","value":"Додај нови екран"},{"language":"SV","value":"Lägg till ny skärm"},{"language":"TH","value":"เพิ่มหน้าจอใหม่"},{"language":"TR","value":"Yeni Ekran Ekle"},{"language":"UK","value":"Додати новий екран"},{"language":"ZF","value":"新增畫面"},{"language":"ZH","value":"添加新屏幕"}]},{"attribute":"styleClass","grouping":"Properties","value":"customization-ui","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Customization.showAddPageDialog();","script":"sap.n.Customization.showAddPageDialog();","translation":[]}],"fieldPos":26},{"fieldNo":"29ffb500-9edb-4a74-ecba-0e4635d87917","fieldName":"btnManagePages","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Manage Screens","script":"","translation":[{"language":"AF","value":"Bestuur skerms"},{"language":"AR","value":"إدارة الشاشات"},{"language":"BG","value":"Управление на екрани"},{"language":"CA","value":"Gestionar pantalles"},{"language":"CS","value":"Správa obrazovek"},{"language":"DA","value":"Administrer skærme"},{"language":"DE","value":"Bildschirme verwalten"},{"language":"EL","value":"Διαχείριση οθονών"},{"language":"ES","value":"Administrar pantallas"},{"language":"ET","value":"Ekraanide haldamine"},{"language":"FI","value":"Hallitse näyttöjä"},{"language":"FR","value":"Gérer les écrans"},{"language":"HE","value":"ניהול מסכים"},{"language":"HR","value":"Upravljanje zaslonima"},{"language":"HU","value":"Képernyők kezelése"},{"language":"ID","value":"Kelola Layar"},{"language":"IS","value":"Stjórna skjám"},{"language":"IT","value":"Gestisci schermi"},{"language":"JA","value":"画面の管理"},{"language":"KO","value":"화면 관리"},{"language":"LT","value":"Tvarkyti ekranus"},{"language":"LV","value":"Pārvaldīt ekrānus"},{"language":"MS","value":"Urus Skrin"},{"language":"NL","value":"Beheer schermen"},{"language":"NN","value":"Administrer skjermer"},{"language":"NO","value":"Administrer skjermer"},{"language":"PL","value":"Zarządzaj ekranami"},{"language":"PT","value":"Gerenciar telas"},{"language":"RO","value":"Gestionați ecranele"},{"language":"RU","value":"Управление экранами"},{"language":"SE","value":"Rievdadit skáhpiid"},{"language":"SH","value":"Upravljaj ekranima"},{"language":"SK","value":"Spravovať obrazovky"},{"language":"SL","value":"Upravljanje zaslonov"},{"language":"SR","value":"Управљајте екранима"},{"language":"SV","value":"Hantera skärmar"},{"language":"TH","value":"จัดการหน้าจอ"},{"language":"TR","value":"Ekranları Yönet"},{"language":"UK","value":"Керування екранами"},{"language":"ZF","value":"管理畫面"},{"language":"ZH","value":"管理屏幕"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"customization-ui","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Customization.showManagePagesDialog();","script":"sap.n.Customization.showManagePagesDialog();","translation":[]}],"fieldPos":27},{"fieldNo":"4108ba08-4223-4e05-cbb0-f1a6301de8ff","fieldName":"btnEditPagesDone","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Done","script":"","translation":[{"language":"AF","value":"Klaar"},{"language":"AR","value":"منتهي"},{"language":"BG","value":"Свършен"},{"language":"CA","value":"Fet"},{"language":"CS","value":"Hotovo"},{"language":"DA","value":"Færdig"},{"language":"DE","value":"Erledigt"},{"language":"EL","value":"Εγινε"},{"language":"ES","value":"Hecho"},{"language":"ET","value":"Valmis"},{"language":"FI","value":"Tehty"},{"language":"FR","value":"Fait"},{"language":"HE","value":"בוצע"},{"language":"HR","value":"Gotovo"},{"language":"HU","value":"Kész"},{"language":"ID","value":"Selesai"},{"language":"IS","value":"Búið"},{"language":"IT","value":"Fatto"},{"language":"JA","value":"終わり"},{"language":"KO","value":"완료"},{"language":"LT","value":"padaryta"},{"language":"LV","value":"Gatavs"},{"language":"MS","value":"Selesai"},{"language":"NL","value":"Klaar"},{"language":"NN","value":"Ferdig"},{"language":"NO","value":"Ferdig"},{"language":"PL","value":"Zrobione"},{"language":"PT","value":"Feito"},{"language":"RO","value":"Terminat"},{"language":"RU","value":"Сделанный"},{"language":"SE","value":"Leat"},{"language":"SH","value":"Završeno"},{"language":"SK","value":"hotový"},{"language":"SL","value":"Končano"},{"language":"SR","value":"Готово"},{"language":"SV","value":"Gjort"},{"language":"TH","value":"เสร็จแล้ว"},{"language":"TR","value":"Tamamlamak"},{"language":"UK","value":"Готово"},{"language":"ZF","value":"完成"},{"language":"ZH","value":"完毕"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBeginEnd","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"customization-ui","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Customization.setActivation(false);\nsap.n.Customization.stopJiggling();","language":"javascript","translation":[]}],"fieldPos":28},{"fieldNo":"46c42aa0-443e-4ef5-c1f5-4e3b36ae0ea6","fieldName":"AppCacheShellDebug","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/bug","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Debug.OpenDialog();","script":"sap.n.Debug.OpenDialog();","translation":[]}],"fieldPos":29},{"fieldNo":"9e0f94d5-16e3-4b9d-ab4a-6c87f6a4b193","fieldName":"AppCacheShellNetwork","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"iconNetwork","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://feed","script":"","translation":[]}],"fieldPos":30},{"fieldNo":"31e6a0fb-d282-41ce-d8e2-f8880e66b8fa","fieldName":"AppCacheShellHelp","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://sys-help-2","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"let rootDir = '/public/views/';\nif (parseInt(AppCache.p9Version) >= 21) rootDir = '/views/';\n\nif (sap.n.Launchpad.isPhone()) {\n    AppCache.Load('cockpit_doc_reader', {\n        dialogShow: true,\n        dialogTitle: AppCache_tHelp.getText(),\n        dialogHideMinimize: true,\n        dialogHideMosaic: true,\n        dialogHideMaximize: true,\n        rootDir: rootDir\n    });\n} else {\n    sap.n.Shell.loadSidepanel('cockpit_doc_reader', sap.n.Launchpad.currentTile.title, {\n        additionaltext: AppCache_tHelp.getText(),\n        rootDir: rootDir\n    });\n}\n","translation":[]}],"fieldPos":31},{"fieldNo":"956f04f5-4528-4b72-d8f9-4875796f573c","fieldName":"AppCacheShellDialog","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://drop-down-list","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"AppCacheUserDialog.openBy(this);","script":"AppCacheUserDialog.openBy(this);","translation":[]}],"fieldPos":32},{"fieldNo":"708a4487-6829-44c1-fd94-8fcf7d65e2a6","fieldName":"AppCacheShellUser","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldType":"sap.m.Button","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"User Menu","script":"","translation":[{"language":"1","value":"用户菜单"},{"language":"A","value":"قائمة المستخدم"},{"language":"AF","value":"Gebruikerskieslys"},{"language":"AR","value":"قائمة المستخدم"},{"language":"BG","value":"Потребителско меню"},{"language":"CA","value":"Menú d'usuari"},{"language":"CS","value":"Uživatelské menu"},{"language":"D","value":"Benutzermenü"},{"language":"DA","value":"Brugermenu"},{"language":"DE","value":"Benutzermenü"},{"language":"EL","value":"Μενού χρήστη"},{"language":"EN","value":"User Menu"},{"language":"ES","value":"Menú del Usuario"},{"language":"ET","value":"Kasutajamenüü"},{"language":"F","value":"Menu utilisateur"},{"language":"FI","value":"Käyttäjävalikko"},{"language":"FR","value":"Menu utilisateur"},{"language":"H","value":"felhasználói menü"},{"language":"HE","value":"תפריט משתמש"},{"language":"HR","value":"Korisnički izbornik"},{"language":"HU","value":"felhasználói menü"},{"language":"ID","value":"Menu pengguna"},{"language":"IS","value":"Notendavalmynd"},{"language":"IT","value":"Menu utente"},{"language":"JA","value":"ユーザーメニュー"},{"language":"K","value":"Brugermenu"},{"language":"KO","value":"사용자 메뉴"},{"language":"LT","value":"Vartotojo meniu"},{"language":"LV","value":"Lietotāja izvēlne"},{"language":"MS","value":"Menu Pengguna"},{"language":"NL","value":"gebruikersmenu"},{"language":"NN","value":"Brukermeny"},{"language":"NO","value":"Brukermeny"},{"language":"O","value":"Brukermeny"},{"language":"P","value":"menu do usuário"},{"language":"PL","value":"Menu użytkownika"},{"language":"PT","value":"menu do usuário"},{"language":"R","value":"Меню пользователя"},{"language":"RO","value":"meniul utilizatorului"},{"language":"RU","value":"Меню пользователя"},{"language":"S","value":"Menú del Usuario"},{"language":"SE","value":"Geavaheaddji bargu"},{"language":"SH","value":"Korisnički meni"},{"language":"SK","value":"Používateľské menu"},{"language":"SL","value":"Uporabniški meni"},{"language":"SR","value":"Кориснички мени"},{"language":"SV","value":"Användarmeny"},{"language":"TH","value":"เมนูผู้ใช้"},{"language":"TR","value":"Kullanıcı menüsü"},{"language":"UK","value":"Меню користувача"},{"language":"W","value":"Меню на потребителя"},{"language":"ZF","value":"使用者選單"},{"language":"ZH","value":"用户菜单"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginEnd","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepUserButton","script":"","translation":[]},{"attribute":"iconFirst","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"iconDensityAware","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/user-circle","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Customization.setActivation(false);\nsap.n.Launchpad.settingsMenuOpen();\n\nsetTabIndicesForAppCacheListMenu();","language":"javascript","translation":[]}],"fieldPos":33},{"fieldNo":"36db12ae-3e47-458d-fdbd-f4d20dabd690","fieldName":"launchpadContent","fieldParent":"b8bab2c5-8e19-4416-eae9-ff3a28d1cf24","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadContent","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"direction","grouping":"Properties","value":"Row","script":"","translation":[]}],"fieldPos":34},{"fieldNo":"68f33b51-c653-4e66-b16d-c0a4f58759d0","fieldName":"launchpadContentMenu","fieldParent":"36db12ae-3e47-458d-fdbd-f4d20dabd690","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"0px","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadContentMenu","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":35},{"fieldNo":"4b20d572-4fd0-4ea8-bd4a-3388d845f3e9","fieldName":"pageVerticalMenu","fieldParent":"68f33b51-c653-4e66-b16d-c0a4f58759d0","fieldType":"sap.m.Page","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMainBar nepMultiMenu","script":"","translation":[]},{"attribute":"showSubHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":36},{"fieldNo":"ba1cb0d7-5438-40e4-8ce9-26f8babb451f","fieldName":"headerVerticalMenu","fieldParent":"4b20d572-4fd0-4ea8-bd4a-3388d845f3e9","fieldType":"sap.m.Bar","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}],"fieldPos":37},{"fieldNo":"9b3d3b9f-38f3-4e13-9730-ebd588b5b105","fieldName":"Left","fieldParent":"ba1cb0d7-5438-40e4-8ce9-26f8babb451f","fieldType":"neptune.BarContent","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentLeft","script":"","translation":[]}],"fieldPos":38},{"fieldNo":"23fd7be8-0042-457b-e328-d0227167763f","fieldName":"toolVerticalMenu","fieldParent":"9b3d3b9f-38f3-4e13-9730-ebd588b5b105","fieldType":"sap.m.Toolbar","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepToolNoBorder","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}],"fieldPos":39},{"fieldNo":"b1dc0efa-aa76-40a1-b72c-3953686c4c1b","fieldName":"toolVerticalMenuFilter","fieldParent":"23fd7be8-0042-457b-e328-d0227167763f","fieldType":"sap.m.SearchField","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"liveChange","grouping":"Events","value":"Anonymous Function","script":"let binding = ContentMenu.getBinding('items');\r\nlet searchValue = this.getValue() || '';\r\nlet filterArr = [];\r\n\r\n// Use UI5 Filter to get results\r\nif (!!searchValue) {\r\n    filterArr.push(new sap.ui.model.Filter({\r\n        filters: [\r\n            new sap.ui.model.Filter('title', 'Contains', searchValue),\r\n            new sap.ui.model.Filter('filter', 'Contains', searchValue),\r\n            new sap.ui.model.Filter('tags', 'Contains', searchValue)\r\n        ],\r\n        and: false\r\n    }));\r\n}\r\n\r\nAppCacheShellSearchTags.getSelectedItems().forEach(function (item) {\r\n    filterArr.push(new sap.ui.model.Filter('tags', 'Contains', item.getText()));\r\n});\r\n\r\nbinding.filter(filterArr);\r\n\r\nContentMenu.expandToLevel(99);\r\nsap.n.Launchpad.setMenuActiveState();","translation":[]}],"fieldPos":40},{"fieldNo":"50288483-4bba-456c-e85b-6a383d9221c9","fieldName":"toolVerticalMenuTags","fieldParent":"23fd7be8-0042-457b-e328-d0227167763f","fieldType":"sap.m.Button","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"tooltip","grouping":"Properties","value":"Filter by tags","script":"","translation":[{"language":"1","value":"按标签过滤"},{"language":"A","value":"التصفية حسب العلامات"},{"language":"AF","value":"Filter volgens etikette"},{"language":"AR","value":"التصفية حسب العلامات"},{"language":"BG","value":"Филтриране по тагове"},{"language":"CA","value":"Filtra per etiquetes"},{"language":"CS","value":"Filtrujte podle značek"},{"language":"D","value":"Nach Tags filtern"},{"language":"DA","value":"Filtrer efter tags"},{"language":"DE","value":"Nach Tags filtern"},{"language":"EL","value":"Φιλτράρισμα κατά ετικέτες"},{"language":"EN","value":"Filter by tags"},{"language":"ES","value":"Filtrar por etiquetas"},{"language":"ET","value":"Filtreerige siltide järgi"},{"language":"F","value":"Filtrer par tags"},{"language":"FI","value":"Suodata tunnisteiden mukaan"},{"language":"FR","value":"Filtrer par balises"},{"language":"H","value":"Szűrés címkék szerint"},{"language":"HE","value":"סינון לפי תגים"},{"language":"HR","value":"Filtriraj po oznakama"},{"language":"HU","value":"Szűrés címkék szerint"},{"language":"ID","value":"Filter berdasarkan tag"},{"language":"IS","value":"Sía eftir merkjum"},{"language":"IT","value":"Filtra per tag"},{"language":"JA","value":"タグによるフィルター"},{"language":"K","value":"Filtrer efter tags"},{"language":"KO","value":"태그로 필터링"},{"language":"LT","value":"Filtruoti pagal žymas"},{"language":"LV","value":"Filtrēt pēc tagiem"},{"language":"MS","value":"Tapis mengikut tag"},{"language":"NL","value":"Filter op tags"},{"language":"NN","value":"Filtrer etter kategorier"},{"language":"NO","value":"Filtrer etter tags"},{"language":"O","value":"Filtrer etter tagger"},{"language":"P","value":"Filtrar por tags"},{"language":"PL","value":"Filtruj według tagów"},{"language":"PT","value":"Filtrar por tags"},{"language":"R","value":"Фильтровать по тегам"},{"language":"RO","value":"Filtrați după etichete"},{"language":"RU","value":"Фильтровать по тегам"},{"language":"S","value":"Filtrar por etiquetas"},{"language":"SE","value":"Filtearat tagaid mielde"},{"language":"SH","value":"Filtriraj po oznakama"},{"language":"SK","value":"Filtrujte podľa značiek"},{"language":"SL","value":"Filtriraj po oznakah"},{"language":"SR","value":"Филтрирајте по ознакама"},{"language":"SV","value":"Filtrera efter taggar"},{"language":"TH","value":"กรองตามแท็ก"},{"language":"TR","value":"Etiketlere göre filtrele"},{"language":"UK","value":"Фільтрувати за тегами"},{"language":"W","value":"Филтриране по тагове"},{"language":"ZF","value":"按標籤篩選"},{"language":"ZH","value":"按标签过滤"}]},{"attribute":"iconFirst","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"iconDensityAware","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/hashtag","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"let show = !pageVerticalMenu.getShowSubHeader();\npageVerticalMenu.setShowSubHeader(show);\n// if (!show) {\n//     AppCacheShellSearchTags.removeAllSelectedItems();\n//     toolVerticalMenuFilter.fireLiveChange();\n// }\n","translation":[]}],"fieldPos":41},{"fieldNo":"9d5c23a7-2d7f-4384-aa91-c11c6b8ed97c","fieldName":"toolVerticalMenuExpand","fieldParent":"23fd7be8-0042-457b-e328-d0227167763f","fieldType":"sap.m.Button","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"Expand","script":"","translation":[{"language":"1","value":"扩大"},{"language":"A","value":"وسعت"},{"language":"AF","value":"Brei uit"},{"language":"AR","value":"يوسع"},{"language":"BG","value":"Разширяване"},{"language":"CA","value":"Expandir"},{"language":"CS","value":"Rozšířit"},{"language":"D","value":"Erweitern"},{"language":"DA","value":"Udvide"},{"language":"DE","value":"Erweitern"},{"language":"EL","value":"Επεκτείνουν"},{"language":"EN","value":"Expand"},{"language":"ES","value":"Expandir"},{"language":"ET","value":"Laienda"},{"language":"F","value":"Développer"},{"language":"FI","value":"Laajentaa"},{"language":"FR","value":"Développer"},{"language":"H","value":"Kiterjed"},{"language":"HE","value":"לְהַרְחִיב"},{"language":"HR","value":"Proširiti"},{"language":"HU","value":"Kiterjed"},{"language":"ID","value":"Memperluas"},{"language":"IS","value":"Stækkaðu"},{"language":"IT","value":"Espandere"},{"language":"JA","value":"拡大する"},{"language":"K","value":"Udvide"},{"language":"KO","value":"확장하다"},{"language":"LT","value":"Išskleisti"},{"language":"LV","value":"Izvērst"},{"language":"MS","value":"Kembangkan"},{"language":"NL","value":"Uitbreiden"},{"language":"NN","value":"Utvid"},{"language":"NO","value":"Vis"},{"language":"O","value":"Utvide"},{"language":"P","value":"Expandir"},{"language":"PL","value":"Zwiększać"},{"language":"PT","value":"Expandir"},{"language":"R","value":"расширять"},{"language":"RO","value":"Extinde"},{"language":"RU","value":"Расширять"},{"language":"S","value":"Expandir"},{"language":"SE","value":"Váldit"},{"language":"SH","value":"Proširi"},{"language":"SK","value":"Rozbaliť"},{"language":"SL","value":"Razširi"},{"language":"SR","value":"Проширити"},{"language":"SV","value":"Bygga ut"},{"language":"TH","value":"ขยาย"},{"language":"TR","value":"Genişletmek"},{"language":"UK","value":"Розгорнути"},{"language":"W","value":"Разширете"},{"language":"ZF","value":"展開"},{"language":"ZH","value":"扩张"}]},{"attribute":"iconFirst","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"iconDensityAware","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://expand-group","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"ContentMenu.expandToLevel(99);\nsap.n.Launchpad.setMenuActiveState();\n\nsap.n.Launchpad.openAppExpanded = true;\nsap.n.Launchpad.setOpenAppsExpanded();\n\nsetTimeout(() => {\n    setTabIndicesForContentMenu();\n}, 500);\n","translation":[]}],"fieldPos":42},{"fieldNo":"9eab9319-a918-475f-e46d-06f9640fa8f4","fieldName":"toolVerticalMenuCollapse","fieldParent":"23fd7be8-0042-457b-e328-d0227167763f","fieldType":"sap.m.Button","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"Collapse","script":"","translation":[{"language":"1","value":"坍方"},{"language":"A","value":"انهيار"},{"language":"AF","value":"Inval"},{"language":"AR","value":"ينهار"},{"language":"BG","value":"Свиване"},{"language":"CA","value":"Col·lapse"},{"language":"CS","value":"Kolaps"},{"language":"D","value":"Zusammenbruch"},{"language":"DA","value":"Bryder sammen"},{"language":"DE","value":"Zusammenbruch"},{"language":"EL","value":"Κατάρρευση"},{"language":"EN","value":"Collapse"},{"language":"ES","value":"Colapsar"},{"language":"ET","value":"Ahenda"},{"language":"F","value":"Effondrer"},{"language":"FI","value":"Romahdus"},{"language":"FR","value":"Effondrement"},{"language":"H","value":"Összeomlás"},{"language":"HE","value":"הִתמוֹטְטוּת"},{"language":"HR","value":"Kolaps"},{"language":"HU","value":"Összeomlás"},{"language":"ID","value":"Runtuh"},{"language":"IS","value":"Hrun"},{"language":"IT","value":"Crollo"},{"language":"JA","value":"崩壊"},{"language":"K","value":"Falde sammen"},{"language":"KO","value":"무너지다"},{"language":"LT","value":"Sutraukti"},{"language":"LV","value":"Sakļaut"},{"language":"MS","value":"Runtuh"},{"language":"NL","value":"Instorten"},{"language":"NN","value":"Skjul"},{"language":"NO","value":"Skjul"},{"language":"O","value":"Kollapse"},{"language":"P","value":"Colapso"},{"language":"PL","value":"Zawalić się"},{"language":"PT","value":"Colapso"},{"language":"R","value":"коллапс"},{"language":"RO","value":"Colaps"},{"language":"RU","value":"Крах"},{"language":"S","value":"Colapso"},{"language":"SE","value":"Riegádat"},{"language":"SH","value":"Skupi"},{"language":"SK","value":"kolaps"},{"language":"SL","value":"Strni"},{"language":"SR","value":"Колапс"},{"language":"SV","value":"Kollaps"},{"language":"TH","value":"ทรุด"},{"language":"TR","value":"Yıkılmak"},{"language":"UK","value":"Згорнути"},{"language":"W","value":"колапс"},{"language":"ZF","value":"收合"},{"language":"ZH","value":"坍塌"}]},{"attribute":"iconFirst","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"iconDensityAware","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://collapse-group","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"ContentMenu.collapseAll();\nsap.n.Launchpad.setMenuActiveState();\n\nsap.n.Launchpad.openAppExpanded = false;\nsap.n.Launchpad.setOpenAppsExpanded();\n\nsetTimeout(() => {\n    setTabIndicesForContentMenu();\n}, 500);","translation":[]}],"fieldPos":43},{"fieldNo":"ac7c4304-fdd7-4f0a-83c6-5b86f316bc1d","fieldName":"subHeaderVerticalMenu","fieldParent":"4b20d572-4fd0-4ea8-bd4a-3388d845f3e9","fieldType":"sap.m.Bar","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMainBarSubHeader2","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setSubHeader","script":"","translation":[]}],"fieldPos":44},{"fieldNo":"5d828049-c475-47a2-d2b8-9bff0e4a6889","fieldName":"Left","fieldParent":"ac7c4304-fdd7-4f0a-83c6-5b86f316bc1d","fieldType":"neptune.BarContent","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentLeft","script":"","translation":[]}],"fieldPos":45},{"fieldNo":"94a845a7-8bfb-49c9-b077-78ffd9190166","fieldName":"toolVerticalMenuSub","fieldParent":"5d828049-c475-47a2-d2b8-9bff0e4a6889","fieldType":"sap.m.Toolbar","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepToolNoBorder","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}],"fieldPos":46},{"fieldNo":"4c041dbe-9247-4178-ec8b-cc4bfcaa0ee9","fieldName":"AppCacheShellSearchTags","fieldParent":"94a845a7-8bfb-49c9-b077-78ffd9190166","fieldType":"sap.m.MultiComboBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"placeholder","grouping":"Properties","value":"Filter by tags","script":"","translation":[{"language":"1","value":"按标签过滤"},{"language":"A","value":"التصفية حسب العلامات"},{"language":"AF","value":"Filter volgens etikette"},{"language":"AR","value":"التصفية حسب العلامات"},{"language":"BG","value":"Филтриране по тагове"},{"language":"CA","value":"Filtra per etiquetes"},{"language":"CS","value":"Filtrujte podle značek"},{"language":"D","value":"Nach Tags filtern"},{"language":"DA","value":"Filtrer efter tags"},{"language":"DE","value":"Nach Tags filtern"},{"language":"EL","value":"Φιλτράρισμα κατά ετικέτες"},{"language":"EN","value":"Filter by tags"},{"language":"ES","value":"Filtrar por etiquetas"},{"language":"ET","value":"Filtreerige siltide järgi"},{"language":"F","value":"Filtrer par tags"},{"language":"FI","value":"Suodata tunnisteiden mukaan"},{"language":"FR","value":"Filtrer par balises"},{"language":"H","value":"Szűrés címkék szerint"},{"language":"HE","value":"סינון לפי תגים"},{"language":"HR","value":"Filtriraj po oznakama"},{"language":"HU","value":"Szűrés címkék szerint"},{"language":"ID","value":"Filter berdasarkan tag"},{"language":"IS","value":"Sía eftir merkjum"},{"language":"IT","value":"Filtra per tag"},{"language":"JA","value":"タグによるフィルター"},{"language":"K","value":"Filtrer efter tags"},{"language":"KO","value":"태그로 필터링"},{"language":"LT","value":"Filtruoti pagal žymas"},{"language":"LV","value":"Filtrēt pēc tagiem"},{"language":"MS","value":"Tapis mengikut tag"},{"language":"NL","value":"Filter op tags"},{"language":"NN","value":"Filtrer etter kategorier"},{"language":"NO","value":"Filtrer etter tags"},{"language":"O","value":"Filtrer etter tagger"},{"language":"P","value":"Filtrar por tags"},{"language":"PL","value":"Filtruj według tagów"},{"language":"PT","value":"Filtrar por tags"},{"language":"R","value":"Фильтровать по тегам"},{"language":"RO","value":"Filtrați după etichete"},{"language":"RU","value":"Фильтровать по тегам"},{"language":"S","value":"Filtrar por etiquetas"},{"language":"SE","value":"Filtearat tagaid mielde"},{"language":"SH","value":"Filtriraj po oznakama"},{"language":"SK","value":"Filtrujte podľa značiek"},{"language":"SL","value":"Filtriraj po oznakah"},{"language":"SR","value":"Филтрирајте по ознакама"},{"language":"SV","value":"Filtrera efter taggar"},{"language":"TH","value":"กรองตามแท็ก"},{"language":"TR","value":"Etiketlere göre filtrele"},{"language":"UK","value":"Фільтрувати за тегами"},{"language":"W","value":"Филтриране по тагове"},{"language":"ZF","value":"按標籤篩選"},{"language":"ZH","value":"按标签过滤"}]},{"attribute":"selectionChange","grouping":"Events","value":"Anonymous Function","script":"//\ntoolVerticalMenuFilter.fireLiveChange();\nthis.close();\n","translation":[]}],"fieldPos":47},{"fieldNo":"fb80099a-5a4f-4947-97e7-10fa4ed97048","fieldName":"scrollVerticalMenu","fieldParent":"4b20d572-4fd0-4ea8-bd4a-3388d845f3e9","fieldType":"sap.m.ScrollContainer","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"vertical","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}],"fieldPos":48},{"fieldNo":"6f1ec9ad-e98a-4799-b12d-c745e8029ef6","fieldName":"appContainerVertical","fieldParent":"fb80099a-5a4f-4947-97e7-10fa4ed97048","fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":49},{"fieldNo":"a7739842-472d-4ad5-cfde-57d15acc1c68","fieldName":"appGhost","fieldParent":"6f1ec9ad-e98a-4799-b12d-c745e8029ef6","fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":50},{"fieldNo":"53c2e325-ae09-44a6-f70c-af78d6b185cf","fieldName":"openAppMaster","fieldParent":"a7739842-472d-4ad5-cfde-57d15acc1c68","fieldType":"sap.m.Button","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Active Apps","script":"","translation":[{"language":"1","value":"活动应用"},{"language":"A","value":"التطبيقات النشطة"},{"language":"AF","value":"Aktiewe toepassings"},{"language":"AR","value":"التطبيقات النشطة"},{"language":"BG","value":"Активни приложения"},{"language":"CA","value":"Aplicacions actives"},{"language":"CS","value":"Aktivní aplikace"},{"language":"D","value":"Aktive Apps"},{"language":"DA","value":"Aktive apps"},{"language":"DE","value":"Aktive Apps"},{"language":"EL","value":"Ενεργές εφαρμογές"},{"language":"EN","value":"Active Apps"},{"language":"ES","value":"Aplicaciones activas"},{"language":"ET","value":"Aktiivsed rakendused"},{"language":"F","value":"Applications actives"},{"language":"FI","value":"Aktiiviset sovellukset"},{"language":"FR","value":"Applications actives"},{"language":"H","value":"Aktív alkalmazások"},{"language":"HE","value":"אפליקציות פעילות"},{"language":"HR","value":"Aktivne aplikacije"},{"language":"HU","value":"Aktív alkalmazások"},{"language":"ID","value":"Aplikasi Aktif"},{"language":"IS","value":"Virk forrit"},{"language":"IT","value":"App attive"},{"language":"JA","value":"アクティブなアプリ"},{"language":"K","value":"Aktive apps"},{"language":"KO","value":"활성 앱"},{"language":"LT","value":"Aktyvios programos"},{"language":"LV","value":"Aktīvās lietotnes"},{"language":"MS","value":"Apl Aktif"},{"language":"NL","value":"Actieve apps"},{"language":"NN","value":"Aktive apper"},{"language":"NO","value":"Aktive apper"},{"language":"O","value":"Aktive apper"},{"language":"P","value":"Aplicativos ativos"},{"language":"PL","value":"Aktywne aplikacje"},{"language":"PT","value":"Aplicativos ativos"},{"language":"R","value":"Активные приложения"},{"language":"RO","value":"Aplicații active"},{"language":"RU","value":"Активные приложения"},{"language":"S","value":"Aplicaciones activas"},{"language":"SE","value":"Aktiiva applikašuvnnat"},{"language":"SH","value":"Aktivne aplikacije"},{"language":"SK","value":"Aktívne aplikácie"},{"language":"SL","value":"Aktivne aplikacije"},{"language":"SR","value":"Активне апликације"},{"language":"SV","value":"Aktiva appar"},{"language":"TH","value":"แอพที่ใช้งานอยู่"},{"language":"TR","value":"Aktif Uygulamalar"},{"language":"UK","value":"Активні програми"},{"language":"W","value":"Активни приложения"},{"language":"ZF","value":"啟用的應用程式"},{"language":"ZH","value":"活跃应用程序"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepOpenAppsBtn nepOpenAppsBtnMaster","script":"","translation":[]},{"attribute":"iconFirst","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"iconDensityAware","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/caret-down","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Launchpad.openAppExpanded = !sap.n.Launchpad.openAppExpanded;\nsap.n.Launchpad.setOpenAppsExpanded();\n\n// sap.n.Utils.userSetting.update({\n//     AREA: \"LAUNCHPAD\",\n//     GROUPING: \"MULTI_MENU\",\n//     NAME: \"EXPAND_OPEN_APPS\",\n//     KEY0: \"Expand\",\n//     VAL0: sap.n.Launchpad.openAppExpanded ? \"yes\" : \"no\"\n// });\n","translation":[]}],"fieldPos":51},{"fieldNo":"66cf3724-f69e-4943-d66a-3f550fb3cde6","fieldName":"openApps","fieldParent":"a7739842-472d-4ad5-cfde-57d15acc1c68","fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":52},{"fieldNo":"0680cb82-818e-49f4-fea2-113e608a5db2","fieldName":"ContentMenu","fieldParent":"fb80099a-5a4f-4947-97e7-10fa4ed97048","fieldType":"sap.m.Tree","description":"","script":"","customComponent":false,"odataSource":"ID","bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTreeCategory","script":"","translation":[]},{"attribute":"showSeparators","grouping":"Properties","value":"None","script":"","translation":[]},{"attribute":"modeAnimationOn","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"mode","grouping":"Properties","value":"SingleSelectMaster","script":"","translation":[]},{"attribute":"setInitLoad","grouping":"Model","value":"cache","script":"","translation":[]},{"attribute":"setEnableCache","grouping":"Model","value":true,"script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"itemPress","grouping":"Events","value":"Anonymous Function","script":"let selectedItem = this.getSelectedItem();\nif (selectedItem) {\n    sap.n.Launchpad.handleTreeNavigation(selectedItem);\n    ContentMenu.removeSelections();\n}\n","translation":[]},{"attribute":"toggleOpenState","grouping":"Events","value":"Anonymous Function","script":"sap.n.Launchpad.setMenuActiveState();\n","translation":[]}],"fieldPos":53},{"fieldNo":"c5c2f890-5961-422f-a9f8-dfe5d3c96df1","fieldName":"itemContentMenu","fieldParent":"0680cb82-818e-49f4-fea2-113e608a5db2","fieldType":"sap.m.StandardTreeItem","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"{title}","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{icon}","script":"","translation":[]}],"fieldPos":54},{"fieldNo":"fc07027c-537f-43d6-9600-6643ad413e6c","fieldName":"launchpadContentNavigator","fieldParent":"36db12ae-3e47-458d-fdbd-f4d20dabd690","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"0px","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadContentNavigator","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":55},{"fieldNo":"4010edf9-8d08-43b9-c6d6-7afc4e046497","fieldName":"navBar","fieldParent":"fc07027c-537f-43d6-9600-6643ad413e6c","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepNavBar","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"accessibleRole","grouping":"Properties","value":"Region","script":"","translation":[]}],"fieldPos":56},{"fieldNo":"84acadd7-0420-4d7e-b44d-8396e89a5360","fieldName":"navBarToolbar","fieldParent":"4010edf9-8d08-43b9-c6d6-7afc4e046497","fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}],"fieldPos":57},{"fieldNo":"8c3bbee6-4190-4afa-f8eb-5eb3b71c3a1d","fieldName":"blockRunning","fieldParent":"4010edf9-8d08-43b9-c6d6-7afc4e046497","fieldType":"sap.ui.layout.BlockLayout","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"background","grouping":"Properties","value":"Default","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"keepFontSize","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":58},{"fieldNo":"802af733-c055-41e9-b4f3-ca870c2f24f2","fieldName":"blockRunningRow","fieldParent":"8c3bbee6-4190-4afa-f8eb-5eb3b71c3a1d","fieldType":"sap.ui.layout.BlockLayoutRow","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":59},{"fieldNo":"ca3cf1f0-0286-40f7-e920-e748d2e947a9","fieldName":"launchpadContentMain","fieldParent":"36db12ae-3e47-458d-fdbd-f4d20dabd690","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadContentMain","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":60},{"fieldNo":"5a16303b-ceb7-4784-a46e-372ded7ab833","fieldName":"AppCacheShellUI","fieldParent":"ca3cf1f0-0286-40f7-e920-e748d2e947a9","fieldType":"sap.m.Shell","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepShell","script":"","translation":[]},{"attribute":"backgroundColor","grouping":"Properties","value":"transparent","script":"","translation":[]}],"fieldPos":61},{"fieldNo":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldName":"AppCacheNav","fieldParent":"5a16303b-ceb7-4784-a46e-372ded7ab833","fieldType":"sap.m.NavContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"defaultTransitionName","grouping":"Properties","value":"show","script":"","translation":[]},{"attribute":"afterNavigate","grouping":"Events","value":"Anonymous Function","script":"// Check for page content. Could be deleted after onOffline/onOnline and RebuildTiles\r\nlet currentPage = AppCacheNav.getCurrentPage();\r\n\r\n// Only for Tile Group + Childs \r\nif (currentPage.getId().startsWith('page') && currentPage.getContent().length === 0) {\r\n    let cat = currentPage.sId;\r\n    cat = cat.split('page')[1];\r\n\r\n    const category = sap.n.Customization.getCategory(cat);\r\n    if (category && (category.tiles.length > 0 || category.tilegroups.length > 0)) {\r\n        sap.n.Launchpad.BuildTiles(category);\r\n    } else {\r\n        const tilegroup = sap.n.Customization.getTileGroup(cat);\r\n        if (tilegroup) sap.n.Launchpad.BuildTiles(tilegroup, tilegroup.id);\r\n    }\r\n}","translation":[]},{"attribute":"autoFocus","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":62},{"fieldNo":"dd3d8673-781e-4cb6-bdc6-e3b29a3a8eba","fieldName":"AppCachePageMenu","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldType":"sap.m.Page","script":"","customComponent":false,"bindingType":"u","request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":63},{"fieldNo":"2acab870-3b8e-4f4f-f2d8-26df59161072","fieldName":"AppCachePageStore","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldType":"sap.m.Page","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiResponsiveContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":64},{"fieldNo":"f345cb65-8c30-4f25-8019-98557904269e","fieldName":"oContentBlockLayout","fieldParent":"2acab870-3b8e-4f4f-f2d8-26df59161072","fieldType":"sap.ui.layout.BlockLayout","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"background","grouping":"Properties","value":"Default","script":"","translation":[]}],"fieldPos":65},{"fieldNo":"1288f912-c170-45ae-9444-d0862d7f94ef","fieldName":"oDetailsBlockLayoutRrow","fieldParent":"f345cb65-8c30-4f25-8019-98557904269e","fieldType":"sap.ui.layout.BlockLayoutRow","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":66},{"fieldNo":"39787ae1-c7a8-4bfa-d2d2-459527bd5c5e","fieldName":"oTileLayoutCell","fieldParent":"1288f912-c170-45ae-9444-d0862d7f94ef","fieldType":"sap.ui.layout.BlockLayoutCell","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"65","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTileCards","script":"","translation":[]},{"attribute":"backgroundColorSet","grouping":"Properties","value":"ColorSet9","script":"","translation":[]},{"attribute":"backgroundColorShade","grouping":"Properties","value":"ShadeB","script":"","translation":[]}],"fieldPos":67},{"fieldNo":"19fac503-9c6f-42e0-bd48-5f1efd550b15","fieldName":"oTileGrid","fieldParent":"39787ae1-c7a8-4bfa-d2d2-459527bd5c5e","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"sapUiDemoKitStoreGrid","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Start","script":"","translation":[]}],"fieldPos":68},{"fieldNo":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldName":"oTileContent","fieldParent":"19fac503-9c6f-42e0-bd48-5f1efd550b15","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Start","script":"","translation":[]}],"fieldPos":69},{"fieldNo":"b8525ba4-71f5-4dfc-bd75-37d5889cb4a3","fieldName":"oHBoxTitle","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Start","script":"","translation":[]}],"fieldPos":70},{"fieldNo":"628e6149-456e-42de-c47a-33e35a051841","fieldName":"oTitleContentTitle","fieldParent":"b8525ba4-71f5-4dfc-bd75-37d5889cb4a3","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H2","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"{/name}","script":"","translation":[]}],"fieldPos":71},{"fieldNo":"fdb2234e-0fdc-4f12-d081-3eec9614060e","fieldName":"oTitleContentVersion","fieldParent":"b8525ba4-71f5-4dfc-bd75-37d5889cb4a3","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H2","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"{/activeVersion}","script":"","translation":[]}],"fieldPos":72},{"fieldNo":"95f01ab7-2924-4d26-dea8-42d9daffa17c","fieldName":"oTileTimestamp","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldType":"sap.m.ObjectStatus","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"Published","script":"","translation":[{"language":"AF","value":"Gepubliseer"},{"language":"AR","value":"نشرت"},{"language":"BG","value":"Публикувано"},{"language":"CA","value":"Publicat"},{"language":"CS","value":"Publikováno"},{"language":"DA","value":"Udgivet"},{"language":"DE","value":"Freigegeben"},{"language":"EL","value":"Δημοσίευσε"},{"language":"EN","value":"Published"},{"language":"ES","value":"Publicado"},{"language":"ET","value":"Avaldatud"},{"language":"FI","value":"Julkaistu"},{"language":"FR","value":"Publié"},{"language":"HE","value":"יצא לאור"},{"language":"HR","value":"Objavljeno"},{"language":"HU","value":"Közzétett"},{"language":"ID","value":"Diterbitkan"},{"language":"IS","value":"Birt"},{"language":"IT","value":"Pubblicato"},{"language":"JA","value":"発行済み"},{"language":"KO","value":"게시됨"},{"language":"LT","value":"Paskelbta"},{"language":"LV","value":"Publicēts"},{"language":"MS","value":"Diterbitkan"},{"language":"NL","value":"Gepubliceerd"},{"language":"NN","value":"Publisert"},{"language":"NO","value":"Publisert"},{"language":"PL","value":"Opublikowany"},{"language":"PT","value":"Publicados"},{"language":"RO","value":"Publicat"},{"language":"RU","value":"Опубликовано"},{"language":"SE","value":"Julkistit"},{"language":"SH","value":"Objavljeno"},{"language":"SK","value":"Publikovaný"},{"language":"SL","value":"Objavljeno"},{"language":"SR","value":"Објављено"},{"language":"SV","value":"Publicerad"},{"language":"TH","value":"ที่ตีพิมพ์"},{"language":"TR","value":"Yayınlanan"},{"language":"UK","value":"Опубліковано"},{"language":"ZF","value":"已發佈"},{"language":"ZH","value":"已发表"}]},{"attribute":"text","grouping":"Properties","value":"{/activeBuild/updatedAt}","script":"","translation":[]},{"attribute":"text","grouping":"Formatter","value":"date:BrowserSetting","script":"","translation":[]}],"fieldPos":73},{"fieldNo":"6721b492-8344-4906-da75-d4979743cf9c","fieldName":"oTilePublisher","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldType":"sap.m.ObjectStatus","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"Publisher","script":"","translation":[{"language":"AF","value":"Uitgewer"},{"language":"AR","value":"الناشر"},{"language":"BG","value":"Издател"},{"language":"CA","value":"Editor"},{"language":"CS","value":"Vydavatel"},{"language":"DA","value":"Forlægger"},{"language":"DE","value":"Herausgeber"},{"language":"EL","value":"Εκδότης"},{"language":"EN","value":"Publisher"},{"language":"ES","value":"Editor"},{"language":"ET","value":"Kirjastaja"},{"language":"FI","value":"Kustantaja"},{"language":"FR","value":"Éditeur"},{"language":"HE","value":"מוֹצִיא לָאוֹר"},{"language":"HR","value":"Izdavač"},{"language":"HU","value":"Kiadó"},{"language":"ID","value":"Penerbit"},{"language":"IS","value":"Útgefandi"},{"language":"IT","value":"Editore"},{"language":"JA","value":"出版社"},{"language":"KO","value":"발행자"},{"language":"LT","value":"Leidėjas"},{"language":"LV","value":"Izdevējs"},{"language":"MS","value":"Penerbit"},{"language":"NL","value":"Uitgever"},{"language":"NN","value":"Utgiver"},{"language":"NO","value":"Utgiver"},{"language":"PL","value":"Wydawca"},{"language":"PT","value":"Editor"},{"language":"RO","value":"Editor"},{"language":"RU","value":"Издатель"},{"language":"SE","value":"Julkistaja"},{"language":"SH","value":"Izdavač"},{"language":"SK","value":"Vydavateľ"},{"language":"SL","value":"Založnik"},{"language":"SR","value":"Издавач"},{"language":"SV","value":"Utgivare"},{"language":"TH","value":"สำนักพิมพ์"},{"language":"TR","value":"Yayımcı"},{"language":"UK","value":"Видавець"},{"language":"ZF","value":"發佈者"},{"language":"ZH","value":"出版商"}]},{"attribute":"text","grouping":"Properties","value":"{/activeBuild/changedBy}","script":"","translation":[]}],"fieldPos":74},{"fieldNo":"fcb17e1d-2b42-41bd-fdd9-ff5780f0f2bb","fieldName":"oTitleDescription","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H4","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Description","script":"","translation":[{"language":"AF","value":"Beskrywing"},{"language":"AR","value":"وصف"},{"language":"BG","value":"Описание"},{"language":"CA","value":"Descripció"},{"language":"CS","value":"Popis"},{"language":"DA","value":"Beskrivelse"},{"language":"DE","value":"Beschreibung"},{"language":"EL","value":"Περιγραφή"},{"language":"EN","value":"Description"},{"language":"ES","value":"Descripción"},{"language":"ET","value":"Kirjeldus"},{"language":"FI","value":"Kuvaus"},{"language":"FR","value":"Description"},{"language":"HE","value":"תיאור"},{"language":"HR","value":"Opis"},{"language":"HU","value":"Leírás"},{"language":"ID","value":"Keterangan"},{"language":"IS","value":"Lýsing"},{"language":"IT","value":"Descrizione"},{"language":"JA","value":"説明"},{"language":"KO","value":"설명"},{"language":"LT","value":"apibūdinimas"},{"language":"LV","value":"Apraksts"},{"language":"MS","value":"Penerangan"},{"language":"NL","value":"Beschrijving"},{"language":"NN","value":"Beskrivelse"},{"language":"NO","value":"Beskrivelse"},{"language":"PL","value":"Opis"},{"language":"PT","value":"Descrição"},{"language":"RO","value":"Descriere"},{"language":"RU","value":"Описание"},{"language":"SE","value":"Dávdda"},{"language":"SH","value":"Opis"},{"language":"SK","value":"Popis"},{"language":"SL","value":"Opis"},{"language":"SR","value":"Опис"},{"language":"SV","value":"Beskrivning"},{"language":"TH","value":"คำอธิบาย"},{"language":"TR","value":"Tanım"},{"language":"UK","value":"опис"},{"language":"ZF","value":"描述"},{"language":"ZH","value":"描述"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginTop","script":"","translation":[]}],"fieldPos":75},{"fieldNo":"14ad178f-3346-4d0e-c0c2-65df5897d222","fieldName":"oTileDescription","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldType":"sap.m.ObjectStatus","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{/description}","script":"","translation":[]}],"fieldPos":76},{"fieldNo":"32d8b601-7a23-46e1-ac69-6c613895c9e9","fieldName":"oTitleAuthor","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H4","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Author","script":"","translation":[{"language":"AF","value":"Skrywer"},{"language":"AR","value":"مؤلف"},{"language":"BG","value":"Автор"},{"language":"CA","value":"Autor"},{"language":"CS","value":"Autor"},{"language":"DA","value":"Forfatter"},{"language":"DE","value":"Autor"},{"language":"EL","value":"Συγγραφέας"},{"language":"EN","value":"Author"},{"language":"ES","value":"Autor"},{"language":"ET","value":"Autor"},{"language":"FI","value":"Tekijä"},{"language":"FR","value":"Auteur"},{"language":"HE","value":"מְחַבֵּר"},{"language":"HR","value":"Autor"},{"language":"HU","value":"Szerző"},{"language":"ID","value":"Pengarang"},{"language":"IS","value":"Höfundur"},{"language":"IT","value":"Autore"},{"language":"JA","value":"著者"},{"language":"KO","value":"작가"},{"language":"LT","value":"Autorius"},{"language":"LV","value":"Autors"},{"language":"MS","value":"Pengarang"},{"language":"NL","value":"Auteur"},{"language":"NN","value":"Forfatter"},{"language":"NO","value":"Forfatter"},{"language":"PL","value":"Autor"},{"language":"PT","value":"Autor"},{"language":"RO","value":"Autor"},{"language":"RU","value":"Автор"},{"language":"SE","value":"Čálli"},{"language":"SH","value":"Autor"},{"language":"SK","value":"Autor"},{"language":"SL","value":"Avtor"},{"language":"SR","value":"Аутор"},{"language":"SV","value":"Författare"},{"language":"TH","value":"ผู้เขียน"},{"language":"TR","value":"Yazar"},{"language":"UK","value":"Автор"},{"language":"ZF","value":"作者"},{"language":"ZH","value":"作者"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginTop","script":"","translation":[]}],"fieldPos":77},{"fieldNo":"3fc42afa-dfbd-4c65-fa94-ea442395c438","fieldName":"oTileAuthor","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldType":"sap.m.ObjectStatus","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{/authorName}","script":"","translation":[]}],"fieldPos":78},{"fieldNo":"e2e8db05-d19f-48bc-ba04-8547e75d6685","fieldName":"oTileMail","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldType":"sap.m.ObjectStatus","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{/authorEmail}","script":"","translation":[]}],"fieldPos":79},{"fieldNo":"c448234a-9950-42ed-aea0-543b878b9ed7","fieldName":"oTileWeb","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldType":"sap.m.ObjectStatus","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{/authorURL}","script":"","translation":[]}],"fieldPos":80},{"fieldNo":"7ce5fd7d-b034-4f91-fad0-7253b2d9c7a9","fieldName":"oTileSupport","fieldParent":"19fac503-9c6f-42e0-bd48-5f1efd550b15","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginTop","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]}],"fieldPos":81},{"fieldNo":"eda8d5ac-9c34-4f23-88c8-025410687b88","fieldName":"oTileSupportIcons","fieldParent":"7ce5fd7d-b034-4f91-fad0-7253b2d9c7a9","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":82},{"fieldNo":"796edff1-3113-4211-bbbb-07de2a871825","fieldName":"imgWindows","fieldParent":"eda8d5ac-9c34-4f23-88c8-025410687b88","fieldType":"sap.m.Image","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"2.8rem","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"{/buildWindows}","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"/public/images/windows.png","script":"","translation":[]},{"attribute":"densityAware","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":83},{"fieldNo":"374307d7-4865-439d-f863-a78447f7d7c8","fieldName":"imgAndroid","fieldParent":"eda8d5ac-9c34-4f23-88c8-025410687b88","fieldType":"sap.m.Image","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"2.5rem","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"{/buildAndroid}","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"/public/images/android.png","script":"","translation":[]},{"attribute":"densityAware","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":84},{"fieldNo":"d6b0b449-d0dd-4067-f0db-f2788fa1d9df","fieldName":"imgIos","fieldParent":"eda8d5ac-9c34-4f23-88c8-025410687b88","fieldType":"sap.m.Image","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"2.5rem","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"{/buildIOS}","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"/public/images/ios.png","script":"","translation":[]},{"attribute":"densityAware","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":85},{"fieldNo":"1f630bf0-5866-4880-879f-3e7abaa6f779","fieldName":"AppCachePageStoreInstall","fieldParent":"7ce5fd7d-b034-4f91-fad0-7253b2d9c7a9","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Install","script":"","translation":[{"language":"AF","value":"Installeer"},{"language":"AR","value":"ثَبَّتَ"},{"language":"BG","value":"Инсталирай"},{"language":"CA","value":"Instal·lar"},{"language":"CS","value":"Nainstalujte"},{"language":"DA","value":"Installere"},{"language":"DE","value":"Installieren"},{"language":"EL","value":"Εγκαθιστώ"},{"language":"EN","value":"Install"},{"language":"ES","value":"Instalar"},{"language":"ET","value":"Installige"},{"language":"FI","value":"Asentaa"},{"language":"FR","value":"Installer"},{"language":"HE","value":"להתקין"},{"language":"HR","value":"Instalirati"},{"language":"HU","value":"Telepítés"},{"language":"ID","value":"Install"},{"language":"IS","value":"Settu upp"},{"language":"IT","value":"Installare"},{"language":"JA","value":"インストール"},{"language":"KO","value":"설치하다"},{"language":"LT","value":"Diegti"},{"language":"LV","value":"Uzstādīt"},{"language":"MS","value":"Pasang"},{"language":"NL","value":"Installeren"},{"language":"NN","value":"Installer"},{"language":"NO","value":"Installer"},{"language":"PL","value":"zainstalować"},{"language":"PT","value":"Instalar"},{"language":"RO","value":"Instalare"},{"language":"RU","value":"Установить"},{"language":"SE","value":"Asenna"},{"language":"SH","value":"Instaliraj"},{"language":"SK","value":"Inštalácia"},{"language":"SL","value":"Namestite"},{"language":"SR","value":"Инсталирај"},{"language":"SV","value":"Installera"},{"language":"TH","value":"ติดตั้ง"},{"language":"TR","value":"Düzenlemek"},{"language":"UK","value":"встановити"},{"language":"ZF","value":"安裝"},{"language":"ZH","value":"安装"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const deviceName = sap.ui.Device.os.name;\nconst { id, serverAddress, activeBuild, activeVersion } = modelAppCachePageStore.oData;\n\nlet n = `${serverAddress}/mobileClients/${id}/build/${activeBuild.id}/`;\n\nif (deviceName === 'win') n += 'Windows';\nelse if (deviceName === 'Android') n += 'Android';\nelse if (deviceName === 'iOS') {\n    n = 'itms-services://?action=download-manifest&url=' + encodeURIComponent(`${n}Ios.plist`);\n    console.log(n);\n}\n\nif (isCordova()) {\n    AppCache.UpdateMobileApp(n, activeVersion);\n} else {\n    sap.m.URLHelper.redirect(n, false);\n    sap.m.MessageToast.show('Download Started');\n}","translation":[]}],"fieldPos":86},{"fieldNo":"a37b3c9b-bc4b-48b9-e893-9e528b262b0d","fieldName":"oTileImageCell","fieldParent":"1288f912-c170-45ae-9444-d0862d7f94ef","fieldType":"sap.ui.layout.BlockLayoutCell","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"35","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTileCards","script":"","translation":[]},{"attribute":"backgroundColorSet","grouping":"Properties","value":"ColorSet9","script":"","translation":[]},{"attribute":"backgroundColorShade","grouping":"Properties","value":"ShadeC","script":"","translation":[]}],"fieldPos":87},{"fieldNo":"10e708e7-fd23-44a0-8983-70453a7ce217","fieldName":"oTileImageData","fieldParent":"a37b3c9b-bc4b-48b9-e893-9e528b262b0d","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":88},{"fieldNo":"eab93fd0-69f8-40c6-f933-e88898803ca1","fieldName":"oTileImage","fieldParent":"10e708e7-fd23-44a0-8983-70453a7ce217","fieldType":"sap.m.Image","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"Click to enlarge","script":"","translation":[{"language":"AF","value":"Klik om te vergroot"},{"language":"AR","value":"اضغط للتكبير"},{"language":"BG","value":"Кликнете за уголемяване"},{"language":"CA","value":"Feu clic per ampliar"},{"language":"CS","value":"Klikni pro zvětšení"},{"language":"DA","value":"Klik for større billede"},{"language":"DE","value":"Klicken zum Vergrößern"},{"language":"EL","value":"Κάντε κλικ για μεγέθυνση"},{"language":"EN","value":"Click to enlarge"},{"language":"ES","value":"Click para agrandar"},{"language":"ET","value":"Suurendamiseks klõpsake"},{"language":"FI","value":"Klikkaa suurentaaksesi"},{"language":"FR","value":"Cliquez pour agrandir"},{"language":"HE","value":"לחץ להגדלה"},{"language":"HR","value":"Kliknite za povećanje"},{"language":"HU","value":"kattints a kinagyításhoz"},{"language":"ID","value":"klik untuk memperbesar"},{"language":"IS","value":"Smelltu til að stækka"},{"language":"IT","value":"clicca per ingrandire"},{"language":"JA","value":"拡大するにはクリックしてください"},{"language":"KO","value":"확대하려면 클릭하세요."},{"language":"LT","value":"Spustelėkite norėdami padidinti"},{"language":"LV","value":"Noklikšķiniet, lai palielinātu"},{"language":"MS","value":"Klik untuk besarkan"},{"language":"NL","value":"Klik om te vergroten"},{"language":"NN","value":"Klikk for å forstørre"},{"language":"NO","value":"Klikk for å forstørre"},{"language":"PL","value":"Kliknij, aby powiększyć"},{"language":"PT","value":"Clique para ampliar"},{"language":"RO","value":"Click pentru a mari"},{"language":"RU","value":"нажмите, чтобы увеличить"},{"language":"SE","value":"Dutnje čuovvut"},{"language":"SH","value":"Klikni za uvećanje"},{"language":"SK","value":"klikni na zväčšenie"},{"language":"SL","value":"Kliknite za povečavo"},{"language":"SR","value":"Кликните за увећање"},{"language":"SV","value":"Klicka för att förstora"},{"language":"TH","value":"คลิกเพื่อขยาย"},{"language":"TR","value":"Büyütmek için tıklayın"},{"language":"UK","value":"Натисніть, щоб збільшити"},{"language":"ZF","value":"點擊放大"},{"language":"ZH","value":"点击放大"}]},{"attribute":"densityAware","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":89},{"fieldNo":"22ce0ada-fc48-4db6-8115-052a801c34ec","fieldName":"AppCache_boxLogon","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":90},{"fieldNo":"69c2b82b-01d1-4e3f-9831-6d48aa6bc197","fieldName":"AppCache_boxLogonCenter","fieldParent":"22ce0ada-fc48-4db6-8115-052a801c34ec","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"75%","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":91},{"fieldNo":"ba55d7bd-1d6c-4d5f-f86d-baa01c95e9c0","fieldName":"panLogon","fieldParent":"69c2b82b-01d1-4e3f-9831-6d48aa6bc197","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"500px","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPanLogon nepPanLogonBorder","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":92},{"fieldNo":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldName":"AppCache_formLogon","fieldParent":"ba55d7bd-1d6c-4d5f-f86d-baa01c95e9c0","fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"maxContainerCols","grouping":"Properties","value":"1","script":"","translation":[]},{"attribute":"layout","grouping":"Properties","value":"ResponsiveGridLayout","script":"","translation":[]},{"attribute":"labelSpanM","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"labelSpanL","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"editable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":93},{"fieldNo":"60328712-28d7-4177-b587-776e5b28129f","fieldName":"lblFormLoginSubTitle","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBottom","script":"","translation":[]}],"fieldPos":94},{"fieldNo":"929b2ef2-0184-4014-f746-7f9227df39d0","fieldName":"boxSubTitle","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBottom","script":"","translation":[]}],"fieldPos":95},{"fieldNo":"266a48c0-0f09-49fd-990d-784e5fb1f4e9","fieldName":"txtFormLoginSubTitle1","fieldParent":"929b2ef2-0184-4014-f746-7f9227df39d0","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H2","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileTitle","script":"","translation":[]}],"fieldPos":96},{"fieldNo":"778adac1-8786-43c7-b73d-1403504557ec","fieldName":"txtFormLoginSubTitle2","fieldParent":"929b2ef2-0184-4014-f746-7f9227df39d0","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H5","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileSubTitle","script":"","translation":[]}],"fieldPos":97},{"fieldNo":"ead3ec8a-4aeb-4a6e-a695-3b808921c95c","fieldName":"AppCache_lblFormLogin","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Login Provider","script":"","translation":[{"language":"AF","value":"Aanmelding Verskaffer"},{"language":"AR","value":"مزود تسجيل الدخول"},{"language":"BG","value":"Доставчик на вход"},{"language":"CA","value":"Proveïdor d'inici de sessió"},{"language":"CS","value":"Poskytovatel přihlášení"},{"language":"DA","value":"Login Provider"},{"language":"DE","value":"Login-Anbieter"},{"language":"EL","value":"Πάροχος σύνδεσης"},{"language":"EN","value":"Login Provider"},{"language":"ES","value":"Proveedor de inicio de sesión"},{"language":"ET","value":"Sisselogimise pakkuja"},{"language":"FI","value":"Kirjautumispalveluntarjoaja"},{"language":"FR","value":"Fournisseur de connexion"},{"language":"HE","value":"ספק כניסה"},{"language":"HR","value":"Davatelj prijave"},{"language":"HU","value":"Bejelentkezés szolgáltató"},{"language":"ID","value":"Penyedia Masuk"},{"language":"IS","value":"Innskráningaraðili"},{"language":"IT","value":"Fornitore di accesso"},{"language":"JA","value":"ログインプロバイダー"},{"language":"KO","value":"로그인 공급자"},{"language":"LT","value":"Prisijungimo teikėjas"},{"language":"LV","value":"Pieteikšanās nodrošinātājs"},{"language":"MS","value":"Pembekal Log Masuk"},{"language":"NL","value":"Login-aanbieder"},{"language":"NN","value":"Innloggingsleverandør"},{"language":"NO","value":"Innloggingsleverandør"},{"language":"PL","value":"Dostawca logowania"},{"language":"PT","value":"Provedor de login"},{"language":"RO","value":"Furnizor de autentificare"},{"language":"RU","value":"Поставщик входа в систему"},{"language":"SE","value":"Logganeavvu bidjá"},{"language":"SH","value":"Provajder prijave"},{"language":"SK","value":"Poskytovateľ prihlásenia"},{"language":"SL","value":"Ponudnik prijave"},{"language":"SR","value":"Логин Провидер"},{"language":"SV","value":"Inloggningsleverantör"},{"language":"TH","value":"ผู้ให้บริการเข้าสู่ระบบ"},{"language":"TR","value":"Giriş Sağlayıcı"},{"language":"UK","value":"Постачальник входу"},{"language":"ZF","value":"登入提供者"},{"language":"ZH","value":"登录提供商"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}],"fieldPos":98},{"fieldNo":"3120618d-381c-4c2c-bdd7-9f9ddb41da8c","fieldName":"AppCache_loginTypes","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldType":"sap.m.Select","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"sap.n.Utils.setLogonScreen();","script":"sap.n.Utils.setLogonScreen();","translation":[]}],"fieldPos":99},{"fieldNo":"6e32cff4-6d72-429f-cef1-3ad4e9ee7dea","fieldName":"AppCache_lblUsername","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Username","script":"","translation":[{"language":"AF","value":"Gebruikersnaam"},{"language":"AR","value":"اسم المستخدم"},{"language":"BG","value":"Потребителско име"},{"language":"CA","value":"Nom d'usuari"},{"language":"CS","value":"Uživatelské jméno"},{"language":"DA","value":"Brugernavn"},{"language":"DE","value":"Nutzername"},{"language":"EL","value":"Όνομα χρήστη"},{"language":"EN","value":"Username"},{"language":"ES","value":"Nombre de usuario"},{"language":"ET","value":"Kasutajanimi"},{"language":"FI","value":"Käyttäjätunnus"},{"language":"FR","value":"Nom d'utilisateur"},{"language":"HE","value":"שם משתמש"},{"language":"HR","value":"Korisničko ime"},{"language":"HU","value":"Felhasználónév"},{"language":"ID","value":"Nama belakang"},{"language":"IS","value":"Notendanafn"},{"language":"IT","value":"Nome utente"},{"language":"JA","value":"ユーザー名"},{"language":"KO","value":"사용자 이름"},{"language":"LT","value":"Vartotojo vardas"},{"language":"LV","value":"Lietotājvārds"},{"language":"MS","value":"Nama pengguna"},{"language":"NL","value":"Gebruikersnaam"},{"language":"NN","value":"Brukernavn"},{"language":"NO","value":"Brukernavn"},{"language":"PL","value":"Nazwa użytkownika"},{"language":"PT","value":"Nome de usuário"},{"language":"RO","value":"Nume de utilizator"},{"language":"RU","value":"Имя пользователя"},{"language":"SE","value":"Geavaheaddji namahusat"},{"language":"SH","value":"Korisničko ime"},{"language":"SK","value":"Používateľské meno"},{"language":"SL","value":"Uporabniško ime"},{"language":"SR","value":"Корисничко име"},{"language":"SV","value":"Användarnamn"},{"language":"TH","value":"ชื่อผู้ใช้"},{"language":"TR","value":"Kullanıcı adı"},{"language":"UK","value":"Ім'я користувача"},{"language":"ZF","value":"使用者名稱"},{"language":"ZH","value":"用户名"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}],"fieldPos":100},{"fieldNo":"a981a7ff-928b-4daf-d1f5-e4e966dc2a20","fieldName":"AppCache_inUsername","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"AppCache_inPassword.focus();","script":"AppCache_inPassword.focus();","translation":[]}],"fieldPos":101},{"fieldNo":"872497ac-7248-499d-acfc-09a6f9c88243","fieldName":"AppCache_lblPassword","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Password","script":"","translation":[{"language":"AF","value":"Wagwoord"},{"language":"AR","value":"كلمة المرور"},{"language":"BG","value":"Парола"},{"language":"CA","value":"Contrasenya"},{"language":"CS","value":"Heslo"},{"language":"DA","value":"Adgangskode"},{"language":"DE","value":"Passwort"},{"language":"EL","value":"Κωδικός πρόσβασης"},{"language":"EN","value":"Password"},{"language":"ES","value":"Contraseña"},{"language":"ET","value":"Parool"},{"language":"FI","value":"Salasana"},{"language":"FR","value":"Mot de passe"},{"language":"HE","value":"סיסמה"},{"language":"HR","value":"Lozinka"},{"language":"HU","value":"Jelszó"},{"language":"ID","value":"Kata sandi"},{"language":"IS","value":"Lykilorð"},{"language":"IT","value":"Parola d'ordine"},{"language":"JA","value":"パスワード"},{"language":"KO","value":"비밀번호"},{"language":"LT","value":"Slaptažodis"},{"language":"LV","value":"Parole"},{"language":"MS","value":"Kata laluan"},{"language":"NL","value":"Wachtwoord"},{"language":"NN","value":"Passord"},{"language":"NO","value":"Passord"},{"language":"PL","value":"Hasło"},{"language":"PT","value":"Senha"},{"language":"RO","value":"Parola"},{"language":"RU","value":"Пароль"},{"language":"SE","value":"Govat"},{"language":"SH","value":"Lozinka"},{"language":"SK","value":"heslo"},{"language":"SL","value":"Geslo"},{"language":"SR","value":"Лозинка"},{"language":"SV","value":"Lösenord"},{"language":"TH","value":"รหัสผ่าน"},{"language":"TR","value":"Şifre"},{"language":"UK","value":"Пароль"},{"language":"ZF","value":"密碼"},{"language":"ZH","value":"密码"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}],"fieldPos":102},{"fieldNo":"410231c5-9e9b-42be-92e1-8fed1ef328fd","fieldName":"AppCache_inPassword","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]},{"attribute":"submit","grouping":"Events","value":"AppCache_butLogon.firePress();","script":"AppCache_butLogon.firePress();","translation":[]}],"fieldPos":103},{"fieldNo":"0be5c144-576a-46c0-cde6-1061128c8afb","fieldName":"AppCache_lblLanguage","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Language","script":"","translation":[{"language":"AF","value":"Taal"},{"language":"AR","value":"لغة"},{"language":"BG","value":"език"},{"language":"CA","value":"Llenguatge"},{"language":"CS","value":"Jazyk"},{"language":"DA","value":"Sprog"},{"language":"DE","value":"Sprache"},{"language":"EL","value":"Γλώσσα"},{"language":"EN","value":"Language"},{"language":"ES","value":"Idioma"},{"language":"ET","value":"Keel"},{"language":"FI","value":"Kieli"},{"language":"FR","value":"Langue"},{"language":"HE","value":"שפה"},{"language":"HR","value":"Jezik"},{"language":"HU","value":"Nyelv"},{"language":"ID","value":"Bahasa"},{"language":"IS","value":"Tungumál"},{"language":"IT","value":"Lingua"},{"language":"JA","value":"言語"},{"language":"KO","value":"언어"},{"language":"LT","value":"Kalba"},{"language":"LV","value":"Valoda"},{"language":"MS","value":"Bahasa"},{"language":"NL","value":"Taal"},{"language":"NN","value":"Språk"},{"language":"NO","value":"Språk"},{"language":"PL","value":"Język"},{"language":"PT","value":"Linguagem"},{"language":"RO","value":"Limba"},{"language":"RU","value":"Язык"},{"language":"SE","value":"Giella"},{"language":"SH","value":"Jezik"},{"language":"SK","value":"Jazyk"},{"language":"SL","value":"Jezik"},{"language":"SR","value":"Језик"},{"language":"SV","value":"Språk"},{"language":"TH","value":"ภาษา"},{"language":"TR","value":"Dil"},{"language":"UK","value":"Мова"},{"language":"ZF","value":"語言"},{"language":"ZH","value":"语言"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}],"fieldPos":104},{"fieldNo":"ca7849d4-e7ba-4dab-85cb-43450fcd9862","fieldName":"AppCache_inLanguage","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldType":"sap.m.Select","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":105},{"fieldNo":"22937967-ffd7-42da-c839-481117e0389e","fieldName":"AppCache_lblShowPass","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}],"fieldPos":106},{"fieldNo":"4a34780e-0f95-473f-fc1a-29e90af36ee7","fieldName":"AppCache_inShowPass","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Show password","script":"","translation":[{"language":"AF","value":"Wys wagwoord"},{"language":"AR","value":"عرض كلمة المرور"},{"language":"BG","value":"Покажи парола"},{"language":"CA","value":"Ensenya la contrasenya"},{"language":"CS","value":"Zobrazit heslo"},{"language":"DA","value":"Vis adgangskode"},{"language":"DE","value":"Passwort anzeigen"},{"language":"EL","value":"Δείξε τον κωδικό"},{"language":"EN","value":"Show password"},{"language":"ES","value":"Mostrar contraseña"},{"language":"ET","value":"Näita salasõna"},{"language":"FI","value":"Näytä salasana"},{"language":"FR","value":"Montrer le mot de passe"},{"language":"HE","value":"הראה סיסמה"},{"language":"HR","value":"Pokaži lozinku"},{"language":"HU","value":"Mutasd a jelszót"},{"language":"ID","value":"Tampilkan kata sandi"},{"language":"IS","value":"Sýna lykilorð"},{"language":"IT","value":"Mostra password"},{"language":"JA","value":"パスワードを表示"},{"language":"KO","value":"비밀번호 표시"},{"language":"LT","value":"Rodyti slaptažodį"},{"language":"LV","value":"Rādīt paroli"},{"language":"MS","value":"Tunjukkan kata laluan"},{"language":"NL","value":"Laat wachtwoord zien"},{"language":"NN","value":"Vis passord"},{"language":"NO","value":"Vis passord"},{"language":"PL","value":"Pokaż hasło"},{"language":"PT","value":"Mostrar senha"},{"language":"RO","value":"Arata parola"},{"language":"RU","value":"Показать пароль"},{"language":"SE","value":"Dutnje govat"},{"language":"SH","value":"Prikaži lozinku"},{"language":"SK","value":"Ukázať heslo"},{"language":"SL","value":"Pokaži geslo"},{"language":"SR","value":"Покажи лозинку"},{"language":"SV","value":"Visa lösenord"},{"language":"TH","value":"แสดงรหัสผ่าน"},{"language":"TR","value":"Şifreyi göster"},{"language":"UK","value":"Показати пароль"},{"language":"ZF","value":"顯示密碼"},{"language":"ZH","value":"显示密码"}]},{"attribute":"select","grouping":"Events","value":"Anonymous Function","script":"if (AppCache_inShowPass.getSelected()) {\r\n    AppCache_inPassword.setType(\"Text\");\r\n} else {\r\n    AppCache_inPassword.setType(\"Password\");\r\n}\r\n","translation":[]}],"fieldPos":107},{"fieldNo":"5121da11-b774-4541-8896-e8c04a7986f9","fieldName":"AppCache_lblRememberMe","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}],"fieldPos":108},{"fieldNo":"e34ceea3-74e1-4794-d1d4-bd2b2381e45f","fieldName":"AppCache_inRememberMe","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Remember me","script":"","translation":[{"language":"AF","value":"Onthou my"},{"language":"AR","value":"تذكرنى"},{"language":"BG","value":"Помни ме"},{"language":"CA","value":"Recorda'm"},{"language":"CS","value":"Zapamatuj si mě"},{"language":"DA","value":"Husk mig"},{"language":"DE","value":"Erinnere dich an mich"},{"language":"EL","value":"Θυμήσου με"},{"language":"EN","value":"Remember me"},{"language":"ES","value":"Acuérdate de mí"},{"language":"ET","value":"Mäleta mind"},{"language":"FI","value":"Muista minut"},{"language":"FR","value":"Souviens-toi de moi"},{"language":"HE","value":"זכור אותי"},{"language":"HR","value":"Zapamti me"},{"language":"HU","value":"Emlékezz rám"},{"language":"ID","value":"Ingat saya"},{"language":"IS","value":"Mundu eftir mér"},{"language":"IT","value":"Ricordati di me"},{"language":"JA","value":"私を覚えてますか"},{"language":"KO","value":"날 기억해"},{"language":"LT","value":"Prisimink mane"},{"language":"LV","value":"Atceries mani"},{"language":"MS","value":"Ingat saya"},{"language":"NL","value":"Onthoud me"},{"language":"NN","value":"Husk meg"},{"language":"NO","value":"Husk meg"},{"language":"PL","value":"Zapamiętaj mnie"},{"language":"PT","value":"Lembre de mim"},{"language":"RO","value":"Ține-mă minte"},{"language":"RU","value":"Запомнить меня"},{"language":"SE","value":"Mun oaidnán"},{"language":"SH","value":"Zapamti me"},{"language":"SK","value":"Pamätáš si ma"},{"language":"SL","value":"Zapomni si me"},{"language":"SR","value":"Сети ме се"},{"language":"SV","value":"Kom ihåg mig"},{"language":"TH","value":"จดจำฉัน"},{"language":"TR","value":"Beni Hatırla"},{"language":"UK","value":"Пам'ятай мене"},{"language":"ZF","value":"記住我"},{"language":"ZH","value":"记住账号"}]}],"fieldPos":109},{"fieldNo":"24c1d125-b126-42c5-9067-4b9013855191","fieldName":"AppCache_lblLogon","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}],"fieldPos":110},{"fieldNo":"dd5d228c-2f9a-4512-9b76-d6546a028ebe","fieldName":"AppCache_butLogon","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"150px","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Sign in","script":"","translation":[{"language":"AF","value":"Meld aan"},{"language":"AR","value":"تسجيل الدخول"},{"language":"BG","value":"Впиши се"},{"language":"CA","value":"Inicia sessió"},{"language":"CS","value":"Přihlásit se"},{"language":"DA","value":"Log på"},{"language":"DE","value":"Einloggen"},{"language":"EL","value":"Συνδεθείτε"},{"language":"EN","value":"Sign in"},{"language":"ES","value":"Iniciar sesión"},{"language":"ET","value":"Logi sisse"},{"language":"FI","value":"Kirjaudu sisään"},{"language":"FR","value":"Se connecter"},{"language":"HE","value":"להתחבר"},{"language":"HR","value":"Prijaviti se"},{"language":"HU","value":"Bejelentkezés"},{"language":"ID","value":"Masuk"},{"language":"IS","value":"Skráðu þig inn"},{"language":"IT","value":"Registrazione"},{"language":"JA","value":"サインイン"},{"language":"KO","value":"로그인"},{"language":"LT","value":"Prisijungti"},{"language":"LV","value":"Ielogoties"},{"language":"MS","value":"Log masuk"},{"language":"NL","value":"Aanmelden"},{"language":"NN","value":"Logg inn"},{"language":"NO","value":"Logg inn"},{"language":"PL","value":"Zalogować się"},{"language":"PT","value":"Entrar"},{"language":"RO","value":"Conectare"},{"language":"RU","value":"Войти"},{"language":"SE","value":"Logga sisa"},{"language":"SH","value":"Prijavi se"},{"language":"SK","value":"Prihlásiť sa"},{"language":"SL","value":"Prijava"},{"language":"SR","value":"Пријавите се"},{"language":"SV","value":"Logga in"},{"language":"TH","value":"เข้าสู่ระบบ"},{"language":"TR","value":"Kayıt olmak"},{"language":"UK","value":"Увійти"},{"language":"ZF","value":"登入"},{"language":"ZH","value":"登入"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileButton","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"let userName = AppCache_inUsername.getValue();\nAppCache_inUsername.setValue(userName.trim());\n\nAppCache_inUsername.setValueState();\nAppCache_inPassword.setValueState();\n\n// Checks\nif (AppCache_inUsername.getVisible() && !AppCache_inUsername.getValue()) {\n    AppCache_inUsername.setValueState('Error');\n    setTimeout(function () {\n        AppCache_inUsername.focus();\n    }, 400);\n    return;\n}\n\nif (AppCache_inPassword.getVisible() && !AppCache_inPassword.getValue()) {\n    AppCache_inPassword.setValueState('Error');\n    setTimeout(function () {\n        AppCache_inPassword.focus();\n    }, 400);\n    return;\n}\n\nAppCache.Logon();","translation":[]}],"fieldPos":111},{"fieldNo":"81e4f108-1f2b-4303-fe74-7fb613785c06","fieldName":"AppCache_resetPassword","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldType":"sap.m.Link","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Forgot Password","script":"","translation":[{"language":"AF","value":"Wagwoord vergeet"},{"language":"AR","value":"هل نسيت كلمة السر"},{"language":"BG","value":"Забравена парола"},{"language":"CA","value":"Has oblidat la contrasenya"},{"language":"CS","value":"Zapomenuté heslo"},{"language":"DA","value":"Glemt kodeord"},{"language":"DE","value":"Passwort vergessen"},{"language":"EL","value":"Ξεχάσατε τον κωδικό"},{"language":"EN","value":"Forgot Password"},{"language":"ES","value":"Has olvidado tu contraseña"},{"language":"ET","value":"Unustasid parooli"},{"language":"FI","value":"Unohtuiko salasana"},{"language":"FR","value":"Mot de passe oublié"},{"language":"HE","value":"שכחת את הסיסמא"},{"language":"HR","value":"Zaboravili ste lozinku"},{"language":"HU","value":"Elfelejtett jelszó"},{"language":"ID","value":"Tidak ingat kata sandi"},{"language":"IS","value":"Gleymt lykilorð"},{"language":"IT","value":"Ha dimenticato la password"},{"language":"JA","value":"パスワードをお忘れですか"},{"language":"KO","value":"비밀번호를 잊으 셨나요"},{"language":"LT","value":"Pamiršote slaptažodį"},{"language":"LV","value":"Aizmirsi paroli"},{"language":"MS","value":"Lupa kata laluan"},{"language":"NL","value":"Wachtwoord vergeten"},{"language":"NN","value":"Glemt passord"},{"language":"NO","value":"Glemt passord"},{"language":"PL","value":"Zapomniałeś hasła"},{"language":"PT","value":"Esqueceu sua senha"},{"language":"RO","value":"Aţi uitat parola"},{"language":"RU","value":"Забыли пароль"},{"language":"SE","value":"Mun lean dilán govaid"},{"language":"SH","value":"Zaboravljena lozinka"},{"language":"SK","value":"Zabudol si heslo"},{"language":"SL","value":"Ste pozabili geslo"},{"language":"SR","value":"Заборавили сте лозинку"},{"language":"SV","value":"Glömt ditt lösenord"},{"language":"TH","value":"ลืมรหัสผ่าน"},{"language":"TR","value":"Parolanızı mı unuttunuz"},{"language":"UK","value":"Забули пароль"},{"language":"ZF","value":"忘記密碼"},{"language":"ZH","value":"忘记密码"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"neptuneLinkWhite","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"window.open(AppCache.passUrlReset, \"_system\");","translation":[]}],"fieldPos":112},{"fieldNo":"fb646057-0430-4e3a-cb5a-54b93eed09d1","fieldName":"AppCache_formPasswordReset","fieldParent":"ba55d7bd-1d6c-4d5f-f86d-baa01c95e9c0","fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"maxContainerCols","grouping":"Properties","value":"1","script":"","translation":[]},{"attribute":"layout","grouping":"Properties","value":"ResponsiveGridLayout","script":"","translation":[]},{"attribute":"labelSpanM","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"labelSpanL","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"columnsL","grouping":"Properties","value":"1","script":"","translation":[]}],"fieldPos":113},{"fieldNo":"e7dc0eaf-3366-4c3f-f74e-513d502e7158","fieldName":"lblFormNewPassSubTitle","fieldParent":"fb646057-0430-4e3a-cb5a-54b93eed09d1","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBottom","script":"","translation":[]}],"fieldPos":114},{"fieldNo":"5746ede1-4069-4c8a-c790-4cf16661da10","fieldName":"boxNewPassSubTitle","fieldParent":"fb646057-0430-4e3a-cb5a-54b93eed09d1","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBottom","script":"","translation":[]}],"fieldPos":115},{"fieldNo":"f43cecf5-4e61-4c89-e155-c61a1a666ca3","fieldName":"txtFormNewPassTitle","fieldParent":"5746ede1-4069-4c8a-c790-4cf16661da10","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H1","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Reset password","script":"","translation":[{"language":"AF","value":"Herstel wagwoord"},{"language":"AR","value":"إعادة تعيين كلمة المرور"},{"language":"BG","value":"Нулирайте паролата"},{"language":"CA","value":"Restablir la contrasenya"},{"language":"CS","value":"Obnovit heslo"},{"language":"DA","value":"Nulstille kodeord"},{"language":"DE","value":"Passwort zurücksetzen"},{"language":"EL","value":"Επαναφέρετε τον κωδικό πρόσβασης"},{"language":"ES","value":"Restablecer la contraseña"},{"language":"ET","value":"Lähtestage parool"},{"language":"FI","value":"Nollaa salasana"},{"language":"FR","value":"Réinitialiser le mot de passe"},{"language":"HE","value":"לאפס את הסיסמה"},{"language":"HR","value":"Resetiranje lozinke"},{"language":"HU","value":"Jelszó visszaállítása"},{"language":"ID","value":"Setel ulang kata sandi"},{"language":"IS","value":"Endur stilla lykilorð"},{"language":"IT","value":"Resetta la password"},{"language":"JA","value":"パスワードを再設定する"},{"language":"KO","value":"암호를 재설정"},{"language":"LT","value":"Atstatyti slaptažodį"},{"language":"LV","value":"Atiestatīt paroli"},{"language":"MS","value":"Menetapkan semula kata laluan"},{"language":"NL","value":"Wachtwoord opnieuw instellen"},{"language":"NN","value":"Tilbakestill passord"},{"language":"NO","value":"Tilbakestill passord"},{"language":"PL","value":"Zresetuj hasło"},{"language":"PT","value":"Redefinir senha"},{"language":"RO","value":"Reseteaza parola"},{"language":"RU","value":"Сброс пароля"},{"language":"SE","value":"Dilá govat"},{"language":"SH","value":"Resetuj lozinku"},{"language":"SK","value":"Obnoviť heslo"},{"language":"SL","value":"Ponastavitev gesla"},{"language":"SR","value":"Ресетуј шифру"},{"language":"SV","value":"Återställ lösenord"},{"language":"TH","value":"รีเซ็ตรหัสผ่าน"},{"language":"TR","value":"Şifreyi yenile"},{"language":"UK","value":"Скинути пароль"},{"language":"ZF","value":"重設密碼"},{"language":"ZH","value":"重设密码"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBottom","script":"","translation":[]},{"attribute":"wrapping","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":116},{"fieldNo":"69057640-9793-4bd9-ac74-fd6d9bf5055d","fieldName":"txtFormNewPassRequired","fieldParent":"5746ede1-4069-4c8a-c790-4cf16661da10","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H4","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"You are required to reset your password.","script":"","translation":[{"language":"AF","value":"Daar word van jou verwag om jou wagwoord terug te stel."},{"language":"AR","value":"أنت مطالب بإعادة تعيين كلمة المرور الخاصة بك."},{"language":"BG","value":"Трябва да нулирате паролата си."},{"language":"CA","value":"Heu de restablir la vostra contrasenya."},{"language":"CS","value":"Musíte resetovat heslo."},{"language":"DA","value":"Du skal nulstille din adgangskode."},{"language":"DE","value":"Sie müssen Ihr Passwort zurücksetzen."},{"language":"EL","value":"Απαιτείται να επαναφέρετε τον κωδικό πρόσβασής σας."},{"language":"ES","value":"Debe restablecer su contraseña."},{"language":"ET","value":"Peate oma parooli lähtestama."},{"language":"FI","value":"Sinun on vaihdettava salasanasi."},{"language":"FR","value":"Vous devez réinitialiser votre mot de passe."},{"language":"HE","value":"אתה נדרש לאפס את הסיסמה שלך."},{"language":"HR","value":"Morate ponovno postaviti svoju lozinku."},{"language":"HU","value":"Vissza kell állítania jelszavát."},{"language":"ID","value":"Anda diminta untuk mengatur ulang kata sandi Anda."},{"language":"IS","value":"Þú þarft að endurstilla lykilorðið þitt."},{"language":"IT","value":"Ti viene richiesto di reimpostare la password."},{"language":"JA","value":"パスワードをリセットする必要があります。"},{"language":"KO","value":"비밀번호를 재설정해야 합니다."},{"language":"LT","value":"Turite iš naujo nustatyti slaptažodį."},{"language":"LV","value":"Jums ir jāatiestata sava parole."},{"language":"MS","value":"Anda dikehendaki menetapkan semula kata laluan anda."},{"language":"NL","value":"U bent verplicht uw wachtwoord opnieuw in te stellen."},{"language":"NN","value":"Du må tilbakestille passordet ditt."},{"language":"NO","value":"Du må tilbakestille passordet ditt."},{"language":"PL","value":"Musisz zresetować hasło."},{"language":"PT","value":"Você é obrigado a redefinir sua senha."},{"language":"RO","value":"Vi se cere să vă resetați parola."},{"language":"RU","value":"Вам необходимо сбросить пароль."},{"language":"SE","value":"Leat buorrejuvvon dilá govat."},{"language":"SH","value":"Morate resetovati lozinku."},{"language":"SK","value":"Musíte obnoviť svoje heslo."},{"language":"SL","value":"Ponastaviti morate geslo."},{"language":"SR","value":"Од вас се тражи да ресетујете лозинку."},{"language":"SV","value":"Du måste återställa ditt lösenord."},{"language":"TH","value":"คุณจะต้องรีเซ็ตรหัสผ่านของคุณ"},{"language":"TR","value":"Şifrenizi sıfırlamanız gerekmektedir."},{"language":"UK","value":"Вам потрібно скинути свій пароль."},{"language":"ZF","value":"您需要重設密碼。"},{"language":"ZH","value":"您需要重置密码。"}]},{"attribute":"wrapping","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":117},{"fieldNo":"1266e781-b7f3-4471-d4e2-2af7a017e094","fieldName":"txtFormNewPassExpired","fieldParent":"5746ede1-4069-4c8a-c790-4cf16661da10","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"titleStyle","grouping":"Properties","value":"H4","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Your password has expired.","script":"","translation":[{"language":"AF","value":"Jou wagwoord het verval."},{"language":"AR","value":"لقد انتهت صلاحية كلمة المرور الخاصة بك."},{"language":"BG","value":"Вашата парола е изтекла."},{"language":"CA","value":"La teva contrasenya ha caducat."},{"language":"CS","value":"Platnost vašeho hesla vypršela."},{"language":"DA","value":"Din adgangskode er udløbet."},{"language":"DE","value":"Dein Passwort ist abgelaufen."},{"language":"EL","value":"Ο κωδικός πρόσβασής σας έχει λήξει."},{"language":"ES","value":"Tu contraseña ha expirado."},{"language":"ET","value":"Teie parool on aegunud."},{"language":"FI","value":"Salasanasi on vanhentunut."},{"language":"FR","value":"Votre mot de passe a expiré."},{"language":"HE","value":"סיסמתך פגה."},{"language":"HR","value":"Vaša lozinka je istekla."},{"language":"HU","value":"A jelszava lejárt."},{"language":"ID","value":"Kata sandi Anda telah kedaluwarsa."},{"language":"IS","value":"Lykilorðið þitt er útrunnið."},{"language":"IT","value":"La tua password è scaduta."},{"language":"JA","value":"パスワードの有効期限が切れています。"},{"language":"KO","value":"귀하의 비밀번호가 만료되었습니다."},{"language":"LT","value":"Jūsų slaptažodis baigėsi."},{"language":"LV","value":"Jūsu parole ir beidzies."},{"language":"MS","value":"Kata laluan anda telah tamat tempoh."},{"language":"NL","value":"Je wachtwoord is verlopen."},{"language":"NN","value":"Passordet ditt har utløpt."},{"language":"NO","value":"Passordet ditt er utløpt."},{"language":"PL","value":"Twoje hasło wygasło."},{"language":"PT","value":"Sua senha expirou."},{"language":"RO","value":"Parola ta a expirat."},{"language":"RU","value":"Ваш пароль истек."},{"language":"SE","value":"Govat lea jávkan"},{"language":"SH","value":"Vaša lozinka je istekla."},{"language":"SK","value":"Platnosť vášho hesla vypršala."},{"language":"SL","value":"Vaše geslo je poteklo."},{"language":"SR","value":"Ваша лозинка је истекла."},{"language":"SV","value":"Ditt lösenord har gått ut."},{"language":"TH","value":"รหัสผ่านของคุณหมดอายุแล้ว"},{"language":"TR","value":"Şifrenizin süresi doldu."},{"language":"UK","value":"Термін дії вашого пароля закінчився."},{"language":"ZF","value":"您的密碼已過期。"},{"language":"ZH","value":"您的密码已过期。"}]},{"attribute":"wrapping","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":118},{"fieldNo":"794d1952-d6e7-48ac-a86e-de0387aec011","fieldName":"txtFormNewPassSubTitle","fieldParent":"5746ede1-4069-4c8a-c790-4cf16661da10","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H4","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Please set a new password below.","script":"","translation":[{"language":"AF","value":"Stel asseblief 'n nuwe wagwoord hieronder."},{"language":"AR","value":"يرجى تعيين كلمة مرور جديدة أدناه."},{"language":"BG","value":"Моля, задайте нова парола по-долу."},{"language":"CA","value":"Si us plau, estableix una contrasenya nova a continuació."},{"language":"CS","value":"Níže prosím nastavte nové heslo."},{"language":"DA","value":"Indstil venligst en ny adgangskode nedenfor."},{"language":"DE","value":"Bitte legen Sie unten ein neues Passwort fest."},{"language":"EL","value":"Ορίστε έναν νέο κωδικό πρόσβασης παρακάτω."},{"language":"ES","value":"Establezca una nueva contraseña a continuación."},{"language":"ET","value":"Palun määrake allpool uus parool."},{"language":"FI","value":"Aseta uusi salasana alle."},{"language":"FR","value":"Veuillez définir un nouveau mot de passe ci-dessous."},{"language":"HE","value":"אנא הגדר סיסמה חדשה למטה."},{"language":"HR","value":"Molimo postavite novu lozinku ispod."},{"language":"HU","value":"Kérjük, állítson be új jelszót alább."},{"language":"ID","value":"Silakan atur kata sandi baru di bawah."},{"language":"IS","value":"Vinsamlega stilltu nýtt lykilorð hér að neðan."},{"language":"IT","value":"Imposta una nuova password qui sotto."},{"language":"JA","value":"以下に新しいパスワードを設定してください。"},{"language":"KO","value":"아래에서 새로운 비밀번호를 설정해주세요."},{"language":"LT","value":"Toliau nustatykite naują slaptažodį."},{"language":"LV","value":"Lūdzu, zemāk iestatiet jaunu paroli."},{"language":"MS","value":"Sila tetapkan kata laluan baharu di bawah."},{"language":"NL","value":"Stel hieronder een nieuw wachtwoord in."},{"language":"NN","value":"Vennligst sett et nytt passord nedenfor."},{"language":"NO","value":"Vennligst angi et nytt passord nedenfor."},{"language":"PL","value":"Proszę ustawić nowe hasło poniżej."},{"language":"PT","value":"Por favor, defina uma nova senha abaixo."},{"language":"RO","value":"Vă rugăm să setați o nouă parolă mai jos."},{"language":"RU","value":"Пожалуйста, установите новый пароль ниже."},{"language":"SE","value":"Dilá ođđa govat čuovvovaš."},{"language":"SH","value":"Molimo postavite novu lozinku ispod."},{"language":"SK","value":"Nižšie nastavte nové heslo."},{"language":"SL","value":"Spodaj nastavite novo geslo."},{"language":"SR","value":"Молимо поставите нову лозинку испод."},{"language":"SV","value":"Vänligen ange ett nytt lösenord nedan."},{"language":"TH","value":"กรุณาตั้งรหัสผ่านใหม่ด้านล่าง"},{"language":"TR","value":"Lütfen aşağıdan yeni bir şifre belirleyin."},{"language":"UK","value":"Будь ласка, встановіть новий пароль нижче."},{"language":"ZF","value":"請在下方設定新密碼。"},{"language":"ZH","value":"请在下面设置新密码。"}]},{"attribute":"wrapping","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":119},{"fieldNo":"fc8806ec-e0f2-44f2-da00-bbc2c44def38","fieldName":"lblNewPassword","fieldParent":"fb646057-0430-4e3a-cb5a-54b93eed09d1","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"New password","script":"","translation":[{"language":"AF","value":"Nuwe Wagwoord"},{"language":"AR","value":"كلمة المرور الجديدة"},{"language":"BG","value":"Нова парола"},{"language":"CA","value":"Nova contrasenya"},{"language":"CS","value":"Nové heslo"},{"language":"DA","value":"Nyt kodeord"},{"language":"DE","value":"Neues Kennwort"},{"language":"EL","value":"Νέος Κωδικός"},{"language":"ES","value":"Nueva contraseña"},{"language":"ET","value":"Uus salasõna"},{"language":"FI","value":"Uusi salasana"},{"language":"FR","value":"Nouveau mot de passe"},{"language":"HE","value":"סיסמה חדשה"},{"language":"HR","value":"Nova lozinka"},{"language":"HU","value":"Új jelszó"},{"language":"ID","value":"Kata sandi baru"},{"language":"IS","value":"Nýtt lykilorð"},{"language":"IT","value":"Nuova password"},{"language":"JA","value":"新しいパスワード"},{"language":"KO","value":"새 비밀번호"},{"language":"LT","value":"Naujas Slaptažodis"},{"language":"LV","value":"Jauna parole"},{"language":"MS","value":"Kata laluan baharu"},{"language":"NL","value":"Nieuw paswoord"},{"language":"NN","value":"Nytt passord"},{"language":"NO","value":"Nytt passord"},{"language":"PL","value":"Nowe hasło"},{"language":"PT","value":"Nova Senha"},{"language":"RO","value":"Parolă Nouă"},{"language":"RU","value":"Новый пароль"},{"language":"SE","value":"Ođđa govat"},{"language":"SH","value":"Nova lozinka"},{"language":"SK","value":"Nové heslo"},{"language":"SL","value":"Novo geslo"},{"language":"SR","value":"Нова лозинка"},{"language":"SV","value":"Nytt lösenord"},{"language":"TH","value":"รหัสผ่านใหม่"},{"language":"TR","value":"Yeni Şifre"},{"language":"UK","value":"Новий пароль"},{"language":"ZF","value":"新密碼"},{"language":"ZH","value":"新密码"}]}],"fieldPos":120},{"fieldNo":"af752bf2-7de2-4311-c791-81c26d43f535","fieldName":"inNewPassword","fieldParent":"fb646057-0430-4e3a-cb5a-54b93eed09d1","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]},{"attribute":"liveChange","grouping":"Events","value":"this.setValueState();","script":"this.setValueState();","translation":[]}],"fieldPos":121},{"fieldNo":"1372acf3-11fa-445f-fa0b-e639b70a21e2","fieldName":"lblNewPassword2","fieldParent":"fb646057-0430-4e3a-cb5a-54b93eed09d1","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Repeat password","script":"","translation":[{"language":"AF","value":"Herhaal wagwoord"},{"language":"AR","value":"اعد كلمة السر"},{"language":"BG","value":"Повтори паролата"},{"language":"CA","value":"Repeteix la contrassenya"},{"language":"CS","value":"Zopakovat heslo"},{"language":"DA","value":"Gentag adgangskode"},{"language":"DE","value":"Passwort wiederholen"},{"language":"EL","value":"Επαναλάβετε τον κωδικό πρόσβασης"},{"language":"ES","value":"Repita la contraseña"},{"language":"ET","value":"Korda salasõna"},{"language":"FI","value":"Toista salasana"},{"language":"FR","value":"Répéter le mot de passe"},{"language":"HE","value":"חזור על הסיסמה"},{"language":"HR","value":"ponovi lozinku"},{"language":"HU","value":"Jelszó újra"},{"language":"ID","value":"Masukkan kata kunci kembali"},{"language":"IS","value":"Endurtaktu lykilorð"},{"language":"IT","value":"Ripeti la password"},{"language":"JA","value":"パスワードを再度入力してください。"},{"language":"KO","value":"비밀번호를 반복하세요"},{"language":"LT","value":"Pakartokite slaptažodį"},{"language":"LV","value":"atkārtojiet paroli"},{"language":"MS","value":"Ulang kata laluan"},{"language":"NL","value":"herhaal wachtwoord"},{"language":"NN","value":"Gjenta passord"},{"language":"NO","value":"Gjenta passord"},{"language":"PL","value":"Powtórz hasło"},{"language":"PT","value":"Repita a senha"},{"language":"RO","value":"Repetați parola"},{"language":"RU","value":"Повторите пароль"},{"language":"SE","value":"Bargat govat"},{"language":"SH","value":"Ponovite lozinku"},{"language":"SK","value":"zopakujte heslo"},{"language":"SL","value":"Ponovite geslo"},{"language":"SR","value":"Поновите лозинку"},{"language":"SV","value":"repetera lösenord"},{"language":"TH","value":"ทำซ้ำรหัสผ่าน"},{"language":"TR","value":"Şifreyi tekrar girin"},{"language":"UK","value":"Повторіть пароль"},{"language":"ZF","value":"重複密碼"},{"language":"ZH","value":"重复输入密码"}]}],"fieldPos":122},{"fieldNo":"d069fe0f-8c60-460f-a123-090980df573b","fieldName":"inNewPassword2","fieldParent":"fb646057-0430-4e3a-cb5a-54b93eed09d1","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]},{"attribute":"liveChange","grouping":"Events","value":"this.setValueState();","script":"this.setValueState();","translation":[]}],"fieldPos":123},{"fieldNo":"2028367b-2bcb-45e1-b3c8-f46c50b10240","fieldName":"butSubmitNewPass","fieldParent":"fb646057-0430-4e3a-cb5a-54b93eed09d1","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"150px","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Submit","script":"","translation":[{"language":"AF","value":"Indien"},{"language":"AR","value":"يُقدِّم"},{"language":"BG","value":"Изпращане"},{"language":"CA","value":"Presentar"},{"language":"CS","value":"Předložit"},{"language":"DA","value":"Indsend"},{"language":"DE","value":"Einreichen"},{"language":"EL","value":"υποβάλλουν"},{"language":"ES","value":"Entregar"},{"language":"ET","value":"Esita"},{"language":"FI","value":"Lähetä"},{"language":"FR","value":"Soumettre"},{"language":"HE","value":"שלח"},{"language":"HR","value":"podnijeti"},{"language":"HU","value":"Beküldés"},{"language":"ID","value":"Kirim"},{"language":"IS","value":"Sendu inn"},{"language":"IT","value":"Invia"},{"language":"JA","value":"提出する"},{"language":"KO","value":"제출하다"},{"language":"LT","value":"Pateikti"},{"language":"LV","value":"Iesniegt"},{"language":"MS","value":"Hantar"},{"language":"NL","value":"Indienen"},{"language":"NN","value":"Send inn"},{"language":"NO","value":"Send inn"},{"language":"PL","value":"Składać"},{"language":"PT","value":"Enviar"},{"language":"RO","value":"Trimite"},{"language":"RU","value":"Представлять на рассмотрение"},{"language":"SE","value":"Dárbbašit"},{"language":"SH","value":"Potvrdi"},{"language":"SK","value":"Predložiť"},{"language":"SL","value":"Predloži"},{"language":"SR","value":"прихвати"},{"language":"SV","value":"Skicka in"},{"language":"TH","value":"ส่ง"},{"language":"TR","value":"Göndermek"},{"language":"UK","value":"Надіслати"},{"language":"ZF","value":"提交"},{"language":"ZH","value":"提交"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileButton","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"AppCacheLogonSap.ResetPassword();","script":"AppCacheLogonSap.ResetPassword();","translation":[]}],"fieldPos":124},{"fieldNo":"df4b9670-fb69-4c62-b930-870c1a541d61","fieldName":"panLinks","fieldParent":"ba55d7bd-1d6c-4d5f-f86d-baa01c95e9c0","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPanLinks","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":125},{"fieldNo":"f6216dd6-4c62-4998-8dab-2d7fa30eee42","fieldName":"toolLinks","fieldParent":"df4b9670-fb69-4c62-b930-870c1a541d61","fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepLinkNoBorder","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}],"fieldPos":126},{"fieldNo":"20837d0c-6a11-4b94-b760-f255acb200ac","fieldName":"linkText1","fieldParent":"f6216dd6-4c62-4998-8dab-2d7fa30eee42","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin1);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin1);","translation":[]}],"fieldPos":127},{"fieldNo":"b9e7e2d3-15f2-4a06-aa2f-ca920b8010c7","fieldName":"linkSep1","fieldParent":"f6216dd6-4c62-4998-8dab-2d7fa30eee42","fieldType":"sap.m.ToolbarSeparator","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":128},{"fieldNo":"40732b8e-8821-4d45-c9a3-9b79ece519f9","fieldName":"linkText2","fieldParent":"f6216dd6-4c62-4998-8dab-2d7fa30eee42","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin2);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin2);","translation":[]}],"fieldPos":129},{"fieldNo":"f305c385-0ed8-4a28-d9cf-359f3dfb4284","fieldName":"linkSep2","fieldParent":"f6216dd6-4c62-4998-8dab-2d7fa30eee42","fieldType":"sap.m.ToolbarSeparator","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":130},{"fieldNo":"8ce472c1-5184-40b2-ed73-9026a44eea48","fieldName":"linkText3","fieldParent":"f6216dd6-4c62-4998-8dab-2d7fa30eee42","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin3);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin3);","translation":[]}],"fieldPos":131},{"fieldNo":"d5b0a129-53ce-45ff-9e57-601ef8f8c006","fieldName":"AppCache_boxLogonCustom","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":132},{"fieldNo":"3c23f17b-1706-46d7-84a5-7786abd145fb","fieldName":"AppCache_boxPassword","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":133},{"fieldNo":"24a1b591-e96c-4752-a0c0-02dfa8aba8da","fieldName":"AppCache_boxLogonPassword","fieldParent":"3c23f17b-1706-46d7-84a5-7786abd145fb","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":134},{"fieldNo":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldName":"AppCache_formPassword","fieldParent":"24a1b591-e96c-4752-a0c0-02dfa8aba8da","fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"layout","grouping":"Properties","value":"ResponsiveGridLayout","script":"","translation":[]},{"attribute":"labelSpanM","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"labelSpanL","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"editable","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":135},{"fieldNo":"6664edcd-3e5f-4a3f-aa03-3c6709107964","fieldName":"AppCache_titlePassword","fieldParent":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldType":"sap.ui.core.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Change Password","script":"","translation":[{"language":"AF","value":"Verander wagwoord"},{"language":"AR","value":"تغيير كلمة المرور"},{"language":"BG","value":"Промяна на паролата"},{"language":"CA","value":"Canvia la contrasenya"},{"language":"CS","value":"Změnit heslo"},{"language":"DA","value":"Skift kodeord"},{"language":"DE","value":"Passwort ändern"},{"language":"EL","value":"Άλλαξε κωδικό"},{"language":"EN","value":"Change Password"},{"language":"ES","value":"Cambiar la contraseña"},{"language":"ET","value":"Muuda salasõna"},{"language":"FI","value":"Vaihda salasana"},{"language":"FR","value":"Changer le mot de passe"},{"language":"HE","value":"שנה סיסמא"},{"language":"HR","value":"Promjena lozinke"},{"language":"HU","value":"Jelszó módosítása"},{"language":"ID","value":"Ganti kata sandi"},{"language":"IS","value":"Breyta lykilorði"},{"language":"IT","value":"Cambiare la password"},{"language":"JA","value":"パスワードを変更する"},{"language":"KO","value":"비밀번호 변경"},{"language":"LT","value":"Pakeisti slaptažodį"},{"language":"LV","value":"Mainīt paroli"},{"language":"MS","value":"Tukar kata laluan"},{"language":"NL","value":"Verander wachtwoord"},{"language":"NN","value":"Endre passord"},{"language":"NO","value":"Bytt passord"},{"language":"PL","value":"Zmień hasło"},{"language":"PT","value":"Alterar a senha"},{"language":"RO","value":"Schimbaţi parola"},{"language":"RU","value":"Изменить пароль"},{"language":"SE","value":"Juvddála govat"},{"language":"SH","value":"Promeni lozinku"},{"language":"SK","value":"Zmeniť heslo"},{"language":"SL","value":"Spremeni geslo"},{"language":"SR","value":"Промени лозинку"},{"language":"SV","value":"Ändra lösenord"},{"language":"TH","value":"เปลี่ยนรหัสผ่าน"},{"language":"TR","value":"Şifre değiştir"},{"language":"UK","value":"Змінити пароль"},{"language":"ZF","value":"更改密碼"},{"language":"ZH","value":"更改密码"}]},{"attribute":"level","grouping":"Properties","value":"H1","script":"","translation":[]}],"fieldPos":136},{"fieldNo":"a6f8621d-d37c-48fc-aaa3-364a7c0754ec","fieldName":"AppCache_lblPassOld","fieldParent":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Old","script":"","translation":[{"language":"AF","value":"Oud"},{"language":"AR","value":"قديم"},{"language":"BG","value":"Стар"},{"language":"CA","value":"vell"},{"language":"CS","value":"Starý"},{"language":"DA","value":"Gammel"},{"language":"DE","value":"Alt"},{"language":"EL","value":"Παλαιός"},{"language":"EN","value":"Old"},{"language":"ES","value":"Viejo"},{"language":"ET","value":"Vana"},{"language":"FI","value":"Vanha"},{"language":"FR","value":"Vieux"},{"language":"HE","value":"ישן"},{"language":"HR","value":"Star"},{"language":"HU","value":"Régi"},{"language":"ID","value":"Tua"},{"language":"IS","value":"Gamalt"},{"language":"IT","value":"Vecchio"},{"language":"JA","value":"古い"},{"language":"KO","value":"오래된"},{"language":"LT","value":"Senas"},{"language":"LV","value":"Vecs"},{"language":"MS","value":"Tua"},{"language":"NL","value":"Oud"},{"language":"NN","value":"Gammelt"},{"language":"NO","value":"Gammelt"},{"language":"PL","value":"Stary"},{"language":"PT","value":"Velho"},{"language":"RO","value":"Vechi"},{"language":"RU","value":"Старый"},{"language":"SE","value":"Gávdnat"},{"language":"SH","value":"Stara"},{"language":"SK","value":"Starý"},{"language":"SL","value":"Star"},{"language":"SR","value":"Стара"},{"language":"SV","value":"Gammal"},{"language":"TH","value":"เก่า"},{"language":"TR","value":"Eskimiş"},{"language":"UK","value":"Старий"},{"language":"ZF","value":"舊"},{"language":"ZH","value":"老的"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}],"fieldPos":137},{"fieldNo":"b8b91d49-34ee-4922-af92-5520fe490301","fieldName":"AppCache_inPassOld","fieldParent":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"AppCache_inPassword.focus();","script":"AppCache_inPassword.focus();","translation":[]}],"fieldPos":138},{"fieldNo":"7ea30d24-1724-4740-d0e1-df7eb5265813","fieldName":"AppCache_lblPassNew","fieldParent":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"New","script":"","translation":[{"language":"AF","value":"Nuut"},{"language":"AR","value":"جديد"},{"language":"BG","value":"Нов"},{"language":"CA","value":"Nou"},{"language":"CS","value":"Nový"},{"language":"DA","value":"Ny"},{"language":"DE","value":"Neu"},{"language":"EL","value":"Νέος"},{"language":"EN","value":"New"},{"language":"ES","value":"Nuevo"},{"language":"ET","value":"Uus"},{"language":"FI","value":"Uusi"},{"language":"FR","value":"Nouveau"},{"language":"HE","value":"חָדָשׁ"},{"language":"HR","value":"Novi"},{"language":"HU","value":"Új"},{"language":"ID","value":"Baru"},{"language":"IS","value":"Nýtt"},{"language":"IT","value":"Nuovo"},{"language":"JA","value":"新しい"},{"language":"KO","value":"새로운"},{"language":"LT","value":"Nauja"},{"language":"LV","value":"Jauns"},{"language":"MS","value":"Baru"},{"language":"NL","value":"Nieuw"},{"language":"NN","value":"Nytt"},{"language":"NO","value":"Nytt"},{"language":"PL","value":"Nowy"},{"language":"PT","value":"Novo"},{"language":"RO","value":"Nou"},{"language":"RU","value":"Новый"},{"language":"SE","value":"Ođđa"},{"language":"SH","value":"Nova"},{"language":"SK","value":"Nový"},{"language":"SL","value":"Novo"},{"language":"SR","value":"Нова"},{"language":"SV","value":"Ny"},{"language":"TH","value":"ใหม่"},{"language":"TR","value":"Yeni"},{"language":"UK","value":"новий"},{"language":"ZF","value":"新"},{"language":"ZH","value":"新的"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}],"fieldPos":139},{"fieldNo":"09b782aa-6342-40fd-d07d-5b4baa02a716","fieldName":"AppCache_inPassNew","fieldParent":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]}],"fieldPos":140},{"fieldNo":"44a1e619-05d2-45aa-f848-4f6c7335a864","fieldName":"AppCache_lblPassRepeat","fieldParent":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Repeat","script":"","translation":[{"language":"AF","value":"Herhaal"},{"language":"AR","value":"يكرر"},{"language":"BG","value":"Повторете"},{"language":"CA","value":"Repetiu"},{"language":"CS","value":"Opakovat"},{"language":"DA","value":"Gentage"},{"language":"DE","value":"Wiederholen"},{"language":"EL","value":"Επαναλαμβάνω"},{"language":"EN","value":"Repeat"},{"language":"ES","value":"Repetir"},{"language":"ET","value":"Korda"},{"language":"FI","value":"Toistaa"},{"language":"FR","value":"Répéter"},{"language":"HE","value":"חזור"},{"language":"HR","value":"Ponoviti"},{"language":"HU","value":"Ismétlés"},{"language":"ID","value":"Mengulang"},{"language":"IS","value":"Endurtaktu"},{"language":"IT","value":"Ripetere"},{"language":"JA","value":"繰り返す"},{"language":"KO","value":"반복하다"},{"language":"LT","value":"Pakartokite"},{"language":"LV","value":"Atkārtojiet"},{"language":"MS","value":"ulang"},{"language":"NL","value":"Herhalen"},{"language":"NN","value":"Gjenta"},{"language":"NO","value":"Gjenta"},{"language":"PL","value":"Powtarzać"},{"language":"PT","value":"Repita"},{"language":"RO","value":"Repeta"},{"language":"RU","value":"Повторить"},{"language":"SE","value":"Bargat"},{"language":"SH","value":"Ponovi"},{"language":"SK","value":"Opakujte"},{"language":"SL","value":"ponovi"},{"language":"SR","value":"Понављање"},{"language":"SV","value":"Upprepa"},{"language":"TH","value":"ทำซ้ำ"},{"language":"TR","value":"Tekrarlamak"},{"language":"UK","value":"Повторіть"},{"language":"ZF","value":"重複"},{"language":"ZH","value":"重复"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}],"fieldPos":141},{"fieldNo":"6f40b828-b67e-44eb-83f1-e9bcb7adf256","fieldName":"AppCache_inPassRepeat","fieldParent":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]}],"fieldPos":142},{"fieldNo":"2756763c-0251-47c4-a5a8-04d6216f4331","fieldName":"AppCache_butPassword","fieldParent":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Confirm","script":"","translation":[{"language":"AF","value":"Bevestig"},{"language":"AR","value":"يتأكد"},{"language":"BG","value":"Потвърдете"},{"language":"CA","value":"Confirmeu"},{"language":"CS","value":"Potvrdit"},{"language":"DA","value":"Bekræfte"},{"language":"DE","value":"Bestätigen"},{"language":"EL","value":"Επιβεβαιώνω"},{"language":"EN","value":"Confirm"},{"language":"ES","value":"Confirmar"},{"language":"ET","value":"Kinnita"},{"language":"FI","value":"Vahvistaa"},{"language":"FR","value":"Confirmer"},{"language":"HE","value":"לְאַשֵׁר"},{"language":"HR","value":"Potvrdi"},{"language":"HU","value":"megerősít"},{"language":"ID","value":"Mengonfirmasi"},{"language":"IS","value":"Staðfesta"},{"language":"IT","value":"Confermare"},{"language":"JA","value":"確認する"},{"language":"KO","value":"확인하다"},{"language":"LT","value":"Patvirtinti"},{"language":"LV","value":"Apstiprināt"},{"language":"MS","value":"sahkan"},{"language":"NL","value":"Bevestigen"},{"language":"NN","value":"Bekreft"},{"language":"NO","value":"Bekreft"},{"language":"PL","value":"Potwierdzać"},{"language":"PT","value":"confirme"},{"language":"RO","value":"A confirma"},{"language":"RU","value":"Подтверждать"},{"language":"SE","value":"Vástidit"},{"language":"SH","value":"Potvrdi"},{"language":"SK","value":"Potvrďte"},{"language":"SL","value":"Potrdi"},{"language":"SR","value":"Потврди"},{"language":"SV","value":"Bekräfta"},{"language":"TH","value":"ยืนยัน"},{"language":"TR","value":"Onaylamak"},{"language":"UK","value":"Підтвердити"},{"language":"ZF","value":"確認"},{"language":"ZH","value":"确认"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileButton","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"AppCache.SetPassword();","script":"AppCache.SetPassword();","translation":[]}],"fieldPos":143},{"fieldNo":"d13a3595-9b70-44c4-f6e5-c5e5df7f8e44","fieldName":"AppCache_boxPasscode","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":144},{"fieldNo":"a0fe8a58-92f3-409b-9c85-ee6de5e31368","fieldName":"AppCache_boxLogonPasscode","fieldParent":"d13a3595-9b70-44c4-f6e5-c5e5df7f8e44","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"75%","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":145},{"fieldNo":"9e11118b-e84d-4216-d0f4-02b9fdb2a417","fieldName":"panLogonPasscode","fieldParent":"a0fe8a58-92f3-409b-9c85-ee6de5e31368","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"500px","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPanLogon nepPanLogonBorder","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":146},{"fieldNo":"22cc0495-0f36-45c4-e397-4332cf08db2c","fieldName":"AppCache_formPasscode","fieldParent":"9e11118b-e84d-4216-d0f4-02b9fdb2a417","fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"layout","grouping":"Properties","value":"ResponsiveGridLayout","script":"","translation":[]},{"attribute":"labelSpanM","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"labelSpanL","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"editable","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":147},{"fieldNo":"8f979d4d-bb4e-454c-f207-b7ffc0f5a44b","fieldName":"lblFormPasscode","fieldParent":"22cc0495-0f36-45c4-e397-4332cf08db2c","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBottom","script":"","translation":[]}],"fieldPos":148},{"fieldNo":"36e6e29e-4ce7-4912-c893-4388d28279bb","fieldName":"txtFormPasscode","fieldParent":"22cc0495-0f36-45c4-e397-4332cf08db2c","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H2","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Pin Code","script":"","translation":[{"language":"AF","value":"PIN-kode"},{"language":"AR","value":"الرمز السري"},{"language":"BG","value":"ПИН код"},{"language":"CA","value":"Codi PIN"},{"language":"CS","value":"PIN kód"},{"language":"DA","value":"Pinkode"},{"language":"DE","value":"PIN Code"},{"language":"EL","value":"Κωδικό PIN"},{"language":"EN","value":"Pin Code"},{"language":"ES","value":"Código PIN"},{"language":"ET","value":"PIN-koodi"},{"language":"FI","value":"Pin-koodi"},{"language":"FR","value":"Code PIN"},{"language":"HE","value":"קוד סודי"},{"language":"HR","value":"PIN kod"},{"language":"HU","value":"PIN-kód"},{"language":"ID","value":"Kode PIN"},{"language":"IS","value":"PIN númer"},{"language":"IT","value":"Codice PIN"},{"language":"JA","value":"ピンコード"},{"language":"KO","value":"핀 코드"},{"language":"LT","value":"PIN kodas"},{"language":"LV","value":"PIN kods"},{"language":"MS","value":"Kod PIN"},{"language":"NL","value":"Pincode"},{"language":"NN","value":"PIN-kode"},{"language":"NO","value":"Pinkode"},{"language":"PL","value":"Kod PIN"},{"language":"PT","value":"Código PIN"},{"language":"RO","value":"Cod PIN"},{"language":"RU","value":"Пин-код"},{"language":"SE","value":"Pin-kode"},{"language":"SH","value":"Pin kod"},{"language":"SK","value":"PIN kód"},{"language":"SL","value":"PIN koda"},{"language":"SR","value":"Пин код"},{"language":"SV","value":"Pinkod"},{"language":"TH","value":"รหัสพิน"},{"language":"TR","value":"Pin Kodu"},{"language":"UK","value":"PIN-код"},{"language":"ZF","value":"PIN碼"},{"language":"ZH","value":"PIN码"}]},{"attribute":"styleClassVisibility","grouping":"Properties","value":"sapUiHideOnPhone","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileTitle","script":"","translation":[]}],"fieldPos":149},{"fieldNo":"6247aa2d-ed4c-4373-a42c-2e5870fe9676","fieldName":"AppCache_lblPasscode1","fieldParent":"22cc0495-0f36-45c4-e397-4332cf08db2c","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Set Pin","script":"","translation":[{"language":"AF","value":"Stel Pin"},{"language":"AR","value":"تعيين دبوس"},{"language":"BG","value":"Задайте ПИН"},{"language":"CA","value":"Estableix el Pin"},{"language":"CS","value":"Nastavit PIN"},{"language":"DA","value":"Indstil pin"},{"language":"DE","value":"PIN setzen"},{"language":"EL","value":"Ρύθμιση καρφίτσας"},{"language":"EN","value":"Set Pin"},{"language":"ES","value":"Establecer pin"},{"language":"ET","value":"Määra PIN"},{"language":"FI","value":"Aseta Pin"},{"language":"FR","value":"Définir la broche"},{"language":"HE","value":"הגדר סיכה"},{"language":"HR","value":"Postavi Pin"},{"language":"HU","value":"Set Pin"},{"language":"ID","value":"Tetapkan Pin"},{"language":"IS","value":"Settu pinna"},{"language":"IT","value":"Imposta perno"},{"language":"JA","value":"ピンを設定する"},{"language":"KO","value":"핀 설정"},{"language":"LT","value":"Nustatyti PIN kodą"},{"language":"LV","value":"Iestatīt Pin"},{"language":"MS","value":"Tetapkan Pin"},{"language":"NL","value":"Pin instellen"},{"language":"NN","value":"Sett PIN"},{"language":"NO","value":"Sett pin"},{"language":"PL","value":"Ustaw PIN"},{"language":"PT","value":"Definir alfinete"},{"language":"RO","value":"Setați PIN"},{"language":"RU","value":"Установить ПИН-код"},{"language":"SE","value":"Ávkkástallat pin-kode"},{"language":"SH","value":"Postavi pin"},{"language":"SK","value":"Nastaviť PIN"},{"language":"SL","value":"Set Pin"},{"language":"SR","value":"Сет Пин"},{"language":"SV","value":"Ställ in stift"},{"language":"TH","value":"ตั้งพิน"},{"language":"TR","value":"Pimi Ayarla"},{"language":"UK","value":"Встановити PIN-код"},{"language":"ZF","value":"設定PIN碼"},{"language":"ZH","value":"设置引脚"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}],"fieldPos":150},{"fieldNo":"0afa3e55-55d4-4e34-8277-8e428b19b845","fieldName":"AppCache_inPasscode1","fieldParent":"22cc0495-0f36-45c4-e397-4332cf08db2c","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]},{"attribute":"placeholder","grouping":"Properties","value":"Numeric only","script":"","translation":[{"language":"AF","value":"Slegs numeries"},{"language":"AR","value":"رقمية فقط"},{"language":"BG","value":"Само числови"},{"language":"CA","value":"Només numèric"},{"language":"CS","value":"Pouze číselné"},{"language":"DA","value":"Kun numerisk"},{"language":"DE","value":"Nur numerisch"},{"language":"EL","value":"Αριθμητικό μόνο"},{"language":"EN","value":"Numeric only"},{"language":"ES","value":"Solo numérico"},{"language":"ET","value":"Ainult numbriline"},{"language":"FI","value":"Vain numeerinen"},{"language":"FR","value":"Numérique uniquement"},{"language":"HE","value":"מספרי בלבד"},{"language":"HR","value":"Samo numerički"},{"language":"HU","value":"Csak numerikus"},{"language":"ID","value":"Hanya numerik"},{"language":"IS","value":"Aðeins tölur"},{"language":"IT","value":"Solo numerico"},{"language":"JA","value":"数値のみ"},{"language":"KO","value":"숫자만"},{"language":"LT","value":"Tik skaitiniai"},{"language":"LV","value":"Tikai skaitliski"},{"language":"MS","value":"Numerik sahaja"},{"language":"NL","value":"Alleen numeriek"},{"language":"NN","value":"Kun tall"},{"language":"NO","value":"Kun numeriske tegn"},{"language":"PL","value":"Tylko numeryczne"},{"language":"PT","value":"Apenas numérico"},{"language":"RO","value":"Numai numeric"},{"language":"RU","value":"Только числовые значения"},{"language":"SE","value":"Nummiriikkaid álggahus"},{"language":"SH","value":"Samo brojevi"},{"language":"SK","value":"Iba číselné"},{"language":"SL","value":"Samo številčno"},{"language":"SR","value":"Само нумерички"},{"language":"SV","value":"Endast numeriskt"},{"language":"TH","value":"ตัวเลขเท่านั้น"},{"language":"TR","value":"Yalnızca sayısal"},{"language":"UK","value":"Тільки числові"},{"language":"ZF","value":"僅限數字"},{"language":"ZH","value":"仅限数字"}]},{"attribute":"submit","grouping":"Events","value":"onPasscode1Submit()","script":"onPasscode1Submit()","translation":[]},{"attribute":"liveChange","grouping":"Events","value":"this.setValue(sanitizePincode(this.getValue()));","script":"this.setValue(sanitizePincode(this.getValue()));","translation":[]}],"fieldPos":151},{"fieldNo":"a5929851-d5b8-4fa4-a6b6-69a9fb1b18a2","fieldName":"AppCache_lblPasscode2","fieldParent":"22cc0495-0f36-45c4-e397-4332cf08db2c","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Repeat Pin","script":"","translation":[{"language":"AF","value":"Herhaal Pin"},{"language":"AR","value":"كرر الدبوس"},{"language":"BG","value":"Повторете Pin"},{"language":"CA","value":"Repetiu Pin"},{"language":"CS","value":"Opakujte Pin"},{"language":"DA","value":"Gentag Pin"},{"language":"DE","value":"PIN wiederholen"},{"language":"EL","value":"Επαναλάβετε την καρφίτσα"},{"language":"EN","value":"Repeat Pin"},{"language":"ES","value":"Repetir pin"},{"language":"ET","value":"Korda kinnitamist"},{"language":"FI","value":"Toista Pin"},{"language":"FR","value":"Répéter l'épingle"},{"language":"HE","value":"חזור על סיכה"},{"language":"HR","value":"Ponovi Pin"},{"language":"HU","value":"Ismételje meg a Pin"},{"language":"ID","value":"Ulangi Pin"},{"language":"IS","value":"Endurtaktu pinna"},{"language":"IT","value":"Ripeti Pin"},{"language":"JA","value":"リピートピン"},{"language":"KO","value":"핀 반복"},{"language":"LT","value":"Pakartokite PIN kodą"},{"language":"LV","value":"Atkārtojiet piespraušanu"},{"language":"MS","value":"Ulang Pin"},{"language":"NL","value":"Herhaal vastzetten"},{"language":"NN","value":"Gjenta PIN"},{"language":"NO","value":"Gjenta pin"},{"language":"PL","value":"Powtórz Pin"},{"language":"PT","value":"Repetir alfinete"},{"language":"RO","value":"Repetați PIN"},{"language":"RU","value":"Повторить пин"},{"language":"SE","value":"Bargat pin-kode"},{"language":"SH","value":"Ponovi pin"},{"language":"SK","value":"Opakujte Pin"},{"language":"SL","value":"Ponovi Pin"},{"language":"SR","value":"Поновите Пин"},{"language":"SV","value":"Upprepa stift"},{"language":"TH","value":"ทำซ้ำพิน"},{"language":"TR","value":"Pini Tekrarla"},{"language":"UK","value":"Повторити Pin"},{"language":"ZF","value":"重複PIN碼"},{"language":"ZH","value":"重复引脚"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}],"fieldPos":152},{"fieldNo":"23126457-393c-4305-a22c-ebbfe1316ae2","fieldName":"AppCache_inPasscode2","fieldParent":"22cc0495-0f36-45c4-e397-4332cf08db2c","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]},{"attribute":"placeholder","grouping":"Properties","value":"Numeric only","script":"","translation":[{"language":"AF","value":"Slegs numeries"},{"language":"AR","value":"رقمية فقط"},{"language":"BG","value":"Само числови"},{"language":"CA","value":"Només numèric"},{"language":"CS","value":"Pouze číselné"},{"language":"DA","value":"Kun numerisk"},{"language":"DE","value":"Nur numerisch"},{"language":"EL","value":"Αριθμητικό μόνο"},{"language":"EN","value":"Numeric only"},{"language":"ES","value":"Solo numérico"},{"language":"ET","value":"Ainult numbriline"},{"language":"FI","value":"Vain numeerinen"},{"language":"FR","value":"Numérique uniquement"},{"language":"HE","value":"מספרי בלבד"},{"language":"HR","value":"Samo numerički"},{"language":"HU","value":"Csak numerikus"},{"language":"ID","value":"Hanya numerik"},{"language":"IS","value":"Aðeins tölur"},{"language":"IT","value":"Solo numerico"},{"language":"JA","value":"数値のみ"},{"language":"KO","value":"숫자만"},{"language":"LT","value":"Tik skaitiniai"},{"language":"LV","value":"Tikai skaitliski"},{"language":"MS","value":"Numerik sahaja"},{"language":"NL","value":"Alleen numeriek"},{"language":"NN","value":"Kun tall"},{"language":"NO","value":"Kun numeriske tegn"},{"language":"PL","value":"Tylko numeryczne"},{"language":"PT","value":"Somente numérico"},{"language":"RO","value":"Numai numeric"},{"language":"RU","value":"Только числовые значения"},{"language":"SE","value":"Nummiriikkaid álggahus"},{"language":"SH","value":"Samo brojevi"},{"language":"SK","value":"Iba číselné"},{"language":"SL","value":"Samo številčno"},{"language":"SR","value":"Само нумерички"},{"language":"SV","value":"Endast numeriskt"},{"language":"TH","value":"ตัวเลขเท่านั้น"},{"language":"TR","value":"Yalnızca sayısal"},{"language":"UK","value":"Тільки числові"},{"language":"ZF","value":"僅限數字"},{"language":"ZH","value":"仅限数字"}]},{"attribute":"submit","grouping":"Events","value":"onPasscode2Submit();","script":"onPasscode2Submit();","translation":[]},{"attribute":"liveChange","grouping":"Events","value":"this.setValue(sanitizePincode(this.getValue()));","script":"this.setValue(sanitizePincode(this.getValue()));","translation":[]}],"fieldPos":153},{"fieldNo":"6e2f2b51-5455-402a-c21d-b15581122aad","fieldName":"AppCache_butPasscode","fieldParent":"22cc0495-0f36-45c4-e397-4332cf08db2c","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"150px","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Confirm","script":"","translation":[{"language":"AF","value":"Bevestig"},{"language":"AR","value":"يتأكد"},{"language":"BG","value":"Потвърдете"},{"language":"CA","value":"Confirmeu"},{"language":"CS","value":"Potvrdit"},{"language":"DA","value":"Bekræfte"},{"language":"DE","value":"Bestätigen"},{"language":"EL","value":"Επιβεβαιώνω"},{"language":"EN","value":"Confirm"},{"language":"ES","value":"Confirmar"},{"language":"ET","value":"Kinnita"},{"language":"FI","value":"Vahvistaa"},{"language":"FR","value":"Confirmer"},{"language":"HE","value":"לְאַשֵׁר"},{"language":"HR","value":"Potvrdi"},{"language":"HU","value":"megerősít"},{"language":"ID","value":"Mengonfirmasi"},{"language":"IS","value":"Staðfesta"},{"language":"IT","value":"Confermare"},{"language":"JA","value":"確認する"},{"language":"KO","value":"확인하다"},{"language":"LT","value":"Patvirtinti"},{"language":"LV","value":"Apstiprināt"},{"language":"MS","value":"sahkan"},{"language":"NL","value":"Bevestigen"},{"language":"NN","value":"Bekreft"},{"language":"NO","value":"Bekreft"},{"language":"PL","value":"Potwierdzać"},{"language":"PT","value":"confirme"},{"language":"RO","value":"A confirma"},{"language":"RU","value":"Подтверждать"},{"language":"SE","value":"Vástidit"},{"language":"SH","value":"Potvrdi"},{"language":"SK","value":"Potvrďte"},{"language":"SL","value":"Potrdi"},{"language":"SR","value":"Потврди"},{"language":"SV","value":"Bekräfta"},{"language":"TH","value":"ยืนยัน"},{"language":"TR","value":"Onaylamak"},{"language":"UK","value":"Підтвердити"},{"language":"ZF","value":"確認"},{"language":"ZH","value":"确认"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileButton","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"AppCache.SetPasscode();","script":"AppCache.SetPasscode();","translation":[]}],"fieldPos":154},{"fieldNo":"f0d4c765-85e6-40a6-a42a-3bb2051a07d8","fieldName":"panLinksPass","fieldParent":"9e11118b-e84d-4216-d0f4-02b9fdb2a417","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPanLinks","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":155},{"fieldNo":"6b8c4bf4-65f8-4301-b74a-f9e69009848c","fieldName":"toolLinksPass","fieldParent":"f0d4c765-85e6-40a6-a42a-3bb2051a07d8","fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepLinkNoBorder","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}],"fieldPos":156},{"fieldNo":"cd800b93-88ec-4978-9962-c68e9609ed9c","fieldName":"linkPassText1","fieldParent":"6b8c4bf4-65f8-4301-b74a-f9e69009848c","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin1);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin1);","translation":[]}],"fieldPos":157},{"fieldNo":"31fe8267-fd31-4ec6-eb31-b99fb2d05a5c","fieldName":"linkPassSep1","fieldParent":"6b8c4bf4-65f8-4301-b74a-f9e69009848c","fieldType":"sap.m.ToolbarSeparator","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":158},{"fieldNo":"b3cb068d-0a96-48ba-d2c5-33f7c6c25699","fieldName":"linkPassText2","fieldParent":"6b8c4bf4-65f8-4301-b74a-f9e69009848c","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin2);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin2);","translation":[]}],"fieldPos":159},{"fieldNo":"0ea977d0-02d1-461f-97f3-4e1685e9a81d","fieldName":"linkPassSep2","fieldParent":"6b8c4bf4-65f8-4301-b74a-f9e69009848c","fieldType":"sap.m.ToolbarSeparator","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":160},{"fieldNo":"ed09c2d2-41f4-4bd4-b10b-f7da55d2d3f8","fieldName":"linkPassText3","fieldParent":"6b8c4bf4-65f8-4301-b74a-f9e69009848c","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin3);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin3);","translation":[]}],"fieldPos":161},{"fieldNo":"ec9721ad-4ad3-4b01-cb2e-f8c2c6599cb9","fieldName":"AppCache_boxUsers","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":162},{"fieldNo":"b70baafb-1af2-498d-a985-7834c1e3ed36","fieldName":"AppCache_boxLogonUsers","fieldParent":"ec9721ad-4ad3-4b01-cb2e-f8c2c6599cb9","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":163},{"fieldNo":"02c6f854-be53-41cc-de4c-3f9ca608f8bc","fieldName":"panLogonUsers","fieldParent":"b70baafb-1af2-498d-a985-7834c1e3ed36","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"500px","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPanLogon nepPanLogonBorder","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":164},{"fieldNo":"d662eae5-3c14-4f0b-8153-dcba45267e4b","fieldName":"toolUsers","fieldParent":"02c6f854-be53-41cc-de4c-3f9ca608f8bc","fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepToolNoBorder","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}],"fieldPos":165},{"fieldNo":"2659f3ba-b3db-46fb-82e2-d994211fc83e","fieldName":"txtFormUsers","fieldParent":"d662eae5-3c14-4f0b-8153-dcba45267e4b","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H2","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Users","script":"","translation":[{"language":"AF","value":"Gebruikers"},{"language":"AR","value":"المستخدمين"},{"language":"BG","value":"Потребители"},{"language":"CA","value":"Usuaris"},{"language":"CS","value":"Uživatelé"},{"language":"DA","value":"Brugere"},{"language":"DE","value":"Benutzer"},{"language":"EL","value":"Χρήστες"},{"language":"EN","value":"Users"},{"language":"ES","value":"Usuarios"},{"language":"ET","value":"Kasutajad"},{"language":"FI","value":"Käyttäjät"},{"language":"FR","value":"Utilisateurs"},{"language":"HE","value":"משתמשים"},{"language":"HR","value":"Korisnici"},{"language":"HU","value":"Felhasználók"},{"language":"ID","value":"Pengguna"},{"language":"IS","value":"Notendur"},{"language":"IT","value":"Utenti"},{"language":"JA","value":"ユーザー"},{"language":"KO","value":"사용자"},{"language":"LT","value":"Vartotojai"},{"language":"LV","value":"Lietotāji"},{"language":"MS","value":"Pengguna"},{"language":"NL","value":"Gebruikers"},{"language":"NN","value":"Brukere"},{"language":"NO","value":"Brukere"},{"language":"PL","value":"Użytkownicy"},{"language":"PT","value":"Usuários"},{"language":"RO","value":"Utilizatori"},{"language":"RU","value":"Пользователи"},{"language":"SE","value":"Geavaheaddjit"},{"language":"SH","value":"Korisnici"},{"language":"SK","value":"Používatelia"},{"language":"SL","value":"Uporabniki"},{"language":"SR","value":"Корисници"},{"language":"SV","value":"Användare"},{"language":"TH","value":"ผู้ใช้"},{"language":"TR","value":"Kullanıcılar"},{"language":"UK","value":"Користувачі"},{"language":"ZF","value":"使用者"},{"language":"ZH","value":"用户"}]},{"attribute":"styleClassVisibility","grouping":"Properties","value":"sapUiHideOnPhone","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginTopBottom","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileTitle","script":"","translation":[]}],"fieldPos":166},{"fieldNo":"ba39231c-1ca1-416a-fe03-33eb85340ef7","fieldName":"toolUsersSpacer","fieldParent":"d662eae5-3c14-4f0b-8153-dcba45267e4b","fieldType":"sap.m.ToolbarSpacer","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":167},{"fieldNo":"483d90dc-7b00-4355-d249-83dd4755dd0e","fieldName":"toolUsersSort","fieldParent":"d662eae5-3c14-4f0b-8153-dcba45267e4b","fieldType":"sap.m.SegmentedButton","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"select","grouping":"Events","value":"Anonymous Function","script":"let oSorter;\r\nif (this.getSelectedKey() === 'date') {\r\n    oSorter = new sap.ui.model.Sorter('lastLogin', true, false);\r\n} else {\r\n    oSorter = new sap.ui.model.Sorter('username', false, false);\r\n}\r\n\r\nlet binding = AppCacheUsers.getBinding('items');\r\nbinding.sort(oSorter);","translation":[]}],"fieldPos":168},{"fieldNo":"2bc15a13-a7ab-4426-f9eb-3a5cbe16d566","fieldName":"toolUsersSortName","fieldParent":"483d90dc-7b00-4355-d249-83dd4755dd0e","fieldType":"sap.m.SegmentedButtonItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Name","script":"","translation":[{"language":"AF","value":"Naam"},{"language":"AR","value":"اسم"},{"language":"BG","value":"Име"},{"language":"CA","value":"Nom"},{"language":"CS","value":"název"},{"language":"DA","value":"Navn"},{"language":"DE","value":"Name"},{"language":"EL","value":"Ονομα"},{"language":"EN","value":"Name"},{"language":"ES","value":"Nombre"},{"language":"ET","value":"Nimi"},{"language":"FI","value":"Nimi"},{"language":"FR","value":"Nom"},{"language":"HE","value":"שֵׁם"},{"language":"HR","value":"Ime"},{"language":"HU","value":"Név"},{"language":"ID","value":"Nama"},{"language":"IS","value":"Nafn"},{"language":"IT","value":"Nome"},{"language":"JA","value":"名前"},{"language":"KO","value":"이름"},{"language":"LT","value":"vardas"},{"language":"LV","value":"Vārds"},{"language":"MS","value":"Nama"},{"language":"NL","value":"Naam"},{"language":"NN","value":"Navn"},{"language":"NO","value":"Navn"},{"language":"PL","value":"Nazwa"},{"language":"PT","value":"Nome"},{"language":"RO","value":"Nume"},{"language":"RU","value":"Имя"},{"language":"SE","value":"Namahusat"},{"language":"SH","value":"Ime"},{"language":"SK","value":"názov"},{"language":"SL","value":"Ime"},{"language":"SR","value":"Име"},{"language":"SV","value":"namn"},{"language":"TH","value":"ชื่อ"},{"language":"TR","value":"İsim"},{"language":"UK","value":"Ім'я"},{"language":"ZF","value":"名稱"},{"language":"ZH","value":"姓名"}]},{"attribute":"key","grouping":"Properties","value":"name","script":"","translation":[]}],"fieldPos":169},{"fieldNo":"393cdf58-85d5-4103-9801-091a74bf229b","fieldName":"toolUsersSortDate","fieldParent":"483d90dc-7b00-4355-d249-83dd4755dd0e","fieldType":"sap.m.SegmentedButtonItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Date","script":"","translation":[{"language":"AF","value":"Datum"},{"language":"AR","value":"تاريخ"},{"language":"BG","value":"Дата"},{"language":"CA","value":"Data"},{"language":"CS","value":"datum"},{"language":"DA","value":"Dato"},{"language":"DE","value":"Datum"},{"language":"EL","value":"Ημερομηνία"},{"language":"EN","value":"Date"},{"language":"ES","value":"Fecha"},{"language":"ET","value":"Kuupäev"},{"language":"FI","value":"Päivämäärä"},{"language":"FR","value":"Date"},{"language":"HE","value":"תַאֲרִיך"},{"language":"HR","value":"Datum"},{"language":"HU","value":"Dátum"},{"language":"ID","value":"Tanggal"},{"language":"IS","value":"Dagsetning"},{"language":"IT","value":"Data"},{"language":"JA","value":"日付"},{"language":"KO","value":"날짜"},{"language":"LT","value":"Data"},{"language":"LV","value":"Datums"},{"language":"MS","value":"Tarikh"},{"language":"NL","value":"Datum"},{"language":"NN","value":"Dato"},{"language":"NO","value":"Dato"},{"language":"PL","value":"Data"},{"language":"PT","value":"Data"},{"language":"RO","value":"Data"},{"language":"RU","value":"Дата"},{"language":"SE","value":"Dátum"},{"language":"SH","value":"Datum"},{"language":"SK","value":"Dátum"},{"language":"SL","value":"Datum"},{"language":"SR","value":"Датум"},{"language":"SV","value":"Datum"},{"language":"TH","value":"วันที่"},{"language":"TR","value":"Tarih"},{"language":"UK","value":"Дата"},{"language":"ZF","value":"日期"},{"language":"ZH","value":"日期"}]},{"attribute":"key","grouping":"Properties","value":"date","script":"","translation":[]}],"fieldPos":170},{"fieldNo":"1e27a622-ff0a-4e74-8169-264995ec79d8","fieldName":"toolUsersFilter","fieldParent":"d662eae5-3c14-4f0b-8153-dcba45267e4b","fieldType":"sap.m.SearchField","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"150px","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginEnd","script":"","translation":[]},{"attribute":"liveChange","grouping":"Events","value":"Anonymous Function","script":"let binding = AppCacheUsers.getBinding('items');\r\nlet filter = new sap.ui.model.Filter('username', 'Contains', this.getValue());\r\nbinding.filter([filter]);","translation":[]}],"fieldPos":171},{"fieldNo":"83beb2ac-f2b9-4f3e-9e2d-f3eb55261ae6","fieldName":"AppCacheUserScroll","fieldParent":"02c6f854-be53-41cc-de4c-3f9ca608f8bc","fieldType":"sap.m.ScrollContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"vertical","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"horizontal","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"600px","script":"","translation":[]}],"fieldPos":172},{"fieldNo":"8d2710b0-6934-48ef-a056-d2c33b5becc7","fieldName":"AppCacheUsers","fieldParent":"83beb2ac-f2b9-4f3e-9e2d-f3eb55261ae6","fieldType":"sap.m.List","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepAppCacheUser","script":"","translation":[]},{"attribute":"showNoData","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"rememberSelections","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"mode","grouping":"Properties","value":"Delete","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Solid","script":"","translation":[]},{"attribute":"setEnableEncryption","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"LocalStorage","script":"","translation":[]},{"attribute":"delete","grouping":"Events","value":"Anonymous Function","script":"let deleteItem = oEvent.getParameter('listItem');\nlet context = deleteItem.getBindingContext();\nlet data = context.getObject();\n\nModelData.Delete(AppCacheUsers, ['username', 'logonData/type'], [data.username, data.logonData.type]);\nsetCacheAppCacheUsers();\n\n// Remove iOS SAMKeychain library and Android SecureStorage key\nif (typeof window.cordova !== 'undefined' && !window.navigator.simulator && data.biometric) {\n    if (sap.ui.Device.os.ios || sap.ui.Device.os.android) {\n        // Set iOS SAMKeychain library and Android SecureStorage key\n        let servicekey = data.username.toString().toUpperCase();\n\n        // Delete SecureStorage key\n        if (typeof cordova.plugins !== 'undefined' && cordova.plugins.SecureStorage) {\n            let ss = new cordova.plugins.SecureStorage(\n                function () {\n                    try {\n                        ss.remove(function (key) { }, function (error) { }, servicekey);\n                    } catch (error) { }\n                },\n                function (error) { },\n                AppCache.AppID);\n        }\n\n        // FingerprintAuth.delete\n        if (window.FingerprintAuth) {\n            try {\n                FingerprintAuth.delete({\n                    clientId: AppCache.AppID,\n                    username: servicekey\n                }, function (result) {\n\n                }, function (error) {\n\n                });\n            } catch (error) {\n\n            }\n        }\n    }\n}\n\ntoolUsersFilter.setValue();\ntoolUsersFilter.fireLiveChange();\nAppCache.calculateUserScreen();\n\n// No User -> Logon Screen\nif (!modelAppCacheUsers.oData.length) AppCache.setEnableLogonScreen();","translation":[]},{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"cacheLoaded++;","script":"cacheLoaded++;","translation":[]}],"fieldPos":173},{"fieldNo":"984858e0-bca3-46b3-ec50-70479225716b","fieldName":"AppCache_itemUsers","fieldParent":"8d2710b0-6934-48ef-a056-d2c33b5becc7","fieldType":"sap.m.ObjectListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"{username}","script":"","translation":[]},{"attribute":"numberState","grouping":"Properties","value":"Warning","script":"","translation":[]},{"attribute":"iconDensityAware","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const ctx = oEvent.oSource.getBindingContext();\nconst data = ctx.getObject();\n\nAppCache.userInfo = data;\n\n// PWA - Webauthn\nif (\n    isPWAEnabled() && \n    AppCache.enablePasscode && \n    AppCache.userInfo.webauthid && \n    (window.PublicKeyCredential !== undefined || typeof window.PublicKeyCredential === 'function')\n) {\n    sap.n.Webauthn.login(AppCache.userInfo.webauthid)\n        .then(function (res) {\n            // check if response is an error\n            if (res instanceof Error) {\n                return;\n            }\n\n            if (res instanceof window.PublicKeyCredential) {\n                const {\n                    response: {\n                        authenticatorData: a, clientDataJSON: c, signature: s, userHandle: u\n                    }\n                } = res;\n\n                const clientData = JSON.parse(new TextDecoder('utf-8').decode(c));\n                if (clientData.type !== 'webauthn.get') return;\n                \n                NumPad.numValue = AppCache.userInfo.webauthid;\n                AppCache.Encrypted = '';\n                NumPad.Logon();\n                \n                AppCacheShellUser.setEnabled(true);\n                AppCache.setUserInfo();\n                AutoLockTimer.start();\n            }\n        });\n} else {\n    AppCache.setEnablePasscodeEntry();\n}\n\n// Unselect\nAppCacheUsers.removeSelections();\n","translation":[]},{"attribute":"title","grouping":"Formatter","value":"Anonymous Function","script":"let user = ModelData.FindFirst(AppCacheUsers, 'username', username);\r\nreturn user && user.name ? user.name : username;\r\n","translation":[]}],"fieldPos":174},{"fieldNo":"7f0e8a0d-30eb-4844-ac7a-759767a21f13","fieldName":"AppCache_itemUsersDate","fieldParent":"984858e0-bca3-46b3-ec50-70479225716b","fieldType":"sap.m.ObjectAttribute","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"Last Login","script":"","translation":[{"language":"AF","value":"Laaste aanmelding"},{"language":"AR","value":"آخر تسجيل دخول"},{"language":"BG","value":"Последно влизане"},{"language":"CA","value":"Últim inici de sessió"},{"language":"CS","value":"Poslední přihlášení"},{"language":"DA","value":"Sidste login"},{"language":"DE","value":"Letzte Anmeldung"},{"language":"EL","value":"Τελευταία είσοδος"},{"language":"EN","value":"Last Login"},{"language":"ES","value":"Último acceso"},{"language":"ET","value":"Viimane sisselogimine"},{"language":"FI","value":"Viimeinen kirjautuminen"},{"language":"FR","value":"Dernière connexion"},{"language":"HE","value":"כניסה אחרונה"},{"language":"HR","value":"Zadnja prijava"},{"language":"HU","value":"Utolsó bejelentkezés"},{"language":"ID","value":"Login terakhir"},{"language":"IS","value":"Síðasta innskráning"},{"language":"IT","value":"Ultimo accesso"},{"language":"JA","value":"前回のログイン"},{"language":"KO","value":"마지막 로그인"},{"language":"LT","value":"Paskutinis prisijungimas"},{"language":"LV","value":"Pēdējā pieteikšanās"},{"language":"MS","value":"Log masuk kali terakhir"},{"language":"NL","value":"Laatste aanmelding"},{"language":"NN","value":"Siste innlogging"},{"language":"NO","value":"Siste innlogging"},{"language":"PL","value":"Ostatnie logowanie"},{"language":"PT","value":"Último Login"},{"language":"RO","value":"Ultima logare"},{"language":"RU","value":"Последний Войти"},{"language":"SE","value":"Dáppe logget sisa"},{"language":"SH","value":"Poslednja prijava"},{"language":"SK","value":"Posledné prihlásenie"},{"language":"SL","value":"Zadnja prijava"},{"language":"SR","value":"Последње пријављивање"},{"language":"SV","value":"Senaste inloggning"},{"language":"TH","value":"เข้าสู่ระบบครั้งล่าสุด"},{"language":"TR","value":"Son giriş"},{"language":"UK","value":"Останній вхід"},{"language":"ZF","value":"上次登入"},{"language":"ZH","value":"上次登录"}]},{"attribute":"text","grouping":"Properties","value":"{lastLogin}","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiNoMargin","script":"","translation":[]},{"attribute":"text","grouping":"Formatter","value":"date:BrowserSetting","script":"","translation":[]}],"fieldPos":175},{"fieldNo":"4e86797e-22b4-4c98-e19d-87577dd311fe","fieldName":"AppCache_butNewUser","fieldParent":"02c6f854-be53-41cc-de4c-3f9ca608f8bc","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"150px","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Login New User","script":"","translation":[{"language":"AF","value":"Teken in Nuwe gebruiker"},{"language":"AR","value":"تسجيل الدخول مستخدم جديد"},{"language":"BG","value":"Вход Нов потребител"},{"language":"CA","value":"Inicieu sessió nou usuari"},{"language":"CS","value":"Přihlásit Nový uživatel"},{"language":"DA","value":"Log på"},{"language":"DE","value":"Einloggen"},{"language":"EL","value":"Είσοδος Νέος Χρήστης"},{"language":"EN","value":"Login new user"},{"language":"ES","value":"Iniciar sesión Nuevo usuario"},{"language":"ET","value":"Logi sisse Uus kasutaja"},{"language":"FI","value":"Kirjaudu sisään Uusi käyttäjä"},{"language":"FR","value":"Connexion nouvel utilisateur"},{"language":"HE","value":"התחבר משתמש חדש"},{"language":"HR","value":"Prijava Novi korisnik"},{"language":"HU","value":"Bejelentkezés Új felhasználó"},{"language":"ID","value":"Masuk Pengguna Baru"},{"language":"IS","value":"Innskráning Nýr notandi"},{"language":"IT","value":"Accedi Nuovo utente"},{"language":"JA","value":"新規ユーザーログイン"},{"language":"KO","value":"새로운 사용자 로그인"},{"language":"LT","value":"Prisijungti Naujas vartotojas"},{"language":"LV","value":"Pieteikties Jauns lietotājs"},{"language":"MS","value":"Log Masuk Pengguna Baru"},{"language":"NL","value":"Inloggen nieuwe gebruiker"},{"language":"NN","value":"Logg inn ny bruker"},{"language":"NO","value":"Logg på ny bruker"},{"language":"PL","value":"Zaloguj się jako nowy użytkownik"},{"language":"PT","value":"Entrar novo usuário"},{"language":"RO","value":"Autentificare utilizator nou"},{"language":"RU","value":"Войти Новый пользователь"},{"language":"SE","value":"Logga sisa ođđa geavaheaddji"},{"language":"SH","value":"Prijavi novog korisnika"},{"language":"SK","value":"Prihlásiť sa Nový používateľ"},{"language":"SL","value":"Prijava Nov uporabnik"},{"language":"SR","value":"Пријава новог корисника"},{"language":"SV","value":"Logga in Ny användare"},{"language":"TH","value":"เข้าสู่ระบบผู้ใช้ใหม่"},{"language":"TR","value":"Yeni Kullanıcı Girişi"},{"language":"UK","value":"Вхід Новий користувач"},{"language":"ZF","value":"登入新使用者"},{"language":"ZH","value":"登录 新用户"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileButton","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Launchpad.settingsMenuClose();\nAppCache.Logout();","translation":[]}],"fieldPos":176},{"fieldNo":"2fb0a3bc-383c-43eb-d6cc-cef8b08b1376","fieldName":"panLinksUsers","fieldParent":"02c6f854-be53-41cc-de4c-3f9ca608f8bc","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPanLinks","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":177},{"fieldNo":"3ee8d870-76d1-4497-9b00-a2c1f68b976d","fieldName":"toolLinksUsers","fieldParent":"2fb0a3bc-383c-43eb-d6cc-cef8b08b1376","fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepLinkNoBorder","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}],"fieldPos":178},{"fieldNo":"f6b80cbb-be2a-45b7-81bc-98cfc6144269","fieldName":"linkUsersText1","fieldParent":"3ee8d870-76d1-4497-9b00-a2c1f68b976d","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin1);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin1);","translation":[]}],"fieldPos":179},{"fieldNo":"fe3b1bed-288a-46fc-8756-e7720f8d1371","fieldName":"linkUsersSep1","fieldParent":"3ee8d870-76d1-4497-9b00-a2c1f68b976d","fieldType":"sap.m.ToolbarSeparator","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":180},{"fieldNo":"24f34d36-eb28-487f-a854-efde5b850e20","fieldName":"linkUsersText2","fieldParent":"3ee8d870-76d1-4497-9b00-a2c1f68b976d","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin2);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin2);","translation":[]}],"fieldPos":181},{"fieldNo":"f7af062f-9f17-4b50-de33-0d4ac05de000","fieldName":"linkUsersSep2","fieldParent":"3ee8d870-76d1-4497-9b00-a2c1f68b976d","fieldType":"sap.m.ToolbarSeparator","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":182},{"fieldNo":"d130a684-0c07-4bef-cc49-2be434bd1e79","fieldName":"linkUsersText3","fieldParent":"3ee8d870-76d1-4497-9b00-a2c1f68b976d","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin3);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin3);","translation":[]}],"fieldPos":183},{"fieldNo":"f8bafa5a-8fba-416c-dac9-51a2ab66476a","fieldName":"AppCache_boxPasscodeEntry","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":184},{"fieldNo":"d4db8b5e-73bb-46d0-d783-da09e32af95e","fieldName":"AppCache_boxLogonPasscodeEntry","fieldParent":"f8bafa5a-8fba-416c-dac9-51a2ab66476a","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"75%","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":185},{"fieldNo":"921be91f-4a33-4d34-e83b-e527a479390f","fieldName":"boxNumpadPanel","fieldParent":"d4db8b5e-73bb-46d0-d783-da09e32af95e","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"500px","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPanLogon nepPanLogonBorder","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"busyIndicatorDelay","grouping":"Properties","value":"0","script":"","translation":[]}],"fieldPos":186},{"fieldNo":"bab30c5b-dcee-43af-d794-0c321e28d9f0","fieldName":"boxNumpadContent","fieldParent":"921be91f-4a33-4d34-e83b-e527a479390f","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]}],"fieldPos":187},{"fieldNo":"782ca280-1795-4e59-9189-ee9b4942f910","fieldName":"boxShake","fieldParent":"bab30c5b-dcee-43af-d794-0c321e28d9f0","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":188},{"fieldNo":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldName":"boxNumpad02","fieldParent":"782ca280-1795-4e59-9189-ee9b4942f910","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":189},{"fieldNo":"dea428f3-199a-4707-dba3-9c055e1275a9","fieldName":"Passcode1","fieldParent":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":190},{"fieldNo":"bc27ebbb-db6c-4794-f2cc-734f0f36deff","fieldName":"Passcode2","fieldParent":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":191},{"fieldNo":"cac96322-e7ad-4ac1-9add-ac46aee3fff1","fieldName":"Passcode3","fieldParent":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":192},{"fieldNo":"f9025729-ebf9-4347-d4a7-cb506222fe9c","fieldName":"Passcode4","fieldParent":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":193},{"fieldNo":"b1512e90-7e83-4646-b4c7-ce91a25c65e9","fieldName":"Passcode5","fieldParent":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":194},{"fieldNo":"21a85dab-50c0-4634-9576-bba37a4372da","fieldName":"Passcode6","fieldParent":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":195},{"fieldNo":"4907e9f6-cac1-4f7f-c0f9-786f5b67cdcc","fieldName":"Passcode7","fieldParent":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":196},{"fieldNo":"d3c5b92d-b35c-471e-ebd1-1deb3aac3821","fieldName":"Passcode8","fieldParent":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":197},{"fieldNo":"27729b01-d86b-4eb2-dfcd-35dd3de02044","fieldName":"boxNumpad1","fieldParent":"bab30c5b-dcee-43af-d794-0c321e28d9f0","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":198},{"fieldNo":"294908a6-2378-453c-9977-805039febfeb","fieldName":"butNumpad1","fieldParent":"27729b01-d86b-4eb2-dfcd-35dd3de02044","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"1","script":"","translation":[{"language":"AF","value":"1"},{"language":"BG","value":"1"},{"language":"CA","value":"1"},{"language":"CS","value":"1"},{"language":"EL","value":"1"},{"language":"ES","value":"1"},{"language":"ET","value":"1"},{"language":"FI","value":"1"},{"language":"FR","value":"1"},{"language":"HE","value":"1"},{"language":"HR","value":"1"},{"language":"HU","value":"1"},{"language":"ID","value":"1"},{"language":"IS","value":"1"},{"language":"IT","value":"1"},{"language":"JA","value":"1"},{"language":"KO","value":"1"},{"language":"LT","value":"1"},{"language":"LV","value":"1"},{"language":"MS","value":"1"},{"language":"NL","value":"1"},{"language":"PL","value":"1"},{"language":"PT","value":"1"},{"language":"RO","value":"1"},{"language":"RU","value":"1"},{"language":"SK","value":"1"},{"language":"SL","value":"1"},{"language":"SR","value":"1"},{"language":"SV","value":"1"},{"language":"TH","value":"1"},{"language":"TR","value":"1"},{"language":"UK","value":"1"},{"language":"ZH","value":"1"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(1);","script":"NumPad.enterKey(1);","translation":[]}],"fieldPos":199},{"fieldNo":"15da0f42-4d34-4fb3-cb46-eb396b9c9806","fieldName":"butNumpad2","fieldParent":"27729b01-d86b-4eb2-dfcd-35dd3de02044","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"2","script":"","translation":[{"language":"AF","value":"2"},{"language":"BG","value":"2"},{"language":"CA","value":"2"},{"language":"CS","value":"2"},{"language":"EL","value":"2"},{"language":"ES","value":"2"},{"language":"ET","value":"2"},{"language":"FI","value":"2"},{"language":"FR","value":"2"},{"language":"HE","value":"2"},{"language":"HR","value":"2"},{"language":"HU","value":"2"},{"language":"ID","value":"2"},{"language":"IS","value":"2"},{"language":"IT","value":"2"},{"language":"JA","value":"2"},{"language":"KO","value":"2"},{"language":"LT","value":"2"},{"language":"LV","value":"2"},{"language":"MS","value":"2"},{"language":"NL","value":"2"},{"language":"PL","value":"2"},{"language":"PT","value":"2"},{"language":"RO","value":"2"},{"language":"RU","value":"2"},{"language":"SK","value":"2"},{"language":"SL","value":"2"},{"language":"SR","value":"2"},{"language":"SV","value":"2"},{"language":"TH","value":"2"},{"language":"TR","value":"2"},{"language":"UK","value":"2"},{"language":"ZH","value":"2"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(2);","script":"NumPad.enterKey(2);","translation":[]}],"fieldPos":200},{"fieldNo":"b06cba9a-513c-4b0c-e24c-f61266ab3d01","fieldName":"butNumpad3","fieldParent":"27729b01-d86b-4eb2-dfcd-35dd3de02044","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"3","script":"","translation":[{"language":"AF","value":"3"},{"language":"BG","value":"3"},{"language":"CA","value":"3"},{"language":"CS","value":"3"},{"language":"EL","value":"3"},{"language":"ES","value":"3"},{"language":"ET","value":"3"},{"language":"FI","value":"3"},{"language":"FR","value":"3"},{"language":"HE","value":"3"},{"language":"HR","value":"3"},{"language":"HU","value":"3"},{"language":"ID","value":"3"},{"language":"IS","value":"3"},{"language":"IT","value":"3"},{"language":"JA","value":"3"},{"language":"KO","value":"삼"},{"language":"LT","value":"3"},{"language":"LV","value":"3"},{"language":"MS","value":"3"},{"language":"NL","value":"3"},{"language":"PL","value":"3"},{"language":"PT","value":"3"},{"language":"RO","value":"3"},{"language":"RU","value":"3"},{"language":"SK","value":"3"},{"language":"SL","value":"3"},{"language":"SR","value":"3"},{"language":"SV","value":"3"},{"language":"TH","value":"3"},{"language":"TR","value":"3"},{"language":"UK","value":"3"},{"language":"ZH","value":"3"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(3);","script":"NumPad.enterKey(3);","translation":[]}],"fieldPos":201},{"fieldNo":"d95a4c78-c959-467e-837e-3ad0459e2fea","fieldName":"boxNumpad2","fieldParent":"bab30c5b-dcee-43af-d794-0c321e28d9f0","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":202},{"fieldNo":"98ceed64-92a9-4cfb-b2af-586e80e410dd","fieldName":"butNumpad4","fieldParent":"d95a4c78-c959-467e-837e-3ad0459e2fea","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"4","script":"","translation":[{"language":"AF","value":"4"},{"language":"BG","value":"4"},{"language":"CA","value":"4"},{"language":"CS","value":"4"},{"language":"EL","value":"4"},{"language":"ES","value":"4"},{"language":"ET","value":"4"},{"language":"FI","value":"4"},{"language":"FR","value":"4"},{"language":"HE","value":"4"},{"language":"HR","value":"4"},{"language":"HU","value":"4"},{"language":"ID","value":"4"},{"language":"IS","value":"4"},{"language":"IT","value":"4"},{"language":"JA","value":"4"},{"language":"KO","value":"4"},{"language":"LT","value":"4"},{"language":"LV","value":"4"},{"language":"MS","value":"4"},{"language":"NL","value":"4"},{"language":"PL","value":"4"},{"language":"PT","value":"4"},{"language":"RO","value":"4"},{"language":"RU","value":"4"},{"language":"SK","value":"4"},{"language":"SL","value":"4"},{"language":"SR","value":"4"},{"language":"SV","value":"4"},{"language":"TH","value":"4"},{"language":"TR","value":"4"},{"language":"UK","value":"4"},{"language":"ZH","value":"4"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(4);","script":"NumPad.enterKey(4);","translation":[]}],"fieldPos":203},{"fieldNo":"351ed9b7-193e-4d3e-acf5-53d6c3f055f7","fieldName":"butNumpad5","fieldParent":"d95a4c78-c959-467e-837e-3ad0459e2fea","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"5","script":"","translation":[{"language":"AF","value":"5"},{"language":"BG","value":"5"},{"language":"CA","value":"5"},{"language":"CS","value":"5"},{"language":"EL","value":"5"},{"language":"ES","value":"5"},{"language":"ET","value":"5"},{"language":"FI","value":"5"},{"language":"FR","value":"5"},{"language":"HE","value":"5"},{"language":"HR","value":"5"},{"language":"HU","value":"5"},{"language":"ID","value":"5"},{"language":"IS","value":"5"},{"language":"IT","value":"5"},{"language":"JA","value":"5"},{"language":"KO","value":"5"},{"language":"LT","value":"5"},{"language":"LV","value":"5"},{"language":"MS","value":"5"},{"language":"NL","value":"5"},{"language":"PL","value":"5"},{"language":"PT","value":"5"},{"language":"RO","value":"5"},{"language":"RU","value":"5"},{"language":"SK","value":"5"},{"language":"SL","value":"5"},{"language":"SR","value":"5"},{"language":"SV","value":"5"},{"language":"TH","value":"5"},{"language":"TR","value":"5"},{"language":"UK","value":"5"},{"language":"ZH","value":"5"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(5);","script":"NumPad.enterKey(5);","translation":[]}],"fieldPos":204},{"fieldNo":"094d36d6-c519-420d-ed41-faace1316db8","fieldName":"butNumpad6","fieldParent":"d95a4c78-c959-467e-837e-3ad0459e2fea","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"6","script":"","translation":[{"language":"AF","value":"6"},{"language":"BG","value":"6"},{"language":"CA","value":"6"},{"language":"CS","value":"6"},{"language":"EL","value":"6"},{"language":"ES","value":"6"},{"language":"ET","value":"6"},{"language":"FI","value":"6"},{"language":"FR","value":"6"},{"language":"HE","value":"6"},{"language":"HR","value":"6"},{"language":"HU","value":"6"},{"language":"ID","value":"6"},{"language":"IS","value":"6"},{"language":"IT","value":"6"},{"language":"JA","value":"6"},{"language":"KO","value":"6"},{"language":"LT","value":"6"},{"language":"LV","value":"6"},{"language":"MS","value":"6"},{"language":"NL","value":"6"},{"language":"PL","value":"6"},{"language":"PT","value":"6"},{"language":"RO","value":"6"},{"language":"RU","value":"6"},{"language":"SK","value":"6"},{"language":"SL","value":"6"},{"language":"SR","value":"6"},{"language":"SV","value":"6"},{"language":"TH","value":"6"},{"language":"TR","value":"6"},{"language":"UK","value":"6"},{"language":"ZH","value":"6"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(6);","script":"NumPad.enterKey(6);","translation":[]}],"fieldPos":205},{"fieldNo":"22e7f3d1-4284-4740-e9cb-f6d696ec4529","fieldName":"boxNumpad3","fieldParent":"bab30c5b-dcee-43af-d794-0c321e28d9f0","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":206},{"fieldNo":"64db5d61-2467-4856-c01f-935e6b55fda5","fieldName":"butNumpad7","fieldParent":"22e7f3d1-4284-4740-e9cb-f6d696ec4529","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"7","script":"","translation":[{"language":"AF","value":"7"},{"language":"BG","value":"7"},{"language":"CA","value":"7"},{"language":"CS","value":"7"},{"language":"EL","value":"7"},{"language":"ES","value":"7"},{"language":"ET","value":"7"},{"language":"FI","value":"7"},{"language":"FR","value":"7"},{"language":"HE","value":"7"},{"language":"HR","value":"7"},{"language":"HU","value":"7"},{"language":"ID","value":"7"},{"language":"IS","value":"7"},{"language":"IT","value":"7"},{"language":"JA","value":"7"},{"language":"KO","value":"7"},{"language":"LT","value":"7"},{"language":"LV","value":"7"},{"language":"MS","value":"7"},{"language":"NL","value":"7"},{"language":"PL","value":"7"},{"language":"PT","value":"7"},{"language":"RO","value":"7"},{"language":"RU","value":"7"},{"language":"SK","value":"7"},{"language":"SL","value":"7"},{"language":"SR","value":"7"},{"language":"SV","value":"7"},{"language":"TH","value":"7"},{"language":"TR","value":"7"},{"language":"UK","value":"7"},{"language":"ZH","value":"7"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(7);","script":"NumPad.enterKey(7);","translation":[]}],"fieldPos":207},{"fieldNo":"d9d5c7a5-b159-4a17-f9f5-95b0bfb98d54","fieldName":"butNumpad8","fieldParent":"22e7f3d1-4284-4740-e9cb-f6d696ec4529","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"8","script":"","translation":[{"language":"AF","value":"8"},{"language":"BG","value":"8"},{"language":"CA","value":"8"},{"language":"CS","value":"8"},{"language":"EL","value":"8"},{"language":"ES","value":"8"},{"language":"ET","value":"8"},{"language":"FI","value":"8"},{"language":"FR","value":"8"},{"language":"HE","value":"8"},{"language":"HR","value":"8"},{"language":"HU","value":"8"},{"language":"ID","value":"8"},{"language":"IS","value":"8"},{"language":"IT","value":"8"},{"language":"JA","value":"8"},{"language":"KO","value":"8"},{"language":"LT","value":"8"},{"language":"LV","value":"8"},{"language":"MS","value":"8"},{"language":"NL","value":"8"},{"language":"PL","value":"8"},{"language":"PT","value":"8"},{"language":"RO","value":"8"},{"language":"RU","value":"8"},{"language":"SK","value":"8"},{"language":"SL","value":"8"},{"language":"SR","value":"8"},{"language":"SV","value":"8"},{"language":"TH","value":"8"},{"language":"TR","value":"8"},{"language":"UK","value":"8"},{"language":"ZH","value":"8"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(8);","script":"NumPad.enterKey(8);","translation":[]}],"fieldPos":208},{"fieldNo":"d1b6929e-34d4-419a-983b-a1a2de5ce044","fieldName":"butNumpad9","fieldParent":"22e7f3d1-4284-4740-e9cb-f6d696ec4529","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"9","script":"","translation":[{"language":"AF","value":"9"},{"language":"BG","value":"9"},{"language":"CA","value":"9"},{"language":"CS","value":"9"},{"language":"EL","value":"9"},{"language":"ES","value":"9"},{"language":"ET","value":"9"},{"language":"FI","value":"9"},{"language":"FR","value":"9"},{"language":"HE","value":"9"},{"language":"HR","value":"9"},{"language":"HU","value":"9"},{"language":"ID","value":"9"},{"language":"IS","value":"9"},{"language":"IT","value":"9"},{"language":"JA","value":"9"},{"language":"KO","value":"9"},{"language":"LT","value":"9"},{"language":"LV","value":"9"},{"language":"MS","value":"9"},{"language":"NL","value":"9"},{"language":"PL","value":"9"},{"language":"PT","value":"9"},{"language":"RO","value":"9"},{"language":"RU","value":"9"},{"language":"SK","value":"9"},{"language":"SL","value":"9"},{"language":"SR","value":"9"},{"language":"SV","value":"9"},{"language":"TH","value":"9"},{"language":"TR","value":"9"},{"language":"UK","value":"9"},{"language":"ZH","value":"9"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(9);","script":"NumPad.enterKey(9);","translation":[]}],"fieldPos":209},{"fieldNo":"9782082a-dfb8-4781-9634-ee02b52c8e88","fieldName":"boxNumpad4","fieldParent":"bab30c5b-dcee-43af-d794-0c321e28d9f0","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":210},{"fieldNo":"88918eba-86d6-457a-a6b3-c906c45bf16b","fieldName":"butNumpadClear","fieldParent":"9782082a-dfb8-4781-9634-ee02b52c8e88","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"\n// Remove CSS animation class\nboxShake.removeStyleClass(\"animated shake\");\n\n// Clear numpad\nNumPad.Clear();","translation":[]}],"fieldPos":211},{"fieldNo":"9f27b6e9-31c7-4bf2-a627-3b2567e13179","fieldName":"butNumpad0","fieldParent":"9782082a-dfb8-4781-9634-ee02b52c8e88","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"0","script":"","translation":[{"language":"AF","value":"0"},{"language":"BG","value":"0"},{"language":"CA","value":"0"},{"language":"CS","value":"0"},{"language":"EL","value":"0"},{"language":"ES","value":"0"},{"language":"ET","value":"0"},{"language":"FI","value":"0"},{"language":"FR","value":"0"},{"language":"HE","value":"0"},{"language":"HR","value":"0"},{"language":"HU","value":"0"},{"language":"ID","value":"0"},{"language":"IS","value":"0"},{"language":"IT","value":"0"},{"language":"JA","value":"0"},{"language":"KO","value":"0"},{"language":"LT","value":"0"},{"language":"LV","value":"0"},{"language":"MS","value":"0"},{"language":"NL","value":"0"},{"language":"PL","value":"0"},{"language":"PT","value":"0"},{"language":"RO","value":"0"},{"language":"RU","value":"0"},{"language":"SK","value":"0"},{"language":"SL","value":"0"},{"language":"SR","value":"0"},{"language":"SV","value":"0"},{"language":"TH","value":"0"},{"language":"TR","value":"0"},{"language":"UK","value":"0"},{"language":"ZH","value":"0"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(0);","script":"NumPad.enterKey(0);","translation":[]}],"fieldPos":212},{"fieldNo":"ad1088a5-357d-4cce-8b87-6c917c8bf742","fieldName":"butNumpadLogin","fieldParent":"9782082a-dfb8-4781-9634-ee02b52c8e88","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Default","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://accept","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"// Check biometricAuthentication\nif (AppCache.biometricAuthentication) {\n    \n    // Remove CSS animation class\n    boxShake.removeStyleClass(\"animated shake\");\n\n    // Clear numpad\n    NumPad.Clear();\n\n    if (sap.ui.Device.os.ios && typeof CID !== \"undefined\") sap.n.Fingerprint.ios.checkSupport();\n    if (sap.ui.Device.os.android) FingerprintAuth.isAvailable(sap.n.Fingerprint.android.onSupported, sap.n.Fingerprint.android.notSupported);\n\n} else {\n    NumPad.Logon();\n}","translation":[]}],"fieldPos":213},{"fieldNo":"b1ac49b6-07ef-44b1-9991-c0ba09fe86cf","fieldName":"panLinksPin","fieldParent":"921be91f-4a33-4d34-e83b-e527a479390f","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPanLinks","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":214},{"fieldNo":"6ce673e6-cf20-4767-ef22-fa7e87c6c255","fieldName":"toolLinksPin","fieldParent":"b1ac49b6-07ef-44b1-9991-c0ba09fe86cf","fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepLinkNoBorder","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}],"fieldPos":215},{"fieldNo":"bd534c38-d020-45f4-d10c-69cfd054ed8b","fieldName":"linkPinText1","fieldParent":"6ce673e6-cf20-4767-ef22-fa7e87c6c255","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin1);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin1);","translation":[]}],"fieldPos":216},{"fieldNo":"18d6dcb0-efe3-4412-a5a6-8a15ac76a398","fieldName":"linkPinSep1","fieldParent":"6ce673e6-cf20-4767-ef22-fa7e87c6c255","fieldType":"sap.m.ToolbarSeparator","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":217},{"fieldNo":"b917ff6c-e05a-48e6-da10-571bffcb8963","fieldName":"linkPinText2","fieldParent":"6ce673e6-cf20-4767-ef22-fa7e87c6c255","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin2);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin2);","translation":[]}],"fieldPos":218},{"fieldNo":"7498392d-f659-4043-b1d9-35cc2abc8109","fieldName":"linkPinSep2","fieldParent":"6ce673e6-cf20-4767-ef22-fa7e87c6c255","fieldType":"sap.m.ToolbarSeparator","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":219},{"fieldNo":"6330f111-5c22-4484-d972-beb21b6617ae","fieldName":"linkPinText3","fieldParent":"6ce673e6-cf20-4767-ef22-fa7e87c6c255","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin3);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin3);","translation":[]}],"fieldPos":220},{"fieldNo":"a9a7c06e-5aaa-438d-8a55-da4733f656a9","fieldName":"AppCache_boxURL","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":221},{"fieldNo":"80f0a0d8-e348-45cf-e90a-b6c03622d45a","fieldName":"AppCacheAppURL","fieldParent":"a9a7c06e-5aaa-438d-8a55-da4733f656a9","fieldType":"sap.m.App","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":222},{"fieldNo":"d62a8966-83a0-4229-c0f6-95ac749b7ad8","fieldName":"AppCachePageURL","fieldParent":"80f0a0d8-e348-45cf-e90a-b6c03622d45a","fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":223},{"fieldNo":"d7585a48-7f17-43b1-fb4d-2c23c6850309","fieldName":"AppCache_urlHTML","fieldParent":"d62a8966-83a0-4229-c0f6-95ac749b7ad8","fieldType":"sap.ui.core.HTML","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"content","grouping":"Properties","value":"<div id='AppCache_URLDiv' style='height:100%;width:100%;'></div>","script":"","translation":[]}],"fieldPos":224},{"fieldNo":"59aa0ea7-6f09-43e9-e685-d4bb442f584e","fieldName":"launchpadContentSideApp","fieldParent":"36db12ae-3e47-458d-fdbd-f4d20dabd690","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"0px","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadContentSideApp","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":225},{"fieldNo":"ca5adc62-9227-4ff5-ae6f-cefba7d455d5","fieldName":"AppCachePageSideApp","fieldParent":"59aa0ea7-6f09-43e9-e685-d4bb442f584e","fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiNoMargin","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepDocPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Solid","script":"","translation":[]}],"fieldPos":226},{"fieldNo":"35b2eee0-70e7-4d46-8e82-bffeac446974","fieldName":"AppCachePageSideTab","fieldParent":"ca5adc62-9227-4ff5-ae6f-cefba7d455d5","fieldType":"sap.m.TabContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiNoMargin","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"sapUiNoContentPadding ","script":"","translation":[]},{"attribute":"itemClose","grouping":"Events","value":"Anonymous Function","script":"// Destroy Content\nlet tab = oEvent.mParameters.item;\nlet tabKey = tab.getKey();\nlet view = tab.getContent()[0];\n\n// onClose event\nif (sap.n.Shell.sidepanelCloseEvents[tabKey]) sap.n.Shell.sidepanelCloseEvents[tabKey]();\n\n// Destroy View\nif (view) {\n    view.removeAllContent();\n    view.destroy();\n    sap.n.Shell.clearObjects(view.sId);\n}\n\n// Hide sidepanel\nsetTimeout(function () {\n    if (AppCachePageSideTab.getItems().length === 0) {\n        sap.n.Launchpad.sidepanelClose();\n        AppCacheUserActionSidepanel.setVisible(false);\n\n        // Mark Open From \n        if (sap.n.Launchpad.currentTile && sap.n.Launchpad.currentTile.actionApplication) {\n            delete sap.n.Shell.openSidePanelApps[sap.n.Launchpad.currentTile.actionApplication]\n        }\n    }\n}, 200);","translation":[]}],"fieldPos":227},{"fieldNo":"cc86028b-1464-4fb3-fb5f-da4955be560d","fieldName":"launchpadOverflowContainer","fieldParent":"63351f31-547d-43db-8b6a-898b9977f552","fieldType":"sap.m.FlexBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadOverflowContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}],"fieldPos":228},{"fieldNo":"0c6496fd-753c-44a9-9222-3396b9ae4672","fieldName":"launchpadOverflow","fieldParent":"cc86028b-1464-4fb3-fb5f-da4955be560d","fieldType":"sap.m.FlexBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadMenuOverflow","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"direction","grouping":"Properties","value":"Column","script":"","translation":[]}],"fieldPos":229},{"fieldNo":"32003514-86ef-4a1d-b68b-d8f2481b7954","fieldName":"launchpadOverflowHeader","fieldParent":"0c6496fd-753c-44a9-9222-3396b9ae4672","fieldType":"sap.m.Panel","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenu","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"3rem","script":"","translation":[]},{"attribute":"expandAnimation","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":230},{"fieldNo":"990290f1-4b43-441e-bd5d-93887a206864","fieldName":"launchpadOverflowHeaderToolbar","fieldParent":"32003514-86ef-4a1d-b68b-d8f2481b7954","fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}],"fieldPos":231},{"fieldNo":"c24629aa-04ec-4fb9-e651-818d4c00e703","fieldName":"launchpadOverflowHeaderHBox","fieldParent":"32003514-86ef-4a1d-b68b-d8f2481b7954","fieldType":"sap.m.HBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenuContent","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]}],"fieldPos":232},{"fieldNo":"8e0d0a33-1cc7-4eb8-89a3-a53c3ce7de05","fieldName":"launchpadOverflowHeaderVBox","fieldParent":"c24629aa-04ec-4fb9-e651-818d4c00e703","fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]}],"fieldPos":233},{"fieldNo":"79915338-3251-4035-babe-3cfffa1128ca","fieldName":"launchpadOverflowBtn","fieldParent":"8e0d0a33-1cc7-4eb8-89a3-a53c3ce7de05","fieldType":"sap.m.Button","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"Menu","script":"","translation":[{"language":"1","value":"菜单"},{"language":"A","value":"قائمة طعام"},{"language":"AF","value":"Spyskaart"},{"language":"AR","value":"القائمة"},{"language":"BG","value":"Меню"},{"language":"CA","value":"Menú"},{"language":"CS","value":"Jídelní lístek"},{"language":"D","value":"Speisekarte"},{"language":"DA","value":"Menu"},{"language":"DE","value":"Speisekarte"},{"language":"EL","value":"Μενού"},{"language":"EN","value":"Menu"},{"language":"ES","value":"Menú"},{"language":"ET","value":"Menüü"},{"language":"F","value":"Menu"},{"language":"FI","value":"Valikko"},{"language":"FR","value":"Menu"},{"language":"H","value":"Menü"},{"language":"HE","value":"תַפרִיט"},{"language":"HR","value":"Jelovnik"},{"language":"HU","value":"Menü"},{"language":"ID","value":"Menu"},{"language":"IS","value":"Matseðill"},{"language":"IT","value":"Menù"},{"language":"JA","value":"メニュー"},{"language":"K","value":"Menu"},{"language":"KO","value":"메뉴"},{"language":"LT","value":"Meniu"},{"language":"LV","value":"Izvēlne"},{"language":"MS","value":"Menu"},{"language":"NL","value":"Menu"},{"language":"NN","value":"Meny"},{"language":"NO","value":"Meny"},{"language":"O","value":"Meny"},{"language":"P","value":"Cardápio"},{"language":"PL","value":"Menu"},{"language":"PT","value":"Cardápio"},{"language":"R","value":"Меню"},{"language":"RO","value":"Meniul"},{"language":"RU","value":"Меню"},{"language":"S","value":"Menú"},{"language":"SE","value":"Bargu"},{"language":"SH","value":"Meni"},{"language":"SK","value":"Ponuka"},{"language":"SL","value":"meni"},{"language":"SR","value":"Мени"},{"language":"SV","value":"Meny"},{"language":"TH","value":"เมนู"},{"language":"TR","value":"Menü"},{"language":"UK","value":"Меню"},{"language":"W","value":"Меню"},{"language":"ZF","value":"菜單"},{"language":"ZH","value":"菜单"}]},{"attribute":"iconFirst","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"iconDensityAware","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://grid","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Launchpad.overflowMenuClose();","script":"sap.n.Launchpad.overflowMenuClose();","translation":[]}],"fieldPos":234},{"fieldNo":"444e1f03-7e94-400d-ac97-1bdb24215aa8","fieldName":"launchpadOverflowClickArea","fieldParent":"cc86028b-1464-4fb3-fb5f-da4955be560d","fieldType":"sap.m.FlexBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadOverflowClickArea","script":"","translation":[]}],"fieldPos":235},{"fieldNo":"5e39af87-c5fd-4588-8dfe-ad976c2df52e","fieldName":"launchpadSettingsContainer","fieldParent":"63351f31-547d-43db-8b6a-898b9977f552","fieldType":"sap.m.FlexBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadSettingsContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}],"fieldPos":236},{"fieldNo":"75b4ea7b-8c37-499b-93f7-b6baf913b0a4","fieldName":"launchpadSettings","fieldParent":"5e39af87-c5fd-4588-8dfe-ad976c2df52e","fieldType":"sap.m.FlexBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadMenuSettings","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"direction","grouping":"Properties","value":"Column","script":"","translation":[]}],"fieldPos":237},{"fieldNo":"b33d806b-a41c-4b0e-99c2-e3dc047ebe55","fieldName":"launchpadSettingsHeader","fieldParent":"75b4ea7b-8c37-499b-93f7-b6baf913b0a4","fieldType":"sap.m.Panel","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenu","script":"","translation":[]},{"attribute":"expandAnimation","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":238},{"fieldNo":"06a99375-ddb9-4a17-e19d-f324111ccd8b","fieldName":"launchpadSettingsHeaderToolbar","fieldParent":"b33d806b-a41c-4b0e-99c2-e3dc047ebe55","fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}],"fieldPos":239},{"fieldNo":"6344cc83-4d79-4be0-faed-504a9573d7ef","fieldName":"launchpadSettingsHeaderHBox","fieldParent":"b33d806b-a41c-4b0e-99c2-e3dc047ebe55","fieldType":"sap.m.HBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenuContent","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":240},{"fieldNo":"abe8971f-5750-4464-bb19-7998b47d42ea","fieldName":"AppCacheUserActionText","fieldParent":"6344cc83-4d79-4be0-faed-504a9573d7ef","fieldType":"sap.m.Text","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"wrapping","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepUserActionText","script":"","translation":[]}],"fieldPos":241},{"fieldNo":"6fe182ac-c634-42cf-f0df-149176ca3d59","fieldName":"launchpadSettingsBtn","fieldParent":"6344cc83-4d79-4be0-faed-504a9573d7ef","fieldType":"sap.m.Button","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"User Menu","script":"","translation":[{"language":"1","value":"用户菜单"},{"language":"A","value":"قائمة المستخدم"},{"language":"AF","value":"Gebruikerskieslys"},{"language":"AR","value":"قائمة المستخدم"},{"language":"BG","value":"Потребителско меню"},{"language":"CA","value":"Menú d'usuari"},{"language":"CS","value":"Uživatelské menu"},{"language":"D","value":"Benutzermenü"},{"language":"DA","value":"Brugermenu"},{"language":"DE","value":"Benutzermenü"},{"language":"EL","value":"Μενού χρήστη"},{"language":"EN","value":"User Menu"},{"language":"ES","value":"Menú del Usuario"},{"language":"ET","value":"Kasutajamenüü"},{"language":"F","value":"Menu utilisateur"},{"language":"FI","value":"Käyttäjävalikko"},{"language":"FR","value":"Menu utilisateur"},{"language":"H","value":"felhasználói menü"},{"language":"HE","value":"תפריט משתמש"},{"language":"HR","value":"Korisnički izbornik"},{"language":"HU","value":"felhasználói menü"},{"language":"ID","value":"Menu pengguna"},{"language":"IS","value":"Notendavalmynd"},{"language":"IT","value":"Menu utente"},{"language":"JA","value":"ユーザーメニュー"},{"language":"K","value":"Brugermenu"},{"language":"KO","value":"사용자 메뉴"},{"language":"LT","value":"Vartotojo meniu"},{"language":"LV","value":"Lietotāja izvēlne"},{"language":"MS","value":"Menu Pengguna"},{"language":"NL","value":"gebruikersmenu"},{"language":"NN","value":"Brukermeny"},{"language":"NO","value":"Brukermeny"},{"language":"O","value":"Brukermeny"},{"language":"P","value":"menu do usuário"},{"language":"PL","value":"Menu użytkownika"},{"language":"PT","value":"menu do usuário"},{"language":"R","value":"Меню пользователя"},{"language":"RO","value":"meniul utilizatorului"},{"language":"RU","value":"Меню пользователя"},{"language":"S","value":"Menú del Usuario"},{"language":"SE","value":"Geavaheaddji bargu"},{"language":"SH","value":"Korisnički meni"},{"language":"SK","value":"Používateľské menu"},{"language":"SL","value":"Uporabniški meni"},{"language":"SR","value":"Кориснички мени"},{"language":"SV","value":"Användarmeny"},{"language":"TH","value":"เมนูผู้ใช้"},{"language":"TR","value":"Kullanıcı menüsü"},{"language":"UK","value":"Меню користувача"},{"language":"W","value":"Меню на потребителя"},{"language":"ZF","value":"使用者選單"},{"language":"ZH","value":"用户菜单"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginEnd","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepUserButton","script":"","translation":[]},{"attribute":"iconFirst","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"iconDensityAware","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/user-circle","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Launchpad.settingsMenuClose();\nAppCacheShellUser.focus();","translation":[]}],"fieldPos":242},{"fieldNo":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldName":"AppCacheListMenu","fieldParent":"75b4ea7b-8c37-499b-93f7-b6baf913b0a4","fieldType":"sap.m.List","script":"","customComponent":false,"bindingType":"h","request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepListMenu","script":"","translation":[]},{"attribute":"showSeparators","grouping":"Properties","value":"None","script":"","translation":[]},{"attribute":"showNoData","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":243},{"fieldNo":"8acff095-a179-49ef-c49b-d0cedecfcce2","fieldName":"AppCacheUserActionSettings","fieldParent":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Settings","script":"","translation":[{"language":"AF","value":"Instellings"},{"language":"AR","value":"إعدادات"},{"language":"BG","value":"Настройки"},{"language":"CA","value":"Configuració"},{"language":"CS","value":"Nastavení"},{"language":"DA","value":"Indstillinger"},{"language":"DE","value":"Einstellungen"},{"language":"EL","value":"Ρυθμίσεις"},{"language":"EN","value":"Settings"},{"language":"ES","value":"Ajustes"},{"language":"ET","value":"Seaded"},{"language":"FI","value":"asetukset"},{"language":"FR","value":"Paramètres"},{"language":"HE","value":"הגדרות"},{"language":"HR","value":"postavke"},{"language":"HU","value":"Beállítások"},{"language":"ID","value":"Pengaturan"},{"language":"IS","value":"Stillingar"},{"language":"IT","value":"Impostazioni"},{"language":"JA","value":"設定"},{"language":"KO","value":"설정"},{"language":"LT","value":"Nustatymai"},{"language":"LV","value":"Iestatījumi"},{"language":"MS","value":"tetapan"},{"language":"NL","value":"Instellingen"},{"language":"NN","value":"Innstillinger"},{"language":"NO","value":"Innstillinger"},{"language":"PL","value":"Ustawienia"},{"language":"PT","value":"Configurações"},{"language":"RO","value":"Setări"},{"language":"RU","value":"Настройки"},{"language":"SE","value":"Asetukset"},{"language":"SH","value":"Podešavanja"},{"language":"SK","value":"nastavenie"},{"language":"SL","value":"nastavitve"},{"language":"SR","value":"Подешавања"},{"language":"SV","value":"inställningar"},{"language":"TH","value":"การตั้งค่า"},{"language":"TR","value":"Ayarlar"},{"language":"UK","value":"Налаштування"},{"language":"ZF","value":"設定"},{"language":"ZH","value":"设置"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://settings","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"// Build Version Info - General\nlet arrInfo = new Array();\nlet rec = {};\nrec.key = 'UI5 Version';\nrec.value = sap.ui.version;\narrInfo.push(rec);\n\n// Build Version Info - Phone\nif (typeof device !== 'undefined') {\n    rec = {};\n    rec.key = AppCache_tPhoneType.getText();\n    rec.value = device.platform;\n    arrInfo.push(rec);\n\n    rec = {};\n    rec.key = AppCache_tPhoneVersion.getText();\n    rec.value = device.version;\n    arrInfo.push(rec);\n\n    rec = {};\n    rec.key = AppCache_tPhoneModel.getText();\n    rec.value = device.model;\n    arrInfo.push(rec);\n\n    rec = {};\n    rec.key = AppCache_tCordovaVersion.getText();\n    rec.value = device.cordova;\n    arrInfo.push(rec);\n\n    rec = {};\n    rec.key = AppCache_tAppVersion.getText();\n    rec.value = AppCache.AppVersion;\n    arrInfo.push(rec);\n}\n\nAppCacheSettingsUser.setTitle(AppCache.userInfo.name);\nAppCacheSettingsUser.setIntro(AppCache.userInfo.username);\nmodelAppCacheTabVer.setData(arrInfo);\nAppCacheDiaSettings.open();\nmodelAppCacheData.refresh();","translation":[]}],"fieldPos":244},{"fieldNo":"67b387e1-3725-4edc-a8ec-3467821a0568","fieldName":"AppCacheInstallPWASettings","fieldParent":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Install Application","script":"","translation":[{"language":"AF","value":"Installeer toepassing"},{"language":"AR","value":"تثبيت التطبيق"},{"language":"BG","value":"Инсталиране на приложение"},{"language":"CA","value":"Instal·leu l'aplicació"},{"language":"CS","value":"Nainstalujte aplikaci"},{"language":"DA","value":"Installer applikation"},{"language":"DE","value":"Install Application"},{"language":"EL","value":"Εγκαταστήστε την εφαρμογή"},{"language":"ES","value":"Instalar aplicación"},{"language":"ET","value":"Installige rakendus"},{"language":"FI","value":"Asenna sovellus"},{"language":"FR","value":"Installer l'application"},{"language":"HE","value":"התקן אפליקציה"},{"language":"HR","value":"Instalirajte aplikaciju"},{"language":"HU","value":"Alkalmazás telepítése"},{"language":"ID","value":"Instal Aplikasi"},{"language":"IS","value":"Settu upp forrit"},{"language":"IT","value":"Installa l'applicazione"},{"language":"JA","value":"アプリケーションのインストール"},{"language":"KO","value":"애플리케이션 설치"},{"language":"LT","value":"Įdiegti programą"},{"language":"LV","value":"Instalējiet lietojumprogrammu"},{"language":"MS","value":"Pasang Aplikasi"},{"language":"NL","value":"Applicatie installeren"},{"language":"NN","value":"Installer applikasjon"},{"language":"NO","value":"Installer applikasjon"},{"language":"PL","value":"Zainstaluj aplikację"},{"language":"PT","value":"Instalar aplicativo"},{"language":"RO","value":"Instalați aplicația"},{"language":"RU","value":"Установить приложение"},{"language":"SE","value":"Asenna applikašuvdna"},{"language":"SH","value":"Instaliraj aplikaciju"},{"language":"SK","value":"Nainštalujte aplikáciu"},{"language":"SL","value":"Namestite aplikacijo"},{"language":"SR","value":"Инсталирајте апликацију"},{"language":"SV","value":"Installera applikation"},{"language":"TH","value":"ติดตั้งแอปพลิเคชัน"},{"language":"TR","value":"Uygulamayı Yükle"},{"language":"UK","value":"Встановити додаток"},{"language":"ZF","value":"安裝應用程式"},{"language":"ZH","value":"安装应用程序"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://home-share","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"promptForPWAInstall();","script":"promptForPWAInstall();","translation":[]}],"fieldPos":245},{"fieldNo":"00815957-de6a-425a-a5ee-8eada95a10e1","fieldName":"AppCacheUserActionEditScreen","fieldParent":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Edit Screen","script":"","translation":[{"language":"AF","value":"Wysig skerm"},{"language":"AR","value":"تحرير الشاشة"},{"language":"BG","value":"Екран за редактиране"},{"language":"CA","value":"Pantalla d'edició"},{"language":"CS","value":"Upravit obrazovku"},{"language":"DA","value":"Rediger skærm"},{"language":"DE","value":"Bildschirm bearbeiten"},{"language":"EL","value":"Επεξεργασία οθόνης"},{"language":"EN","value":"Edit Screen"},{"language":"ES","value":"Editar pantalla"},{"language":"ET","value":"Redigeeri ekraani"},{"language":"FI","value":"Muokkaa näyttöä"},{"language":"FR","value":"Écran Modifier"},{"language":"HE","value":"ערוך מסך"},{"language":"HR","value":"Uredi zaslon"},{"language":"HU","value":"Képernyő szerkesztése"},{"language":"ID","value":"Sunting Layar"},{"language":"IS","value":"Breyta skjá"},{"language":"IT","value":"Modifica schermata"},{"language":"JA","value":"編集画面"},{"language":"KO","value":"편집 화면"},{"language":"LT","value":"Redaguoti ekraną"},{"language":"LV","value":"Rediģēt ekrānu"},{"language":"MS","value":"Skrin Edit"},{"language":"NL","value":"Scherm bewerken"},{"language":"NN","value":"Rediger skjerm"},{"language":"NO","value":"Rediger skjerm"},{"language":"PL","value":"Edytuj ekran"},{"language":"PT","value":"Editar tela"},{"language":"RO","value":"Editați ecranul"},{"language":"RU","value":"Экран редактирования"},{"language":"SE","value":"Rievdadit skáhpi"},{"language":"SH","value":"Uredi ekran"},{"language":"SK","value":"Upraviť obrazovku"},{"language":"SL","value":"Uredi zaslon"},{"language":"SR","value":"Екран за уређивање"},{"language":"SV","value":"Redigera skärm"},{"language":"TH","value":"แก้ไขหน้าจอ"},{"language":"TR","value":"Ekranı Düzenle"},{"language":"UK","value":"Екран редагування"},{"language":"ZF","value":"編輯畫面"},{"language":"ZH","value":"编辑屏幕"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://customize","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Customization.setActivation(true);\nsap.n.Launchpad.settingsMenuClose();","translation":[]}],"fieldPos":246},{"fieldNo":"b4020d10-847d-4f76-a79d-c18480cd1261","fieldName":"AppCacheUserActionPassword","fieldParent":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Change password","script":"","translation":[{"language":"AF","value":"Verander wagwoord"},{"language":"AR","value":"تغيير كلمة المرور"},{"language":"BG","value":"Промяна на паролата"},{"language":"CA","value":"Canvia la contrasenya"},{"language":"CS","value":"Změnit heslo"},{"language":"DA","value":"Sidepanel"},{"language":"DE","value":"Passwort ändern"},{"language":"EL","value":"Αλλαξε κωδικό"},{"language":"EN","value":"Change password"},{"language":"ES","value":"Cambiar la contraseña"},{"language":"ET","value":"Muuda salasõna"},{"language":"FI","value":"Vaihda salasana"},{"language":"FR","value":"Changer le mot de passe"},{"language":"HE","value":"שנה סיסמא"},{"language":"HR","value":"Promjena lozinke"},{"language":"HU","value":"Jelszó módosítása"},{"language":"ID","value":"Ganti kata sandi"},{"language":"IS","value":"Breyta lykilorði"},{"language":"IT","value":"Cambiare la password"},{"language":"JA","value":"パスワードを変更する"},{"language":"KO","value":"비밀번호 변경"},{"language":"LT","value":"Pakeisti slaptažodį"},{"language":"LV","value":"Mainiet paroli"},{"language":"MS","value":"Tukar kata laluan"},{"language":"NL","value":"Verander wachtwoord"},{"language":"NN","value":"Endre passord"},{"language":"NO","value":"Bytt passord"},{"language":"PL","value":"Zmień hasło"},{"language":"PT","value":"Alterar a senha"},{"language":"RO","value":"Schimbaţi parola"},{"language":"RU","value":"Изменить пароль"},{"language":"SE","value":"Juvddála govat"},{"language":"SH","value":"Promeni lozinku"},{"language":"SK","value":"Zmeniť heslo"},{"language":"SL","value":"Spremeni geslo"},{"language":"SR","value":"Промени лозинку"},{"language":"SV","value":"ändra lösenord"},{"language":"TH","value":"เปลี่ยนรหัสผ่าน"},{"language":"TR","value":"Şifre değiştir"},{"language":"UK","value":"Змінити пароль"},{"language":"ZF","value":"更改密碼"},{"language":"ZH","value":"更改密码"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/shield-alt","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaSetPassword.open();","script":"diaSetPassword.open();","translation":[]}],"fieldPos":247},{"fieldNo":"1d29d4f8-c28e-4a27-e74f-560570a3e1d7","fieldName":"AppCacheUserActionSidepanel","fieldParent":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Sidepanel","script":"","translation":[{"language":"AF","value":"Kommunikasiepaneel"},{"language":"AR","value":"لوحة جانبية"},{"language":"BG","value":"Комуникационен панел"},{"language":"CA","value":"Panell de comunicació"},{"language":"CS","value":"Komunikační panel"},{"language":"DA","value":"Sidepanel"},{"language":"DE","value":"Sidepanel"},{"language":"EL","value":"Πίνακας επικοινωνίας"},{"language":"EN","value":"Sidepanel"},{"language":"ES","value":"Panel de comunicación"},{"language":"ET","value":"Sidepanel"},{"language":"FI","value":"Viestintäpaneeli"},{"language":"FR","value":"Panneau de communication"},{"language":"HE","value":"פאנל תקשורת"},{"language":"HR","value":"Komunikacijska ploča"},{"language":"HU","value":"Kommunikációs panel"},{"language":"ID","value":"Panel komunikasi"},{"language":"IS","value":"Samskiptaspjald"},{"language":"IT","value":"Pannello di comunicazione"},{"language":"JA","value":"コミュニケーションパネル"},{"language":"KO","value":"커뮤니케이션 패널"},{"language":"LT","value":"Ryšio skydelis"},{"language":"LV","value":"Komunikācijas panelis"},{"language":"MS","value":"Panel komunikasi"},{"language":"NL","value":"Communicatiepaneel"},{"language":"NN","value":"Sidepanel"},{"language":"NO","value":"Sidepanel"},{"language":"PL","value":"Panel komunikacyjny"},{"language":"PT","value":"Painel de comunicação"},{"language":"RO","value":"Panoul de comunicare"},{"language":"RU","value":"Коммуникационная панель"},{"language":"SE","value":"Sáhpanávdi"},{"language":"SH","value":"Bočni panel"},{"language":"SK","value":"Komunikačný panel"},{"language":"SL","value":"Komunikacijska plošča"},{"language":"SR","value":"Комуникациони панел"},{"language":"SV","value":"Kommunikationspanel"},{"language":"TH","value":"แผงการสื่อสาร"},{"language":"TR","value":"İletişim paneli"},{"language":"UK","value":"Панель зв'язку"},{"language":"ZF","value":"側邊面板"},{"language":"ZH","value":"通讯面板"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://navigation-right-arrow","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Launchpad.settingsMenuClose();\n\nif (launchpadContentSideApp.getWidth() === \"0px\") {\n    sap.n.Launchpad.sidepanelOpen();\n} else {\n    sap.n.Launchpad.sidepanelClose();\n}\n","translation":[]}],"fieldPos":248},{"fieldNo":"82bc0a64-c586-48c2-9875-ef7abff16dff","fieldName":"AppCacheUserActionLock","fieldParent":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Lock","script":"","translation":[{"language":"AF","value":"Sluit"},{"language":"AR","value":"قفل"},{"language":"BG","value":"Ключалка"},{"language":"CA","value":"Bloqueig"},{"language":"CS","value":"Zámek"},{"language":"DA","value":"Låse"},{"language":"DE","value":"Sperren"},{"language":"EL","value":"Κλειδαριά"},{"language":"EN","value":"Lock"},{"language":"ES","value":"Cerrar"},{"language":"ET","value":"Lukk"},{"language":"FI","value":"Lukko"},{"language":"FR","value":"Verrouillage"},{"language":"HE","value":"לנעול"},{"language":"HR","value":"brava"},{"language":"HU","value":"Zár"},{"language":"ID","value":"Kunci"},{"language":"IS","value":"Læsa"},{"language":"IT","value":"Serratura"},{"language":"JA","value":"ロック"},{"language":"KO","value":"잠그다"},{"language":"LT","value":"Užraktas"},{"language":"LV","value":"Slēdzene"},{"language":"MS","value":"Kunci"},{"language":"NL","value":"Slot"},{"language":"NN","value":"Lås"},{"language":"NO","value":"Lås"},{"language":"PL","value":"Zamek"},{"language":"PT","value":"Trancar"},{"language":"RO","value":"Lacăt"},{"language":"RU","value":"Замок"},{"language":"SE","value":"Låvvu"},{"language":"SH","value":"Zaključaj"},{"language":"SK","value":"Zámok"},{"language":"SL","value":"Zaklepanje"},{"language":"SR","value":"закључати"},{"language":"SV","value":"Låsa"},{"language":"TH","value":"ล็อค"},{"language":"TR","value":"Kilit"},{"language":"UK","value":"Замок"},{"language":"ZF","value":"鎖定"},{"language":"ZH","value":"锁"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://locked","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Launchpad.settingsMenuClose();\nAppCache.Lock();","translation":[]}],"fieldPos":249},{"fieldNo":"d418ca23-35e9-45ab-b80d-40b111280a4d","fieldName":"AppCacheUserActionSwitch","fieldParent":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Switch User","script":"","translation":[{"language":"AF","value":"Verander gebruiker"},{"language":"AR","value":"تغير المستخدم"},{"language":"BG","value":"Превключване на потребител"},{"language":"CA","value":"Canviar d'usuari"},{"language":"CS","value":"Přepnout uživatele"},{"language":"DA","value":"Skift bruger"},{"language":"DE","value":"Benutzer wechseln"},{"language":"EL","value":"Αλλαγή χρήστη"},{"language":"EN","value":"Switch User"},{"language":"ES","value":"Cambiar de usuario"},{"language":"ET","value":"Vaheta kasutajat"},{"language":"FI","value":"Vaihda käyttäjää"},{"language":"FR","value":"Changer d'utilisateur"},{"language":"HE","value":"החלף משתמש"},{"language":"HR","value":"Promijeni korisnika"},{"language":"HU","value":"Felhasználót váltani"},{"language":"ID","value":"Ganti Pengguna"},{"language":"IS","value":"Skipta um notanda"},{"language":"IT","value":"Cambia utente"},{"language":"JA","value":"ユーザーの切り替え"},{"language":"KO","value":"사용자 전환"},{"language":"LT","value":"Pakeisti vartotoją"},{"language":"LV","value":"Pārslēgt lietotāju"},{"language":"MS","value":"Ubah Pengguna"},{"language":"NL","value":"Verander gebruiker"},{"language":"NN","value":"Bytt bruker"},{"language":"NO","value":"Bytt bruker"},{"language":"PL","value":"Zmień użytkownika"},{"language":"PT","value":"Mudar de utilizador"},{"language":"RO","value":"Schimba utilizator"},{"language":"RU","value":"Поменять пользователя"},{"language":"SE","value":"Váldde geavaheaddji"},{"language":"SH","value":"Promeni korisnika"},{"language":"SK","value":"Zmeniť používateľa"},{"language":"SL","value":"Zamenjaj uporabnika"},{"language":"SR","value":"Промени корисника"},{"language":"SV","value":"Byt användare"},{"language":"TH","value":"เปลี่ยนผู้ใช้"},{"language":"TR","value":"Kullanıcı değiştir"},{"language":"UK","value":"Змінити користувача"},{"language":"ZF","value":"切換使用者"},{"language":"ZH","value":"切换用户"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/users","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Launchpad.settingsMenuClose();\nAppCache.Lock();","translation":[]}],"fieldPos":250},{"fieldNo":"c570e45a-f7bf-4886-d227-b8c295633e9e","fieldName":"AppCacheUserActionLogin","fieldParent":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Login new user","script":"","translation":[{"language":"AF","value":"Teken nuwe gebruiker aan"},{"language":"AR","value":"تسجيل دخول مستخدم جديد"},{"language":"BG","value":"Влезте нов потребител"},{"language":"CA","value":"Inicieu sessió nou usuari"},{"language":"CS","value":"Přihlásit nového uživatele"},{"language":"DA","value":"Log ud"},{"language":"DE","value":"Ausloggen"},{"language":"EL","value":"Είσοδος νέου χρήστη"},{"language":"EN","value":"Login new user"},{"language":"ES","value":"Iniciar sesión nuevo usuario"},{"language":"ET","value":"Logi sisse uus kasutaja"},{"language":"FI","value":"Kirjaudu sisään uusi käyttäjä"},{"language":"FR","value":"Connectez-vous nouvel utilisateur"},{"language":"HE","value":"התחבר למשתמש חדש"},{"language":"HR","value":"Prijava novog korisnika"},{"language":"HU","value":"Bejelentkezés új felhasználó"},{"language":"ID","value":"Masuk pengguna baru"},{"language":"IS","value":"Skráðu þig inn nýjan notanda"},{"language":"IT","value":"Accedi Nuovo utente"},{"language":"JA","value":"新規ユーザーでログイン"},{"language":"KO","value":"새로운 사용자 로그인"},{"language":"LT","value":"Prisijungti naujas vartotojas"},{"language":"LV","value":"Pieteikties jauns lietotājs"},{"language":"MS","value":"Log masuk pengguna baharu"},{"language":"NL","value":"Inloggen nieuwe gebruiker"},{"language":"NN","value":"Logg inn ny bruker"},{"language":"NO","value":"Logg inn som ny bruker"},{"language":"PL","value":"Zaloguj się jako nowy użytkownik"},{"language":"PT","value":"Entrar novo usuário"},{"language":"RO","value":"Conectați-vă utilizator nou"},{"language":"RU","value":"Войти новый пользователь"},{"language":"SE","value":"Logga sisa ođđa geavaheaddji"},{"language":"SH","value":"Prijavi novog korisnika"},{"language":"SK","value":"Prihláste nového používateľa"},{"language":"SL","value":"Prijava novega uporabnika"},{"language":"SR","value":"Пријавите се за новог корисника"},{"language":"SV","value":"Logga in ny användare"},{"language":"TH","value":"เข้าสู่ระบบผู้ใช้ใหม่"},{"language":"TR","value":"Yeni kullanıcı girişi yapın"},{"language":"UK","value":"Вхід нового користувача"},{"language":"ZF","value":"登入新使用者"},{"language":"ZH","value":"登录新用户"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/user","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Launchpad.settingsMenuClose();\nAppCache.Logout();","translation":[]}],"fieldPos":251},{"fieldNo":"f3d1903e-4cb4-4896-b094-fdfee6d1b335","fieldName":"AppCacheUserActionLogoff","fieldParent":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Logout","script":"","translation":[{"language":"AF","value":"Teken uit"},{"language":"AR","value":"تسجيل خروج"},{"language":"BG","value":"Излез от профила си"},{"language":"CA","value":"Tancar sessió"},{"language":"CS","value":"Odhlásit se"},{"language":"DA","value":"Log ud"},{"language":"DE","value":"Ausloggen"},{"language":"EL","value":"Αποσύνδεση"},{"language":"EN","value":"Logout"},{"language":"ES","value":"Cerrar sesión"},{"language":"ET","value":"Logi välja"},{"language":"FI","value":"Kirjautua ulos"},{"language":"FR","value":"Se déconnecter"},{"language":"HE","value":"להתנתק"},{"language":"HR","value":"Odjavite se"},{"language":"HU","value":"Kijelentkezés"},{"language":"ID","value":"Keluar"},{"language":"IS","value":"Að skrá þig út"},{"language":"IT","value":"Disconnettersi"},{"language":"JA","value":"ログアウト"},{"language":"KO","value":"로그 아웃"},{"language":"LT","value":"Atsijungti"},{"language":"LV","value":"Izlogoties"},{"language":"MS","value":"Log keluar"},{"language":"NL","value":"Uitloggen"},{"language":"NN","value":"Logg ut"},{"language":"NO","value":"Logg ut"},{"language":"PL","value":"Wyloguj"},{"language":"PT","value":"Sair"},{"language":"RO","value":"Deconectare"},{"language":"RU","value":"Выйти"},{"language":"SE","value":"Logga ávkkástallat"},{"language":"SH","value":"Odjavi se"},{"language":"SK","value":"Odhlásiť sa"},{"language":"SL","value":"Odjava"},{"language":"SR","value":"Одјавити се"},{"language":"SV","value":"Logga ut"},{"language":"TH","value":"ออกจากระบบ"},{"language":"TR","value":"Çıkış Yap"},{"language":"UK","value":"Вийти"},{"language":"ZF","value":"登出"},{"language":"ZH","value":"登出"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://log","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Launchpad.settingsMenuClose();\nAppCache.Logout();","translation":[]}],"fieldPos":252},{"fieldNo":"816a3385-dec7-4785-c8a7-a028d4cdd528","fieldName":"launchpadSettingsClickArea","fieldParent":"5e39af87-c5fd-4588-8dfe-ad976c2df52e","fieldType":"sap.m.FlexBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadSettingsClickArea","script":"","translation":[]}],"fieldPos":253},{"fieldNo":"c366cc16-e63d-43c4-c10b-8d12518d17f6","fieldName":"oHTMLObject","fieldParent":"63351f31-547d-43db-8b6a-898b9977f552","fieldType":"sap.ui.core.HTML","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"afterRendering","grouping":"Events","value":"Anonymous Function","script":"// Apply Standard Theme for Mobile\nif (AppCache.isMobile && AppCache.layout) sap.n.Launchpad.applyLayout(AppCache.layout[0]);\n","translation":[]}],"fieldPos":254},{"fieldNo":"5a4295ae-26cb-4b0a-be40-415a8a2d90d7","fieldName":"oHTML","fieldParent":"c366cc16-e63d-43c4-c10b-8d12518d17f6","fieldType":"neptune.Html","script":"<div id=\"NeptuneStyleDiv\"></div>\n<iframe title=\"Azure Signout\" id=\"azureSignout\" src=\"\" width=\"0\" height=\"0\" tabindex=\"-1\" border=\"0\" style=\"display:none\"></iframe>\n<div id='NeptuneStyleDivDynamic'></div>\n\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":255},{"fieldNo":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldName":"Popup","fieldParent":99999,"fieldType":"neptune.folder","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":257},{"fieldNo":"45b47f08-c1d4-4d26-cd52-61d577e323fb","fieldName":"AppCacheCardTemplate","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldType":"sap.f.Card","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":258},{"fieldNo":"0e5b9d18-8a5b-4aff-9d85-d1edc4027c05","fieldName":"AppCacheUserDialog","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldType":"sap.m.ActionSheet","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"neptunePop","script":"","translation":[]}],"fieldPos":259},{"fieldNo":"fcf46f49-9cd5-4810-9d09-4163e0a4115a","fieldName":"AppCacheUserDialogCloseAll","fieldParent":"0e5b9d18-8a5b-4aff-9d85-d1edc4027c05","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Close All","script":"","translation":[{"language":"AF","value":"Maak alles toe"},{"language":"AR","value":"إغلاق الكل"},{"language":"BG","value":"Затвори всички"},{"language":"CA","value":"Tanca-ho tot"},{"language":"CS","value":"Zavřít vše"},{"language":"DA","value":"Luk alle"},{"language":"DE","value":"Alle schließen"},{"language":"EL","value":"Κλείσ'τα όλα"},{"language":"EN","value":"Close All"},{"language":"ES","value":"Cierra todo"},{"language":"ET","value":"Sule kõik"},{"language":"FI","value":"Sulje kaikki"},{"language":"FR","value":"Ferme tout"},{"language":"HE","value":"סגור הכל"},{"language":"HR","value":"Zatvori sve"},{"language":"HU","value":"Összes bezárása"},{"language":"ID","value":"Tutup semua"},{"language":"IS","value":"Lokaðu öllum"},{"language":"IT","value":"Chiudi tutto"},{"language":"JA","value":"すべて閉じる"},{"language":"KO","value":"모두 닫기"},{"language":"LT","value":"Uždaryti viską"},{"language":"LV","value":"Aizvērt visu"},{"language":"MS","value":"Tutup semua"},{"language":"NL","value":"Sluit alles"},{"language":"NN","value":"Lukk alle"},{"language":"NO","value":"Lukk alle"},{"language":"PL","value":"Zamknij wszystko"},{"language":"PT","value":"Feche tudo"},{"language":"RO","value":"Inchide tot"},{"language":"RU","value":"Закрыть все"},{"language":"SE","value":"Riegádat buot"},{"language":"SH","value":"Zatvori sve"},{"language":"SK","value":"Zavrieť všetko"},{"language":"SL","value":"Zapri vse"},{"language":"SR","value":"Затворите све"},{"language":"SV","value":"Stäng alla"},{"language":"TH","value":"ปิดทั้งหมด"},{"language":"TR","value":"Hepsini kapat"},{"language":"UK","value":"Закрити всі"},{"language":"ZF","value":"關閉全部"},{"language":"ZH","value":"关闭所有"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://sys-cancel","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"\n// Close Buttons\nAppCacheUserDialog.getButtons().forEach(function (data) {\n    if (data.getId() !== \"AppCacheUserDialogCloseAll\") {\n        data.destroy();\n    }\n});\n\n// Close Dialogs\nAppCache.Dialogs.forEach(function (data) {\n    let dia = sap.ui.getCore().byId(data);\n    if (dia) dia.close();\n});\n\nAppCacheShellDialog.setVisible(false);\nAppCache.Dialogs = [];\nAppCacheUserDialog.close();","translation":[]}],"fieldPos":260},{"fieldNo":"5a6551a3-417a-40f4-a295-ed41b6d25858","fieldName":"AppCache_diaDownload","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldType":"sap.m.BusyDialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"Please wait","script":"","translation":[{"language":"1","value":"取消"},{"language":"AF","value":"Wag asseblief"},{"language":"AR","value":"انتظر من فضلك"},{"language":"BG","value":"Моля Изчакай"},{"language":"CA","value":"Si us plau, espereu"},{"language":"CS","value":"Prosím, čekejte"},{"language":"D","value":"Abbrechen"},{"language":"DA","value":"Vent venligst"},{"language":"DE","value":"Warten Sie mal"},{"language":"EL","value":"Παρακαλώ περιμένετε"},{"language":"EN","value":"Please wait"},{"language":"ES","value":"Espere por favor"},{"language":"ET","value":"Palun oota"},{"language":"F","value":"Annuler"},{"language":"FI","value":"Odota"},{"language":"FR","value":"S'il vous plaît, attendez"},{"language":"HE","value":"המתן בבקשה"},{"language":"HR","value":"Molimo pričekajte"},{"language":"HU","value":"Kérlek várj"},{"language":"ID","value":"Harap tunggu"},{"language":"IS","value":"Vinsamlegast bíðið"},{"language":"IT","value":"attendere prego"},{"language":"JA","value":"お待ちください"},{"language":"K","value":"Afbryd"},{"language":"KO","value":"기다리세요"},{"language":"LT","value":"Prašau palauk"},{"language":"LV","value":"Lūdzu uzgaidiet"},{"language":"MS","value":"Sila tunggu"},{"language":"NL","value":"Even geduld aub"},{"language":"NN","value":"Vennligst vent"},{"language":"NO","value":"Vennligst vent"},{"language":"O","value":"Avbryt"},{"language":"P","value":"Cancelar"},{"language":"PL","value":"Proszę czekać"},{"language":"PT","value":"Por favor, aguarde"},{"language":"R","value":"Пожалуйста подождите"},{"language":"RO","value":"Va rugam asteptati"},{"language":"RU","value":"пожалуйста, подождите"},{"language":"S","value":"Abortar"},{"language":"SE","value":"Leage buorrejuvvon"},{"language":"SH","value":"Molimo sačekajte"},{"language":"SK","value":"Prosím čakajte"},{"language":"SL","value":"Prosim počakaj"},{"language":"SR","value":"Сачекајте"},{"language":"SV","value":"Vänta"},{"language":"TH","value":"โปรดรอ"},{"language":"TR","value":"Lütfen bekleyin"},{"language":"UK","value":"Будь ласка, зачекайте"},{"language":"W","value":"Моля Изчакайте"},{"language":"ZF","value":"請稍候"},{"language":"ZH","value":"请稍等"}]},{"attribute":"text","grouping":"Properties","value":"Downloading new version...","script":"","translation":[{"language":"1","value":"取消"},{"language":"AF","value":"Laai tans nuwe weergawe af..."},{"language":"AR","value":"جارٍ تنزيل الإصدار الجديد..."},{"language":"BG","value":"Изтегля се нова версия..."},{"language":"CA","value":"S'està baixant la nova versió..."},{"language":"CS","value":"Stahování nové verze..."},{"language":"D","value":"Abbrechen"},{"language":"DA","value":"Downloader ny version ..."},{"language":"DE","value":"Neue Version herunterladen ..."},{"language":"EL","value":"Λήψη νέας έκδοσης..."},{"language":"EN","value":"Downloading new version..."},{"language":"ES","value":"Descargando nueva versión..."},{"language":"ET","value":"Uue versiooni allalaadimine..."},{"language":"F","value":"Annuler"},{"language":"FI","value":"Ladataan uutta versiota..."},{"language":"FR","value":"Téléchargement de la nouvelle version..."},{"language":"HE","value":"מוריד גרסה חדשה..."},{"language":"HR","value":"Preuzimanje nove verzije..."},{"language":"HU","value":"Új verzió letöltése..."},{"language":"ID","value":"Mengunduh versi baru..."},{"language":"IS","value":"Sækir nýja útgáfu..."},{"language":"IT","value":"Download della nuova versione..."},{"language":"JA","value":"新しいバージョンをダウンロードしています..."},{"language":"K","value":"Afbryd"},{"language":"KO","value":"새 버전을 다운로드하는 중..."},{"language":"LT","value":"Atsisiunčiama nauja versija..."},{"language":"LV","value":"Notiek jaunas versijas lejupielāde..."},{"language":"MS","value":"Memuat turun versi baharu..."},{"language":"NL","value":"Nieuwe versie downloaden..."},{"language":"NN","value":"Laster ned ny versjon..."},{"language":"NO","value":"Laster ned ny versjon..."},{"language":"O","value":"Avbryt"},{"language":"P","value":"Cancelar"},{"language":"PL","value":"Pobieram nową wersję..."},{"language":"PT","value":"Baixando a nova versão..."},{"language":"R","value":"Загрузка новой версии…"},{"language":"RO","value":"Se descarcă versiunea nouă..."},{"language":"RU","value":"Скачиваю новую версию..."},{"language":"S","value":"Abortar"},{"language":"SE","value":"Laste ođđa válljen..."},{"language":"SH","value":"Preuzimanje nove verzije..."},{"language":"SK","value":"Sťahuje sa nová verzia..."},{"language":"SL","value":"Prenašanje nove različice ..."},{"language":"SR","value":"Преузимање нове верзије..."},{"language":"SV","value":"Laddar ner ny version..."},{"language":"TH","value":"กำลังดาวน์โหลดเวอร์ชันใหม่..."},{"language":"TR","value":"Yeni sürüm indiriliyor..."},{"language":"UK","value":"Завантаження нової версії..."},{"language":"W","value":"Новата версия се изтегля ..."},{"language":"ZF","value":"正在下載新版本..."},{"language":"ZH","value":"正在下载新版本..."}]},{"attribute":"showCancelButton","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"customIconDensityAware","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"cancelButtonText","grouping":"Properties","value":"Cancel","script":"","translation":[{"language":"1","value":"取消"},{"language":"D","value":"Abbrechen"},{"language":"F","value":"Annuler"},{"language":"K","value":"Afbryd"},{"language":"O","value":"Avbryt"},{"language":"P","value":"Cancelar"},{"language":"R","value":"Отменить"},{"language":"S","value":"Abortar"},{"language":"W","value":"Откажи"}]},{"attribute":"close","grouping":"Events","value":"Anonymous Function","script":"if (typeof AppCache.abortDownload === 'function') {\r\n    AppCache.abortDownload();\r\n}","language":"javascript","translation":[]}],"fieldPos":261},{"fieldNo":"f4fef048-0990-4dd0-ee55-3dde54181acf","fieldName":"busyDialogStartup","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldType":"sap.m.BusyDialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"Please wait","script":"","translation":[{"language":"AF","value":"Wag asseblief"},{"language":"AR","value":"انتظر من فضلك"},{"language":"BG","value":"Моля Изчакай"},{"language":"CA","value":"Si us plau, espereu"},{"language":"CS","value":"Prosím, čekejte"},{"language":"DA","value":"Vent venligst"},{"language":"DE","value":"Bitte warten"},{"language":"EL","value":"Παρακαλώ περιμένετε"},{"language":"EN","value":"Please wait"},{"language":"ES","value":"Espere por favor"},{"language":"ET","value":"Palun oota"},{"language":"FI","value":"Odota"},{"language":"FR","value":"S'il vous plaît, attendez"},{"language":"HE","value":"המתן בבקשה"},{"language":"HR","value":"Molimo pričekajte"},{"language":"HU","value":"Kérlek várj"},{"language":"ID","value":"Harap tunggu"},{"language":"IS","value":"Vinsamlegast bíðið"},{"language":"IT","value":"attendere prego"},{"language":"JA","value":"お待ちください"},{"language":"KO","value":"기다리세요"},{"language":"LT","value":"Prašau palauk"},{"language":"LV","value":"Lūdzu uzgaidiet"},{"language":"MS","value":"Sila tunggu"},{"language":"NL","value":"Even geduld aub"},{"language":"NN","value":"Vennligst vent"},{"language":"NO","value":"Vennligst vent"},{"language":"PL","value":"Proszę czekać"},{"language":"PT","value":"Por favor, aguarde"},{"language":"RO","value":"Va rugam asteptati"},{"language":"RU","value":"пожалуйста, подождите"},{"language":"SE","value":"Leage buorrejuvvon"},{"language":"SH","value":"Molimo sačekajte"},{"language":"SK","value":"Prosím čakajte"},{"language":"SL","value":"Prosim počakaj"},{"language":"SR","value":"Сачекајте"},{"language":"SV","value":"Vänta"},{"language":"TH","value":"โปรดรอ"},{"language":"TR","value":"Lütfen bekleyin"},{"language":"UK","value":"Будь ласка, зачекайте"},{"language":"ZF","value":"請稍候"},{"language":"ZH","value":"请稍等"}]},{"attribute":"text","grouping":"Properties","value":"Loading tiles for the first time","script":"","translation":[{"language":"AF","value":"Laai teëls vir die eerste keer"},{"language":"AR","value":"تحميل البلاط لأول مرة"},{"language":"BG","value":"Зареждане на плочки за първи път"},{"language":"CA","value":"Carregant fitxes per primera vegada"},{"language":"CS","value":"První načítání dlaždic"},{"language":"DA","value":"Indlæser fliser for første gang"},{"language":"DE","value":"Initiales Laden der Kacheln"},{"language":"EL","value":"Φόρτωση πλακιδίων για πρώτη φορά"},{"language":"EN","value":"Loading tiles for the first time"},{"language":"ES","value":"Cargando mosaicos por primera vez"},{"language":"ET","value":"Plaatide esmakordne laadimine"},{"language":"FI","value":"Ladataan laattoja ensimmäistä kertaa"},{"language":"FR","value":"Charger des tuiles pour la première fois"},{"language":"HE","value":"טעינת אריחים בפעם הראשונה"},{"language":"HR","value":"Učitavanje pločica po prvi put"},{"language":"HU","value":"Csempe betöltése első alkalommal"},{"language":"ID","value":"Memuat ubin untuk pertama kalinya"},{"language":"IS","value":"Hleður flísum í fyrsta skipti"},{"language":"IT","value":"Caricamento delle tessere per la prima volta"},{"language":"JA","value":"初めてタイルをロードする"},{"language":"KO","value":"처음으로 타일 로드"},{"language":"LT","value":"Plyteles krauname pirmą kartą"},{"language":"LV","value":"Pirmo reizi tiek ielādētas flīzes"},{"language":"MS","value":"Memuatkan jubin untuk kali pertama"},{"language":"NL","value":"Tegels voor de eerste keer laden"},{"language":"NN","value":"Laster inn fliser for første gang"},{"language":"NO","value":"Laster fliser for første gang"},{"language":"PL","value":"Ładowanie płytek po raz pierwszy"},{"language":"PT","value":"Carregando blocos pela primeira vez"},{"language":"RO","value":"Încărcarea plăcilor pentru prima dată"},{"language":"RU","value":"Загрузка плиток в первый раз"},{"language":"SE","value":"Laste fláhpiid vuosttaš logi"},{"language":"SH","value":"Učitavanje pločica prvi put"},{"language":"SK","value":"Prvé načítanie dlaždíc"},{"language":"SL","value":"Prvo nalaganje ploščic"},{"language":"SR","value":"Учитавање плочица по први пут"},{"language":"SV","value":"Laddar plattor för första gången"},{"language":"TH","value":"กำลังโหลดไทล์เป็นครั้งแรก"},{"language":"TR","value":"Döşemeleri ilk kez yüklüyorum"},{"language":"UK","value":"Перше завантаження плиток"},{"language":"ZF","value":"首次載入磚塊"},{"language":"ZH","value":"第一次加载图块"}]},{"attribute":"showCancelButton","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":262},{"fieldNo":"90c0c787-bfda-4b6b-878d-82f80209f941","fieldName":"butSupportedBrowsersClose","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"icon","grouping":"Properties","value":"sap-icon://sys-cancel","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"popSupportedBrowsers.close();","script":"popSupportedBrowsers.close();","translation":[]}],"fieldPos":263},{"fieldNo":"02f9e36d-6c59-4b0d-d091-431845b4ac85","fieldName":"popSupportedBrowsers","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldType":"sap.m.Popover","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"Compatible On","script":"","translation":[{"language":"AF","value":"Versoenbaar aan"},{"language":"AR","value":"متوافق على"},{"language":"BG","value":"Съвместим Вкл"},{"language":"CA","value":"Compatible activat"},{"language":"CS","value":"Kompatibilní zapnuto"},{"language":"DA","value":"Kompatibel På"},{"language":"DE","value":"Kompatibel an"},{"language":"EL","value":"Συμβατό Ενεργό"},{"language":"EN","value":"Compatible On"},{"language":"ES","value":"Compatible encendido"},{"language":"ET","value":"Ühildub sees"},{"language":"FI","value":"Yhteensopiva Päällä"},{"language":"FR","value":"Compatible sur"},{"language":"HE","value":"תואם פועל"},{"language":"HR","value":"Kompatibilno uključeno"},{"language":"HU","value":"Kompatibilis Be"},{"language":"ID","value":"Kompatibel Aktif"},{"language":"IS","value":"Samhæft á"},{"language":"IT","value":"Compatibile attivo"},{"language":"JA","value":"互換性あり"},{"language":"KO","value":"호환 가능"},{"language":"LT","value":"Suderinamas įjungtas"},{"language":"LV","value":"Saderīgs ieslēgts"},{"language":"MS","value":"Serasi Hidup"},{"language":"NL","value":"Compatibel Aan"},{"language":"NN","value":"Kompatibel med"},{"language":"NO","value":"Kompatibel med"},{"language":"PL","value":"Kompatybilny włączony"},{"language":"PT","value":"Compatível ativado"},{"language":"RO","value":"Compatibil Activat"},{"language":"RU","value":"Совместимость включена"},{"language":"SE","value":"Válljen"},{"language":"SH","value":"Kompatibilno na"},{"language":"SK","value":"Kompatibilné zapnuté"},{"language":"SL","value":"Združljivo Vklopljeno"},{"language":"SR","value":"Цомпатибле Он"},{"language":"SV","value":"Kompatibel på"},{"language":"TH","value":"เข้ากันได้บน"},{"language":"TR","value":"Uyumlu Açık"},{"language":"UK","value":"Сумісність Увімк"},{"language":"ZF","value":"相容於"},{"language":"ZH","value":"兼容开"}]},{"attribute":"contentWidth","grouping":"Properties","value":"180px","script":"","translation":[]},{"attribute":"endButton","grouping":"Associations","value":"butSupportedBrowsersClose","script":"","translation":[]}],"fieldPos":264},{"fieldNo":"ce74f358-1437-4b55-f776-b977e8e49332","fieldName":"listSupportedBrowsers","fieldParent":"02f9e36d-6c59-4b0d-d091-431845b4ac85","fieldType":"sap.m.List","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[],"fieldPos":265},{"fieldNo":"21647170-1598-45d9-87d0-ff60c5a66ba5","fieldName":"itemSupportedBrowsers","fieldParent":"ce74f358-1437-4b55-f776-b977e8e49332","fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"{name}","script":"","translation":[]}],"fieldPos":266},{"fieldNo":"a0b99188-573e-4f4a-b863-ef6a033a2f14","fieldName":"popNavBar","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldType":"sap.m.Popover","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPopCards","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showArrow","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"offsetX","grouping":"Properties","value":"-56","script":"","translation":[]}],"fieldPos":267},{"fieldNo":"45d7de06-550b-452f-87db-a856c7b42f7d","fieldName":"blockPopover","fieldParent":"a0b99188-573e-4f4a-b863-ef6a033a2f14","fieldType":"sap.ui.layout.BlockLayout","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"background","grouping":"Properties","value":"Default","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"keepFontSize","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":268},{"fieldNo":"c484027e-c069-4576-d40d-6b976fc5c8c0","fieldName":"blockPopoverRow","fieldParent":"45d7de06-550b-452f-87db-a856c7b42f7d","fieldType":"sap.ui.layout.BlockLayoutRow","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":269},{"fieldNo":"f4aaa6e7-327a-4600-bffc-b6c705bfa826","fieldName":"popBlackout","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldType":"sap.m.Popover","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"placement","grouping":"Properties","value":"PreferredBottomOrFlip","script":"","translation":[]},{"attribute":"contentWidth","grouping":"Properties","value":"600px","script":"","translation":[]},{"attribute":"contentHeight","grouping":"Properties","value":"400px","script":"","translation":[]}],"fieldPos":270},{"fieldNo":"217961dd-d0a8-4eb8-e0fa-9fd8f34e85d7","fieldName":"scrollBlackout","fieldParent":"f4aaa6e7-327a-4600-bffc-b6c705bfa826","fieldType":"sap.m.ScrollContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"vertical","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"horizontal","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}],"fieldPos":271},{"fieldNo":"1965721f-736a-4721-d016-77c0ebd213a6","fieldName":"descBlackout","fieldParent":"217961dd-d0a8-4eb8-e0fa-9fd8f34e85d7","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}],"fieldPos":272},{"fieldNo":"9c4082a6-5e9c-4038-a65d-4890eea98611","fieldName":"popCustomizationTiles","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldType":"sap.m.Popover","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomePopover","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"placement","grouping":"Properties","value":"Auto","script":"","translation":[]},{"attribute":"afterClose","grouping":"Events","value":"sap.n.Customization.Popover.context = null;","script":"sap.n.Customization.Popover.context = null;","translation":[]}],"fieldPos":273},{"fieldNo":"92c5ee10-2af6-4463-a3fa-65a540f767e7","fieldName":"pctList","fieldParent":"9c4082a6-5e9c-4038-a65d-4890eea98611","fieldType":"sap.m.List","description":"pct = popover customization tiles","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeList","script":"","translation":[]},{"attribute":"showSeparators","grouping":"Properties","value":"None","script":"","translation":[]}],"fieldPos":274},{"fieldNo":"ad3f09b7-41c3-4f81-bb18-989a02e81fa2","fieldName":"pctEditPage","fieldParent":"92c5ee10-2af6-4463-a3fa-65a540f767e7","fieldType":"sap.m.CustomListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeListItemInformation","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Customization.Popover.onEditPage();","script":"sap.n.Customization.Popover.onEditPage();","translation":[]}],"fieldPos":275},{"fieldNo":"6cee8a94-250f-4f78-baa9-a439f9a68da6","fieldName":"pctHBox3","fieldParent":"ad3f09b7-41c3-4f81-bb18-989a02e81fa2","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":276},{"fieldNo":"41d7bf14-8aae-48e6-ba57-94474f33fcf3","fieldName":"pctHBoxLeft3","fieldParent":"6cee8a94-250f-4f78-baa9-a439f9a68da6","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeTitle","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}],"fieldPos":277},{"fieldNo":"1d652a08-9608-4d19-d252-ab4364248aa7","fieldName":"popCustomizationTilesHBoxTitle3","fieldParent":"41d7bf14-8aae-48e6-ba57-94474f33fcf3","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Edit Screen","script":"","translation":[{"language":"AF","value":"Wysig skerm"},{"language":"AR","value":"تحرير الشاشة"},{"language":"BG","value":"Екран за редактиране"},{"language":"CA","value":"Pantalla d'edició"},{"language":"CS","value":"Upravit obrazovku"},{"language":"DA","value":"Rediger skærm"},{"language":"DE","value":"Bildschirm bearbeiten"},{"language":"EL","value":"Επεξεργασία οθόνης"},{"language":"ES","value":"Editar pantalla"},{"language":"ET","value":"Redigeeri ekraani"},{"language":"FI","value":"Muokkaa näyttöä"},{"language":"FR","value":"Écran Modifier"},{"language":"HE","value":"ערוך מסך"},{"language":"HR","value":"Uredi zaslon"},{"language":"HU","value":"Képernyő szerkesztése"},{"language":"ID","value":"Sunting Layar"},{"language":"IS","value":"Breyta skjá"},{"language":"IT","value":"Modifica schermata"},{"language":"JA","value":"編集画面"},{"language":"KO","value":"편집 화면"},{"language":"LT","value":"Redaguoti ekraną"},{"language":"LV","value":"Rediģēt ekrānu"},{"language":"MS","value":"Skrin Edit"},{"language":"NL","value":"Scherm bewerken"},{"language":"NN","value":"Rediger skjerm"},{"language":"NO","value":"Rediger skjerm"},{"language":"PL","value":"Edytuj ekran"},{"language":"PT","value":"Editar tela"},{"language":"RO","value":"Editați ecranul"},{"language":"RU","value":"Экран редактирования"},{"language":"SE","value":"Rievdadit skáhpi"},{"language":"SH","value":"Uredi ekran"},{"language":"SK","value":"Upraviť obrazovku"},{"language":"SL","value":"Uredi zaslon"},{"language":"SR","value":"Екран за уређивање"},{"language":"SV","value":"Redigera skärm"},{"language":"TH","value":"แก้ไขหน้าจอ"},{"language":"TR","value":"Ekranı Düzenle"},{"language":"UK","value":"Екран редагування"},{"language":"ZF","value":"編輯畫面"},{"language":"ZH","value":"编辑屏幕"}]}],"fieldPos":278},{"fieldNo":"4b93b2d6-d1ca-4db4-97f9-fdd521b52687","fieldName":"pctHBoxRight3","fieldParent":"6cee8a94-250f-4f78-baa9-a439f9a68da6","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeIcon","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}],"fieldPos":279},{"fieldNo":"7aecb9c7-ce43-4e9e-be6c-175f3e29eaa6","fieldName":"popCustomizationTilesHBoxIcon3","fieldParent":"4b93b2d6-d1ca-4db4-97f9-fdd521b52687","fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"src","grouping":"Properties","value":"sap-icon://desktop-mobile","script":"","translation":[]}],"fieldPos":280},{"fieldNo":"6da1727f-61f7-46d5-954d-24e12f0d4e17","fieldName":"pctTileResize","fieldParent":"92c5ee10-2af6-4463-a3fa-65a540f767e7","fieldType":"sap.m.CustomListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeListItemInformation","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Customization.Popover.onTileResize();","script":"sap.n.Customization.Popover.onTileResize();","translation":[]}],"fieldPos":281},{"fieldNo":"57f4665b-2e2f-42a2-ed94-1ccdd75bc024","fieldName":"pctHBox2","fieldParent":"6da1727f-61f7-46d5-954d-24e12f0d4e17","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":282},{"fieldNo":"e6cf20d0-032b-4c17-d823-7bad16a22add","fieldName":"pctHBoxLeft2","fieldParent":"57f4665b-2e2f-42a2-ed94-1ccdd75bc024","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeTitle","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}],"fieldPos":283},{"fieldNo":"a69104b8-d72c-4701-efd2-d595de95b6f2","fieldName":"popCustomizationTilesHBoxTitle2","fieldParent":"e6cf20d0-032b-4c17-d823-7bad16a22add","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Resize","script":"","translation":[{"language":"AF","value":"Verander grootte"},{"language":"AR","value":"تغيير الحجم"},{"language":"BG","value":"Преоразмеряване"},{"language":"CA","value":"Canvia la mida"},{"language":"CS","value":"Změnit velikost"},{"language":"DA","value":"Ændr størrelse"},{"language":"DE","value":"Größe ändern"},{"language":"EL","value":"Αλλαγή μεγέθους"},{"language":"ES","value":"Cambiar tamaño"},{"language":"ET","value":"Muuda suurust"},{"language":"FI","value":"Muuta kokoa"},{"language":"FR","value":"Redimensionner"},{"language":"HE","value":"שנה גודל"},{"language":"HR","value":"Promjena veličine"},{"language":"HU","value":"Átméretezés"},{"language":"ID","value":"Ubah ukuran"},{"language":"IS","value":"Breyta stærð"},{"language":"IT","value":"Ridimensionare"},{"language":"JA","value":"サイズ変更"},{"language":"KO","value":"크기 조정"},{"language":"LT","value":"Pakeisti dydį"},{"language":"LV","value":"Mainīt izmērus"},{"language":"MS","value":"Ubah saiz"},{"language":"NL","value":"Formaat wijzigen"},{"language":"NN","value":"Endre størrelse"},{"language":"NO","value":"Endre størrelse"},{"language":"PL","value":"Zmień rozmiar"},{"language":"PT","value":"Redimensionar"},{"language":"RO","value":"Redimensionați"},{"language":"RU","value":"Изменить размер"},{"language":"SE","value":"Stuorit"},{"language":"SH","value":"Promeni veličinu"},{"language":"SK","value":"Zmeniť veľkosť"},{"language":"SL","value":"Spremeni velikost"},{"language":"SR","value":"Промените величину"},{"language":"SV","value":"Ändra storlek"},{"language":"TH","value":"ปรับขนาด"},{"language":"TR","value":"Yeniden boyutlandır"},{"language":"UK","value":"Змінити розмір"},{"language":"ZF","value":"調整大小"},{"language":"ZH","value":"调整大小"}]}],"fieldPos":284},{"fieldNo":"aafd831e-250f-4d3c-963c-fd137b9d398a","fieldName":"pctHBoxRight2","fieldParent":"57f4665b-2e2f-42a2-ed94-1ccdd75bc024","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeIcon","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}],"fieldPos":285},{"fieldNo":"de839ae2-f8e0-44fd-fcf5-2b691096eb9f","fieldName":"popCustomizationTilesHBoxIcon2","fieldParent":"aafd831e-250f-4d3c-963c-fd137b9d398a","fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"src","grouping":"Properties","value":"sap-icon://resize","script":"","translation":[]}],"fieldPos":286},{"fieldNo":"74d9a7e5-1391-4ff3-c52b-27e028adfefe","fieldName":"pctMoveToAnotherPage","fieldParent":"92c5ee10-2af6-4463-a3fa-65a540f767e7","fieldType":"sap.m.CustomListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeListItemInformation","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Customization.Popover.onMoveTileToAnotherPage();","script":"sap.n.Customization.Popover.onMoveTileToAnotherPage();","translation":[]}],"fieldPos":287},{"fieldNo":"02ee1bf9-9062-40a7-8d61-0ad9469729f8","fieldName":"pctHBox1","fieldParent":"74d9a7e5-1391-4ff3-c52b-27e028adfefe","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":288},{"fieldNo":"f953f2e1-05f4-46f9-f80d-54675ba34173","fieldName":"pctHBoxLeft1","fieldParent":"02ee1bf9-9062-40a7-8d61-0ad9469729f8","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeTitle","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}],"fieldPos":289},{"fieldNo":"6299a925-7b9a-4b99-a65e-08e98bbe4da3","fieldName":"popCustomizationTilesHBoxTitle1","fieldParent":"f953f2e1-05f4-46f9-f80d-54675ba34173","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Move to another screen","script":"","translation":[{"language":"AF","value":"Beweeg na 'n ander skerm"},{"language":"AR","value":"الانتقال إلى شاشة أخرى"},{"language":"BG","value":"Преминете към друг екран"},{"language":"CA","value":"Mou a una altra pantalla"},{"language":"CS","value":"Přejděte na jinou obrazovku"},{"language":"DA","value":"Flyt til en anden skærm"},{"language":"DE","value":"Wechseln Sie zu einem anderen Bildschirm"},{"language":"EL","value":"Μετακίνηση σε άλλη οθόνη"},{"language":"ES","value":"Pasar a otra pantalla"},{"language":"ET","value":"Liikuge teisele ekraanile"},{"language":"FI","value":"Siirry toiselle näytölle"},{"language":"FR","value":"Passer à un autre écran"},{"language":"HE","value":"עבור למסך אחר"},{"language":"HR","value":"Prelazak na drugi zaslon"},{"language":"HU","value":"Ugrás egy másik képernyőre"},{"language":"ID","value":"Pindah ke layar lain"},{"language":"IS","value":"Farðu á annan skjá"},{"language":"IT","value":"Passare a un'altra schermata"},{"language":"JA","value":"別の画面に移動する"},{"language":"KO","value":"다른 화면으로 이동"},{"language":"LT","value":"Pereikite į kitą ekraną"},{"language":"LV","value":"Pāriet uz citu ekrānu"},{"language":"MS","value":"Beralih ke skrin lain"},{"language":"NL","value":"Ga naar een ander scherm"},{"language":"NN","value":"Flytt til en annen skjerm"},{"language":"NO","value":"Flytt til en annen skjerm"},{"language":"PL","value":"Przejdź do innego ekranu"},{"language":"PT","value":"Mover para outra tela"},{"language":"RO","value":"Treceți la alt ecran"},{"language":"RU","value":"Перейти на другой экран"},{"language":"SE","value":"Jorgalit eará skáhpiin"},{"language":"SH","value":"Premesti na drugi ekran"},{"language":"SK","value":"Presuňte sa na inú obrazovku"},{"language":"SL","value":"Premakni se na drug zaslon"},{"language":"SR","value":"Пређите на други екран"},{"language":"SV","value":"Flytta till en annan skärm"},{"language":"TH","value":"ย้ายไปที่หน้าจออื่น"},{"language":"TR","value":"Başka bir ekrana taşı"},{"language":"UK","value":"Перейти на інший екран"},{"language":"ZF","value":"移至其他畫面"},{"language":"ZH","value":"移至另一个屏幕"}]}],"fieldPos":290},{"fieldNo":"7e03169a-103e-4990-f00e-048bd0e8ab5b","fieldName":"pctHBoxRight1","fieldParent":"02ee1bf9-9062-40a7-8d61-0ad9469729f8","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeIcon","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}],"fieldPos":291},{"fieldNo":"85379b92-09bb-49c4-e315-b38d2027a3a3","fieldName":"popCustomizationTilesHBoxIcon1","fieldParent":"7e03169a-103e-4990-f00e-048bd0e8ab5b","fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"src","grouping":"Properties","value":"sap-icon://inspect","script":"","translation":[]}],"fieldPos":292},{"fieldNo":"6e04e9be-9fe6-476c-c47b-6b8b9642dd0b","fieldName":"pctTileRemove","fieldParent":"92c5ee10-2af6-4463-a3fa-65a540f767e7","fieldType":"sap.m.CustomListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeListItemError nepEditHomeListItemTileRemove","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Customization.Popover.onTileRemove();","script":"sap.n.Customization.Popover.onTileRemove();","translation":[]}],"fieldPos":293},{"fieldNo":"13599d78-0ff0-4e41-ef0f-495a5009efcf","fieldName":"pctHBox","fieldParent":"6e04e9be-9fe6-476c-c47b-6b8b9642dd0b","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":294},{"fieldNo":"d16dac63-d948-46ad-8824-a839a1d36f44","fieldName":"pctHBoxLeft","fieldParent":"13599d78-0ff0-4e41-ef0f-495a5009efcf","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeTitle","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}],"fieldPos":295},{"fieldNo":"c622d1bb-4cda-403b-8afc-3a0a16018584","fieldName":"popCustomizationTilesHBoxTitle","fieldParent":"d16dac63-d948-46ad-8824-a839a1d36f44","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Remove App","script":"","translation":[{"language":"AF","value":"Verwyder App"},{"language":"AR","value":"إزالة التطبيق"},{"language":"BG","value":"Премахване на приложението"},{"language":"CA","value":"Elimina l'aplicació"},{"language":"CS","value":"Odebrat aplikaci"},{"language":"DA","value":"Fjern app"},{"language":"DE","value":"App entfernen"},{"language":"EL","value":"Κατάργηση εφαρμογής"},{"language":"ES","value":"Eliminar aplicaciones"},{"language":"ET","value":"Eemalda rakendus"},{"language":"FI","value":"Poista sovellus"},{"language":"FR","value":"Supprimer l'application"},{"language":"HE","value":"הסר את האפליקציה"},{"language":"HR","value":"Ukloni aplikaciju"},{"language":"HU","value":"Alkalmazás eltávolítása"},{"language":"ID","value":"Hapus Aplikasi"},{"language":"IS","value":"Fjarlægja app"},{"language":"IT","value":"Rimuovi l'app"},{"language":"JA","value":"アプリを削除する"},{"language":"KO","value":"앱 제거"},{"language":"LT","value":"Pašalinti programą"},{"language":"LV","value":"Noņemt lietotni"},{"language":"MS","value":"Alih keluar Apl"},{"language":"NL","value":"App verwijderen"},{"language":"NN","value":"Fjern app"},{"language":"NO","value":"Fjern app"},{"language":"PL","value":"Usuń aplikację"},{"language":"PT","value":"Remover aplicativo"},{"language":"RO","value":"Eliminați aplicația"},{"language":"RU","value":"Удалить приложение"},{"language":"SE","value":"Eahket applikašuvdna"},{"language":"SH","value":"Ukloni aplikaciju"},{"language":"SK","value":"Odstrániť aplikáciu"},{"language":"SL","value":"Odstrani aplikacijo"},{"language":"SR","value":"Уклоните апликацију"},{"language":"SV","value":"Ta bort appen"},{"language":"TH","value":"ลบแอพ"},{"language":"TR","value":"Uygulamayı Kaldır"},{"language":"UK","value":"Видалити додаток"},{"language":"ZF","value":"移除應用程式"},{"language":"ZH","value":"删除应用程序"}]}],"fieldPos":296},{"fieldNo":"36ebadc3-b55e-4e8d-fe77-3535f17a3b7b","fieldName":"pctHBoxRight","fieldParent":"13599d78-0ff0-4e41-ef0f-495a5009efcf","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeIcon","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}],"fieldPos":297},{"fieldNo":"c8202adc-6e72-4044-c6f6-aa7c65494c26","fieldName":"popCustomizationTilesHBoxIcon","fieldParent":"36ebadc3-b55e-4e8d-fe77-3535f17a3b7b","fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"src","grouping":"Properties","value":"sap-icon://sys-minus","script":"","translation":[]}],"fieldPos":298},{"fieldNo":"2639f8bf-33df-418b-e0fd-da3db472b4a6","fieldName":"pctManageScreens","fieldParent":"92c5ee10-2af6-4463-a3fa-65a540f767e7","fieldType":"sap.m.CustomListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Customization.showManagePagesDialog();","script":"sap.n.Customization.showManagePagesDialog();","translation":[]}],"fieldPos":299},{"fieldNo":"65b3d1a5-56e1-46e0-f190-ddbeed83515c","fieldName":"pctHBox4","fieldParent":"2639f8bf-33df-418b-e0fd-da3db472b4a6","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":300},{"fieldNo":"e6d237d1-6082-414e-ea67-e22f14406af9","fieldName":"pctHBoxLeft4","fieldParent":"65b3d1a5-56e1-46e0-f190-ddbeed83515c","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeTitle","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}],"fieldPos":301},{"fieldNo":"141d9d62-b80a-4fc1-94e1-59273bded19b","fieldName":"popCustomizationTilesHBoxTitle4","fieldParent":"e6d237d1-6082-414e-ea67-e22f14406af9","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Manage Screens","script":"","translation":[{"language":"AF","value":"Bestuur skerms"},{"language":"AR","value":"إدارة الشاشات"},{"language":"BG","value":"Управление на екрани"},{"language":"CA","value":"Gestionar pantalles"},{"language":"CS","value":"Správa obrazovek"},{"language":"DA","value":"Administrer skærme"},{"language":"DE","value":"Bildschirme verwalten"},{"language":"EL","value":"Διαχείριση οθονών"},{"language":"ES","value":"Administrar pantallas"},{"language":"ET","value":"Ekraanide haldamine"},{"language":"FI","value":"Hallitse näyttöjä"},{"language":"FR","value":"Gérer les écrans"},{"language":"HE","value":"ניהול מסכים"},{"language":"HR","value":"Upravljanje zaslonima"},{"language":"HU","value":"Képernyők kezelése"},{"language":"ID","value":"Kelola Layar"},{"language":"IS","value":"Stjórna skjám"},{"language":"IT","value":"Gestisci schermi"},{"language":"JA","value":"画面の管理"},{"language":"KO","value":"화면 관리"},{"language":"LT","value":"Tvarkyti ekranus"},{"language":"LV","value":"Pārvaldīt ekrānus"},{"language":"MS","value":"Urus Skrin"},{"language":"NL","value":"Beheer schermen"},{"language":"NN","value":"Administrer skjermer"},{"language":"NO","value":"Administrer skjermer"},{"language":"PL","value":"Zarządzaj ekranami"},{"language":"PT","value":"Gerenciar telas"},{"language":"RO","value":"Gestionați ecranele"},{"language":"RU","value":"Управление экранами"},{"language":"SE","value":"Rievdadit skáhpiid"},{"language":"SH","value":"Upravljaj ekranima"},{"language":"SK","value":"Spravovať obrazovky"},{"language":"SL","value":"Upravljanje zaslonov"},{"language":"SR","value":"Управљајте екранима"},{"language":"SV","value":"Hantera skärmar"},{"language":"TH","value":"จัดการหน้าจอ"},{"language":"TR","value":"Ekranları Yönet"},{"language":"UK","value":"Керування екранами"},{"language":"ZF","value":"管理畫面"},{"language":"ZH","value":"管理屏幕"}]}],"fieldPos":302},{"fieldNo":"75a079af-bcbf-4cf2-ccfe-904ca9bdec4c","fieldName":"pctHBoxRight4","fieldParent":"65b3d1a5-56e1-46e0-f190-ddbeed83515c","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeIcon","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}],"fieldPos":303},{"fieldNo":"b4622ec4-2e52-4d05-f738-cd80c9b6ca08","fieldName":"popCustomizationTilesHBoxIcon4","fieldParent":"75a079af-bcbf-4cf2-ccfe-904ca9bdec4c","fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"src","grouping":"Properties","value":"sap-icon://popup-window","script":"","translation":[]}],"fieldPos":304},{"fieldNo":"6ae2b0f0-fe48-4bcf-cccc-a5a953a7ba6e","fieldName":"pctSettings","fieldParent":"92c5ee10-2af6-4463-a3fa-65a540f767e7","fieldType":"sap.m.CustomListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"AppCacheDiaSettings.open();","script":"AppCacheDiaSettings.open();","translation":[]}],"fieldPos":305},{"fieldNo":"7878815f-0162-4b2b-80ed-62fd133ae158","fieldName":"pctHBox5","fieldParent":"6ae2b0f0-fe48-4bcf-cccc-a5a953a7ba6e","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":306},{"fieldNo":"205e11c9-e7cd-41d5-802d-91280d665b5a","fieldName":"pctHBoxLeft5","fieldParent":"7878815f-0162-4b2b-80ed-62fd133ae158","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeTitle","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}],"fieldPos":307},{"fieldNo":"2172711b-8d1c-4401-aa84-afef1c721065","fieldName":"popCustomizationTilesHBoxTitle5","fieldParent":"205e11c9-e7cd-41d5-802d-91280d665b5a","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Settings","script":"","translation":[{"language":"AF","value":"Instellings"},{"language":"AR","value":"إعدادات"},{"language":"BG","value":"Настройки"},{"language":"CA","value":"Configuració"},{"language":"CS","value":"Nastavení"},{"language":"DA","value":"Indstillinger"},{"language":"DE","value":"Einstellungen"},{"language":"EL","value":"Ρυθμίσεις"},{"language":"ES","value":"Ajustes"},{"language":"ET","value":"Seaded"},{"language":"FI","value":"asetukset"},{"language":"FR","value":"Paramètres"},{"language":"HE","value":"הגדרות"},{"language":"HR","value":"postavke"},{"language":"HU","value":"Beállítások"},{"language":"ID","value":"Pengaturan"},{"language":"IS","value":"Stillingar"},{"language":"IT","value":"Impostazioni"},{"language":"JA","value":"設定"},{"language":"KO","value":"설정"},{"language":"LT","value":"Nustatymai"},{"language":"LV","value":"Iestatījumi"},{"language":"MS","value":"tetapan"},{"language":"NL","value":"Instellingen"},{"language":"NN","value":"Innstillinger"},{"language":"NO","value":"Innstillinger"},{"language":"PL","value":"Ustawienia"},{"language":"PT","value":"Configurações"},{"language":"RO","value":"Setări"},{"language":"RU","value":"Настройки"},{"language":"SE","value":"Asetukset"},{"language":"SH","value":"Podešavanja"},{"language":"SK","value":"nastavenie"},{"language":"SL","value":"nastavitve"},{"language":"SR","value":"Подешавања"},{"language":"SV","value":"inställningar"},{"language":"TH","value":"การตั้งค่า"},{"language":"TR","value":"Ayarlar"},{"language":"UK","value":"Налаштування"},{"language":"ZF","value":"設定"},{"language":"ZH","value":"设置"}]}],"fieldPos":308},{"fieldNo":"9e55ca33-40a9-4ff9-8d8c-b6c6043bef1c","fieldName":"pctHBoxRight5","fieldParent":"7878815f-0162-4b2b-80ed-62fd133ae158","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeIcon","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}],"fieldPos":309},{"fieldNo":"7ff55352-0ea6-48de-fe64-c1bcaac1185d","fieldName":"popCustomizationTilesHBoxIcon5","fieldParent":"9e55ca33-40a9-4ff9-8d8c-b6c6043bef1c","fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"src","grouping":"Properties","value":"sap-icon://settings","script":"","translation":[]}],"fieldPos":310},{"fieldNo":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldName":"Dialogs","fieldParent":99999,"fieldType":"neptune.folder","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":311},{"fieldNo":"84b2c26b-539e-4e2c-93c4-96a145d17167","fieldName":"butDiaSetPasswordConfirm","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Confirm","script":"","translation":[{"language":"AF","value":"Bevestig"},{"language":"AR","value":"يتأكد"},{"language":"BG","value":"Потвърдете"},{"language":"CA","value":"Confirmeu"},{"language":"CS","value":"Potvrdit"},{"language":"DA","value":"Bekræfte"},{"language":"DE","value":"Bestätigen"},{"language":"EL","value":"Επιβεβαιώνω"},{"language":"EN","value":"Confirm"},{"language":"ES","value":"Confirmar"},{"language":"ET","value":"Kinnita"},{"language":"FI","value":"Vahvistaa"},{"language":"FR","value":"Confirmer"},{"language":"HE","value":"לְאַשֵׁר"},{"language":"HR","value":"Potvrdi"},{"language":"HU","value":"megerősít"},{"language":"ID","value":"Mengonfirmasi"},{"language":"IS","value":"Staðfesta"},{"language":"IT","value":"Confermare"},{"language":"JA","value":"確認する"},{"language":"KO","value":"확인하다"},{"language":"LT","value":"Patvirtinti"},{"language":"LV","value":"Apstiprināt"},{"language":"MS","value":"sahkan"},{"language":"NL","value":"Bevestigen"},{"language":"NN","value":"Bekreft"},{"language":"NO","value":"Bekreft"},{"language":"PL","value":"Potwierdzać"},{"language":"PT","value":"confirme"},{"language":"RO","value":"A confirma"},{"language":"RU","value":"Подтверждать"},{"language":"SE","value":"Vástidit"},{"language":"SH","value":"Potvrdi"},{"language":"SK","value":"Potvrďte"},{"language":"SL","value":"Potrdi"},{"language":"SR","value":"Потврди"},{"language":"SV","value":"Bekräfta"},{"language":"TH","value":"ยืนยัน"},{"language":"TR","value":"Onaylamak"},{"language":"UK","value":"Підтвердити"},{"language":"ZF","value":"確認"},{"language":"ZH","value":"确认"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"if (informSetPasswordOne.getValue() !== informSetPasswordTwo.getValue()) {\n    sap.m.MessageToast.show(\"Password confirmation doesn't match password\");\n} else if (!informSetPasswordOne.getValue()) {\n    sap.m.MessageToast.show(\"Please provide a password\");\n} else if (!informSetPasswordOld.getValue()) {\n    sap.m.MessageToast.show(\"Please provide the current password\");\n} else {\n    if (isChpassDisabled()) {\n        sap.m.MessageBox.show(\n            \"Changing password from the launchpad has been disabled\", {\n                icon: sap.m.MessageBox.Icon.INFORMATION,\n                title: \"Change Password\",\n                actions: [sap.m.MessageBox.Action.OK],\n            }\n        );\n        return;\n    }\n\n    diaSetPassword.setBusy(true);\n    data = {\n        id: AppCache.userInfo.id,\n        old: informSetPasswordOld.getValue(),\n        updated: informSetPasswordTwo.getValue()\n    }\n\n    request({\n        type: \"POST\",\n        contentType: 'application/json; charset=utf-8',\n        url: AppCache.Url + \"/user/reset\",\n        // dataType: \"json\",\n        data: JSON.stringify(data),\n        success: function (data) {\n            diaSetPassword.setBusy(false);\n            sap.m.MessageToast.show(\"Password updated\");\n            diaSetPassword.close();\n        },\n        error: function (data) {\n            diaSetPassword.setBusy(false);\n            if (data.responseJSON && data.responseJSON.status) sap.m.MessageToast.show(data.responseJSON.status);\n        }\n    });\n\n}","translation":[]}],"fieldPos":312},{"fieldNo":"754911b5-e92f-4a3f-ea45-10a0a02d98ef","fieldName":"diaSetPassword","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiNoMargin","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepDialogWithObjHeader","script":"","translation":[]},{"attribute":"draggable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"contentWidth","grouping":"Properties","value":"400px","script":"","translation":[]},{"attribute":"beforeOpen","grouping":"Events","value":"Anonymous Function","script":"//clearing dialog fields\n\ninformSetPasswordOne.setValue=\"\";\ninformSetPasswordTwo.setValue=\"\";","translation":[]},{"attribute":"endButton","grouping":"Associations","value":"butDiaSetPasswordConfirm","script":"","translation":[]}],"fieldPos":313},{"fieldNo":"b74c1e52-94d8-44cc-99b2-fd4b2e34c302","fieldName":"subHeaderPassword","fieldParent":"754911b5-e92f-4a3f-ea45-10a0a02d98ef","fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"sapContrast sapContrastPlus","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Footer","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}],"fieldPos":314},{"fieldNo":"453005bb-512a-4494-f479-794eda17bf2f","fieldName":"Right","fieldParent":"b74c1e52-94d8-44cc-99b2-fd4b2e34c302","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}],"fieldPos":315},{"fieldNo":"b9b01a9f-5976-4a8c-f241-a3dae81692e4","fieldName":"butPasswordClose","fieldParent":"453005bb-512a-4494-f479-794eda17bf2f","fieldType":"sap.m.Button","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"this.getParent().getParent().close();","script":"this.getParent().getParent().close();","translation":[]}],"fieldPos":316},{"fieldNo":"6395632d-904d-4a5f-cd9e-bfa146e1d733","fieldName":"objHeaderPassword","fieldParent":"754911b5-e92f-4a3f-ea45-10a0a02d98ef","fieldType":"sap.m.ObjectHeader","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"Password","script":"","translation":[{"language":"AF","value":"Wagwoord"},{"language":"AR","value":"كلمة المرور"},{"language":"BG","value":"Парола"},{"language":"CA","value":"Contrasenya"},{"language":"CS","value":"Heslo"},{"language":"DA","value":"Adgangskode"},{"language":"DE","value":"Passwort"},{"language":"EL","value":"Κωδικός πρόσβασης"},{"language":"EN","value":"Password"},{"language":"ES","value":"Contraseña"},{"language":"ET","value":"Parool"},{"language":"FI","value":"Salasana"},{"language":"FR","value":"Mot de passe"},{"language":"HE","value":"סיסמה"},{"language":"HR","value":"Lozinka"},{"language":"HU","value":"Jelszó"},{"language":"ID","value":"Kata sandi"},{"language":"IS","value":"Lykilorð"},{"language":"IT","value":"Parola d'ordine"},{"language":"JA","value":"パスワード"},{"language":"KO","value":"비밀번호"},{"language":"LT","value":"Slaptažodis"},{"language":"LV","value":"Parole"},{"language":"MS","value":"Kata laluan"},{"language":"NL","value":"Wachtwoord"},{"language":"NN","value":"Passord"},{"language":"NO","value":"Passord"},{"language":"PL","value":"Hasło"},{"language":"PT","value":"Senha"},{"language":"RO","value":"Parola"},{"language":"RU","value":"Пароль"},{"language":"SE","value":"Govat"},{"language":"SH","value":"Lozinka"},{"language":"SK","value":"heslo"},{"language":"SL","value":"Geslo"},{"language":"SR","value":"Лозинка"},{"language":"SV","value":"Lösenord"},{"language":"TH","value":"รหัสผ่าน"},{"language":"TR","value":"Şifre"},{"language":"UK","value":"Пароль"},{"language":"ZF","value":"密碼"},{"language":"ZH","value":"密码"}]},{"attribute":"responsive","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"numberUnit","grouping":"Properties","value":"ENTRIES","script":"","translation":[]},{"attribute":"numberState","grouping":"Properties","value":"Warning","script":"","translation":[]},{"attribute":"intro","grouping":"Properties","value":"Change users password","script":"","translation":[{"language":"AF","value":"Verander gebruikers se wagwoord"},{"language":"AR","value":"تغيير كلمة مرور المستخدمين"},{"language":"BG","value":"Променете потребителската парола"},{"language":"CA","value":"Canviar la contrasenya dels usuaris"},{"language":"CS","value":"Změnit uživatelské heslo"},{"language":"DA","value":"Skift brugeradgangskode"},{"language":"DE","value":"Ändern Sie das Benutzerpasswort"},{"language":"EL","value":"Αλλαγή κωδικού πρόσβασης χρήστη"},{"language":"EN","value":"Change users password"},{"language":"ES","value":"Cambiar contraseña de usuarios"},{"language":"ET","value":"Muutke kasutajate parooli"},{"language":"FI","value":"Vaihda käyttäjien salasana"},{"language":"FR","value":"Changer le mot de passe des utilisateurs"},{"language":"HE","value":"שנה את סיסמת המשתמש"},{"language":"HR","value":"Promjena korisničke lozinke"},{"language":"HU","value":"Felhasználói jelszó módosítása"},{"language":"ID","value":"Ubah kata sandi pengguna"},{"language":"IS","value":"Breyta lykilorði notenda"},{"language":"IT","value":"Cambia la password degli utenti"},{"language":"JA","value":"ユーザーのパスワードを変更する"},{"language":"KO","value":"사용자 비밀번호 변경"},{"language":"LT","value":"Pakeiskite vartotojų slaptažodį"},{"language":"LV","value":"Mainiet lietotāju paroli"},{"language":"MS","value":"Tukar kata laluan pengguna"},{"language":"NL","value":"Wijzig het gebruikerswachtwoord"},{"language":"NN","value":"Endre brukerens passord"},{"language":"NO","value":"Endre passord for bruker"},{"language":"PL","value":"Zmień hasło użytkownika"},{"language":"PT","value":"Alterar senha dos usuários"},{"language":"RO","value":"Schimbați parola utilizatorilor"},{"language":"RU","value":"Изменить пароль пользователя"},{"language":"SE","value":"Juvddála geavaheaddji govat"},{"language":"SH","value":"Promeni lozinku korisnika"},{"language":"SK","value":"Zmeňte používateľské heslo"},{"language":"SL","value":"Spremenite uporabniško geslo"},{"language":"SR","value":"Промените корисничку лозинку"},{"language":"SV","value":"Ändra användarens lösenord"},{"language":"TH","value":"เปลี่ยนรหัสผ่านผู้ใช้"},{"language":"TR","value":"Kullanıcıların şifresini değiştir"},{"language":"UK","value":"Змінити пароль користувача"},{"language":"ZF","value":"更改使用者密碼"},{"language":"ZH","value":"更改用户密码"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/user-shield","script":"","translation":[]}],"fieldPos":317},{"fieldNo":"bb301ff7-2295-4073-a8c2-8e9c52c9d348","fieldName":"formSetPassword","fieldParent":"754911b5-e92f-4a3f-ea45-10a0a02d98ef","fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"layout","grouping":"Properties","value":"ResponsiveGridLayout","script":"","translation":[]},{"attribute":"labelSpanM","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"labelSpanL","grouping":"Properties","value":"12","script":"","translation":[]}],"fieldPos":318},{"fieldNo":"dbc3b5ac-e43d-4705-a28f-b1a12168824b","fieldName":"lblformSetPasswordOld","fieldParent":"bb301ff7-2295-4073-a8c2-8e9c52c9d348","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Current Password","script":"","translation":[{"language":"AF","value":"huidige Sleutelwoord"},{"language":"AR","value":"كلمة السر الحالية"},{"language":"BG","value":"Настояща парола"},{"language":"CA","value":"Contrasenya actual"},{"language":"CS","value":"Aktuální heslo"},{"language":"DA","value":"nyt kodeord"},{"language":"DE","value":"Aktuelles Passwort"},{"language":"EL","value":"Τρέχων κωδικός πρόσβασης"},{"language":"EN","value":"Current Password"},{"language":"ES","value":"Contraseña actual"},{"language":"ET","value":"Praegune salasõna"},{"language":"FI","value":"Nykyinen salasana"},{"language":"FR","value":"Mot de passe actuel"},{"language":"HE","value":"סיסמה נוכחית"},{"language":"HR","value":"Trenutna lozinka"},{"language":"HU","value":"jelenlegi jelszó"},{"language":"ID","value":"kata sandi saat ini"},{"language":"IS","value":"Núverandi lykilorð"},{"language":"IT","value":"password attuale"},{"language":"JA","value":"現在のパスワード"},{"language":"KO","value":"현재 비밀번호"},{"language":"LT","value":"Dabartinis slaptažodis"},{"language":"LV","value":"Pašreizējā parole"},{"language":"MS","value":"Kata Laluan Semasa"},{"language":"NL","value":"huidig wachtwoord"},{"language":"NN","value":"Nåværende passord"},{"language":"NO","value":"Nåværende passord"},{"language":"PL","value":"Aktualne hasło"},{"language":"PT","value":"Senha atual"},{"language":"RO","value":"Parola actuală"},{"language":"RU","value":"Текущий пароль"},{"language":"SE","value":"Ovdal govat"},{"language":"SH","value":"Trenutna lozinka"},{"language":"SK","value":"Aktuálne heslo"},{"language":"SL","value":"trenutno geslo"},{"language":"SR","value":"Тренутна лозинка"},{"language":"SV","value":"Nuvarande lösenord"},{"language":"TH","value":"รหัสผ่านปัจจุบัน"},{"language":"TR","value":"Mevcut Şifre"},{"language":"UK","value":"Поточний пароль"},{"language":"ZF","value":"目前密碼"},{"language":"ZH","value":"当前密码"}]}],"fieldPos":319},{"fieldNo":"88c5d76f-8761-4508-fc88-b3b212abb444","fieldName":"informSetPasswordOld","fieldParent":"bb301ff7-2295-4073-a8c2-8e9c52c9d348","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]}],"fieldPos":320},{"fieldNo":"f130ab33-312e-4273-8b67-3b8eb46fd34e","fieldName":"lblformSetPasswordOne","fieldParent":"bb301ff7-2295-4073-a8c2-8e9c52c9d348","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"New Password","script":"","translation":[{"language":"AF","value":"Nuwe Wagwoord"},{"language":"AR","value":"كلمة المرور الجديدة"},{"language":"BG","value":"нова парола"},{"language":"CA","value":"nova contrasenya"},{"language":"CS","value":"nové heslo"},{"language":"DA","value":"nyt kodeord"},{"language":"DE","value":"Neues Passwort"},{"language":"EL","value":"Νέος Κωδικός"},{"language":"EN","value":"New Password"},{"language":"ES","value":"Nueva contraseña"},{"language":"ET","value":"uus salasõna"},{"language":"FI","value":"uusi salasana"},{"language":"FR","value":"nouveau mot de passe"},{"language":"HE","value":"סיסמה חדשה"},{"language":"HR","value":"Nova lozinka"},{"language":"HU","value":"új jelszó"},{"language":"ID","value":"kata sandi baru"},{"language":"IS","value":"nýtt lykilorð"},{"language":"IT","value":"nuova password"},{"language":"JA","value":"新しいパスワード"},{"language":"KO","value":"새 비밀번호"},{"language":"LT","value":"Naujas Slaptažodis"},{"language":"LV","value":"jauna parole"},{"language":"MS","value":"Kata laluan baharu"},{"language":"NL","value":"nieuw paswoord"},{"language":"NN","value":"Nytt passord"},{"language":"NO","value":"Nytt passord"},{"language":"PL","value":"nowe hasło"},{"language":"PT","value":"Nova Senha"},{"language":"RO","value":"Parolă Nouă"},{"language":"RU","value":"Новый пароль"},{"language":"SE","value":"Ođđa govat"},{"language":"SH","value":"Nova lozinka"},{"language":"SK","value":"Nové heslo"},{"language":"SL","value":"novo geslo"},{"language":"SR","value":"Нова лозинка"},{"language":"SV","value":"nytt lösenord"},{"language":"TH","value":"รหัสผ่านใหม่"},{"language":"TR","value":"Yeni Şifre"},{"language":"UK","value":"Новий пароль"},{"language":"ZF","value":"新密碼"},{"language":"ZH","value":"新密码"}]}],"fieldPos":321},{"fieldNo":"76927280-5f9c-4f79-f870-bd61351ca435","fieldName":"informSetPasswordOne","fieldParent":"bb301ff7-2295-4073-a8c2-8e9c52c9d348","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]}],"fieldPos":322},{"fieldNo":"0afab486-5b54-4409-f1e3-da6886cff84a","fieldName":"lblformSetPasswordTwo","fieldParent":"bb301ff7-2295-4073-a8c2-8e9c52c9d348","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Repeat New Password","script":"","translation":[{"language":"AF","value":"Herhaal nuwe wagwoord"},{"language":"AR","value":"كرر كلمة المرور الجديدة"},{"language":"BG","value":"Повтори новата парола"},{"language":"CA","value":"Repetiu la contrasenya nova"},{"language":"CS","value":"Opakujte nové heslo"},{"language":"DA","value":"Gentag adgangskode"},{"language":"DE","value":"Wiederhole das Passwort"},{"language":"EL","value":"Επαναλάβετε τον νέο κωδικό πρόσβασης"},{"language":"EN","value":"Repeat New Password"},{"language":"ES","value":"Repita la nueva contraseña"},{"language":"ET","value":"Korrake uut parooli"},{"language":"FI","value":"Toista uusi salasana"},{"language":"FR","value":"Répété le nouveau mot de passe"},{"language":"HE","value":"חזור על סיסמה חדשה"},{"language":"HR","value":"Ponovi novu šifru"},{"language":"HU","value":"Ismételd meg az új jelszót"},{"language":"ID","value":"Ulangi Kata Sandi Baru"},{"language":"IS","value":"Endurtaktu nýtt lykilorð"},{"language":"IT","value":"Ripetere la nuova password"},{"language":"JA","value":"新しいパスワードを繰り返す"},{"language":"KO","value":"새 비밀번호를 재 입력하세요"},{"language":"LT","value":"Pakartokite naują slaptažodį"},{"language":"LV","value":"Atkārtojiet jauno paroli"},{"language":"MS","value":"Ulangi katalaluan baharu"},{"language":"NL","value":"Herhaal nieuw wachtwoord"},{"language":"NN","value":"Gjenta nytt passord"},{"language":"NO","value":"Gjenta nytt passord"},{"language":"PL","value":"Powtórz nowe hasło"},{"language":"PT","value":"Repita a nova senha"},{"language":"RO","value":"Repeta noua parola"},{"language":"RU","value":"Повторите новый пароль"},{"language":"SE","value":"Bargat ođđa govat"},{"language":"SH","value":"Ponovi novu lozinku"},{"language":"SK","value":"Opakujte nové heslo"},{"language":"SL","value":"Ponovite novo geslo"},{"language":"SR","value":"Поновите нову лозинку"},{"language":"SV","value":"Upprepa nya lösenordet"},{"language":"TH","value":"ทำซ้ำรหัสผ่านใหม่"},{"language":"TR","value":"Yeni şifreyi tekrar girin"},{"language":"UK","value":"Повторіть новий пароль"},{"language":"ZF","value":"重複新密碼"},{"language":"ZH","value":"重复新密码"}]}],"fieldPos":323},{"fieldNo":"f7d01bc7-b824-4b98-f1c4-dd0cbd27c507","fieldName":"informSetPasswordTwo","fieldParent":"bb301ff7-2295-4073-a8c2-8e9c52c9d348","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]}],"fieldPos":324},{"fieldNo":"2bf128d5-e4c8-4c9d-b397-566cddcc40ed","fieldName":"acceptMessage","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"diaMessage.onAccept();\ndiaMessage.close();\n","translation":[]}],"fieldPos":325},{"fieldNo":"779e5eb8-62ca-4ab3-9922-b0bb5b511530","fieldName":"declineMessage","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"diaMessage.onDecline();\ndiaMessage.close();\n","translation":[]}],"fieldPos":326},{"fieldNo":"91e402f0-f199-4718-9c64-1aa4fb1fecb3","fieldName":"diaMessage","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"verticalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiNoMargin","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepDialogWithObjHeader","script":"","translation":[]},{"attribute":"draggable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"contentWidth","grouping":"Properties","value":"400px","script":"","translation":[]},{"attribute":"afterClose","grouping":"Events","value":"Anonymous Function","script":"this.onClose();\ndiaMessage.setEndButton();\ndiaMessage.setBeginButton();","translation":[]}],"fieldPos":327},{"fieldNo":"4beb5f2b-cf05-40ca-a832-0b774659b2c4","fieldName":"headerMessage","fieldParent":"91e402f0-f199-4718-9c64-1aa4fb1fecb3","fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"sapContrast sapContrastPlus","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Footer","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}],"fieldPos":328},{"fieldNo":"1e47af90-b9ce-4bd2-e8a9-97f7e14ae45f","fieldName":"Right","fieldParent":"4beb5f2b-cf05-40ca-a832-0b774659b2c4","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}],"fieldPos":329},{"fieldNo":"0276adfc-5a99-4df1-e761-e477cacc8844","fieldName":"closeMessage","fieldParent":"1e47af90-b9ce-4bd2-e8a9-97f7e14ae45f","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaMessage.close();","script":"diaMessage.close();","translation":[]}],"fieldPos":330},{"fieldNo":"5506d217-6e59-4ca5-acd5-34c32b803b5e","fieldName":"objHeaderMessage","fieldParent":"91e402f0-f199-4718-9c64-1aa4fb1fecb3","fieldType":"sap.m.ObjectHeader","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"responsive","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"numberUnit","grouping":"Properties","value":"ENTRIES","script":"","translation":[]}],"fieldPos":331},{"fieldNo":"dca1a48c-3d7b-4080-840c-dc2e6eeba479","fieldName":"layoutMessage","fieldParent":"91e402f0-f199-4718-9c64-1aa4fb1fecb3","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMargin","script":"","translation":[]}],"fieldPos":332},{"fieldNo":"2464fbe9-df2f-40e6-8606-845d3ae2c9ce","fieldName":"txtMessage1","fieldParent":"dca1a48c-3d7b-4080-840c-dc2e6eeba479","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":333},{"fieldNo":"2992d5c5-4692-426d-b406-19a3446863bd","fieldName":"txtMessage2","fieldParent":"dca1a48c-3d7b-4080-840c-dc2e6eeba479","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":334},{"fieldNo":"bca46468-acd4-4bcc-cb60-7ed4735ab2a5","fieldName":"txtMessage3","fieldParent":"dca1a48c-3d7b-4080-840c-dc2e6eeba479","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":335},{"fieldNo":"157cb86d-df52-49bc-be84-1bea786f6c9a","fieldName":"diaText","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"verticalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepDialogWithObjHeader","script":"","translation":[]},{"attribute":"draggable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"contentWidth","grouping":"Properties","value":"1280px","script":"","translation":[]},{"attribute":"contentHeight","grouping":"Properties","value":"880px","script":"","translation":[]}],"fieldPos":336},{"fieldNo":"06e87d3e-373d-428a-bae2-3496a61ffdb5","fieldName":"headerText","fieldParent":"157cb86d-df52-49bc-be84-1bea786f6c9a","fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"sapContrast sapContrastPlus","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Footer","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}],"fieldPos":337},{"fieldNo":"9c2f348d-a3b8-4bb0-b0b0-67fe6f484eac","fieldName":"Right","fieldParent":"06e87d3e-373d-428a-bae2-3496a61ffdb5","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}],"fieldPos":338},{"fieldNo":"88b20027-eded-4c72-8aac-821a7a865b56","fieldName":"closeText","fieldParent":"9c2f348d-a3b8-4bb0-b0b0-67fe6f484eac","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"this.getParent().getParent().close();","script":"this.getParent().getParent().close();","translation":[]}],"fieldPos":339},{"fieldNo":"782ce653-fa1e-46cd-fb80-778e2fc70f0b","fieldName":"AppCacheText","fieldParent":"157cb86d-df52-49bc-be84-1bea786f6c9a","fieldType":"sap.m.ObjectHeader","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"responsive","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"numberUnit","grouping":"Properties","value":"ENTRIES","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://document-text","script":"","translation":[]}],"fieldPos":340},{"fieldNo":"d4c2534c-750b-4a9b-93d8-47f824810f25","fieldName":"scrollText","fieldParent":"157cb86d-df52-49bc-be84-1bea786f6c9a","fieldType":"sap.m.ScrollContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"vertical","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"horizontal","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}],"fieldPos":341},{"fieldNo":"af9030a1-36d9-479e-eb41-eeb933380418","fieldName":"panText","fieldParent":"d4c2534c-750b-4a9b-93d8-47f824810f25","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}],"fieldPos":342},{"fieldNo":"26f78f29-90c8-4a78-9321-eb3764235563","fieldName":"oHTMLText","fieldParent":"af9030a1-36d9-479e-eb41-eeb933380418","fieldType":"sap.ui.core.HTML","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":343},{"fieldNo":"04d00d2f-4953-4d70-ad39-e76a416e14e9","fieldName":"oHTML1","fieldParent":"26f78f29-90c8-4a78-9321-eb3764235563","fieldType":"neptune.Html","script":"<div id=\"textDiv\" style=\"height:777px;width:100%\"></div>","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":344},{"fieldNo":"9b84d528-14aa-4552-d9a6-75badb2ec62e","fieldName":"AppCacheDiaHashClose","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"OK","script":"","translation":[{"language":"AF","value":"OK"},{"language":"AR","value":"نعم"},{"language":"BG","value":"Добре"},{"language":"CA","value":"D'acord"},{"language":"CS","value":"OK"},{"language":"DA","value":"Okay"},{"language":"DE","value":"OK"},{"language":"EL","value":"Εντάξει"},{"language":"EN","value":"OK"},{"language":"ES","value":"DE ACUERDO"},{"language":"ET","value":"Okei"},{"language":"FI","value":"OK"},{"language":"FR","value":"D'ACCORD"},{"language":"HE","value":"בסדר"},{"language":"HR","value":"u redu"},{"language":"HU","value":"rendben"},{"language":"ID","value":"OKE"},{"language":"IS","value":"Allt í lagi"},{"language":"IT","value":"OK"},{"language":"JA","value":"わかりました"},{"language":"KO","value":"좋아요"},{"language":"LT","value":"Gerai"},{"language":"LV","value":"labi"},{"language":"MS","value":"okey"},{"language":"NL","value":"OK"},{"language":"NN","value":"OK"},{"language":"NO","value":"OK"},{"language":"PL","value":"OK"},{"language":"PT","value":"OK"},{"language":"RO","value":"Bine"},{"language":"RU","value":"ХОРОШО"},{"language":"SE","value":"OK"},{"language":"SH","value":"U redu"},{"language":"SK","value":"OK"},{"language":"SL","value":"v redu"},{"language":"SR","value":"У реду"},{"language":"SV","value":"OK"},{"language":"TH","value":"ตกลง"},{"language":"TR","value":"TAMAM"},{"language":"UK","value":"в порядку"},{"language":"ZF","value":"確定"},{"language":"ZH","value":"好的"}]},{"attribute":"press","grouping":"Events","value":"AppCacheDiaHash.close();","script":"AppCacheDiaHash.close();","translation":[]}],"fieldPos":345},{"fieldNo":"64a6adbf-1e95-4d3b-e15f-cad8a8b9cfed","fieldName":"AppCacheDiaHash","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Message","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Error","script":"","translation":[{"language":"AF","value":"Fout"},{"language":"AR","value":"خطأ"},{"language":"BG","value":"Грешка"},{"language":"CA","value":"Error"},{"language":"CS","value":"Chyba"},{"language":"DA","value":"Fejl"},{"language":"DE","value":"Fehler"},{"language":"EL","value":"Λάθος"},{"language":"EN","value":"Error"},{"language":"ES","value":"Error"},{"language":"ET","value":"Viga"},{"language":"FI","value":"Virhe"},{"language":"FR","value":"Erreur"},{"language":"HE","value":"שְׁגִיאָה"},{"language":"HR","value":"Greška"},{"language":"HU","value":"Hiba"},{"language":"ID","value":"Kesalahan"},{"language":"IS","value":"Villa"},{"language":"IT","value":"Errore"},{"language":"JA","value":"エラー"},{"language":"KO","value":"오류"},{"language":"LT","value":"Klaida"},{"language":"LV","value":"Kļūda"},{"language":"MS","value":"ralat"},{"language":"NL","value":"Fout"},{"language":"NN","value":"Feil"},{"language":"NO","value":"Feil"},{"language":"PL","value":"Błąd"},{"language":"PT","value":"Erro"},{"language":"RO","value":"Eroare"},{"language":"RU","value":"Ошибка"},{"language":"SE","value":"Váldde"},{"language":"SH","value":"Greška"},{"language":"SK","value":"Chyba"},{"language":"SL","value":"Napaka"},{"language":"SR","value":"Грешка"},{"language":"SV","value":"Fel"},{"language":"TH","value":"ข้อผิดพลาด"},{"language":"TR","value":"Hata"},{"language":"UK","value":"Помилка"},{"language":"ZF","value":"錯誤"},{"language":"ZH","value":"错误"}]},{"attribute":"state","grouping":"Properties","value":"Error","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://error","script":"","translation":[]},{"attribute":"endButton","grouping":"Associations","value":"AppCacheDiaHashClose","script":"","translation":[]}],"fieldPos":346},{"fieldNo":"bb1dd148-228d-4d90-f4d7-80f188bfc7fb","fieldName":"AppCacheDiaHashText","fieldParent":"64a6adbf-1e95-4d3b-e15f-cad8a8b9cfed","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Could not open app. Try again later.","script":"","translation":[{"language":"AF","value":"Kon nie program oopmaak nie. Probeer later weer."},{"language":"AR","value":"لا يمكن فتح التطبيق. حاول مرة أخرى في وقت لاحق."},{"language":"BG","value":"Приложението не можа да се отвори. Опитайте отново по-късно."},{"language":"CA","value":"No s'ha pogut obrir l'aplicació. Torna-ho a provar més tard."},{"language":"CS","value":"Aplikaci nelze otevřít. Zkuste to později znovu."},{"language":"DA","value":"Kunne ikke åbne app. Prøv igen senere."},{"language":"DE","value":"App konnte nicht geöffnet werden. Bitte später erneut versuchen."},{"language":"EL","value":"Δεν ήταν δυνατό το άνοιγμα της εφαρμογής. Δοκιμάστε ξανά αργότερα."},{"language":"EN","value":"Could not open app. Try again later."},{"language":"ES","value":"No se pudo abrir la aplicación. Vuelve a intentarlo más tarde."},{"language":"ET","value":"Rakendust ei saanud avada. Proovige hiljem uuesti."},{"language":"FI","value":"Sovellusta ei voitu avata. Yritä myöhemmin uudelleen."},{"language":"FR","value":"Impossible d'ouvrir l'application. Réessayez plus tard."},{"language":"HE","value":"לא ניתן היה לפתוח את האפליקציה. נסה שוב מאוחר יותר."},{"language":"HR","value":"Nije moguće otvoriti aplikaciju. Pokušajte ponovno kasnije."},{"language":"HU","value":"Nem sikerült megnyitni az alkalmazást. Próbáld újra később."},{"language":"ID","value":"Tidak dapat membuka aplikasi. Coba lagi nanti."},{"language":"IS","value":"Gat ekki opnað forritið. Reyndu aftur seinna."},{"language":"IT","value":"Impossibile aprire l'app. Riprovare più tardi."},{"language":"JA","value":"アプリを開けませんでした。あとでもう一度試してみてください。"},{"language":"KO","value":"앱을 열 수 없습니다. 나중에 다시 시도하세요."},{"language":"LT","value":"Nepavyko atidaryti programos. Pabandyti dar kartą vėliau."},{"language":"LV","value":"Nevarēja atvērt lietotni. Pamēģini vēlreiz vēlāk."},{"language":"MS","value":"Tidak dapat membuka apl. Cuba lagi nanti."},{"language":"NL","value":"Kan app niet openen. Probeer het later nog eens."},{"language":"NN","value":"Kunne ikke åpne appen. Prøv igjen senere."},{"language":"NO","value":"Kunne ikke åpne appen. Prøv igjen senere."},{"language":"PL","value":"Nie można otworzyć aplikacji. Spróbuj ponownie później."},{"language":"PT","value":"Não foi possível abrir o aplicativo. Tente mais tarde."},{"language":"RO","value":"Aplicația nu a putut fi deschisă. Încercați mai târziu."},{"language":"RU","value":"Не удалось открыть приложение. Попробуйте позже."},{"language":"SE","value":"Eai leat sáhttán eahket applikašuvdna. Sáhtát čállit vel dáid siste."},{"language":"SH","value":"Nije moguće otvoriti aplikaciju. Pokušajte ponovo kasnije."},{"language":"SK","value":"Aplikáciu sa nepodarilo otvoriť. Skúste to znova neskôr."},{"language":"SL","value":"Aplikacije ni bilo mogoče odpreti. Poskusi znova kasneje."},{"language":"SR","value":"Није могуће отворити апликацију. Покушајте поново касније."},{"language":"SV","value":"Det gick inte att öppna appen. Försök igen senare."},{"language":"TH","value":"ไม่สามารถเปิดแอปได้ ลองอีกครั้งในภายหลัง"},{"language":"TR","value":"Uygulama açılamadı. Daha sonra tekrar deneyin."},{"language":"UK","value":"Не вдалося відкрити програму. Спробуйте ще раз пізніше."},{"language":"ZF","value":"無法開啟應用程式。請稍後再試。"},{"language":"ZH","value":"无法打开应用程序。稍后再试。"}]}],"fieldPos":347},{"fieldNo":"d58f3ebb-c76a-47f6-81a3-caf3344a0499","fieldName":"AppCacheDiaSettingsClose","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"OK","script":"","translation":[{"language":"AF","value":"OK"},{"language":"AR","value":"نعم"},{"language":"BG","value":"Добре"},{"language":"CA","value":"D'acord"},{"language":"CS","value":"OK"},{"language":"DA","value":"Gemme"},{"language":"DE","value":"Speichern"},{"language":"EL","value":"Εντάξει"},{"language":"EN","value":"OK"},{"language":"ES","value":"DE ACUERDO"},{"language":"ET","value":"Okei"},{"language":"FI","value":"OK"},{"language":"FR","value":"D'ACCORD"},{"language":"HE","value":"בסדר"},{"language":"HR","value":"u redu"},{"language":"HU","value":"rendben"},{"language":"ID","value":"OKE"},{"language":"IS","value":"Allt í lagi"},{"language":"IT","value":"OK"},{"language":"JA","value":"わかりました"},{"language":"KO","value":"좋아요"},{"language":"LT","value":"Gerai"},{"language":"LV","value":"labi"},{"language":"MS","value":"okey"},{"language":"NL","value":"OK"},{"language":"NN","value":"OK"},{"language":"NO","value":"OK"},{"language":"PL","value":"OK"},{"language":"PT","value":"OK"},{"language":"RO","value":"Bine"},{"language":"RU","value":"ХОРОШО"},{"language":"SE","value":"OK"},{"language":"SH","value":"U redu"},{"language":"SK","value":"OK"},{"language":"SL","value":"v redu"},{"language":"SR","value":"У реду"},{"language":"SV","value":"OK"},{"language":"TH","value":"ตกลง"},{"language":"TR","value":"TAMAM"},{"language":"UK","value":"в порядку"},{"language":"ZF","value":"確定"},{"language":"ZH","value":"好的"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"AppCacheDiaSettings.close();\r\nsap.n.Launchpad.settingsMenuClose();\r\n","translation":[]}],"fieldPos":348},{"fieldNo":"d7b184b4-e7dd-439e-b537-e49ec02ea037","fieldName":"AppCacheDiaSettings","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldType":"sap.m.Dialog","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","bindingParentID":"f29e36cc-4c43-43e7-a1be-548815b92676","bindingPathID":"4eebeb7d-8d21-4200-fd75-b99170d28ff5","request":[],"response":[],"attributes":[{"attribute":"verticalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepSettings nepDialogWithObjHeader","script":"","translation":[]},{"attribute":"draggable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"contentWidth","grouping":"Properties","value":"600px","script":"","translation":[]},{"attribute":"contentHeight","grouping":"Properties","value":"680px","script":"","translation":[]},{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheUserBased","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"LocalStorage","script":"","translation":[]},{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"sap.n.Launchpad.applyUserTheme();","script":"sap.n.Launchpad.applyUserTheme();","translation":[]},{"attribute":"beforeOpen","grouping":"Events","value":"Anonymous Function","script":"if (!sap.n.Customization.isSupported()) {\n    chkAppCacheLockScreenChanges.setVisible(false);\n    chkAppCacheDisableScreenChanges.setVisible(false);\n    return;\n}\n\nchkAppCacheLockScreenChanges.setVisible(true).setEnabled(true);\nchkAppCacheDisableScreenChanges.setVisible(true).setEnabled(true);\n\nconst { disableScreenChanges, lockScreenChanges } = modelAppCacheDiaSettings.getData();\nif (lockScreenChanges) {\n    chkAppCacheDisableScreenChanges.setEnabled(false);\n}","translation":[]},{"attribute":"endButton","grouping":"Associations","value":"AppCacheDiaSettingsClose","script":"","translation":[]}],"fieldPos":349},{"fieldNo":"90ab8b1c-323d-47fb-94b6-12320e066424","fieldName":"headerSettings","fieldParent":"d7b184b4-e7dd-439e-b537-e49ec02ea037","fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"sapContrast sapContrastPlus","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Footer","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}],"fieldPos":350},{"fieldNo":"becaa6f9-945c-4dcf-a858-6de43edf4528","fieldName":"Right","fieldParent":"90ab8b1c-323d-47fb-94b6-12320e066424","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}],"fieldPos":351},{"fieldNo":"9527d20a-46b4-4225-c6d1-b40457afe2ba","fieldName":"closeSettings","fieldParent":"becaa6f9-945c-4dcf-a858-6de43edf4528","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"this.getParent().getParent().close();\r\nsap.n.Launchpad.settingsMenuClose();","translation":[]}],"fieldPos":352},{"fieldNo":"0a770fa8-5a7f-43ae-b613-fb80b968cf6c","fieldName":"AppCacheSettingsUser","fieldParent":"d7b184b4-e7dd-439e-b537-e49ec02ea037","fieldType":"sap.m.ObjectHeader","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"responsive","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"numberUnit","grouping":"Properties","value":"ENTRIES","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/user-circle","script":"","translation":[]}],"fieldPos":353},{"fieldNo":"f833ec93-7c71-4aa9-bbbb-363e1ada5201","fieldName":"barSettings","fieldParent":"d7b184b4-e7dd-439e-b537-e49ec02ea037","fieldType":"sap.m.IconTabBar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"expandable","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"applyContentPadding","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":354},{"fieldNo":"6fc9357b-b771-4ce8-9470-fe6ca5cfabf4","fieldName":"barSettingsGeneral","fieldParent":"f833ec93-7c71-4aa9-bbbb-363e1ada5201","fieldType":"sap.m.IconTabFilter","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"SETTINGS","script":"","translation":[{"language":"AF","value":"INSTELLINGS"},{"language":"AR","value":"إعدادات"},{"language":"BG","value":"НАСТРОЙКИ"},{"language":"CA","value":"CONFIGURACIÓ"},{"language":"CS","value":"NASTAVENÍ"},{"language":"DA","value":"INDSTILLINGER"},{"language":"DE","value":"EINSTELLUNGEN"},{"language":"EL","value":"ΡΥΘΜΙΣΕΙΣ"},{"language":"EN","value":"SETTINGS"},{"language":"ES","value":"AJUSTES"},{"language":"ET","value":"SEADED"},{"language":"FI","value":"ASETUKSET"},{"language":"FR","value":"PARAMÈTRES"},{"language":"HE","value":"הגדרות"},{"language":"HR","value":"POSTAVKE"},{"language":"HU","value":"BEÁLLÍTÁSOK"},{"language":"ID","value":"PENGATURAN"},{"language":"IS","value":"STILLINGAR"},{"language":"IT","value":"IMPOSTAZIONI"},{"language":"JA","value":"設定"},{"language":"KO","value":"설정"},{"language":"LT","value":"NUSTATYMAI"},{"language":"LV","value":"IESTATĪJUMI"},{"language":"MS","value":"TETAPAN"},{"language":"NL","value":"INSTELLINGEN"},{"language":"NN","value":"INNSTILLINGER"},{"language":"NO","value":"INNSTILLINGER"},{"language":"PL","value":"USTAWIENIA"},{"language":"PT","value":"CONFIGURAÇÕES"},{"language":"RO","value":"SETĂRI"},{"language":"RU","value":"НАСТРОЙКИ"},{"language":"SE","value":"ASETUKSET"},{"language":"SH","value":"PODEŠAVANJA"},{"language":"SK","value":"NASTAVENIE"},{"language":"SL","value":"NASTAVITVE"},{"language":"SR","value":"СЕТТИНГС"},{"language":"SV","value":"INSTÄLLNINGAR"},{"language":"TH","value":"การตั้งค่า"},{"language":"TR","value":"AYARLAR"},{"language":"UK","value":"НАЛАШТУВАННЯ"},{"language":"ZF","value":"設定"},{"language":"ZH","value":"设置"}]}],"fieldPos":355},{"fieldNo":"d672672d-161f-46b5-8f02-093873ac3388","fieldName":"scrollSettings","fieldParent":"6fc9357b-b771-4ce8-9470-fe6ca5cfabf4","fieldType":"sap.m.ScrollContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"vertical","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"horizontal","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}],"fieldPos":356},{"fieldNo":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldName":"AppCacheFormSettings","fieldParent":"d672672d-161f-46b5-8f02-093873ac3388","fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"maxContainerCols","grouping":"Properties","value":"1","script":"","translation":[]},{"attribute":"layout","grouping":"Properties","value":"ResponsiveGridLayout","script":"","translation":[]},{"attribute":"labelSpanS","grouping":"Properties","value":"4","script":"","translation":[]},{"attribute":"labelSpanM","grouping":"Properties","value":"4","script":"","translation":[]},{"attribute":"editable","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":357},{"fieldNo":"c4b737bf-e743-4138-dde9-e28104862f34","fieldName":"lblAppCacheFormSettingsLang","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Language","script":"","translation":[{"language":"AF","value":"Taal"},{"language":"AR","value":"لغة"},{"language":"BG","value":"език"},{"language":"CA","value":"Llenguatge"},{"language":"CS","value":"Jazyk"},{"language":"DA","value":"Sprog"},{"language":"DE","value":"Sprache"},{"language":"EL","value":"Γλώσσα"},{"language":"EN","value":"Language"},{"language":"ES","value":"Idioma"},{"language":"ET","value":"Keel"},{"language":"FI","value":"Kieli"},{"language":"FR","value":"Langue"},{"language":"HE","value":"שפה"},{"language":"HR","value":"Jezik"},{"language":"HU","value":"Nyelv"},{"language":"ID","value":"Bahasa"},{"language":"IS","value":"Tungumál"},{"language":"IT","value":"Lingua"},{"language":"JA","value":"言語"},{"language":"KO","value":"언어"},{"language":"LT","value":"Kalba"},{"language":"LV","value":"Valoda"},{"language":"MS","value":"Bahasa"},{"language":"NL","value":"Taal"},{"language":"NN","value":"Språk"},{"language":"NO","value":"Språk"},{"language":"PL","value":"Język"},{"language":"PT","value":"Linguagem"},{"language":"RO","value":"Limba"},{"language":"RU","value":"Язык"},{"language":"SE","value":"Giella"},{"language":"SH","value":"Jezik"},{"language":"SK","value":"Jazyk"},{"language":"SL","value":"Jezik"},{"language":"SR","value":"Језик"},{"language":"SV","value":"Språk"},{"language":"TH","value":"ภาษา"},{"language":"TR","value":"Dil"},{"language":"UK","value":"Мова"},{"language":"ZF","value":"語言"},{"language":"ZH","value":"语言"}]}],"fieldPos":358},{"fieldNo":"71531019-0b3c-4acb-b78e-6a7fe4d359f3","fieldName":"inAppCacheFormSettingsLang","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Select","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"sap.n.Launchpad.updateUserLanguage(inAppCacheFormSettingsLang.getSelectedKey() ?? '');","script":"sap.n.Launchpad.updateUserLanguage(inAppCacheFormSettingsLang.getSelectedKey() ?? '');","translation":[]}],"fieldPos":359},{"fieldNo":"ebe5e21a-b0ac-4d56-e912-035653af9ff9","fieldName":"lblAppCacheFormSettingsTRAN","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Transitions","script":"","translation":[{"language":"AF","value":"Oorgange"},{"language":"AR","value":"الانتقالات"},{"language":"BG","value":"Преходи"},{"language":"CA","value":"Transicions"},{"language":"CS","value":"Přechody"},{"language":"DA","value":"Overgange"},{"language":"DE","value":"Übergänge"},{"language":"EL","value":"Μεταβάσεις"},{"language":"EN","value":"Transitions"},{"language":"ES","value":"Transiciones"},{"language":"ET","value":"Üleminekud"},{"language":"FI","value":"Siirtymät"},{"language":"FR","value":"Transitions"},{"language":"HE","value":"מעברים"},{"language":"HR","value":"Prijelazi"},{"language":"HU","value":"Átmenetek"},{"language":"ID","value":"Transisi"},{"language":"IS","value":"Umskipti"},{"language":"IT","value":"Transizioni"},{"language":"JA","value":"トランジション"},{"language":"KO","value":"전환"},{"language":"LT","value":"Perėjimai"},{"language":"LV","value":"Pārejas"},{"language":"MS","value":"Peralihan"},{"language":"NL","value":"Overgangen"},{"language":"NN","value":"Overganger"},{"language":"NO","value":"Overganger"},{"language":"PL","value":"Przejścia"},{"language":"PT","value":"Transições"},{"language":"RO","value":"Tranziții"},{"language":"RU","value":"Переходы"},{"language":"SE","value":"Tranzisuvdnat"},{"language":"SH","value":"Prelazi"},{"language":"SK","value":"Prechody"},{"language":"SL","value":"Prehodi"},{"language":"SR","value":"Транситионс"},{"language":"SV","value":"Övergångar"},{"language":"TH","value":"การเปลี่ยนผ่าน"},{"language":"TR","value":"Geçişler"},{"language":"UK","value":"Переходи"},{"language":"ZF","value":"轉場效果"},{"language":"ZH","value":"过渡"}]}],"fieldPos":360},{"fieldNo":"92969d04-c2dc-4ff8-c2b0-4b82e716b9c9","fieldName":"inAppCacheFormSettingsTRAN","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Select","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"selectedKey","grouping":"Properties","value":"{/TRANSITION}","script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"setCacheAppCacheDiaSettings();","script":"setCacheAppCacheDiaSettings();","translation":[]}],"fieldPos":361},{"fieldNo":"ca418f6f-f2a0-43b0-d7a8-a66fe176624c","fieldName":"transitionMainNone","fieldParent":"92969d04-c2dc-4ff8-c2b0-4b82e716b9c9","fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Default","script":"","translation":[{"language":"AF","value":"Verstek"},{"language":"AR","value":"تقصير"},{"language":"BG","value":"По подразбиране"},{"language":"CA","value":"Per defecte"},{"language":"CS","value":"Výchozí"},{"language":"DA","value":"Standard"},{"language":"DE","value":"Standard"},{"language":"EL","value":"Προκαθορισμένο"},{"language":"EN","value":"Default"},{"language":"ES","value":"Por defecto"},{"language":"ET","value":"Vaikimisi"},{"language":"FI","value":"Oletus"},{"language":"FR","value":"Défaut"},{"language":"HE","value":"בְּרִירַת מֶחדָל"},{"language":"HR","value":"Zadano"},{"language":"HU","value":"Alapértelmezett"},{"language":"ID","value":"Bawaan"},{"language":"IS","value":"Sjálfgefið"},{"language":"IT","value":"Predefinito"},{"language":"JA","value":"デフォルト"},{"language":"KO","value":"기본"},{"language":"LT","value":"Numatytas"},{"language":"LV","value":"Noklusējums"},{"language":"MS","value":"Lalai"},{"language":"NL","value":"Standaard"},{"language":"NN","value":"Standard"},{"language":"NO","value":"Standard"},{"language":"PL","value":"Domyślny"},{"language":"PT","value":"Padrão"},{"language":"RO","value":"Mod implicit"},{"language":"RU","value":"По умолчанию"},{"language":"SE","value":"Dále"},{"language":"SH","value":"Podrazumevano"},{"language":"SK","value":"Predvolené"},{"language":"SL","value":"Privzeto"},{"language":"SR","value":"Уобичајено"},{"language":"SV","value":"Standard"},{"language":"TH","value":"ค่าเริ่มต้น"},{"language":"TR","value":"Varsayılan"},{"language":"UK","value":"За замовчуванням"},{"language":"ZF","value":"預設"},{"language":"ZH","value":"默认"}]}],"fieldPos":362},{"fieldNo":"bc968e47-d965-4440-c9c5-783fe5ab6338","fieldName":"transitionMainDoor","fieldParent":"92969d04-c2dc-4ff8-c2b0-4b82e716b9c9","fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Door","script":"","translation":[{"language":"AF","value":"Deur"},{"language":"AR","value":"باب"},{"language":"BG","value":"врата"},{"language":"CA","value":"Porta"},{"language":"CS","value":"Dveře"},{"language":"DA","value":"Dør"},{"language":"DE","value":"Tür"},{"language":"EL","value":"Θύρα"},{"language":"ES","value":"Puerta"},{"language":"ET","value":"Uks"},{"language":"FI","value":"Ovi"},{"language":"FR","value":"Porte"},{"language":"HE","value":"דלת"},{"language":"HR","value":"Vrata"},{"language":"HU","value":"Ajtó"},{"language":"ID","value":"Pintu"},{"language":"IS","value":"Hurð"},{"language":"IT","value":"Porta"},{"language":"JA","value":"ドア"},{"language":"KO","value":"문"},{"language":"LT","value":"Durys"},{"language":"LV","value":"Durvis"},{"language":"MS","value":"pintu"},{"language":"NL","value":"Deur"},{"language":"NN","value":"Dør"},{"language":"NO","value":"Dør"},{"language":"PL","value":"Drzwi"},{"language":"PT","value":"Porta"},{"language":"RO","value":"Uşă"},{"language":"RU","value":"Дверь"},{"language":"SE","value":"Dohko"},{"language":"SH","value":"Vrata"},{"language":"SK","value":"Dvere"},{"language":"SL","value":"Vrata"},{"language":"SR","value":"Врата"},{"language":"SV","value":"Dörr"},{"language":"TH","value":"ประตู"},{"language":"TR","value":"Kapı"},{"language":"UK","value":"двері"},{"language":"ZF","value":"門"},{"language":"ZH","value":"门"}]},{"attribute":"key","grouping":"Properties","value":"door","script":"","translation":[]}],"fieldPos":363},{"fieldNo":"e7d3622b-8a7a-4d2b-b54b-44245cb60b7a","fieldName":"transitionMainFade","fieldParent":"92969d04-c2dc-4ff8-c2b0-4b82e716b9c9","fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Fade","script":"","translation":[{"language":"AF","value":"Vervaag"},{"language":"AR","value":"يختفي"},{"language":"BG","value":"Избледняват"},{"language":"CA","value":"Esvair"},{"language":"CS","value":"Slábnout"},{"language":"DA","value":"Falme"},{"language":"DE","value":"Verblassen"},{"language":"EL","value":"Ξεθωριάζει"},{"language":"ES","value":"Desteñir"},{"language":"ET","value":"Fade"},{"language":"FI","value":"Häivyttää"},{"language":"FR","value":"Disparaître"},{"language":"HE","value":"לִדעוֹך"},{"language":"HR","value":"Uvenuti"},{"language":"HU","value":"Áttűnés"},{"language":"ID","value":"Memudar"},{"language":"IS","value":"Hverfa"},{"language":"IT","value":"Dissolvenza"},{"language":"JA","value":"フェード"},{"language":"KO","value":"바래다"},{"language":"LT","value":"Išblukti"},{"language":"LV","value":"Izbalināt"},{"language":"MS","value":"pudar"},{"language":"NL","value":"Vervagen"},{"language":"NN","value":"Fade"},{"language":"NO","value":"Falme"},{"language":"PL","value":"Znikać"},{"language":"PT","value":"Desaparecer"},{"language":"RO","value":"Decolorare"},{"language":"RU","value":"Тускнеть"},{"language":"SE","value":"Fade"},{"language":"SH","value":"Bledi"},{"language":"SK","value":"Vyblednúť"},{"language":"SL","value":"Zbledi"},{"language":"SR","value":"Фаде"},{"language":"SV","value":"Blekna"},{"language":"TH","value":"เลือนหายไป"},{"language":"TR","value":"Solmak"},{"language":"UK","value":"Зникати"},{"language":"ZF","value":"淡出"},{"language":"ZH","value":"褪色"}]},{"attribute":"key","grouping":"Properties","value":"fade","script":"","translation":[]}],"fieldPos":364},{"fieldNo":"45edee8f-1d61-4340-b9a4-f2adf1ed9634","fieldName":"transitionMainFlip","fieldParent":"92969d04-c2dc-4ff8-c2b0-4b82e716b9c9","fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Flip","script":"","translation":[{"language":"AF","value":"Flip"},{"language":"AR","value":"يواجه"},{"language":"BG","value":"Обръщане"},{"language":"CA","value":"Flip"},{"language":"CS","value":"Překlopit"},{"language":"DA","value":"Vend"},{"language":"DE","value":"Umdrehen"},{"language":"EL","value":"Αναρρίπτω"},{"language":"ES","value":"Voltear"},{"language":"ET","value":"Pöörake"},{"language":"FI","value":"Voltti"},{"language":"FR","value":"Retourner"},{"language":"HE","value":"לְהַעִיף"},{"language":"HR","value":"Preokreni"},{"language":"HU","value":"Flip"},{"language":"ID","value":"Balik"},{"language":"IS","value":"Flip"},{"language":"IT","value":"Flip"},{"language":"JA","value":"フリップ"},{"language":"KO","value":"튀기다"},{"language":"LT","value":"Apversti"},{"language":"LV","value":"Apgriezt"},{"language":"MS","value":"selak"},{"language":"NL","value":"Omdraaien"},{"language":"NN","value":"Flip"},{"language":"NO","value":"Vend"},{"language":"PL","value":"Trzepnięcie"},{"language":"PT","value":"Virar"},{"language":"RO","value":"Flip"},{"language":"RU","value":"Подбросить"},{"language":"SE","value":"Flip"},{"language":"SH","value":"Preokreni"},{"language":"SK","value":"Prevrátiť"},{"language":"SL","value":"Flip"},{"language":"SR","value":"Флип"},{"language":"SV","value":"Flip"},{"language":"TH","value":"พลิก"},{"language":"TR","value":"Çevir"},{"language":"UK","value":"Перевернути"},{"language":"ZF","value":"翻轉"},{"language":"ZH","value":"翻动"}]},{"attribute":"key","grouping":"Properties","value":"flip","script":"","translation":[]}],"fieldPos":365},{"fieldNo":"3f729b29-4263-4cde-c618-8b1d5683a853","fieldName":"transitionMainSlide","fieldParent":"92969d04-c2dc-4ff8-c2b0-4b82e716b9c9","fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Slide","script":"","translation":[{"language":"AF","value":"Skyfie"},{"language":"AR","value":"الانزلاق"},{"language":"BG","value":"пързалка"},{"language":"CA","value":"Diapositiva"},{"language":"CS","value":"Skluzavka"},{"language":"DA","value":"Glide"},{"language":"DE","value":"Gleiten"},{"language":"EL","value":"Ολίσθηση"},{"language":"ES","value":"Deslizar"},{"language":"ET","value":"Libisema"},{"language":"FI","value":"Liuku"},{"language":"FR","value":"Glisser"},{"language":"HE","value":"שקופית"},{"language":"HR","value":"slajd"},{"language":"HU","value":"Csúszik"},{"language":"ID","value":"Menggeser"},{"language":"IS","value":"Renna"},{"language":"IT","value":"Diapositiva"},{"language":"JA","value":"滑り台"},{"language":"KO","value":"미끄러지 다"},{"language":"LT","value":"Skaidrė"},{"language":"LV","value":"Slidkalniņš"},{"language":"MS","value":"Gelongsor"},{"language":"NL","value":"Dia"},{"language":"NN","value":"Skyv"},{"language":"NO","value":"Lysbilde"},{"language":"PL","value":"Slajd"},{"language":"PT","value":"Deslizar"},{"language":"RO","value":"Slide"},{"language":"RU","value":"Горка"},{"language":"SE","value":"Slide"},{"language":"SH","value":"Klizanje"},{"language":"SK","value":"Šmykľavka"},{"language":"SL","value":"Zdrs"},{"language":"SR","value":"Тобоган"},{"language":"SV","value":"Glida"},{"language":"TH","value":"สไลด์"},{"language":"TR","value":"Slayt"},{"language":"UK","value":"слайд"},{"language":"ZF","value":"滑動"},{"language":"ZH","value":"滑动"}]},{"attribute":"key","grouping":"Properties","value":"slide","script":"","translation":[]}],"fieldPos":366},{"fieldNo":"8f2a2ece-b7fa-4957-9471-9d5c1b7129c1","fieldName":"lblAppCacheFormSettingsTHEME","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Layout","script":"","translation":[{"language":"AF","value":"Uitleg"},{"language":"AR","value":"تَخطِيط"},{"language":"BG","value":"Оформление"},{"language":"CA","value":"Disseny"},{"language":"CS","value":"Rozložení"},{"language":"DA","value":"Tema"},{"language":"DE","value":"Theme"},{"language":"EL","value":"Διάταξη"},{"language":"EN","value":"Layout"},{"language":"ES","value":"Disposición"},{"language":"ET","value":"Paigutus"},{"language":"FI","value":"Layout"},{"language":"FR","value":"Mise en page"},{"language":"HE","value":"מַעֲרָך"},{"language":"HR","value":"Izgled"},{"language":"HU","value":"Elrendezés"},{"language":"ID","value":"Tata Letak"},{"language":"IS","value":"Skipulag"},{"language":"IT","value":"Disposizione"},{"language":"JA","value":"レイアウト"},{"language":"KO","value":"공들여 나열한 것"},{"language":"LT","value":"Išdėstymas"},{"language":"LV","value":"Izkārtojums"},{"language":"MS","value":"Susun atur"},{"language":"NL","value":"Indeling"},{"language":"NN","value":"Oppsett"},{"language":"NO","value":"Layout"},{"language":"PL","value":"Układ"},{"language":"PT","value":"Disposição"},{"language":"RO","value":"Aspect"},{"language":"RU","value":"Макет"},{"language":"SE","value":"Rievdadus"},{"language":"SH","value":"Raspored"},{"language":"SK","value":"Rozloženie"},{"language":"SL","value":"Postavitev"},{"language":"SR","value":"Лаиоут"},{"language":"SV","value":"Layout"},{"language":"TH","value":"เค้าโครง"},{"language":"TR","value":"Düzen"},{"language":"UK","value":"Макет"},{"language":"ZF","value":"版面配置"},{"language":"ZH","value":"布局"}]}],"fieldPos":367},{"fieldNo":"2a7f5668-f5ec-4010-efe5-c5b131d78aab","fieldName":"inAppCacheFormSettingsTHEME","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Select","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"selectedKey","grouping":"Properties","value":"{/userTheme}","script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"Anonymous Function","script":"setCacheAppCacheDiaSettings();\nsap.n.Launchpad.applyUserTheme();\nsap.n.Launchpad.RebuildTiles();\nAppCache.Home();\n","translation":[]}],"fieldPos":368},{"fieldNo":"820943bf-f016-4cda-96c6-18c309d298ad","fieldName":"txtAppCacheFormSettingsPANEL_WIDTH","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Label","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Sidepanel Width","script":"","translation":[{"language":"1","value":"侧板宽度"},{"language":"AF","value":"Sypaneel Breedte"},{"language":"AR","value":"عرض اللوحة الجانبية"},{"language":"BG","value":"Ширина на страничния панел"},{"language":"CA","value":"Amplada del panell lateral"},{"language":"CS","value":"Boční panel Šířka"},{"language":"D","value":"Breite der Seitenwand"},{"language":"DA","value":"Sidepanel Bredde"},{"language":"DE","value":"Breite der Seitenwand"},{"language":"EL","value":"Πλάτος πλαϊνού πίνακα"},{"language":"EN","value":"Sidepanel Width"},{"language":"ES","value":"Ancho del panel lateral"},{"language":"ET","value":"Sidepanel Width"},{"language":"F","value":"Largeur du panneau latéral"},{"language":"FI","value":"Sivupaneelin leveys"},{"language":"FR","value":"Largeur du panneau latéral"},{"language":"H","value":"Oldalsó panel szélessége"},{"language":"HE","value":"לוח צד רוחב"},{"language":"HR","value":"Širina bočne ploče"},{"language":"HU","value":"Oldalpanel szélessége"},{"language":"ID","value":"Lebar panel samping"},{"language":"IS","value":"Breidd hliðarplötu"},{"language":"IT","value":"Larghezza pannello laterale"},{"language":"JA","value":"サイドパネルの幅"},{"language":"K","value":"Sidepanelbredde"},{"language":"KO","value":"측면 패널 너비"},{"language":"LT","value":"Šoninės plokštės plotis"},{"language":"LV","value":"Sānu paneļa platums"},{"language":"MS","value":"Lebar panel sisi"},{"language":"NL","value":"Zijpaneel Breedte"},{"language":"NN","value":"Sidepanelbredde"},{"language":"NO","value":"Sidepanel bredde"},{"language":"O","value":"Sidepanelbredde"},{"language":"P","value":"Largura do painel lateral"},{"language":"PL","value":"Szerokość panelu bocznego"},{"language":"PT","value":"Largura do painel lateral"},{"language":"R","value":"Ширина боковой панели"},{"language":"RO","value":"Panoul lateral Latime"},{"language":"RU","value":"Боковая панель Ширина"},{"language":"S","value":"Ancho del panel lateral"},{"language":"SE","value":"Sáhpanávdi vidjodat"},{"language":"SH","value":"Širina bočnog panela"},{"language":"SK","value":"Šírka bočného panelu"},{"language":"SL","value":"Širina stranske plošče"},{"language":"SR","value":"Ширина бочне плоче"},{"language":"SV","value":"Sidopanel Bredd"},{"language":"TH","value":"ความกว้างของแผงด้านข้าง"},{"language":"TR","value":"Yan panel Genişliği"},{"language":"UK","value":"Ширина бічної панелі"},{"language":"ZF","value":"側邊面板寬度"},{"language":"ZH","value":"侧板宽度"}]}],"fieldPos":369},{"fieldNo":"005065f0-529d-4f29-eb27-d88dab892b06","fieldName":"inAppCacheFormSettingsPANEL_WIDTH","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Select","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"selectedKey","grouping":"Properties","value":"{/sidepanelWidth}","script":"","translation":[]},{"attribute":"forceSelection","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"Anonymous Function","script":"setCacheAppCacheDiaSettings();\nif (launchpadContentSideApp.getWidth() !== '0px') {\n    let sidepanelWidth = sap.n.Launchpad.sidepanelWidth[modelAppCacheDiaSettings.oData.sidepanelWidth || 'large'];\n    launchpadContentSideApp.setWidth(sidepanelWidth);\n    sap.n.Launchpad.setLaunchpadContentWidth();\n}","translation":[]}],"fieldPos":370},{"fieldNo":"413fe8a8-b104-45c0-ea24-c8d9e1891f97","fieldName":"itemSIDEPANEL_WIDTHXSmall","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"XSmall","script":"","translation":[{"language":"1","value":"X小"},{"language":"AF","value":"XSmall"},{"language":"AR","value":"صغير الحجم"},{"language":"BG","value":"XSmall"},{"language":"CA","value":"X Petit"},{"language":"CS","value":"XSmall"},{"language":"D","value":"X Klein"},{"language":"DA","value":"XSmall"},{"language":"DE","value":"XSKlein"},{"language":"EL","value":"XSmall"},{"language":"ES","value":"XSpequeño"},{"language":"ET","value":"XVäike"},{"language":"F","value":"X petit"},{"language":"FI","value":"XPieni"},{"language":"FR","value":"XPetit"},{"language":"H","value":"X kicsi"},{"language":"HE","value":"XSmall"},{"language":"HR","value":"XSmall"},{"language":"HU","value":"XSmall"},{"language":"ID","value":"kecil sekali"},{"language":"IS","value":"XSmall"},{"language":"IT","value":"XPiccolo"},{"language":"JA","value":"XSmall"},{"language":"K","value":"X Lille"},{"language":"KO","value":"XSmall"},{"language":"LT","value":"XSmall"},{"language":"LV","value":"XSmall"},{"language":"MS","value":"XKecil"},{"language":"NL","value":"XKlein"},{"language":"NN","value":"Veldig liten"},{"language":"NO","value":"XSmall"},{"language":"O","value":"X Small"},{"language":"P","value":"X pequeno"},{"language":"PL","value":"XSmały"},{"language":"PT","value":"XSpequeno"},{"language":"R","value":"X маленький"},{"language":"RO","value":"XSmall"},{"language":"RU","value":"XМаленький"},{"language":"S","value":"X pequeño"},{"language":"SE","value":"XSmállá"},{"language":"SH","value":"Veoma malo"},{"language":"SK","value":"XSmall"},{"language":"SL","value":"XSmall"},{"language":"SR","value":"КССмалл"},{"language":"SV","value":"XSmall"},{"language":"TH","value":"Xขนาดเล็ก"},{"language":"TR","value":"XSküçük"},{"language":"UK","value":"XSmall"},{"language":"W","value":"X Малка"},{"language":"ZF","value":"極小"},{"language":"ZH","value":"小号"}]},{"attribute":"key","grouping":"Properties","value":"xsmall","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}],"fieldPos":371},{"fieldNo":"b9de0066-c2c0-45ca-e313-a0ed0d0597a7","fieldName":"itemSIDEPANEL_WIDTHSmall","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Small ","script":"","translation":[{"language":"1","value":"小（默认）"},{"language":"AF","value":"Klein"},{"language":"AR","value":"صغير"},{"language":"BG","value":"малък"},{"language":"CA","value":"Petit"},{"language":"CS","value":"Malý"},{"language":"D","value":"Klein (Standard)"},{"language":"DA","value":"Lille"},{"language":"DE","value":"Klein"},{"language":"EL","value":"Μικρό"},{"language":"ES","value":"Pequeño"},{"language":"ET","value":"Väike"},{"language":"F","value":"Petit (par défaut)"},{"language":"FI","value":"Pieni"},{"language":"FR","value":"Petit"},{"language":"H","value":"Kicsi (alapértelmezett)"},{"language":"HE","value":"קָטָן"},{"language":"HR","value":"Mali"},{"language":"HU","value":"Kicsi"},{"language":"ID","value":"Kecil"},{"language":"IS","value":"Lítil"},{"language":"IT","value":"Piccolo"},{"language":"JA","value":"小さい"},{"language":"K","value":"Lille (standard)"},{"language":"KO","value":"작은"},{"language":"LT","value":"Mažas"},{"language":"LV","value":"Mazs"},{"language":"MS","value":"Kecil"},{"language":"NL","value":"Klein"},{"language":"NN","value":"Liten"},{"language":"NO","value":"Liten"},{"language":"O","value":"Small (Default)"},{"language":"P","value":"Pequeno (padrão)"},{"language":"PL","value":"Mały"},{"language":"PT","value":"Pequeno"},{"language":"R","value":"Маленький (по умолчанию)"},{"language":"RO","value":"Mic"},{"language":"RU","value":"Маленький"},{"language":"S","value":"Pequeño (predeterminado)"},{"language":"SE","value":"Smállá"},{"language":"SH","value":"Malo"},{"language":"SK","value":"Malý"},{"language":"SL","value":"majhna"},{"language":"SR","value":"Мала"},{"language":"SV","value":"Små"},{"language":"TH","value":"เล็ก"},{"language":"TR","value":"Küçük"},{"language":"UK","value":"Маленький"},{"language":"W","value":"Малка (по подразбиране)"},{"language":"ZF","value":"小"},{"language":"ZH","value":"小的"}]},{"attribute":"key","grouping":"Properties","value":"small","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}],"fieldPos":372},{"fieldNo":"fbd91c91-6970-421a-911f-8211426272bc","fieldName":"itemSIDEPANEL_WIDTHMedium","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Medium ","script":"","translation":[{"language":"1","value":"中"},{"language":"AF","value":"Medium"},{"language":"AR","value":"واسطة"},{"language":"BG","value":"Среден"},{"language":"CA","value":"Mitjana"},{"language":"CS","value":"Střední"},{"language":"D","value":"Mittel"},{"language":"DA","value":"Medium"},{"language":"DE","value":"Mittel"},{"language":"EL","value":"Μεσαίο"},{"language":"ES","value":"Medio"},{"language":"ET","value":"Keskmine"},{"language":"F","value":"Moyen"},{"language":"FI","value":"Keskikokoinen"},{"language":"FR","value":"Moyen"},{"language":"H","value":"Közepes"},{"language":"HE","value":"בינוני"},{"language":"HR","value":"Srednji"},{"language":"HU","value":"Közepes"},{"language":"ID","value":"Sedang"},{"language":"IS","value":"Miðlungs"},{"language":"IT","value":"medio"},{"language":"JA","value":"中くらい"},{"language":"K","value":"Medium"},{"language":"KO","value":"중간"},{"language":"LT","value":"Vidutinis"},{"language":"LV","value":"Vidēja"},{"language":"MS","value":"Sederhana"},{"language":"NL","value":"Medium"},{"language":"NN","value":"Medium"},{"language":"NO","value":"Medium"},{"language":"O","value":"Medium"},{"language":"P","value":"Médio"},{"language":"PL","value":"Średni"},{"language":"PT","value":"Médio"},{"language":"R","value":"средний"},{"language":"RO","value":"Mediu"},{"language":"RU","value":"Середина"},{"language":"S","value":"Medio"},{"language":"SH","value":"Srednje"},{"language":"SK","value":"Stredná"},{"language":"SL","value":"Srednje"},{"language":"SR","value":"Средње"},{"language":"SV","value":"Medium"},{"language":"TH","value":"ปานกลาง"},{"language":"TR","value":"Orta"},{"language":"UK","value":"Середній"},{"language":"W","value":"среда"},{"language":"ZF","value":"中"},{"language":"ZH","value":"中等的"}]},{"attribute":"key","grouping":"Properties","value":"medium","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}],"fieldPos":373},{"fieldNo":"303373c3-cefc-4f1a-b1d0-a5e4d9a62cea","fieldName":"itemSIDEPANEL_WIDTHLarge","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Large (Default)","script":"","translation":[{"language":"1","value":"大"},{"language":"AF","value":"Groot (verstek)"},{"language":"AR","value":"كبير (افتراضي)"},{"language":"BG","value":"Голям (по подразбиране)"},{"language":"CA","value":"Gran (predeterminat)"},{"language":"CS","value":"Velké (výchozí)"},{"language":"D","value":"Groß"},{"language":"DA","value":"Stor (standard)"},{"language":"DE","value":"Groß (Standard)"},{"language":"EL","value":"Μεγάλο (Προεπιλογή)"},{"language":"ES","value":"Grande (predeterminado)"},{"language":"ET","value":"Suur (vaikimisi)"},{"language":"F","value":"Grand"},{"language":"FI","value":"Suuri (oletus)"},{"language":"FR","value":"Grand (par défaut)"},{"language":"H","value":"Nagy"},{"language":"HE","value":"גדול (ברירת מחדל)"},{"language":"HR","value":"Veliko (zadano)"},{"language":"HU","value":"Nagy (alapértelmezett)"},{"language":"ID","value":"Besar (Bawaan)"},{"language":"IS","value":"Stórt (sjálfgefið)"},{"language":"IT","value":"Grande (predefinito)"},{"language":"JA","value":"大 (デフォルト)"},{"language":"K","value":"Stor"},{"language":"KO","value":"대형(기본값)"},{"language":"LT","value":"Didelis (numatytasis)"},{"language":"LV","value":"Liels (noklusējums)"},{"language":"MS","value":"Besar (Lalai)"},{"language":"NL","value":"Groot (standaard)"},{"language":"NN","value":"Stor (Standard)"},{"language":"NO","value":"Stor (standard)"},{"language":"O","value":"Large"},{"language":"P","value":"Ampla"},{"language":"PL","value":"Duży (domyślny)"},{"language":"PT","value":"Grande (padrão)"},{"language":"R","value":"Большой"},{"language":"RO","value":"Mare (implicit)"},{"language":"RU","value":"Большой (по умолчанию)"},{"language":"S","value":"Grande"},{"language":"SE","value":"Stuorra (Dáid ášši)"},{"language":"SH","value":"Veliko (Podrazumevano)"},{"language":"SK","value":"Veľké (predvolené)"},{"language":"SL","value":"Veliko (privzeto)"},{"language":"SR","value":"велико (подразумевано)"},{"language":"SV","value":"Stor (standard)"},{"language":"TH","value":"ใหญ่ (ค่าเริ่มต้น)"},{"language":"TR","value":"Büyük (Varsayılan)"},{"language":"UK","value":"Великий (за замовчуванням)"},{"language":"W","value":"Голям"},{"language":"ZF","value":"大 (默認)"},{"language":"ZH","value":"大（默认）"}]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}],"fieldPos":374},{"fieldNo":"a31f083a-f17a-4fa3-9c9e-a4d7454d1795","fieldName":"itemSIDEPANEL_WIDTHXLarge","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"XLarge","script":"","translation":[{"language":"1","value":"X大"},{"language":"AF","value":"XLarge"},{"language":"AR","value":"كبير جدًا"},{"language":"BG","value":"XLarge"},{"language":"CA","value":"XLgran"},{"language":"CS","value":"XLarge"},{"language":"D","value":"X groß"},{"language":"DA","value":"XLarge"},{"language":"DE","value":"XL"},{"language":"EL","value":"XLarge"},{"language":"ES","value":"XL"},{"language":"ET","value":"XLarge"},{"language":"F","value":"X grand"},{"language":"FI","value":"XLarge"},{"language":"FR","value":"XLarge"},{"language":"H","value":"X nagy"},{"language":"HE","value":"אקסטרה לארג"},{"language":"HR","value":"XLarge"},{"language":"HU","value":"X nagy"},{"language":"ID","value":"besar"},{"language":"IS","value":"XLstór"},{"language":"IT","value":"XLgrande"},{"language":"JA","value":"×ラージ"},{"language":"K","value":"X Stor"},{"language":"KO","value":"특대형"},{"language":"LT","value":"XDidelis"},{"language":"LV","value":"XLiels"},{"language":"MS","value":"XLlarge"},{"language":"NL","value":"XLgroot"},{"language":"NN","value":"Veldig stor"},{"language":"NO","value":"XLarge"},{"language":"O","value":"X Large"},{"language":"P","value":"Extra grande"},{"language":"PL","value":"XLDuży"},{"language":"PT","value":"Extra grande"},{"language":"R","value":"X Большой"},{"language":"RO","value":"Extra larg"},{"language":"RU","value":"XLarge"},{"language":"S","value":"X grande"},{"language":"SE","value":"Stuorra (Dáid ášši)"},{"language":"SH","value":"Vrlo veliko"},{"language":"SK","value":"XLarge"},{"language":"SL","value":"XLarge"},{"language":"SR","value":"КСЛарге"},{"language":"SV","value":"Extra stor"},{"language":"TH","value":"XLarge"},{"language":"TR","value":"XLarge"},{"language":"UK","value":"XLarge"},{"language":"W","value":"X голям"},{"language":"ZF","value":"特大"},{"language":"ZH","value":"特大号"}]},{"attribute":"key","grouping":"Properties","value":"xlarge","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}],"fieldPos":375},{"fieldNo":"3ba01a91-00ed-4415-8e04-0c908819c2c5","fieldName":"itemSIDEPANEL_WIDTHXXLarge","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"XXLarge","script":"","translation":[{"language":"1","value":"XX大"},{"language":"AF","value":"XXLarge"},{"language":"AR","value":"حجم كبير جدًا"},{"language":"BG","value":"XXГолям"},{"language":"CA","value":"XXGran"},{"language":"CS","value":"XXLarge"},{"language":"D","value":"XX Groß"},{"language":"DA","value":"XXLarge"},{"language":"DE","value":"XXGroß"},{"language":"EL","value":"XXLarge"},{"language":"ES","value":"XXGrande"},{"language":"ET","value":"XXSuur"},{"language":"F","value":"XX Grand"},{"language":"FI","value":"XXSuuri"},{"language":"FR","value":"XXGrand"},{"language":"H","value":"XX nagy"},{"language":"HE","value":"XXLarge"},{"language":"HR","value":"XXVeliki"},{"language":"HU","value":"XXNagy"},{"language":"ID","value":"XXBesar"},{"language":"IS","value":"XXLarge"},{"language":"IT","value":"XXLgrande"},{"language":"JA","value":"XXLarge"},{"language":"K","value":"XX Stor"},{"language":"KO","value":"XXX대형"},{"language":"LT","value":"XXDidelis"},{"language":"LV","value":"XXLiels"},{"language":"MS","value":"XXBesar"},{"language":"NL","value":"XXLgroot"},{"language":"NN","value":"Ekstra stor"},{"language":"NO","value":"XXLarge"},{"language":"O","value":"XX Large"},{"language":"P","value":"XX grande"},{"language":"PL","value":"XXDuży"},{"language":"PT","value":"XXGrande"},{"language":"R","value":"XX Большой"},{"language":"RO","value":"XXLarge"},{"language":"RU","value":"XXLarge"},{"language":"S","value":"XX grande"},{"language":"SE","value":"Stuorra (Dáid ášši)"},{"language":"SH","value":"Veoma veliko"},{"language":"SK","value":"XXLarge"},{"language":"SL","value":"XXLarge"},{"language":"SR","value":"КСКСЛарге"},{"language":"SV","value":"XXLarge"},{"language":"TH","value":"XXLarge"},{"language":"TR","value":"XXLarge"},{"language":"UK","value":"XXВеликий"},{"language":"W","value":"XX голям"},{"language":"ZF","value":"超大"},{"language":"ZH","value":"XX大号"}]},{"attribute":"key","grouping":"Properties","value":"xxlarge","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}],"fieldPos":376},{"fieldNo":"d9ee0d56-f316-4e2c-d6f6-0b16c4746e5b","fieldName":"itemSIDEPANEL_WIDTHXXXLarge","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"XXXLarge","script":"","translation":[{"language":"1","value":"XXX大"},{"language":"AF","value":"XXX Groot"},{"language":"AR","value":"كبير جدًا جدًا"},{"language":"BG","value":"XXXГолям"},{"language":"CA","value":"XXXGrand"},{"language":"CS","value":"XXXVelký"},{"language":"D","value":"XXX groß"},{"language":"DA","value":"XXXStor"},{"language":"DE","value":"XXXGroß"},{"language":"EL","value":"XXXΜεγάλο"},{"language":"ES","value":"XXXGrande"},{"language":"ET","value":"XXXSuur"},{"language":"F","value":"XXX grand"},{"language":"FI","value":"XXXSuuri"},{"language":"FR","value":"XXXGrand"},{"language":"H","value":"XXX nagy"},{"language":"HE","value":"XXXLarge"},{"language":"HR","value":"XXXVeliki"},{"language":"HU","value":"XXXNagy"},{"language":"ID","value":"XXXBesar"},{"language":"IS","value":"XXXStór"},{"language":"IT","value":"XXXGrande"},{"language":"JA","value":"XXXLarge"},{"language":"K","value":"XXX Stor"},{"language":"KO","value":"XXX대형"},{"language":"LT","value":"XXXDidelis"},{"language":"LV","value":"XXXLiels"},{"language":"MS","value":"XXXBesar"},{"language":"NL","value":"XXXGroot"},{"language":"NN","value":"Veldig ekstra stor"},{"language":"NO","value":"XXXLarge"},{"language":"O","value":"XXX Large"},{"language":"P","value":"XXX grande"},{"language":"PL","value":"XXDuży"},{"language":"PT","value":"XXXGrande"},{"language":"R","value":"XXX Большой"},{"language":"RO","value":"XXXLarge"},{"language":"RU","value":"XXXLбольшой"},{"language":"S","value":"XXX grande"},{"language":"SE","value":"Stuorra (Dáid ášši)"},{"language":"SH","value":"Izuzetno veliko"},{"language":"SK","value":"XXXVeľký"},{"language":"SL","value":"XXXLarge"},{"language":"SR","value":"КСКСКСЛарге"},{"language":"SV","value":"XXXLarge"},{"language":"TH","value":"XXXLขนาดใหญ่"},{"language":"TR","value":"XXXLBüyük"},{"language":"UK","value":"XXXВеликий"},{"language":"W","value":"XXX големи"},{"language":"ZF","value":"極大"},{"language":"ZH","value":"XXX大号"}]},{"attribute":"key","grouping":"Properties","value":"xxxlarge","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}],"fieldPos":377},{"fieldNo":"0880a520-13c2-4590-8a33-8d5bf57eb70c","fieldName":"itemSIDEPANEL_WIDTHWIDE","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Wide","script":"","translation":[{"language":"1","value":"XXX大"},{"language":"AF","value":"Wyd"},{"language":"AR","value":"واسع"},{"language":"BG","value":"Широка"},{"language":"CA","value":"Ample"},{"language":"CS","value":"Široký"},{"language":"D","value":"XXX groß"},{"language":"DA","value":"Bred"},{"language":"DE","value":"Breit"},{"language":"EL","value":"Πλατύς"},{"language":"ES","value":"Ancho"},{"language":"ET","value":"Lai"},{"language":"F","value":"XXX grand"},{"language":"FI","value":"Leveä"},{"language":"FR","value":"Large"},{"language":"H","value":"XXX nagy"},{"language":"HE","value":"רָחָב"},{"language":"HR","value":"Širok"},{"language":"HU","value":"Széles"},{"language":"ID","value":"Lebar"},{"language":"IS","value":"Breiður"},{"language":"IT","value":"Largo"},{"language":"JA","value":"広い"},{"language":"K","value":"XXX Stor"},{"language":"KO","value":"넓은"},{"language":"LT","value":"Platus"},{"language":"LV","value":"Plašs"},{"language":"MS","value":"Lebar"},{"language":"NL","value":"Breed"},{"language":"NN","value":"Bred"},{"language":"NO","value":"Bred"},{"language":"O","value":"XXX Large"},{"language":"P","value":"XXX grande"},{"language":"PL","value":"Szeroki"},{"language":"PT","value":"Largo"},{"language":"R","value":"XXX Большой"},{"language":"RO","value":"Lat"},{"language":"RU","value":"Широкий"},{"language":"S","value":"XXX grande"},{"language":"SE","value":"Leahtta"},{"language":"SH","value":"Široko"},{"language":"SK","value":"Široký"},{"language":"SL","value":"Široko"},{"language":"SR","value":"Широко"},{"language":"SV","value":"Bred"},{"language":"TH","value":"กว้าง"},{"language":"TR","value":"Geniş"},{"language":"UK","value":"Широкий"},{"language":"W","value":"XXX големи"},{"language":"ZF","value":"寬"},{"language":"ZH","value":"宽的"}]},{"attribute":"key","grouping":"Properties","value":"widescreen","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}],"fieldPos":378},{"fieldNo":"6a0b1a6e-e0b4-4f1d-b120-ee1d2e0ee26e","fieldName":"itemSIDEPANEL_WIDTHXWIDE","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"XWide","script":"","translation":[{"language":"1","value":"XXX大"},{"language":"AF","value":"XWide"},{"language":"AR","value":"واسع النطاق"},{"language":"BG","value":"XWide"},{"language":"CA","value":"XAmple"},{"language":"CS","value":"X Široký"},{"language":"D","value":"XXX groß"},{"language":"DA","value":"XWide"},{"language":"DE","value":"XWide"},{"language":"EL","value":"XWide"},{"language":"ES","value":"Xancho"},{"language":"ET","value":"XWide"},{"language":"F","value":"XXX grand"},{"language":"FI","value":"XWide"},{"language":"FR","value":"XLarge"},{"language":"H","value":"XXX nagy"},{"language":"HE","value":"XWide"},{"language":"HR","value":"XWide"},{"language":"HU","value":"XWide"},{"language":"ID","value":"XLebar"},{"language":"IS","value":"XWide"},{"language":"IT","value":"XWide"},{"language":"JA","value":"Xワイド"},{"language":"K","value":"XXX Stor"},{"language":"KO","value":"X와이드"},{"language":"LT","value":"XWide"},{"language":"LV","value":"XWide"},{"language":"MS","value":"XWide"},{"language":"NL","value":"XBreed"},{"language":"NN","value":"Veldig bred"},{"language":"NO","value":"XWide"},{"language":"O","value":"XXX Large"},{"language":"P","value":"XXX grande"},{"language":"PL","value":"XSzeroki"},{"language":"PT","value":"XWide"},{"language":"R","value":"XXX Большой"},{"language":"RO","value":"XWide"},{"language":"RU","value":"Xширокий"},{"language":"S","value":"XXX grande"},{"language":"SE","value":"Leahtta"},{"language":"SH","value":"Veoma široko"},{"language":"SK","value":"XWide"},{"language":"SL","value":"XWide"},{"language":"SR","value":"КСВиде"},{"language":"SV","value":"XWide"},{"language":"TH","value":"เอ็กซ์ไวด์"},{"language":"TR","value":"XWide"},{"language":"UK","value":"XWide"},{"language":"W","value":"XXX големи"},{"language":"ZF","value":"特寬"},{"language":"ZH","value":"超宽"}]},{"attribute":"key","grouping":"Properties","value":"xwidescreen","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}],"fieldPos":379},{"fieldNo":"c91bf395-8144-4f62-bff5-634bf63e9dc0","fieldName":"itemSIDEPANEL_WIDTHXXWIDE","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"XXWide","script":"","translation":[{"language":"1","value":"XXX大"},{"language":"AF","value":"XXWed"},{"language":"AR","value":"على نطاق واسع"},{"language":"BG","value":"XXWide"},{"language":"CA","value":"XXAmple"},{"language":"CS","value":"XXŠiroký"},{"language":"D","value":"XXX groß"},{"language":"DA","value":"XX Bred"},{"language":"DE","value":"XXBreit"},{"language":"EL","value":"XXΕυρεία"},{"language":"ES","value":"XXAncho"},{"language":"ET","value":"XXWide"},{"language":"F","value":"XXX grand"},{"language":"FI","value":"XXLeveä"},{"language":"FR","value":"XXLarge"},{"language":"H","value":"XXX nagy"},{"language":"HE","value":"XXWide"},{"language":"HR","value":"XXWide"},{"language":"HU","value":"XXWide"},{"language":"ID","value":"XXLebar"},{"language":"IS","value":"XXVíð"},{"language":"IT","value":"XXLargo"},{"language":"JA","value":"XXワイド"},{"language":"K","value":"XXX Stor"},{"language":"KO","value":"XX와이드"},{"language":"LT","value":"XXPlatus"},{"language":"LV","value":"XXWide"},{"language":"MS","value":"XXWide"},{"language":"NL","value":"XXBreed"},{"language":"NN","value":"Ekstra bred"},{"language":"NO","value":"XXWide"},{"language":"O","value":"XXX Large"},{"language":"P","value":"XXX grande"},{"language":"PL","value":"XXSzeroki"},{"language":"PT","value":"XX Largo"},{"language":"R","value":"XXX Большой"},{"language":"RO","value":"XXWide"},{"language":"RU","value":"XXширокий"},{"language":"S","value":"XXX grande"},{"language":"SE","value":"Leahtta"},{"language":"SH","value":"Izuzetno široko"},{"language":"SK","value":"XXŠiroký"},{"language":"SL","value":"XXWide"},{"language":"SR","value":"КСКСВиде"},{"language":"SV","value":"XXBred"},{"language":"TH","value":"XXกว้าง"},{"language":"TR","value":"XXGeniş"},{"language":"UK","value":"XXWide"},{"language":"W","value":"XXX големи"},{"language":"ZF","value":"超寬"},{"language":"ZH","value":"XX宽"}]},{"attribute":"key","grouping":"Properties","value":"xxwidescreen","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}],"fieldPos":380},{"fieldNo":"e6ea20d5-ac86-40c6-ff4b-73b0b8a5b42e","fieldName":"lblAppCacheFormSettingsBACK","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Background Image URL","script":"","translation":[{"language":"AF","value":"Agtergrondprent-URL"},{"language":"AR","value":"URL لصورة الخلفية"},{"language":"BG","value":"URL адрес на фоново изображение"},{"language":"CA","value":"URL de la imatge de fons"},{"language":"CS","value":"Adresa URL obrázku na pozadí"},{"language":"DA","value":"Baggrundsbilled-URL"},{"language":"DE","value":"URL Hintergrundbild"},{"language":"EL","value":"Διεύθυνση URL εικόνας φόντου"},{"language":"EN","value":"Background Image URL"},{"language":"ES","value":"URL de la imagen de fondo"},{"language":"ET","value":"Taustapildi URL"},{"language":"FI","value":"Taustakuvan URL-osoite"},{"language":"FR","value":"URL de l’image d’arrière-plan"},{"language":"HE","value":"כתובת אתר של תמונת רקע"},{"language":"HR","value":"URL pozadinske slike"},{"language":"HU","value":"Háttérkép URL-je"},{"language":"ID","value":"URL Gambar Latar Belakang"},{"language":"IS","value":"Vefslóð bakgrunnsmyndar"},{"language":"IT","value":"URL dell'immagine di sfondo"},{"language":"JA","value":"背景画像のURL"},{"language":"KO","value":"배경 이미지 URL"},{"language":"LT","value":"Fono vaizdo URL"},{"language":"LV","value":"Fona attēla URL"},{"language":"MS","value":"URL Imej Latar Belakang"},{"language":"NL","value":"Achtergrondafbeelding-URL"},{"language":"NN","value":"URL for bakgrunnsbilde"},{"language":"NO","value":"Bakgrunnsbilde URL"},{"language":"PL","value":"Adres URL obrazu tła"},{"language":"PT","value":"URL da imagem de fundo"},{"language":"RO","value":"Adresa URL a imaginii de fundal"},{"language":"RU","value":"URL-адрес фонового изображения"},{"language":"SE","value":"Taustabargi URL"},{"language":"SH","value":"URL pozadinske slike"},{"language":"SK","value":"Adresa URL obrázka na pozadí"},{"language":"SL","value":"URL slike ozadja"},{"language":"SR","value":"УРЛ слике у позадини"},{"language":"SV","value":"URL för bakgrundsbild"},{"language":"TH","value":"URL ภาพพื้นหลัง"},{"language":"TR","value":"Arka Plan Resmi URL'si"},{"language":"UK","value":"URL фонового зображення"},{"language":"ZF","value":"背景圖片網址"},{"language":"ZH","value":"背景图片网址"}]}],"fieldPos":381},{"fieldNo":"9be12f1b-f792-47df-a716-7d44151a17be","fieldName":"inAppCacheFormSettingsBACK","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"value","grouping":"Properties","value":"{/userBackImage}","script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"Anonymous Function","script":"setCacheAppCacheDiaSettings();\nsap.n.Launchpad.applyUserTheme();","translation":[]}],"fieldPos":382},{"fieldNo":"0d279ae5-7568-409f-e33b-c3a477cd5a9a","fieldName":"lblAppCacheFormSettingsFAV","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Most used","script":"","translation":[{"language":"AF","value":"Mees gebruik"},{"language":"AR","value":"الأكثر استخداما"},{"language":"BG","value":"Най-използван"},{"language":"CA","value":"El més utilitzat"},{"language":"CS","value":"Nejvíc používané"},{"language":"DA","value":"Mest anvendte"},{"language":"DE","value":"meist genutzt"},{"language":"EL","value":"Περισσότερο χρησιμοποιημένο"},{"language":"EN","value":"Most used"},{"language":"ES","value":"Más usado"},{"language":"ET","value":"Enim kasutatud"},{"language":"FI","value":"Eniten käytetty"},{"language":"FR","value":"Plus utilisé"},{"language":"HE","value":"הכי משומש"},{"language":"HR","value":"Najviše korišten"},{"language":"HU","value":"Legtöbbet használt"},{"language":"ID","value":"Paling banyak digunakan"},{"language":"IS","value":"Mest notað"},{"language":"IT","value":"Più usato"},{"language":"JA","value":"最も使用"},{"language":"KO","value":"가장 많이 사용"},{"language":"LT","value":"Dažniausiai naudojamas"},{"language":"LV","value":"Visbiežāk lietots"},{"language":"MS","value":"Paling banyak digunakan"},{"language":"NL","value":"Meest gebruikt"},{"language":"NN","value":"Mest brukt"},{"language":"NO","value":"Mest brukt"},{"language":"PL","value":"Najbardziej używane"},{"language":"PT","value":"Mais usado"},{"language":"RO","value":"Cel mai utilizat"},{"language":"RU","value":"Наиболее используемое"},{"language":"SE","value":"Buot dáid"},{"language":"SH","value":"Najčešće korišćeno"},{"language":"SK","value":"Najpoužívanejšie"},{"language":"SL","value":"Najbolj uporabljen"},{"language":"SR","value":"Највише користе"},{"language":"SV","value":"Mest använda"},{"language":"TH","value":"ใช้มากที่สุด"},{"language":"TR","value":"En çok kullanılan"},{"language":"UK","value":"Найбільш використовувані"},{"language":"ZF","value":"最常用"},{"language":"ZH","value":"最常被使用"}]}],"fieldPos":383},{"fieldNo":"4f73010b-e0f3-4983-b379-7ba048ed12df","fieldName":"AppCacheButDeleteRun","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Clear","script":"","translation":[{"language":"AF","value":"Duidelik"},{"language":"AR","value":"واضح"},{"language":"BG","value":"ясно"},{"language":"CA","value":"Clar"},{"language":"CS","value":"Průhledná"},{"language":"DA","value":"Klar"},{"language":"DE","value":"Zurücksetzen"},{"language":"EL","value":"Σαφή"},{"language":"EN","value":"Clear"},{"language":"ES","value":"Claro"},{"language":"ET","value":"Selge"},{"language":"FI","value":"Asia selvä"},{"language":"FR","value":"Clair"},{"language":"HE","value":"ברור"},{"language":"HR","value":"Čisto"},{"language":"HU","value":"Egyértelmű"},{"language":"ID","value":"Jernih"},{"language":"IS","value":"Hreinsa"},{"language":"IT","value":"Chiaro"},{"language":"JA","value":"クリア"},{"language":"KO","value":"분명한"},{"language":"LT","value":"Aišku"},{"language":"LV","value":"Skaidrs"},{"language":"MS","value":"Jelas"},{"language":"NL","value":"Duidelijk"},{"language":"NN","value":"Tøm"},{"language":"NO","value":"Slett"},{"language":"PL","value":"Jasne"},{"language":"PT","value":"Claro"},{"language":"RO","value":"clar"},{"language":"RU","value":"Прозрачный"},{"language":"SE","value":"Rievdadit"},{"language":"SH","value":"Očisti"},{"language":"SK","value":"jasný"},{"language":"SL","value":"jasno"},{"language":"SR","value":"Јасно"},{"language":"SV","value":"Klar"},{"language":"TH","value":"ชัดเจน"},{"language":"TR","value":"Temizlemek"},{"language":"UK","value":"ясно"},{"language":"ZF","value":"清除"},{"language":"ZH","value":"清除"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"modelAppCacheTilesRun.setData([]);\nsetCacheAppCacheTilesRun();\n\n","translation":[]}],"fieldPos":384},{"fieldNo":"818ef90f-0166-4d2d-de9a-74ad8ef3e35d","fieldName":"lblAppCacheDelCache","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Local Data","script":"","translation":[{"language":"AF","value":"Plaaslike data"},{"language":"AR","value":"البيانات المحلية"},{"language":"BG","value":"Локални данни"},{"language":"CA","value":"Dades locals"},{"language":"CS","value":"Místní data"},{"language":"DA","value":"Lokale data"},{"language":"DE","value":"Lokale Daten"},{"language":"EL","value":"Τοπικά δεδομένα"},{"language":"EN","value":"Local Data"},{"language":"ES","value":"Datos locales"},{"language":"ET","value":"Kohalikud andmed"},{"language":"FI","value":"Paikalliset tiedot"},{"language":"FR","value":"Données locales"},{"language":"HE","value":"נתונים מקומיים"},{"language":"HR","value":"Lokalni podaci"},{"language":"HU","value":"Helyi adatok"},{"language":"ID","value":"Data Lokal"},{"language":"IS","value":"Staðbundin gögn"},{"language":"IT","value":"Dati locali"},{"language":"JA","value":"ローカルデータ"},{"language":"KO","value":"로컬 데이터"},{"language":"LT","value":"Vietiniai duomenys"},{"language":"LV","value":"Vietējie dati"},{"language":"MS","value":"Data Tempatan"},{"language":"NL","value":"Lokale gegevens"},{"language":"NN","value":"Lokal data"},{"language":"NO","value":"Lokale data"},{"language":"PL","value":"Dane lokalne"},{"language":"PT","value":"Dados locais"},{"language":"RO","value":"Date locale"},{"language":"RU","value":"Локальные данные"},{"language":"SE","value":"Lokála dáta"},{"language":"SH","value":"Lokalni podaci"},{"language":"SK","value":"Miestne údaje"},{"language":"SL","value":"Lokalni podatki"},{"language":"SR","value":"Локални подаци"},{"language":"SV","value":"Lokala data"},{"language":"TH","value":"ข้อมูลท้องถิ่น"},{"language":"TR","value":"Yerel Veriler"},{"language":"UK","value":"Локальні дані"},{"language":"ZF","value":"本地數據"},{"language":"ZH","value":"本地数据"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginBottom","script":"","translation":[]}],"fieldPos":385},{"fieldNo":"20f659ff-77ed-40b3-80ad-0e12005eef36","fieldName":"AppCacheButDeleteCache","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Clear","script":"","translation":[{"language":"AF","value":"Duidelik"},{"language":"AR","value":"واضح"},{"language":"BG","value":"ясно"},{"language":"CA","value":"Clar"},{"language":"CS","value":"Průhledná"},{"language":"DA","value":"Klar"},{"language":"DE","value":"Zurücksetzen"},{"language":"EL","value":"Σαφή"},{"language":"EN","value":"Clear"},{"language":"ES","value":"Claro"},{"language":"ET","value":"Selge"},{"language":"FI","value":"Asia selvä"},{"language":"FR","value":"Clair"},{"language":"HE","value":"ברור"},{"language":"HR","value":"Čisto"},{"language":"HU","value":"Egyértelmű"},{"language":"ID","value":"Jernih"},{"language":"IS","value":"Hreinsa"},{"language":"IT","value":"Chiaro"},{"language":"JA","value":"クリア"},{"language":"KO","value":"분명한"},{"language":"LT","value":"Aišku"},{"language":"LV","value":"Skaidrs"},{"language":"MS","value":"Jelas"},{"language":"NL","value":"Duidelijk"},{"language":"NN","value":"Tøm"},{"language":"NO","value":"Slett"},{"language":"PL","value":"Jasne"},{"language":"PT","value":"Claro"},{"language":"RO","value":"clar"},{"language":"RU","value":"Прозрачный"},{"language":"SE","value":"Rievdadit"},{"language":"SH","value":"Očisti"},{"language":"SK","value":"jasný"},{"language":"SL","value":"jasno"},{"language":"SR","value":"Јасно"},{"language":"SV","value":"Klar"},{"language":"TH","value":"ชัดเจน"},{"language":"TR","value":"Temizlemek"},{"language":"UK","value":"ясно"},{"language":"ZF","value":"清除"},{"language":"ZH","value":"清除"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"AppCache.RemoveAllCache();\nlocation.reload();","translation":[]}],"fieldPos":386},{"fieldNo":"b0f7318f-d4a5-46c4-cec6-142e1c3b5275","fieldName":"lblAppCacheLockScreenChanges","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Lock Screens","script":"","translation":[{"language":"AF","value":"Sluit skerms"},{"language":"AR","value":"شاشات القفل"},{"language":"BG","value":"Заключени екрани"},{"language":"CA","value":"Pantalles de bloqueig"},{"language":"CS","value":"Uzamknout obrazovky"},{"language":"DA","value":"Låse skærme"},{"language":"DE","value":"Bildschirme sperren"},{"language":"EL","value":"Οθόνες κλειδώματος"},{"language":"ES","value":"Pantallas de bloqueo"},{"language":"ET","value":"Lukustuskuvad"},{"language":"FI","value":"Lukitusnäytöt"},{"language":"FR","value":"Écrans de verrouillage"},{"language":"HE","value":"נעילת מסכים"},{"language":"HR","value":"Zaključani zasloni"},{"language":"HU","value":"Képernyők lezárása"},{"language":"ID","value":"Layar Kunci"},{"language":"IS","value":"Læsa skjái"},{"language":"IT","value":"Schermi di blocco"},{"language":"JA","value":"ロック画面"},{"language":"KO","value":"잠금 화면"},{"language":"LT","value":"Užrakinimo ekranai"},{"language":"LV","value":"Bloķēšanas ekrāni"},{"language":"MS","value":"Kunci Skrin"},{"language":"NL","value":"Schermen vergrendelen"},{"language":"NN","value":"Låseskjerm"},{"language":"NO","value":"Lås skjermer"},{"language":"PL","value":"Zablokuj ekrany"},{"language":"PT","value":"Bloquear telas"},{"language":"RO","value":"Ecrane de blocare"},{"language":"RU","value":"Экраны блокировки"},{"language":"SE","value":"Låhkåm skreanat"},{"language":"SH","value":"Zaključaj ekrane"},{"language":"SK","value":"Uzamknuté obrazovky"},{"language":"SL","value":"Zaklenjeni zasloni"},{"language":"SR","value":"Закључани екрани"},{"language":"SV","value":"Lås skärmar"},{"language":"TH","value":"ล็อคหน้าจอ"},{"language":"TR","value":"Kilit Ekranları"},{"language":"UK","value":"Екрани блокування"},{"language":"ZF","value":"鎖定屏幕"},{"language":"ZH","value":"锁屏"}]}],"fieldPos":387},{"fieldNo":"605699e3-58c9-46b0-969b-47ab9b7c72a7","fieldName":"chkAppCacheLockScreenChanges","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Lock screens as in current state.","script":"","translation":[{"language":"AF","value":"Sluit skerms soos in huidige toestand."},{"language":"AR","value":"شاشات القفل كما في الوضع الحالي."},{"language":"BG","value":"Заключване на екрани, както в текущото състояние."},{"language":"CA","value":"Bloqueja les pantalles com en l'estat actual."},{"language":"CS","value":"Uzamknout obrazovky jako v aktuálním stavu."},{"language":"DA","value":"Lås skærme som i den nuværende tilstand."},{"language":"DE","value":"Sperrbildschirme wie im aktuellen Zustand."},{"language":"EL","value":"Κλείδωμα οθονών όπως στην τρέχουσα κατάσταση."},{"language":"ES","value":"Bloquear pantallas como en el estado actual."},{"language":"ET","value":"Lukustage ekraanid praeguses olekus."},{"language":"FI","value":"Lukitse näytöt nykyisessä tilassa."},{"language":"FR","value":"Verrouillez les écrans comme dans l'état actuel."},{"language":"HE","value":"נעילת מסכים כמו במצב הנוכחי."},{"language":"HR","value":"Zaključani zasloni kao u trenutnom stanju."},{"language":"HU","value":"A képernyők lezárása a jelenlegi állapot szerint."},{"language":"ID","value":"Kunci layar seperti pada kondisi saat ini."},{"language":"IS","value":"Læsa skjám eins og í núverandi ástandi."},{"language":"IT","value":"Blocca schermate come nello stato corrente."},{"language":"JA","value":"現在の状態のように画面をロックします。"},{"language":"KO","value":"현재 상태와 같은 잠금 화면."},{"language":"LT","value":"Užrakinti ekranus kaip dabartinė būsena."},{"language":"LV","value":"Bloķēt ekrānus kā pašreizējā stāvoklī."},{"language":"MS","value":"Kunci skrin seperti dalam keadaan semasa."},{"language":"NL","value":"Vergrendel schermen zoals in de huidige staat."},{"language":"NN","value":"Låseskjerm slik den er nå."},{"language":"NO","value":"Lås skjermer som de er"},{"language":"PL","value":"Zablokuj ekrany w obecnym stanie."},{"language":"PT","value":"Bloqueie as telas como no estado atual."},{"language":"RO","value":"Blocați ecranele ca în starea curentă."},{"language":"RU","value":"Экраны блокировки в текущем состоянии."},{"language":"SE","value":"Låhkåm skreanat dego dálkkasáš"},{"language":"SH","value":"Zaključaj ekrane u trenutnom stanju."},{"language":"SK","value":"Uzamknite obrazovky ako v aktuálnom stave."},{"language":"SL","value":"Zaklenjeni zasloni kot v trenutnem stanju."},{"language":"SR","value":"Закључани екрани као у тренутном стању."},{"language":"SV","value":"Lås skärmar som i nuvarande tillstånd."},{"language":"TH","value":"ล็อคหน้าจอตามสถานะปัจจุบัน"},{"language":"TR","value":"Ekranları mevcut durumdaki gibi kilitleyin."},{"language":"UK","value":"Блокування екранів у поточному стані."},{"language":"ZF","value":"按當前狀態鎖定屏幕。"},{"language":"ZH","value":"锁定屏幕如当前状态。"}]},{"attribute":"selected","grouping":"Properties","value":"{/lockScreenChanges}","script":"","translation":[]},{"attribute":"select","grouping":"Events","value":"Anonymous Function","script":"setCacheAppCacheDiaSettings();\n\nconst lockScreensState = this.getSelected();\nconst disableScreenChangesState = chkAppCacheDisableScreenChanges.getSelected();\n\nchkAppCacheDisableScreenChanges.setEnabled(!lockScreensState);\nAppCacheUserActionEditScreen.setVisible(\n    !lockScreensState && !disableScreenChangesState\n);","language":"javascript","translation":[]}],"fieldPos":388},{"fieldNo":"0cb8c780-8b0c-46de-e085-46a5828a9e44","fieldName":"lblAppCacheDisableScreenChanges","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Enable Screen Changes","script":"","translation":[{"language":"AF","value":"Aktiveer skermveranderings"},{"language":"AR","value":"تمكين تغييرات الشاشة"},{"language":"BG","value":"Активиране на промените на екрана"},{"language":"CA","value":"Activa els canvis de pantalla"},{"language":"CS","value":"Povolit změny obrazovky"},{"language":"DA","value":"Skærmændringer"},{"language":"DE","value":"Bildschirmänderungen"},{"language":"EL","value":"Ενεργοποίηση αλλαγών οθόνης"},{"language":"EN","value":"Screen Changes"},{"language":"ES","value":"Habilitar cambios de pantalla"},{"language":"ET","value":"Luba ekraanimuudatused"},{"language":"FI","value":"Ota näytön muutokset käyttöön"},{"language":"FR","value":"Activer les changements d'écran"},{"language":"HE","value":"אפשר שינויי מסך"},{"language":"HR","value":"Omogući promjene zaslona"},{"language":"HU","value":"Képernyőmódosítások engedélyezése"},{"language":"ID","value":"Aktifkan Perubahan Layar"},{"language":"IS","value":"Virkja skjábreytingar"},{"language":"IT","value":"Abilita modifiche allo schermo"},{"language":"JA","value":"画面変更を有効にする"},{"language":"KO","value":"화면 변경 활성화"},{"language":"LT","value":"Įgalinti ekrano pakeitimus"},{"language":"LV","value":"Iespējot ekrāna izmaiņas"},{"language":"MS","value":"Dayakan Perubahan Skrin"},{"language":"NL","value":"Schermwijzigingen inschakelen"},{"language":"NN","value":"Aktiver skjermdesignendringer"},{"language":"NO","value":"Aktiver skjermendringer"},{"language":"PL","value":"Włącz zmiany ekranu"},{"language":"PT","value":"Habilitar alterações de tela"},{"language":"RO","value":"Activați modificările ecranului"},{"language":"RU","value":"Включить изменения экрана"},{"language":"SE","value":"Čállit skreanaguovddážat"},{"language":"SH","value":"Omogući promene ekrana"},{"language":"SK","value":"Povoliť zmeny obrazovky"},{"language":"SL","value":"Omogoči spremembe zaslona"},{"language":"SR","value":"Омогући промене екрана"},{"language":"SV","value":"Aktivera skärmändringar"},{"language":"TH","value":"เปิดใช้งานการเปลี่ยนแปลงหน้าจอ"},{"language":"TR","value":"Ekran Değişikliklerini Etkinleştir"},{"language":"UK","value":"Увімкнути зміни екрана"},{"language":"ZF","value":"啟用屏幕更改"},{"language":"ZH","value":"启用屏幕更改"}]}],"fieldPos":389},{"fieldNo":"4b1279c3-9fcf-435f-8b8c-dab322232f61","fieldName":"chkAppCacheDisableScreenChanges","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Disable to see standard screens.","script":"","translation":[{"language":"AF","value":"Deaktiveer om standaardskerms te sien."},{"language":"AR","value":"تعطيل لرؤية الشاشات القياسية."},{"language":"BG","value":"Деактивирайте, за да видите стандартни екрани."},{"language":"CA","value":"Desactiva per veure les pantalles estàndard."},{"language":"CS","value":"Chcete-li zobrazit standardní obrazovky, zakažte."},{"language":"DA","value":"Deaktiver for at se standardskærme."},{"language":"DE","value":"Deaktivieren, um Standardbildschirme anzuzeigen."},{"language":"EL","value":"Απενεργοποιήστε για να δείτε τυπικές οθόνες."},{"language":"ES","value":"Desactivar para ver pantallas estándar."},{"language":"ET","value":"Standardsete ekraanide nägemiseks keelake."},{"language":"FI","value":"Poista käytöstä nähdäksesi vakionäytöt."},{"language":"FR","value":"Désactivez l'affichage des écrans standard."},{"language":"HE","value":"השבת כדי לראות מסכים סטנדרטיים."},{"language":"HR","value":"Onemogući prikaz standardnih zaslona."},{"language":"HU","value":"A szabványos képernyők megtekintéséhez tiltsa le."},{"language":"ID","value":"Nonaktifkan untuk melihat layar standar."},{"language":"IS","value":"Slökktu til að sjá staðlaða skjái."},{"language":"IT","value":"Disabilita la visualizzazione delle schermate standard."},{"language":"JA","value":"無効にすると標準画面が表示されます。"},{"language":"KO","value":"표준 화면을 보려면 비활성화하세요."},{"language":"LT","value":"Išjunkite, kad matytumėte standartinius ekranus."},{"language":"LV","value":"Atspējot, lai redzētu standarta ekrānus."},{"language":"MS","value":"Lumpuhkan untuk melihat skrin standard."},{"language":"NL","value":"Schakel uit om standaardschermen te zien."},{"language":"NN","value":"Deaktiver for å se standard skjermer."},{"language":"NO","value":"Deaktiver for å se standardskjermer."},{"language":"PL","value":"Wyłącz wyświetlanie standardowych ekranów."},{"language":"PT","value":"Desative para ver as telas padrão."},{"language":"RO","value":"Dezactivați pentru a vedea ecranele standard."},{"language":"RU","value":"Отключите, чтобы видеть стандартные экраны."},{"language":"SE","value":"Válddejuvvojit ahte oaidnit standard skreanat."},{"language":"SH","value":"Onemogući da biste videli standardne ekrane."},{"language":"SK","value":"Ak chcete zobraziť štandardné obrazovky, vypnite ju."},{"language":"SL","value":"Onemogoči ogled standardnih zaslonov."},{"language":"SR","value":"Онемогућите да бисте видели стандардне екране."},{"language":"SV","value":"Inaktivera för att se standardskärmar."},{"language":"TH","value":"ปิดใช้งานเพื่อดูหน้าจอมาตรฐาน"},{"language":"TR","value":"Standart ekranları görmeyi devre dışı bırakın."},{"language":"UK","value":"Вимкнути перегляд стандартних екранів."},{"language":"ZF","value":"禁用以查看標準屏幕。"},{"language":"ZH","value":"禁用以查看标准屏幕。"}]},{"attribute":"selected","grouping":"Properties","value":"{/disableScreenChanges}","script":"","translation":[]},{"attribute":"select","grouping":"Events","value":"Anonymous Function","script":"setCacheAppCacheDiaSettings();\n\nconst disableScreenChanges = this.getSelected();\nAppCacheUserActionEditScreen.setVisible(!disableScreenChanges);","language":"javascript","translation":[]}],"fieldPos":390},{"fieldNo":"d524efb0-0ddc-4ac1-e869-0990f1a0d270","fieldName":"lblClearCustomizations","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":391},{"fieldNo":"00f467fe-6fe7-4330-9489-bf7b81cb94fb","fieldName":"btnClearCustomizations","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Clear Customizations","script":"","translation":[{"language":"AF","value":"Maak aanpassings skoon"},{"language":"AR","value":"مسح التخصيصات"},{"language":"BG","value":"Изчистване на персонализациите"},{"language":"CA","value":"Esborra les personalitzacions"},{"language":"CS","value":"Vymazat přizpůsobení"},{"language":"DA","value":"Ryd tilpasninger"},{"language":"DE","value":"Klare Anpassungen"},{"language":"EL","value":"Εκκαθάριση προσαρμογών"},{"language":"ES","value":"Borrar personalizaciones"},{"language":"ET","value":"Kustuta kohandused"},{"language":"FI","value":"Tyhjennä mukautukset"},{"language":"FR","value":"Effacer les personnalisations"},{"language":"HE","value":"נקה התאמות אישיות"},{"language":"HR","value":"Brisanje prilagodbi"},{"language":"HU","value":"Törölje a testreszabásokat"},{"language":"ID","value":"Hapus Kustomisasi"},{"language":"IS","value":"Hreinsa sérstillingar"},{"language":"IT","value":"Cancella personalizzazioni"},{"language":"JA","value":"カスタマイズをクリアする"},{"language":"KO","value":"명확한 사용자 정의"},{"language":"LT","value":"Išvalyti tinkinimus"},{"language":"LV","value":"Notīrīt pielāgojumus"},{"language":"MS","value":"Kosongkan Penyesuaian"},{"language":"NL","value":"Duidelijke aanpassingen"},{"language":"NN","value":"Tøm tilpasninger"},{"language":"NO","value":"Fjern tilpasninger"},{"language":"PL","value":"Wyczyść dostosowania"},{"language":"PT","value":"Limpar personalizações"},{"language":"RO","value":"Ștergeți personalizările"},{"language":"RU","value":"Очистить настройки"},{"language":"SE","value":"Rievdadit muitalusaid"},{"language":"SH","value":"Obriši prilagođavanja"},{"language":"SK","value":"Vymazať prispôsobenia"},{"language":"SL","value":"Počisti prilagoditve"},{"language":"SR","value":"Цлеар Цустомизатионс"},{"language":"SV","value":"Rensa anpassningar"},{"language":"TH","value":"ล้างการปรับแต่ง"},{"language":"TR","value":"Özelleştirmeleri Temizle"},{"language":"UK","value":"Очистити налаштування"},{"language":"ZF","value":"清除自定義設置"},{"language":"ZH","value":"清晰的定制"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.m.MessageBox.warning('Are you are sure, you want to clear all your customizations?', {\n    title: 'Clear Customizations',\n    actions: [sap.m.MessageBox.Action.YES, sap.m.MessageBox.Action.CANCEL],\n    emphasizedAction: sap.m.MessageBox.Action.YES,\n    onClose: function (sAction) {\n        if (sAction === sap.m.MessageBox.Action.YES) {\n            sap.n.Customization.clearCustomizations().then(() => {\n                sap.m.MessageBox.information('Please refresh to see your standard launchpad.', {\n                    icon: sap.m.MessageBox.Icon.SUCCESS,\n                    title: 'Customizations Cleared',\n                    actions: [sap.m.MessageBox.Action.OK],\n                    emphasizedAction: sap.m.MessageBox.Action.OK,\n                    onClose: function () {\n                        AppCache._Home();\n                        location.reload();\n                    },\n                })\n            });\n        }\n    }\n});\n","language":"javascript","translation":[]}],"fieldPos":392},{"fieldNo":"0554d14e-91bc-4b3c-975b-6370e963abb8","fieldName":"barSettingsSystem","fieldParent":"f833ec93-7c71-4aa9-bbbb-363e1ada5201","fieldType":"sap.m.IconTabFilter","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"SYSTEM","script":"","translation":[{"language":"AF","value":"STELSEL"},{"language":"AR","value":"نظام"},{"language":"BG","value":"СИСТЕМА"},{"language":"CA","value":"SISTEMA"},{"language":"CS","value":"SYSTÉM"},{"language":"DA","value":"SYSTEM"},{"language":"DE","value":"SYSTEM"},{"language":"EL","value":"ΣΥΣΤΗΜΑ"},{"language":"EN","value":"SYSTEM"},{"language":"ES","value":"SISTEMA"},{"language":"ET","value":"SÜSTEEM"},{"language":"FI","value":"JÄRJESTELMÄ"},{"language":"FR","value":"SYSTÈME"},{"language":"HE","value":"מערכת"},{"language":"HR","value":"SUSTAV"},{"language":"HU","value":"RENDSZER"},{"language":"ID","value":"SISTEM"},{"language":"IS","value":"KERFI"},{"language":"IT","value":"SISTEMA"},{"language":"JA","value":"システム"},{"language":"KO","value":"체계"},{"language":"LT","value":"SISTEMA"},{"language":"LV","value":"SISTĒMA"},{"language":"MS","value":"SISTEM"},{"language":"NL","value":"SYSTEEM"},{"language":"NN","value":"SYSTEM"},{"language":"NO","value":"SYSTEM"},{"language":"PL","value":"SYSTEM"},{"language":"PT","value":"SISTEMA"},{"language":"RO","value":"SISTEM"},{"language":"RU","value":"СИСТЕМА"},{"language":"SE","value":"SYSTEMA"},{"language":"SH","value":"SISTEM"},{"language":"SK","value":"SYSTÉM"},{"language":"SL","value":"SISTEM"},{"language":"SR","value":"СИСТЕМ"},{"language":"SV","value":"SYSTEMET"},{"language":"TH","value":"ระบบ"},{"language":"TR","value":"SİSTEM"},{"language":"UK","value":"СИСТЕМА"},{"language":"ZF","value":"系統"},{"language":"ZH","value":"系统"}]}],"fieldPos":393},{"fieldNo":"d6566ae4-2b3a-4403-b8a9-4656abea099e","fieldName":"AppCacheTabVer","fieldParent":"0554d14e-91bc-4b3c-975b-6370e963abb8","fieldType":"sap.m.Table","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"showSeparators","grouping":"Properties","value":"None","script":"","translation":[]}],"fieldPos":394},{"fieldNo":"47d0b0ad-9f91-4abb-9169-9f0796b92401","fieldName":"AppCacheColVerKey","fieldParent":"d6566ae4-2b3a-4403-b8a9-4656abea099e","fieldType":"sap.m.Column","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":395},{"fieldNo":"16f89b56-a7fb-4952-8e58-4a8cee2567ab","fieldName":"AppCacheColVerValue","fieldParent":"d6566ae4-2b3a-4403-b8a9-4656abea099e","fieldType":"sap.m.Column","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"hAlign","grouping":"Properties","value":"Right","script":"","translation":[]}],"fieldPos":396},{"fieldNo":"e388208d-08cc-452b-8128-6123fede0479","fieldName":"AppCacheItemVer","fieldParent":"d6566ae4-2b3a-4403-b8a9-4656abea099e","fieldType":"sap.m.ColumnListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":397},{"fieldNo":"2a3bbc7a-83ed-4b4f-e56d-84736d85ad3c","fieldName":"AppCacheTxtVerKey","fieldParent":"e388208d-08cc-452b-8128-6123fede0479","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{key}","script":"","translation":[]}],"fieldPos":398},{"fieldNo":"dd347f1b-a73a-4798-dd1b-0c337e98cea0","fieldName":"AppCacheTxtVerValue","fieldParent":"e388208d-08cc-452b-8128-6123fede0479","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{value}","script":"","translation":[]}],"fieldPos":399},{"fieldNo":"793982cb-fc7b-428c-f59c-cdfe713dad2c","fieldName":"barSettingsApps","fieldParent":"f833ec93-7c71-4aa9-bbbb-363e1ada5201","fieldType":"sap.m.IconTabFilter","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"APPS","script":"","translation":[{"language":"AF","value":"APPS"},{"language":"AR","value":"تطبيقات"},{"language":"BG","value":"ПРИЛОЖЕНИЯ"},{"language":"CA","value":"APLICACIONS"},{"language":"CS","value":"APLIKACE"},{"language":"DA","value":"APPS"},{"language":"DE","value":"APPS"},{"language":"EL","value":"ΕΦΑΡΜΟΓΕΣ"},{"language":"EN","value":"APPS"},{"language":"ES","value":"APLICACIONES"},{"language":"ET","value":"RAKENDUSED"},{"language":"FI","value":"SOVELLUKSET"},{"language":"FR","value":"APPLICATIONS"},{"language":"HE","value":"אפליקציות"},{"language":"HR","value":"APLIKACIJE"},{"language":"HU","value":"ALKALMAZÁSOK"},{"language":"ID","value":"APLIKASI"},{"language":"IS","value":"APPAR"},{"language":"IT","value":"APP"},{"language":"JA","value":"アプリ"},{"language":"KO","value":"앱"},{"language":"LT","value":"PROGRAMOS"},{"language":"LV","value":"APPS"},{"language":"MS","value":"APLIKASI"},{"language":"NL","value":"APPS"},{"language":"NN","value":"APPER"},{"language":"NO","value":"APPER"},{"language":"PL","value":"APLIKACJE"},{"language":"PT","value":"APLICATIVOS"},{"language":"RO","value":"APLICAȚII"},{"language":"RU","value":"ПРОГРАММЫ"},{"language":"SE","value":"APPS"},{"language":"SH","value":"APLIKACIJE"},{"language":"SK","value":"APPS"},{"language":"SL","value":"APLIKACIJE"},{"language":"SR","value":"АППС"},{"language":"SV","value":"APPAR"},{"language":"TH","value":"แอพพลิเคชัน"},{"language":"TR","value":"UYGULAMALAR"},{"language":"UK","value":"ПРОГРАМИ"},{"language":"ZF","value":"應用"},{"language":"ZH","value":"应用"}]}],"fieldPos":400},{"fieldNo":"4e11d723-ba6e-49bc-8dae-857ac3647581","fieldName":"scrollAppData","fieldParent":"793982cb-fc7b-428c-f59c-cdfe713dad2c","fieldType":"sap.m.ScrollContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"vertical","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"horizontal","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"560px","script":"","translation":[]}],"fieldPos":401},{"fieldNo":"775bf113-a748-4ff6-dcce-a022e795b49a","fieldName":"AppCacheData","fieldParent":"4e11d723-ba6e-49bc-8dae-857ac3647581","fieldType":"sap.m.List","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"mode","grouping":"Properties","value":"Delete","script":"","translation":[]},{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"delete","grouping":"Events","value":"Anonymous Function","script":"let deleteItem = oEvent.getParameter('listItem');\r\nlet context = deleteItem.getBindingContext();\r\nlet data = context.getObject();\r\n\r\nModelData.Delete(AppCacheData, ['application', 'language', 'appPath'], [data.application, data.language, data.appPath]);\r\nsetCacheAppCacheData();","translation":[]},{"attribute":"sticky","grouping":"Properties","value":"[\"ColumnHeaders\"]","script":"","translation":[]}],"fieldPos":402},{"fieldNo":"06f599c0-f98f-4ee5-c12b-98d5db1f37b3","fieldName":"AppCacheDataItem","fieldParent":"775bf113-a748-4ff6-dcce-a022e795b49a","fieldType":"sap.m.ObjectListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"{application}","script":"","translation":[]},{"attribute":"title","grouping":"Formatter","value":"string:UpperCase","script":"","translation":[]}],"fieldPos":403},{"fieldNo":"b8320cd6-3d45-4320-de90-6ebc1d4e5542","fieldName":"AppCacheDataSystem","fieldParent":"06f599c0-f98f-4ee5-c12b-98d5db1f37b3","fieldType":"sap.m.ObjectAttribute","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{appPath}","script":"","translation":[]}],"fieldPos":404},{"fieldNo":"77bee33d-c96c-4756-f96b-af6cf22677f4","fieldName":"AppCacheDataDate","fieldParent":"06f599c0-f98f-4ee5-c12b-98d5db1f37b3","fieldType":"sap.m.ObjectAttribute","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{updatedAt}","script":"","translation":[]},{"attribute":"text","grouping":"Formatter","value":"Anonymous Function","script":"if (typeof updatedAt === 'undefined' || updatedAt === null || updatedAt === '') { return; }\r\n\r\nlet oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance();\r\nif (updatedAt.length === 14) {\r\n    let oSAPFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({ pattern: 'yyyyMMddhhmmss' });\r\n    let oDate = oSAPFormat.parse(updatedAt);\r\n    return oDateFormat.format(new Date(oDate));\r\n}\r\n    \r\nreturn oDateFormat.format(new Date(updatedAt));","translation":[]}],"fieldPos":405},{"fieldNo":"a9b480f3-2842-45d2-af30-5b2482e23781","fieldName":"diaMoveTile","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldType":"sap.m.Dialog","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"verticalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"resizable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"horizontalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"draggable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"beforeOpen","grouping":"Events","value":"Anonymous Function","script":"const { tileId } = modeldiaMoveTile.getData();\nconst tile = sap.n.Customization.getTile(tileId);\nconst heading = tile.title ?? tile.label;\ntitleMoveTile.setText(`${heading} - Move to Screen`);","language":"javascript","translation":[]},{"attribute":"afterOpen","grouping":"Events","value":"MoveTile.setSelectedItem(MoveTile.getItems()[0]);","script":"MoveTile.setSelectedItem(MoveTile.getItems()[0]);","translation":[]}],"fieldPos":406},{"fieldNo":"110f2cde-4020-4c9c-bfdf-548e80d95fe7","fieldName":"headerMoveTile","fieldParent":"a9b480f3-2842-45d2-af30-5b2482e23781","fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"design","grouping":"Properties","value":"Header","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}],"fieldPos":407},{"fieldNo":"d08e8d97-0ed7-457b-a752-4e95b614f50e","fieldName":"middle","fieldParent":"110f2cde-4020-4c9c-bfdf-548e80d95fe7","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentMiddle","script":"","translation":[]}],"fieldPos":408},{"fieldNo":"7a4e8009-03ff-4f16-f57c-0b0e2d437b84","fieldName":"titleMoveTile","fieldParent":"d08e8d97-0ed7-457b-a752-4e95b614f50e","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Move to Screen","script":"","translation":[{"language":"AF","value":"Skuif na skerm"},{"language":"AR","value":"الانتقال إلى الشاشة"},{"language":"BG","value":"Преместване на екрана"},{"language":"CA","value":"Mou a la pantalla"},{"language":"CS","value":"Přesunout na obrazovku"},{"language":"DA","value":"Flyt til skærmen"},{"language":"DE","value":"Zum Bildschirm wechseln"},{"language":"EL","value":"Μετακίνηση στην οθόνη"},{"language":"ES","value":"Mover a la pantalla"},{"language":"ET","value":"Liikuge ekraanile"},{"language":"FI","value":"Siirry näyttöön"},{"language":"FR","value":"Passer à l'écran"},{"language":"HE","value":"העבר למסך"},{"language":"HR","value":"Premjesti na zaslon"},{"language":"HU","value":"Ugrás a Képernyőre"},{"language":"ID","value":"Pindah ke Layar"},{"language":"IS","value":"Færa á skjá"},{"language":"IT","value":"Passa allo schermo"},{"language":"JA","value":"画面に移動"},{"language":"KO","value":"화면으로 이동"},{"language":"LT","value":"Perkelti į ekraną"},{"language":"LV","value":"Pāriet uz ekrānu"},{"language":"MS","value":"Beralih ke Skrin"},{"language":"NL","value":"Verplaats naar scherm"},{"language":"NN","value":"Flytt til skjerm"},{"language":"NO","value":"Flytt til skjerm"},{"language":"PL","value":"Przejdź do ekranu"},{"language":"PT","value":"Mover para a tela"},{"language":"RO","value":"Mutați la ecran"},{"language":"RU","value":"Перейти на экран"},{"language":"SE","value":"Jorgaleapmi skreanii"},{"language":"SH","value":"Premesti na ekran"},{"language":"SK","value":"Presunúť na obrazovku"},{"language":"SL","value":"Premakni se na zaslon"},{"language":"SR","value":"Премести на екран"},{"language":"SV","value":"Flytta till skärmen"},{"language":"TH","value":"ย้ายไปที่หน้าจอ"},{"language":"TR","value":"Ekrana Taşı"},{"language":"UK","value":"Перейти до екрана"},{"language":"ZF","value":"移動到屏幕"},{"language":"ZH","value":"移至屏幕"}]}],"fieldPos":409},{"fieldNo":"e3fe2653-4094-4ebf-dffd-5d8fe2c1b01a","fieldName":"right","fieldParent":"110f2cde-4020-4c9c-bfdf-548e80d95fe7","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}],"fieldPos":410},{"fieldNo":"4c51ee6f-7749-4d6b-fc45-42894d7be347","fieldName":"closeMoveTile","fieldParent":"e3fe2653-4094-4ebf-dffd-5d8fe2c1b01a","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaMoveTile.close();","script":"diaMoveTile.close();","translation":[]}],"fieldPos":411},{"fieldNo":"8563292a-b8ad-412e-f773-9cc3f48bfd59","fieldName":"MoveTile","fieldParent":"a9b480f3-2842-45d2-af30-5b2482e23781","fieldType":"sap.m.List","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"mode","grouping":"Properties","value":"SingleSelectLeft","script":"","translation":[]},{"attribute":"growingThreshold","grouping":"Properties","value":"200","script":"","translation":[]}],"fieldPos":412},{"fieldNo":"07b04180-5da8-4b65-dc40-3d6283e7aadb","fieldName":"itemMoveTile","fieldParent":"8563292a-b8ad-412e-f773-9cc3f48bfd59","fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"{title}","script":"","translation":[]}],"fieldPos":413},{"fieldNo":"e783b371-28f2-4b33-cb5c-d71b5fc7fcf1","fieldName":"diaMoveTileButtons","fieldParent":"a9b480f3-2842-45d2-af30-5b2482e23781","fieldType":"neptune.DialogButtons","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":414},{"fieldNo":"2bc45794-bbfd-4def-97d0-b73f174dbdb3","fieldName":"diaMoveTileAccept","fieldParent":"e783b371-28f2-4b33-cb5c-d71b5fc7fcf1","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Move to Screen","script":"","translation":[{"language":"AF","value":"Skuif na skerm"},{"language":"AR","value":"الانتقال إلى الشاشة"},{"language":"BG","value":"Преместване на екрана"},{"language":"CA","value":"Mou a la pantalla"},{"language":"CS","value":"Přesunout na obrazovku"},{"language":"DA","value":"Flyt til skærmen"},{"language":"DE","value":"Zum Bildschirm wechseln"},{"language":"EL","value":"Μετακίνηση στην οθόνη"},{"language":"ES","value":"Mover a la pantalla"},{"language":"ET","value":"Liikuge ekraanile"},{"language":"FI","value":"Siirry näyttöön"},{"language":"FR","value":"Passer à l'écran"},{"language":"HE","value":"העבר למסך"},{"language":"HR","value":"Premjesti na zaslon"},{"language":"HU","value":"Ugrás a Képernyőre"},{"language":"ID","value":"Pindah ke Layar"},{"language":"IS","value":"Færa á skjá"},{"language":"IT","value":"Passa allo schermo"},{"language":"JA","value":"画面に移動"},{"language":"KO","value":"화면으로 이동"},{"language":"LT","value":"Perkelti į ekraną"},{"language":"LV","value":"Pāriet uz ekrānu"},{"language":"MS","value":"Beralih ke Skrin"},{"language":"NL","value":"Verplaats naar scherm"},{"language":"NN","value":"Flytt til skjerm"},{"language":"NO","value":"Flytt til skjerm"},{"language":"PL","value":"Przejdź do ekranu"},{"language":"PT","value":"Mover para a tela"},{"language":"RO","value":"Mutați la ecran"},{"language":"RU","value":"Перейти на экран"},{"language":"SE","value":"Jorgaleapmi skreanii"},{"language":"SH","value":"Premesti na ekran"},{"language":"SK","value":"Presunúť na obrazovku"},{"language":"SL","value":"Premakni se na zaslon"},{"language":"SR","value":"Премести на екран"},{"language":"SV","value":"Flytta till skärmen"},{"language":"TH","value":"ย้ายไปที่หน้าจอ"},{"language":"TR","value":"Ekrana Taşı"},{"language":"UK","value":"Перейти до екрана"},{"language":"ZF","value":"移動到屏幕"},{"language":"ZH","value":"移至屏幕"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const activeCategoryId = getActivePageCategoryId();\nconst { id: selectedCategoryId } = MoveTile.getSelectedItem().getBindingContext().getObject();\nif (selectedCategoryId === activeCategoryId) return;\n\nconst context = modeldiaMoveTile.getData();\nif (!context || Object.keys(context).length === 0) return;\n\nif (context.type === 'tile') {\n    const tileId = context.tileId;\n    const tileElm = document.getElementById(context.elmId);\n    \n    const currentContext = sap.n.Customization.findTileDragContext(tileId, tileElm);\n    sap.n.Customization.move('T', [...currentContext.parent, tileId], [selectedCategoryId], 0);\n\n    sap.ui.getCore().byId(context.elmId).destroy();\n\n    // destroy content of destination page and re-build it when user navigates to it\n    const matchPageId = `page${selectedCategoryId}`;\n    AppCacheNav.getPages().forEach((page) => {\n        if (page.sId === matchPageId) {\n            page.destroy();\n        }\n    });\n}\n\nmodeldiaMoveTile.setData({});\ndiaMoveTile.close();","language":"javascript","translation":[]}],"fieldPos":415},{"fieldNo":"ec12662e-b471-44f3-9e0f-20e1d0c9c2e3","fieldName":"diaPage","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":416},{"fieldNo":"15266873-1987-4552-8b2e-9401f986199e","fieldName":"headerPage","fieldParent":"ec12662e-b471-44f3-9e0f-20e1d0c9c2e3","fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"design","grouping":"Properties","value":"Header","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}],"fieldPos":417},{"fieldNo":"20bd665a-5ff5-4b8b-ed38-06e4796d21e1","fieldName":"middleHeaderPage","fieldParent":"15266873-1987-4552-8b2e-9401f986199e","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentMiddle","script":"","translation":[]}],"fieldPos":418},{"fieldNo":"9885d3e7-79a4-488c-a8fe-c69a30901e9b","fieldName":"titlePage","fieldParent":"20bd665a-5ff5-4b8b-ed38-06e4796d21e1","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Screen","script":"","translation":[{"language":"AF","value":"Skerm"},{"language":"AR","value":"شاشة"},{"language":"BG","value":"екран"},{"language":"CA","value":"Pantalla"},{"language":"CS","value":"Obrazovka"},{"language":"DA","value":"Skærm"},{"language":"DE","value":"Bildschirm"},{"language":"EL","value":"Οθόνη"},{"language":"ES","value":"Pantalla"},{"language":"ET","value":"Ekraan"},{"language":"FI","value":"Näyttö"},{"language":"FR","value":"Écran"},{"language":"HE","value":"מָסָך"},{"language":"HR","value":"Zaslon"},{"language":"HU","value":"Képernyő"},{"language":"ID","value":"Layar"},{"language":"IS","value":"Skjár"},{"language":"IT","value":"Schermo"},{"language":"JA","value":"画面"},{"language":"KO","value":"화면"},{"language":"LT","value":"Ekranas"},{"language":"LV","value":"Ekrāns"},{"language":"MS","value":"Skrin"},{"language":"NL","value":"Scherm"},{"language":"NN","value":"Skjerm"},{"language":"NO","value":"Skjerm"},{"language":"PL","value":"Ekran"},{"language":"PT","value":"Tela"},{"language":"RO","value":"Ecran"},{"language":"RU","value":"Экран"},{"language":"SE","value":"Skreana"},{"language":"SH","value":"Ekran"},{"language":"SK","value":"Obrazovka"},{"language":"SL","value":"zaslon"},{"language":"SR","value":"Екран"},{"language":"SV","value":"Skärm"},{"language":"TH","value":"หน้าจอ"},{"language":"TR","value":"Ekran"},{"language":"UK","value":"Екран"},{"language":"ZF","value":"屏幕"},{"language":"ZH","value":"屏幕"}]}],"fieldPos":419},{"fieldNo":"6255f1ef-2325-4ff0-b0c5-4cab49e4f334","fieldName":"rightHeaderPage","fieldParent":"15266873-1987-4552-8b2e-9401f986199e","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}],"fieldPos":420},{"fieldNo":"337ae755-20f6-4eb2-d296-a1ee9f91dfc5","fieldName":"closeHeaderPage","fieldParent":"6255f1ef-2325-4ff0-b0c5-4cab49e4f334","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaPage.close();","script":"diaPage.close();","translation":[]}],"fieldPos":421},{"fieldNo":"ffad8f97-97cb-44a9-dd1d-3746c36aef09","fieldName":"PageForm","fieldParent":"ec12662e-b471-44f3-9e0f-20e1d0c9c2e3","fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","request":[],"response":[],"attributes":[],"fieldPos":422},{"fieldNo":"cda693b2-6e3f-4c90-d1f4-8050f6a035c8","fieldName":"pageVerticalLayout","fieldParent":"ffad8f97-97cb-44a9-dd1d-3746c36aef09","fieldType":"sap.ui.layout.VerticalLayout","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":423},{"fieldNo":"99049ef6-c0d2-4abf-d5d4-2f1d1e85d3d6","fieldName":"lblPageMenuText","fieldParent":"cda693b2-6e3f-4c90-d1f4-8050f6a035c8","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Menu Title","script":"","translation":[{"language":"AF","value":"Kieslys titel"},{"language":"AR","value":"عنوان القائمة"},{"language":"BG","value":"Заглавие на менюто"},{"language":"CA","value":"Títol del menú"},{"language":"CS","value":"Název menu"},{"language":"DA","value":"Menu titel"},{"language":"DE","value":"Menu Title"},{"language":"EL","value":"Τίτλος μενού"},{"language":"ES","value":"Título del menú"},{"language":"ET","value":"Menüü pealkiri"},{"language":"FI","value":"Valikon otsikko"},{"language":"FR","value":"Titre du menu"},{"language":"HE","value":"כותרת התפריט"},{"language":"HR","value":"Naslov izbornika"},{"language":"HU","value":"Menü címe"},{"language":"ID","value":"Judul Menu"},{"language":"IS","value":"Heiti valmyndar"},{"language":"IT","value":"Titolo del menù"},{"language":"JA","value":"メニュータイトル"},{"language":"KO","value":"메뉴 제목"},{"language":"LT","value":"Meniu pavadinimas"},{"language":"LV","value":"Izvēlnes nosaukums"},{"language":"MS","value":"Tajuk Menu"},{"language":"NL","value":"Menutitel"},{"language":"NN","value":"Menytittel"},{"language":"NO","value":"Menytittel"},{"language":"PL","value":"Tytuł menu"},{"language":"PT","value":"Título do menu"},{"language":"RO","value":"Titlul meniului"},{"language":"RU","value":"Название меню"},{"language":"SE","value":"Mánu namma"},{"language":"SH","value":"Naziv menija"},{"language":"SK","value":"Názov menu"},{"language":"SL","value":"Naslov menija"},{"language":"SR","value":"Мену Титле"},{"language":"SV","value":"Menytitel"},{"language":"TH","value":"ชื่อเมนู"},{"language":"TR","value":"Menü Başlığı"},{"language":"UK","value":"Назва меню"},{"language":"ZF","value":"菜單標題"},{"language":"ZH","value":"菜单标题"}]},{"attribute":"required","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":424},{"fieldNo":"8c286b23-51ba-4406-efbc-c4dab4300373","fieldName":"inPageMenuText","fieldParent":"cda693b2-6e3f-4c90-d1f4-8050f6a035c8","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"value","grouping":"Properties","value":"{/menuText}","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBottom","script":"","translation":[]},{"attribute":"liveChange","grouping":"Events","value":"Anonymous Function","script":"const val = this.getValue();\nif (!val || val.trim().length === 0) {\n    this.setValueState('Error');\n    this.setValueStateText('Menu title is required.')\n    return;\n}\n\nthis.setValueState().setValueStateText('');\n","language":"javascript","translation":[]}],"fieldPos":425},{"fieldNo":"368ad425-92bb-483a-df11-727db58a38e4","fieldName":"lblPageTitle","fieldParent":"cda693b2-6e3f-4c90-d1f4-8050f6a035c8","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Title","script":"","translation":[{"language":"AF","value":"Titel"},{"language":"AR","value":"عنوان"},{"language":"BG","value":"Заглавие"},{"language":"CA","value":"Títol"},{"language":"CS","value":"Titul"},{"language":"DA","value":"Titel"},{"language":"DE","value":"Menu Title"},{"language":"EL","value":"Τίτλος"},{"language":"ES","value":"Título"},{"language":"ET","value":"Pealkiri"},{"language":"FI","value":"Otsikko"},{"language":"FR","value":"Titre"},{"language":"HE","value":"כותרת"},{"language":"HR","value":"Titula"},{"language":"HU","value":"Cím"},{"language":"ID","value":"Judul"},{"language":"IS","value":"Titill"},{"language":"IT","value":"Titolo"},{"language":"JA","value":"タイトル"},{"language":"KO","value":"제목"},{"language":"LT","value":"Pavadinimas"},{"language":"LV","value":"Nosaukums"},{"language":"MS","value":"Tajuk"},{"language":"NL","value":"Titel"},{"language":"NN","value":"Tittel"},{"language":"NO","value":"Tittel"},{"language":"PL","value":"Tytuł"},{"language":"PT","value":"Título"},{"language":"RO","value":"Titlu"},{"language":"RU","value":"Заголовок"},{"language":"SE","value":"Namma"},{"language":"SH","value":"Naslov"},{"language":"SK","value":"Názov"},{"language":"SL","value":"Naslov"},{"language":"SR","value":"Наслов"},{"language":"SV","value":"Titel"},{"language":"TH","value":"ชื่อ"},{"language":"TR","value":"Başlık"},{"language":"UK","value":"Назва"},{"language":"ZF","value":"標題"},{"language":"ZH","value":"标题"}]},{"attribute":"required","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":426},{"fieldNo":"41212b22-2abb-4b60-e4e9-46930d472526","fieldName":"inPageTitle","fieldParent":"cda693b2-6e3f-4c90-d1f4-8050f6a035c8","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"value","grouping":"Properties","value":"{/title}","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBottom","script":"","translation":[]},{"attribute":"liveChange","grouping":"Events","value":"Anonymous Function","script":"const val = this.getValue();\nif (!val || val.trim().length === 0) {\n    this.setValueState('Error');\n    this.setValueStateText('Title is required.')\n    return;\n}\n\nthis.setValueState().setValueStateText('');\n","language":"javascript","translation":[]}],"fieldPos":427},{"fieldNo":"0cbccbed-0b85-4d3a-8efa-88ee70368f36","fieldName":"lblPageSubTitle","fieldParent":"cda693b2-6e3f-4c90-d1f4-8050f6a035c8","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Subtitle","script":"","translation":[{"language":"AF","value":"Subtitel"},{"language":"AR","value":"العنوان الفرعي"},{"language":"BG","value":"Подзаглавие"},{"language":"CA","value":"Subtítol"},{"language":"CS","value":"Titulky"},{"language":"DA","value":"Undertekst"},{"language":"DE","value":"Untertitel"},{"language":"EL","value":"Υπότιτλος"},{"language":"ES","value":"Subtitular"},{"language":"ET","value":"Alapealkiri"},{"language":"FI","value":"Tekstitys"},{"language":"FR","value":"Sous-titre"},{"language":"HE","value":"כתוביות"},{"language":"HR","value":"Titl"},{"language":"HU","value":"Felirat"},{"language":"ID","value":"Subjudul"},{"language":"IS","value":"Undirtitill"},{"language":"IT","value":"Sottotitolo"},{"language":"JA","value":"字幕"},{"language":"KO","value":"부제"},{"language":"LT","value":"Subtitrai"},{"language":"LV","value":"Apakšvirsraksts"},{"language":"MS","value":"Sari kata"},{"language":"NL","value":"Ondertitel"},{"language":"NN","value":"Undertittel"},{"language":"NO","value":"Undertekst"},{"language":"PL","value":"Podtytuł"},{"language":"PT","value":"Legenda"},{"language":"RO","value":"Subtitlu"},{"language":"RU","value":"Субтитры"},{"language":"SE","value":"Ala namma"},{"language":"SH","value":"Podnaslov"},{"language":"SK","value":"Podnadpis"},{"language":"SL","value":"Podnaslov"},{"language":"SR","value":"Поднаслов"},{"language":"SV","value":"Texta"},{"language":"TH","value":"คำบรรยาย"},{"language":"TR","value":"Alt yazı"},{"language":"UK","value":"Підзаголовок"},{"language":"ZF","value":"副標題"},{"language":"ZH","value":"字幕"}]}],"fieldPos":428},{"fieldNo":"208e2599-a538-411e-b470-5312b40da52b","fieldName":"inPageSubTitle","fieldParent":"cda693b2-6e3f-4c90-d1f4-8050f6a035c8","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"value","grouping":"Properties","value":"{/subTitle}","script":"","translation":[]}],"fieldPos":429},{"fieldNo":"3568c404-99b7-405f-af6f-27a05bff4735","fieldName":"diaPageButtons","fieldParent":"ec12662e-b471-44f3-9e0f-20e1d0c9c2e3","fieldType":"neptune.DialogButtons","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":430},{"fieldNo":"14e027ea-e95f-4ac7-c5c6-68b5b486201d","fieldName":"diaPageSave","fieldParent":"3568c404-99b7-405f-af6f-27a05bff4735","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Save","script":"","translation":[{"language":"AF","value":"Stoor"},{"language":"AR","value":"يحفظ"},{"language":"BG","value":"Запазване"},{"language":"CA","value":"Desa"},{"language":"CS","value":"Uložit"},{"language":"DA","value":"Gemme"},{"language":"DE","value":"Speichern"},{"language":"EL","value":"Αποθηκεύσετε"},{"language":"ES","value":"Ahorrar"},{"language":"ET","value":"Salvesta"},{"language":"FI","value":"Tallentaa"},{"language":"FR","value":"Sauvegarder"},{"language":"HE","value":"להציל"},{"language":"HR","value":"Uštedjeti"},{"language":"HU","value":"Megment"},{"language":"ID","value":"Menyimpan"},{"language":"IS","value":"Vista"},{"language":"IT","value":"Salva"},{"language":"JA","value":"保存"},{"language":"KO","value":"구하다"},{"language":"LT","value":"Sutaupyti"},{"language":"LV","value":"Saglabāt"},{"language":"MS","value":"Jimat"},{"language":"NL","value":"Redden"},{"language":"NN","value":"Lagre"},{"language":"NO","value":"Lagre"},{"language":"PL","value":"Ratować"},{"language":"PT","value":"Salvar"},{"language":"RO","value":"Salvați"},{"language":"RU","value":"Сохранять"},{"language":"SE","value":"Sáve"},{"language":"SH","value":"Sačuvaj"},{"language":"SK","value":"Uložiť"},{"language":"SL","value":"Shrani"},{"language":"SR","value":"сачувати"},{"language":"SV","value":"Spara"},{"language":"TH","value":"บันทึก"},{"language":"TR","value":"Kaydetmek"},{"language":"UK","value":"зберегти"},{"language":"ZF","value":"保存"},{"language":"ZH","value":"节省"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const data = modelPageForm.getData();\nconst { id, menuText, title } = data;\n\nif (\n    !title || title.trim().length === 0 ||\n    !menuText || menuText.trim().length === 0\n) {\n    sap.m.MessageToast.show('Required fields are missing.');\n    return;\n}\n\nif (id) {\n    sap.n.Customization.setPage(data);\n} else {\n    sap.n.Customization.addPage(data);\n}\n\nmodelPageForm.setData({});\ndiaPage.close();","language":"javascript","translation":[]}],"fieldPos":431},{"fieldNo":"d72bff79-4ff6-4408-d5dd-b31267b7b4e6","fieldName":"diaManagePages","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"verticalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"resizable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"horizontalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"draggable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"afterOpen","grouping":"Events","value":"Anonymous Function","script":"let movePageId, fromIndex, toIndex;\nconst elm = document.getElementById('ManagePages-listUl');\n\nconst activeCategoryId = getActivePageCategoryId();\n\nsap.n.DragDrop.restrictedTo(elm, (evt, ui) => {\n    const elm = ui.item.get(0);\n    if (!elm) return;\n    \n    fromIndex = ui.item.index();\n    movePageId = elm.querySelector('.managePagesId').innerText;\n}, (evt, ui) => {\n    if (!movePageId) return;\n    \n    toIndex = ui.item.index();\n    sap.n.Customization.move('TG', [movePageId], [], toIndex);\n    movePageId = null;\n    sap.n.Launchpad.BuildMenuTop();\n    sap.n.Launchpad.MarkTopMenu(activeCategoryId);\n});","language":"javascript","translation":[]},{"attribute":"afterClose","grouping":"Events","value":"sap.n.Launchpad.BuildTreeMenu();","script":"sap.n.Launchpad.BuildTreeMenu();","translation":[]}],"fieldPos":432},{"fieldNo":"f92d87cc-e306-4e3d-bfea-078a311000a9","fieldName":"headerManagePages","fieldParent":"d72bff79-4ff6-4408-d5dd-b31267b7b4e6","fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"design","grouping":"Properties","value":"Header","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}],"fieldPos":433},{"fieldNo":"fd399478-960e-482f-add1-2a6abfea785f","fieldName":"headerManagePages","fieldParent":"f92d87cc-e306-4e3d-bfea-078a311000a9","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentMiddle","script":"","translation":[]}],"fieldPos":434},{"fieldNo":"d2e7ddce-a819-4c92-fbad-d47ce139a094","fieldName":"titleManagePages","fieldParent":"fd399478-960e-482f-add1-2a6abfea785f","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Manage Screens","script":"","translation":[{"language":"AF","value":"Bestuur skerms"},{"language":"AR","value":"إدارة الشاشات"},{"language":"BG","value":"Управление на екрани"},{"language":"CA","value":"Gestionar pantalles"},{"language":"CS","value":"Správa obrazovek"},{"language":"DA","value":"Administrer skærme"},{"language":"DE","value":"Bildschirme verwalten"},{"language":"EL","value":"Διαχείριση οθονών"},{"language":"ES","value":"Administrar pantallas"},{"language":"ET","value":"Ekraanide haldamine"},{"language":"FI","value":"Hallitse näyttöjä"},{"language":"FR","value":"Gérer les écrans"},{"language":"HE","value":"ניהול מסכים"},{"language":"HR","value":"Upravljanje zaslonima"},{"language":"HU","value":"Képernyők kezelése"},{"language":"ID","value":"Kelola Layar"},{"language":"IS","value":"Stjórna skjám"},{"language":"IT","value":"Gestisci schermi"},{"language":"JA","value":"画面の管理"},{"language":"KO","value":"화면 관리"},{"language":"LT","value":"Tvarkyti ekranus"},{"language":"LV","value":"Pārvaldīt ekrānus"},{"language":"MS","value":"Urus Skrin"},{"language":"NL","value":"Beheer schermen"},{"language":"NN","value":"Administrer skjermer"},{"language":"NO","value":"Administrer skjermer"},{"language":"PL","value":"Zarządzaj ekranami"},{"language":"PT","value":"Gerenciar telas"},{"language":"RO","value":"Gestionați ecranele"},{"language":"RU","value":"Управление экранами"},{"language":"SE","value":"Rievdadit skáhpiid"},{"language":"SH","value":"Upravljaj ekranima"},{"language":"SK","value":"Spravovať obrazovky"},{"language":"SL","value":"Upravljanje zaslonov"},{"language":"SR","value":"Управљајте екранима"},{"language":"SV","value":"Hantera skärmar"},{"language":"TH","value":"จัดการหน้าจอ"},{"language":"TR","value":"Ekranları Yönet"},{"language":"UK","value":"Керування екранами"},{"language":"ZF","value":"管理畫面"},{"language":"ZH","value":"管理屏幕"}]}],"fieldPos":435},{"fieldNo":"63423463-effc-44b9-a4eb-0f542c7794be","fieldName":"rightManagePages","fieldParent":"f92d87cc-e306-4e3d-bfea-078a311000a9","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}],"fieldPos":436},{"fieldNo":"a9e11a25-e4e5-4b1b-c379-dfc3731fb1d9","fieldName":"closeManagePages","fieldParent":"63423463-effc-44b9-a4eb-0f542c7794be","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaManagePages.close();","script":"diaManagePages.close();","translation":[]}],"fieldPos":437},{"fieldNo":"f874d376-8f76-4418-9ed2-47e1951a04f9","fieldName":"messageStripManagePages","fieldParent":"d72bff79-4ff6-4408-d5dd-b31267b7b4e6","fieldType":"sap.m.MessageStrip","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Use Drag&Drop to sort screens","script":"","translation":[{"language":"AF","value":"Gebruik Sleep & Drop om skerms te sorteer"},{"language":"AR","value":"استخدم السحب والإفلات لفرز الشاشات"},{"language":"BG","value":"Използвайте Drag&Drop за сортиране на екрани"},{"language":"CA","value":"Utilitzeu Arrossegar i deixar anar per ordenar les pantalles"},{"language":"CS","value":"K řazení obrazovek použijte Drag&Drop"},{"language":"DA","value":"Brug træk og slip til at sortere skærme"},{"language":"DE","value":"Verwenden Sie Drag&Drop, um Bildschirme zu sortieren"},{"language":"EL","value":"Χρησιμοποιήστε το Drag&Drop για να ταξινομήσετε τις οθόνες"},{"language":"ES","value":"Utilice arrastrar y soltar para ordenar pantallas"},{"language":"ET","value":"Kasutage ekraanide sortimiseks lohistamist"},{"language":"FI","value":"Käytä Vedä ja pudota näyttöjen lajitteluun"},{"language":"FR","value":"Utilisez le glisser-déposer pour trier les écrans"},{"language":"HE","value":"השתמש בגרירה ושחרור כדי למיין מסכים"},{"language":"HR","value":"Koristite Drag&Drop za sortiranje zaslona"},{"language":"HU","value":"A Drag&Drop segítségével rendezheti a képernyőket"},{"language":"ID","value":"Gunakan Drag&Drop untuk mengurutkan layar"},{"language":"IS","value":"Notaðu Drag&Drop til að flokka skjái"},{"language":"IT","value":"Usa il Drag&Drop per ordinare le schermate"},{"language":"JA","value":"ドラッグ＆ドロップで画面を並べ替える"},{"language":"KO","value":"드래그 앤 드롭을 사용하여 화면 정렬"},{"language":"LT","value":"Norėdami rūšiuoti ekranus, naudokite „Drag&Drop“."},{"language":"LV","value":"Izmantojiet vilkšanu un nomešanu, lai kārtotu ekrānus"},{"language":"MS","value":"Gunakan Drag&Drop untuk mengisih skrin"},{"language":"NL","value":"Gebruik Drag&Drop om schermen te sorteren"},{"language":"NN","value":"Bruk dra og slipp for å sortere skjermer"},{"language":"NO","value":"Dra og slipp for å sortere skjermer"},{"language":"PL","value":"Użyj metody „przeciągnij i upuść”, aby posortować ekrany"},{"language":"PT","value":"Use arrastar e soltar para classificar telas"},{"language":"RO","value":"Folosiți Drag&Drop pentru a sorta ecranele"},{"language":"RU","value":"Используйте Drag&Drop для сортировки экранов"},{"language":"SE","value":"Geahččalit Drag&Drop skreanaid sordnii"},{"language":"SH","value":"Koristite prevlačenje i ispuštanje za sortiranje ekrana"},{"language":"SK","value":"Na triedenie obrazoviek použite funkciu Drag&Drop"},{"language":"SL","value":"Uporabite povleci in spusti za razvrščanje zaslonov"},{"language":"SR","value":"Користите Драг&Дроп за сортирање екрана"},{"language":"SV","value":"Använd Dra och släpp för att sortera skärmar"},{"language":"TH","value":"ใช้การลากและวางเพื่อจัดเรียงหน้าจอ"},{"language":"TR","value":"Ekranları sıralamak için Sürükle ve Bırak'ı kullanın"},{"language":"UK","value":"Використовуйте Drag&Drop для сортування екранів"},{"language":"ZF","value":"使用拖放來排序屏幕"},{"language":"ZH","value":"使用拖放对屏幕进行排序"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepManagePagesMessageStrip","script":"","translation":[]}],"fieldPos":438},{"fieldNo":"1f8e26b2-2d86-4ce8-83f0-1ef320bf5a22","fieldName":"ManagePages","fieldParent":"d72bff79-4ff6-4408-d5dd-b31267b7b4e6","fieldType":"sap.m.List","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepManagePages","script":"","translation":[]},{"attribute":"growingThreshold","grouping":"Properties","value":"200","script":"","translation":[]}],"fieldPos":439},{"fieldNo":"41a57c63-fbd2-4f85-e6dd-f35195ae218c","fieldName":"listItemManagePages","fieldParent":"1f8e26b2-2d86-4ce8-83f0-1ef320bf5a22","fieldType":"sap.m.CustomListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":440},{"fieldNo":"dba096c8-33f2-42a2-8036-6bc264ca8a3d","fieldName":"fbManagePages","fieldParent":"41a57c63-fbd2-4f85-e6dd-f35195ae218c","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMargin","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Start","script":"","translation":[]}],"fieldPos":441},{"fieldNo":"07a182c1-c2e9-4512-acea-14d4eb20b620","fieldName":"icoSortManagePages","fieldParent":"dba096c8-33f2-42a2-8036-6bc264ca8a3d","fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginEnd","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"icoSortManagePages","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"sap-icon://menu2","script":"","translation":[]}],"fieldPos":442},{"fieldNo":"4e418c40-4ee2-4bfc-e4bd-32b73194610a","fieldName":"lblManagePages","fieldParent":"dba096c8-33f2-42a2-8036-6bc264ca8a3d","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{title}","script":"","translation":[]}],"fieldPos":443},{"fieldNo":"5c2c678b-e815-43c4-9160-e8287243d441","fieldName":"hzManagePagesActions","fieldParent":"dba096c8-33f2-42a2-8036-6bc264ca8a3d","fieldType":"sap.ui.layout.HorizontalLayout","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"hzManagePagesActions","script":"","translation":[]}],"fieldPos":444},{"fieldNo":"6e28e70f-31c0-4241-ce83-83adce877b07","fieldName":"lblManagePagesIdForDragDrop","fieldParent":"5c2c678b-e815-43c4-9160-e8287243d441","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{id}","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"managePagesId","script":"","translation":[]}],"fieldPos":445},{"fieldNo":"91830771-ad9d-4e25-f40a-97869762a5f7","fieldName":"iconManagePagesEdit","fieldParent":"5c2c678b-e815-43c4-9160-e8287243d441","fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{isCustom}","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"sap-icon://fa-solid/pencil-alt","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Customization.Popover.onEditCustomPage(this.mProperties.fieldGroupIds[0]);","script":"sap.n.Customization.Popover.onEditCustomPage(this.mProperties.fieldGroupIds[0]);","translation":[]},{"attribute":"fieldGroupIds","grouping":"Properties","value":"{id}","script":"","translation":[]}],"fieldPos":446},{"fieldNo":"d36d9779-693d-4021-efed-2ca7776cbcc2","fieldName":"iconManagePagesDelete","fieldParent":"5c2c678b-e815-43c4-9160-e8287243d441","fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{=!${isCustom}}","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBegin","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"{= ${status} === 'active' ? 'sap-icon://fa-regular/eye' : 'sap-icon://fa-regular/eye-slash' }","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"// standard page (Not a custom page)\nconst pageId = this.mProperties.fieldGroupIds[0];\nconst page = modelManagePages.getData().find(page => page.id === pageId);\nif (!page) {\n    console.log('cannot find page in, standard page (Not a custom page) delete operation');\n    return;\n}\n\nconst prevStatus = page.status;\n\n// update model\nmodelManagePages.setData(\n    modelManagePages.getData().map(page => {\n        if (page.id !== pageId) return page;\n        page.status = page.status === 'active' ? 'inactive' : 'active';\n        return page;\n    })\n);\n\n// re-enabling standard pages\nif (prevStatus === 'inactive') {\n    sap.n.Customization.Popover.onActivatePage(pageId);\n} else {\n    sap.n.Customization.Popover.onDeletePage(pageId);\n}","language":"javascript","translation":[]},{"attribute":"fieldGroupIds","grouping":"Properties","value":"{id}","script":"","translation":[]}],"fieldPos":447},{"fieldNo":"850d23eb-a775-4c68-ce27-d1b3b4546581","fieldName":"iconManagePagesTrash","fieldParent":"5c2c678b-e815-43c4-9160-e8287243d441","fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{isCustom}","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBegin","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"sap-icon://fa-regular/trash-alt","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"// custom page\nconst pageId = this.mProperties.fieldGroupIds[0];\nmodelManagePages.setData(\n    modelManagePages.getData().map(page => {\n        if (page.id !== pageId) return page;\n        page.status = page.status === 'active' ? 'inactive' : 'active';\n        return page;\n    })\n);\nsap.n.Customization.Popover.onDeletePage(pageId);\n","language":"javascript","translation":[]},{"attribute":"fieldGroupIds","grouping":"Properties","value":"{id}","script":"","translation":[]}],"fieldPos":448},{"fieldNo":"a0b93b0f-ce47-4003-e33a-98123c44bbc4","fieldName":"diaManagePagesButtons","fieldParent":"d72bff79-4ff6-4408-d5dd-b31267b7b4e6","fieldType":"neptune.DialogButtons","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":449},{"fieldNo":"62569034-bb22-42c2-9b5c-f6715a52aeaa","fieldName":"diaManagePagesAddPage","fieldParent":"a0b93b0f-ce47-4003-e33a-98123c44bbc4","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Add Screen","script":"","translation":[{"language":"AF","value":"Voeg skerm by"},{"language":"AR","value":"إضافة شاشة"},{"language":"BG","value":"Добавяне на екран"},{"language":"CA","value":"Afegeix pantalla"},{"language":"CS","value":"Přidat obrazovku"},{"language":"DA","value":"Tilføj skærm"},{"language":"DE","value":"Bildschirm hinzufügen"},{"language":"EL","value":"Προσθήκη οθόνης"},{"language":"ES","value":"Agregar pantalla"},{"language":"ET","value":"Lisa ekraan"},{"language":"FI","value":"Lisää näyttö"},{"language":"FR","value":"Ajouter un écran"},{"language":"HE","value":"הוסף מסך"},{"language":"HR","value":"Dodaj zaslon"},{"language":"HU","value":"Képernyő hozzáadása"},{"language":"ID","value":"Tambahkan Layar"},{"language":"IS","value":"Bæta við skjá"},{"language":"IT","value":"Aggiungi schermo"},{"language":"JA","value":"画面の追加"},{"language":"KO","value":"화면 추가"},{"language":"LT","value":"Pridėti ekraną"},{"language":"LV","value":"Pievienot ekrānu"},{"language":"MS","value":"Tambah Skrin"},{"language":"NL","value":"Scherm toevoegen"},{"language":"NN","value":"Legg til skjerm"},{"language":"NO","value":"Legg til skjerm"},{"language":"PL","value":"Dodaj ekran"},{"language":"PT","value":"Adicionar tela"},{"language":"RO","value":"Adăugați ecran"},{"language":"RU","value":"Добавить экран"},{"language":"SE","value":"Addet skreana"},{"language":"SH","value":"Dodaj ekran"},{"language":"SK","value":"Pridať obrazovku"},{"language":"SL","value":"Dodaj zaslon"},{"language":"SR","value":"Додај екран"},{"language":"SV","value":"Lägg till skärm"},{"language":"TH","value":"เพิ่มหน้าจอ"},{"language":"TR","value":"Ekran Ekle"},{"language":"UK","value":"Додати екран"},{"language":"ZF","value":"添加屏幕"},{"language":"ZH","value":"添加屏幕"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"diaManagePages.close();\nsap.n.Customization.Popover.onAddCustomPage();","language":"javascript","translation":[]}],"fieldPos":450},{"fieldNo":"6a8167f7-1ac4-4e94-f598-cd56c343e2ef","fieldName":"diaManagePagesDone","fieldParent":"a0b93b0f-ce47-4003-e33a-98123c44bbc4","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Done","script":"","translation":[{"language":"AF","value":"Klaar"},{"language":"AR","value":"منتهي"},{"language":"BG","value":"Свършен"},{"language":"CA","value":"Fet"},{"language":"CS","value":"Hotovo"},{"language":"DA","value":"Færdig"},{"language":"DE","value":"Erledigt"},{"language":"EL","value":"Εγινε"},{"language":"ES","value":"Hecho"},{"language":"ET","value":"Valmis"},{"language":"FI","value":"Tehty"},{"language":"FR","value":"Fait"},{"language":"HE","value":"בוצע"},{"language":"HR","value":"Gotovo"},{"language":"HU","value":"Kész"},{"language":"ID","value":"Selesai"},{"language":"IS","value":"Búið"},{"language":"IT","value":"Fatto"},{"language":"JA","value":"終わり"},{"language":"KO","value":"완료"},{"language":"LT","value":"padaryta"},{"language":"LV","value":"Gatavs"},{"language":"MS","value":"Selesai"},{"language":"NL","value":"Klaar"},{"language":"NN","value":"Ferdig"},{"language":"NO","value":"Ferdig"},{"language":"PL","value":"Zrobione"},{"language":"PT","value":"Feito"},{"language":"RO","value":"Terminat"},{"language":"RU","value":"Сделанный"},{"language":"SE","value":"Leat"},{"language":"SH","value":"Završeno"},{"language":"SK","value":"hotový"},{"language":"SL","value":"Končano"},{"language":"SR","value":"Готово"},{"language":"SV","value":"Gjort"},{"language":"TH","value":"เสร็จแล้ว"},{"language":"TR","value":"Tamamlamak"},{"language":"UK","value":"Готово"},{"language":"ZF","value":"完成"},{"language":"ZH","value":"完毕"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"modelManagePages.setData([]);\ndiaManagePages.close();","language":"javascript","translation":[]}],"fieldPos":451},{"fieldNo":"40e34e80-5310-48ad-bb11-e66e58c90c8d","fieldName":"diaAddTileCloseBtn","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Close","script":"","translation":[{"language":"AF","value":"Naby"},{"language":"AR","value":"يغلق"},{"language":"BG","value":"Близо"},{"language":"CA","value":"Tanca"},{"language":"CS","value":"Zavřít"},{"language":"DA","value":"Tæt"},{"language":"DE","value":"Schließen"},{"language":"EL","value":"Κλείσε"},{"language":"ES","value":"Cerca"},{"language":"ET","value":"Sulge"},{"language":"FI","value":"kiinni"},{"language":"FR","value":"Fermer"},{"language":"HE","value":"סגור"},{"language":"HR","value":"Zatvoriti"},{"language":"HU","value":"Bezárás"},{"language":"ID","value":"Menutup"},{"language":"IS","value":"Loka"},{"language":"IT","value":"Vicino"},{"language":"JA","value":"近い"},{"language":"KO","value":"닫다"},{"language":"LT","value":"Uždaryti"},{"language":"LV","value":"Aizvērt"},{"language":"MS","value":"tutup"},{"language":"NL","value":"Dichtbij"},{"language":"NN","value":"Lukk"},{"language":"NO","value":"Lukk"},{"language":"PL","value":"Zamknąć"},{"language":"PT","value":"Fechar"},{"language":"RO","value":"Închide"},{"language":"RU","value":"Закрывать"},{"language":"SE","value":"Gulat"},{"language":"SH","value":"Zatvori"},{"language":"SK","value":"Zavrieť"},{"language":"SL","value":"Zapri"},{"language":"SR","value":"Близу"},{"language":"SV","value":"Stänga"},{"language":"TH","value":"ปิด"},{"language":"TR","value":"Kapalı"},{"language":"UK","value":"Закрити"},{"language":"ZF","value":"關閉"},{"language":"ZH","value":"关闭"}]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaAddTile.close();","script":"diaAddTile.close();","translation":[]}],"fieldPos":452},{"fieldNo":"73cef20f-a380-45f5-f250-77e5b93115f7","fieldName":"diaAddTile","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"contentWidth","grouping":"Properties","value":"500px","script":"","translation":[]},{"attribute":"beforeOpen","grouping":"Events","value":"searchFieldAddTile.setValue('');","script":"searchFieldAddTile.setValue('');","translation":[]},{"attribute":"afterClose","grouping":"Events","value":"sap.n.Launchpad.BuildTreeMenu();","script":"sap.n.Launchpad.BuildTreeMenu();","translation":[]},{"attribute":"endButton","grouping":"Associations","value":"diaAddTileCloseBtn","script":"","translation":[]}],"fieldPos":453},{"fieldNo":"e65a2d92-3b18-4918-ad49-db78fe343c9c","fieldName":"diaAddTileHeaderBar","fieldParent":"73cef20f-a380-45f5-f250-77e5b93115f7","fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}],"fieldPos":454},{"fieldNo":"601ab763-61a6-4eaf-c471-7377c4efc3cd","fieldName":"diaAddTileHeaderBarRight","fieldParent":"e65a2d92-3b18-4918-ad49-db78fe343c9c","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}],"fieldPos":455},{"fieldNo":"b87e0940-495a-4c9f-c6d7-2c611d454676","fieldName":"diaAddTileHeaderCloseBtn","fieldParent":"601ab763-61a6-4eaf-c471-7377c4efc3cd","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaAddTile.close();","script":"diaAddTile.close();","translation":[]}],"fieldPos":456},{"fieldNo":"2bc263b2-5e05-4230-838f-4028941bded5","fieldName":"fbHeaderAddTile","fieldParent":"73cef20f-a380-45f5-f250-77e5b93115f7","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":457},{"fieldNo":"42cd2da0-2b6c-4bf1-dc81-6885249f2884","fieldName":"oFlexBox","fieldParent":"2bc263b2-5e05-4230-838f-4028941bded5","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBegin","script":"","translation":[]}],"fieldPos":458},{"fieldNo":"a056ca26-eae7-433d-9ef6-b37ae812f829","fieldName":"iconHeaderAddTile","fieldParent":"42cd2da0-2b6c-4bf1-dc81-6885249f2884","fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"src","grouping":"Properties","value":"sap-icon://sap-ui5","script":"","translation":[]},{"attribute":"size","grouping":"Properties","value":"2.5rem","script":"","translation":[]}],"fieldPos":459},{"fieldNo":"43d34d84-ca57-4158-bc10-0c4cb60a06b3","fieldName":"oFlexBox1","fieldParent":"2bc263b2-5e05-4230-838f-4028941bded5","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBegin","script":"","translation":[]},{"attribute":"direction","grouping":"Properties","value":"Column","script":"","translation":[]}],"fieldPos":460},{"fieldNo":"750fc9a0-a573-4e64-84bc-bbfde052555b","fieldName":"titleAddTile","fieldParent":"43d34d84-ca57-4158-bc10-0c4cb60a06b3","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H2","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Application Finder","script":"","translation":[{"language":"AF","value":"Toepassing Finder"},{"language":"AR","value":"مكتشف التطبيقات"},{"language":"BG","value":"Търсене на приложения"},{"language":"CA","value":"Cercador d'aplicacions"},{"language":"CS","value":"Aplikace Finder"},{"language":"DA","value":"Application Finder"},{"language":"DE","value":"Anwendungsfinder"},{"language":"EL","value":"Εύρεση εφαρμογών"},{"language":"ES","value":"Buscador de aplicaciones"},{"language":"ET","value":"Rakenduse leidja"},{"language":"FI","value":"Sovellushaku"},{"language":"FR","value":"Recherche d'applications"},{"language":"HE","value":"מאתר יישומים"},{"language":"HR","value":"Tražilica aplikacija"},{"language":"HU","value":"Alkalmazáskereső"},{"language":"ID","value":"Pencari Aplikasi"},{"language":"IS","value":"Forritaleitari"},{"language":"IT","value":"Trova applicazioni"},{"language":"JA","value":"アプリケーションファインダー"},{"language":"KO","value":"애플리케이션 찾기"},{"language":"LT","value":"Programų ieškiklis"},{"language":"LV","value":"Lietojumprogrammu meklētājs"},{"language":"MS","value":"Pencari Aplikasi"},{"language":"NL","value":"Applicatiezoeker"},{"language":"NN","value":"Applikasjonsfinder"},{"language":"NO","value":"Applikasjonssøker"},{"language":"PL","value":"Wyszukiwarka aplikacji"},{"language":"PT","value":"Localizador de aplicativos"},{"language":"RO","value":"Aplicație Finder"},{"language":"RU","value":"Поиск приложений"},{"language":"SE","value":"Applikašuvdna čállin"},{"language":"SH","value":"Pretraživač aplikacija"},{"language":"SK","value":"Vyhľadávač aplikácií"},{"language":"SL","value":"Iskalnik aplikacij"},{"language":"SR","value":"Апплицатион Финдер"},{"language":"SV","value":"Application Finder"},{"language":"TH","value":"โปรแกรมค้นหา"},{"language":"TR","value":"Uygulama Bulucu"},{"language":"UK","value":"Пошук додатків"},{"language":"ZF","value":"應用查找器"},{"language":"ZH","value":"应用查找器"}]}],"fieldPos":461},{"fieldNo":"52b43474-c749-41a1-f065-804758ab1dc9","fieldName":"subTitleAddTile","fieldParent":"43d34d84-ca57-4158-bc10-0c4cb60a06b3","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Search all available applications","script":"","translation":[{"language":"AF","value":"Soek alle beskikbare toepassings"},{"language":"AR","value":"البحث في جميع التطبيقات المتاحة"},{"language":"BG","value":"Търсене във всички налични приложения"},{"language":"CA","value":"Cerca totes les aplicacions disponibles"},{"language":"CS","value":"Prohledejte všechny dostupné aplikace"},{"language":"DA","value":"Søg i alle tilgængelige applikationer"},{"language":"DE","value":"Durchsuchen Sie alle verfügbaren Anwendungen"},{"language":"EL","value":"Αναζήτηση όλων των διαθέσιμων εφαρμογών"},{"language":"ES","value":"Buscar todas las aplicaciones disponibles"},{"language":"ET","value":"Otsige kõiki saadaolevaid rakendusi"},{"language":"FI","value":"Etsi kaikki saatavilla olevat sovellukset"},{"language":"FR","value":"Rechercher toutes les applications disponibles"},{"language":"HE","value":"חפש בכל האפליקציות הזמינות"},{"language":"HR","value":"Pretražite sve dostupne aplikacije"},{"language":"HU","value":"Keresés az összes elérhető alkalmazásban"},{"language":"ID","value":"Cari semua aplikasi yang tersedia"},{"language":"IS","value":"Leitaðu í öllum tiltækum forritum"},{"language":"IT","value":"Cerca tutte le applicazioni disponibili"},{"language":"JA","value":"利用可能なすべてのアプリケーションを検索する"},{"language":"KO","value":"사용 가능한 모든 애플리케이션 검색"},{"language":"LT","value":"Ieškokite visų galimų programų"},{"language":"LV","value":"Meklēt visas pieejamās lietojumprogrammas"},{"language":"MS","value":"Cari semua aplikasi yang tersedia"},{"language":"NL","value":"Zoek naar alle beschikbare applicaties"},{"language":"NN","value":"Søk i alle tilgjengelige applikasjoner"},{"language":"NO","value":"Søk i alle tilgjengelige applikasjoner"},{"language":"PL","value":"Przeszukaj wszystkie dostępne aplikacje"},{"language":"PT","value":"Pesquise todos os aplicativos disponíveis"},{"language":"RO","value":"Căutați toate aplicațiile disponibile"},{"language":"RU","value":"Поиск всех доступных приложений"},{"language":"SE","value":"Ruoŧŧa buot leat dáhtton applikašuvnnat"},{"language":"SH","value":"Pretraži sve dostupne aplikacije"},{"language":"SK","value":"Vyhľadajte všetky dostupné aplikácie"},{"language":"SL","value":"Poiščite vse razpoložljive aplikacije"},{"language":"SR","value":"Претражите све доступне апликације"},{"language":"SV","value":"Sök i alla tillgängliga applikationer"},{"language":"TH","value":"ค้นหาแอปพลิเคชันที่มีอยู่ทั้งหมด"},{"language":"TR","value":"Mevcut tüm uygulamaları arayın"},{"language":"UK","value":"Пошук у всіх доступних програмах"},{"language":"ZF","value":"搜索所有可用應用"},{"language":"ZH","value":"搜索所有可用的应用程序"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBottom","script":"","translation":[]}],"fieldPos":462},{"fieldNo":"de17ad42-9b5a-4b75-91ae-3a263d199359","fieldName":"diaAddTileToolbar","fieldParent":"73cef20f-a380-45f5-f250-77e5b93115f7","fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBottom","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"diaAddTileToolbar","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}],"fieldPos":463},{"fieldNo":"e7c33eb1-edff-44ae-cf95-202b0eb85b57","fieldName":"searchFieldAddTile","fieldParent":"de17ad42-9b5a-4b75-91ae-3a263d199359","fieldType":"sap.m.SearchField","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"liveChange","grouping":"Events","value":"Anonymous Function","script":"const value = this.getValue().toLowerCase().trim();\nif (value.length === 0) {\n    modelAddTiles.setData(\n        modelAddTiles.getData().map(tile => {\n            tile.visible = true;\n            return tile;\n        })\n    );\n    return;\n}\n\nmodelAddTiles.setData(\n    modelAddTiles.getData().map(tile => {\n        const { title, subTitle } = tile;\n        tile.visible = false;\n        if (title && title.toLowerCase().includes(value) ||\n            subTitle && subTitle.toLowerCase().includes(value)) {\n            tile.visible = true;\n        }\n        return tile;\n    })\n);","language":"javascript","translation":[]}],"fieldPos":464},{"fieldNo":"b16b64cc-daef-4f6c-ba82-15e6ba423219","fieldName":"AddTiles","fieldParent":"73cef20f-a380-45f5-f250-77e5b93115f7","fieldType":"sap.m.List","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[],"fieldPos":465},{"fieldNo":"0d4a664c-8021-4d68-d00e-e91357ab94f2","fieldName":"listItemAddTiles","fieldParent":"b16b64cc-daef-4f6c-ba82-15e6ba423219","fieldType":"sap.m.CustomListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{visible}","script":"","translation":[]}],"fieldPos":466},{"fieldNo":"e15700a8-851a-47b6-b22a-d362056e1426","fieldName":"fbAddTilesListItem","fieldParent":"0d4a664c-8021-4d68-d00e-e91357ab94f2","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMargin","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]}],"fieldPos":467},{"fieldNo":"cd6ca800-467c-4d63-c132-4e5e567e4a3c","fieldName":"oFlexBox2","fieldParent":"e15700a8-851a-47b6-b22a-d362056e1426","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"direction","grouping":"Properties","value":"Column","script":"","translation":[]}],"fieldPos":468},{"fieldNo":"97e74eff-b92f-4fc5-c54e-a1ce5fc8be60","fieldName":"titleAddTiles","fieldParent":"cd6ca800-467c-4d63-c132-4e5e567e4a3c","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{title}","script":"","translation":[]}],"fieldPos":469},{"fieldNo":"46f5c5a2-7f5d-4312-c205-126959994dba","fieldName":"subTitleAddTiles","fieldParent":"cd6ca800-467c-4d63-c132-4e5e567e4a3c","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{= ${subTitle} > 0 }","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"{subTitle}","script":"","translation":[]}],"fieldPos":470},{"fieldNo":"13ac941c-637b-4a8d-c341-cf3595c3734f","fieldName":"oFlexBox3","fieldParent":"e15700a8-851a-47b6-b22a-d362056e1426","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":471},{"fieldNo":"4d2a40a2-51da-414a-bbfe-12fac8084c92","fieldName":"lblTileIdForAddTile","fieldParent":"13ac941c-637b-4a8d-c341-cf3595c3734f","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{id}","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"addTileId","script":"","translation":[]}],"fieldPos":472},{"fieldNo":"afdbe9f5-edb4-42c9-bd80-3f836195f537","fieldName":"tileAddToTileGroup","fieldParent":"13ac941c-637b-4a8d-c341-cf3595c3734f","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Add","script":"","translation":[{"language":"AF","value":"Voeg by"},{"language":"AR","value":"يضيف"},{"language":"BG","value":"Добавете"},{"language":"CA","value":"Afegeix"},{"language":"CS","value":"Přidat"},{"language":"DA","value":"Tilføje"},{"language":"DE","value":"Hinzufügen"},{"language":"EL","value":"Προσθήκη"},{"language":"ES","value":"Agregar"},{"language":"ET","value":"Lisama"},{"language":"FI","value":"Lisätä"},{"language":"FR","value":"Ajouter"},{"language":"HE","value":"לְהוֹסִיף"},{"language":"HR","value":"Dodati"},{"language":"HU","value":"Hozzáadás"},{"language":"ID","value":"Menambahkan"},{"language":"IS","value":"Bæta við"},{"language":"IT","value":"Aggiungere"},{"language":"JA","value":"追加"},{"language":"KO","value":"추가하다"},{"language":"LT","value":"Papildyti"},{"language":"LV","value":"Pievienot"},{"language":"MS","value":"Tambah"},{"language":"NL","value":"Toevoegen"},{"language":"NN","value":"Legg til"},{"language":"NO","value":"Legg til"},{"language":"PL","value":"Dodać"},{"language":"PT","value":"Adicionar"},{"language":"RO","value":"Adăuga"},{"language":"RU","value":"Добавлять"},{"language":"SE","value":"Addet"},{"language":"SH","value":"Dodaj"},{"language":"SK","value":"Pridať"},{"language":"SL","value":"Dodaj"},{"language":"SR","value":"Додати"},{"language":"SV","value":"Lägg till"},{"language":"TH","value":"เพิ่ม"},{"language":"TR","value":"Eklemek"},{"language":"UK","value":"додати"},{"language":"ZF","value":"添加"},{"language":"ZH","value":"添加"}]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"let parent = oEvent.getSource().getDomRef();\nfor (; parent.nodeName !== 'LI'; parent = parent.parentElement);\nif (!parent) {\n    console.log('DialogAddTile: parent node not found');\n    return;\n}\n\nconst tileId = parent.querySelector('.addTileId').innerText.trim();\nconst tile = modelAddTiles.getData().find(tile => tile.id === tileId);\nif (!tile) {\n    console.log('DialogAddTile: on add, tile not found in model');\n    return;\n}\n\nsap.n.Customization.Popover.addTileFromDialog(tileId, tile.parent);\nmodelAddTiles.setData(\n    modelAddTiles.getData().filter(t => (t.id !== tile.id))\n);\n","language":"javascript","translation":[]}],"fieldPos":473},{"fieldNo":"18aeaa7b-edd6-47b7-f2f3-181c6902e5c3","fieldName":"diaPWAInstall","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldType":"sap.m.Dialog","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"setInitLoad","grouping":"Model","value":"cache","script":"","translation":[]},{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"beforeOpen","grouping":"Events","value":"Anonymous Function","script":"pwaInstallAppTitle.setText(AppCache.launchpadTitle ?? '');\npwaInstallAppUrl.setText(window.location.host);\n\nif (AppCache.CustomLogo && AppCache.CustomLogo !== 'null') {\n    setPWACustomLogo();\n} else {\n    pwaInstallAppLogo.setSrc('data:image/svg+xml;base64,PHN2ZyBpZD0iTGF5ZXJfMSIgZGF0YS1uYW1lPSJMYXllciAxIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIyMTIiIGhlaWdodD0iMjEyIiB2aWV3Qm94PSIwIDAgNjAuNjIgNjAuNjkiPjxkZWZzPjxzdHlsZT4ubmVwU1ZHTG9nb1Jpbmd7ZmlsbDp0cmFuc3BhcmVudDt9Lm5lcFNWR0xvZ29QbGFuZXR7ZmlsbDojZjZiMjIxO308L3N0eWxlPjwvZGVmcz48Y2lyY2xlIGNsYXNzPSJuZXBTVkdMb2dvUmluZyIgY3g9IjMyLjcxIiBjeT0iMzMuOTQiIHI9IjIxLjI3Ii8+PHBhdGggY2xhc3M9Im5lcFNWR0xvZ29QbGFuZXQiIGQ9Ik01OS4yNCw2OC4zQTEyLjIsMTIuMiwwLDEsMSw3MS40Miw1Ni4xLDEyLjIsMTIuMiwwLDAsMSw1OS4yNCw2OC4zTTUxLjQ3LDI1YTMwLjM1LDMwLjM1LDAsMSwwLDMwLjMsMzAuMzVBMzAuMzMsMzAuMzMsMCwwLDAsNTEuNDcsMjUiIHRyYW5zZm9ybT0idHJhbnNsYXRlKC0yMS4xNiAtMjQuOTgpIi8+PHBhdGggY2xhc3M9Im5lcFNWR0xvZ29QbGFuZXQiIGQ9Ik01OS4yNCw0Ni4wNUExMC4wNiwxMC4wNiwwLDEsMCw2OS4yOSw1Ni4xLDEwLjA2LDEwLjA2LDAsMCwwLDU5LjI0LDQ2LjA1IiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMjEuMTYgLTI0Ljk4KSIvPjwvc3ZnPg==');\n}","translation":[]}],"fieldPos":474},{"fieldNo":"34054e54-855f-40da-9e6e-94beb7036139","fieldName":"diaPWAInstallHeaderBar","fieldParent":"18aeaa7b-edd6-47b7-f2f3-181c6902e5c3","fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}],"fieldPos":475},{"fieldNo":"d929cd76-5bac-4157-f24e-bb99d6aad4db","fieldName":"diaPWAInstallHeaderBarLeft","fieldParent":"34054e54-855f-40da-9e6e-94beb7036139","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentLeft","script":"","translation":[]}],"fieldPos":476},{"fieldNo":"f9c4d786-1f2c-49ca-9323-69dc4539c413","fieldName":"diaPWAInstallHeaderBarTitle","fieldParent":"d929cd76-5bac-4157-f24e-bb99d6aad4db","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Add to homescreen","script":"","translation":[{"language":"AF","value":"Voeg by tuisskerm"},{"language":"AR","value":"أضف إلى الشاشة الرئيسية"},{"language":"BG","value":"Добави към началния екран"},{"language":"CA","value":"Afegeix a la pantalla d'inici"},{"language":"CS","value":"Přidat na domácí obrazovku"},{"language":"DA","value":"Føj til startskærmen"},{"language":"DE","value":"Zum Startbildschirm hinzufügen"},{"language":"EL","value":"Προσθέστε στην αρχική οθόνη"},{"language":"ES","value":"Añadir a la pantalla principal"},{"language":"ET","value":"Lisa avakuvale"},{"language":"FI","value":"Lisää aloitusnäytölle"},{"language":"FR","value":"Ajouter à l'écran d'accueil"},{"language":"HE","value":"הוסף למסך הבית"},{"language":"HR","value":"Dodaj na početni zaslon"},{"language":"HU","value":"Hozzáadás a kezdőképernyőhöz"},{"language":"ID","value":"Tambahkan ke layar beranda"},{"language":"IS","value":"Bæta við heimaskjá"},{"language":"IT","value":"Aggiungere alla schermata Home"},{"language":"JA","value":"ホーム画面に追加します"},{"language":"KO","value":"홈 화면에 추가"},{"language":"LT","value":"Pridėti prie pagrindinio ekrano"},{"language":"LV","value":"Pievienot sākuma ekrānam"},{"language":"MS","value":"Tambahkan pada skrin utama"},{"language":"NL","value":"Toevoegen aan startscherm"},{"language":"NN","value":"Legg til på startskjerm"},{"language":"NO","value":"Legg til på startskjerm"},{"language":"PL","value":"Dodaj do ekranu głównego"},{"language":"PT","value":"Adicionar à tela inicial"},{"language":"RO","value":"Adăugați pe ecranul de pornire"},{"language":"RU","value":"Добавить на домашний экран"},{"language":"SE","value":"Addet ášši skreanii"},{"language":"SH","value":"Dodaj na početni ekran"},{"language":"SK","value":"Pridať na domovskú obrazovku"},{"language":"SL","value":"Dodaj na začetni zaslon"},{"language":"SR","value":"Додати на почетни екран"},{"language":"SV","value":"Lägg till på hemskärmen"},{"language":"TH","value":"เพิ่มไปที่หน้าจอหลัก"},{"language":"TR","value":"Ana ekrana ekle"},{"language":"UK","value":"Додати на головний екран"},{"language":"ZF","value":"添加到主屏幕"},{"language":"ZH","value":"添加到主屏幕"}]}],"fieldPos":477},{"fieldNo":"4016debf-ba7c-4bce-d945-cd39c3f412f5","fieldName":"diaPWAInstallHeaderBarRight","fieldParent":"34054e54-855f-40da-9e6e-94beb7036139","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}],"fieldPos":478},{"fieldNo":"0f3f6362-002f-445a-afe2-dc0d610fa315","fieldName":"diaPWAInstallClose","fieldParent":"4016debf-ba7c-4bce-d945-cd39c3f412f5","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setPWAInstallQueryStatus();","script":"setPWAInstallQueryStatus();","translation":[]}],"fieldPos":479},{"fieldNo":"10918632-f5f2-4eca-8a0d-841fae82eb24","fieldName":"diaPWAInstallContent","fieldParent":"18aeaa7b-edd6-47b7-f2f3-181c6902e5c3","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMargin","script":"","translation":[]},{"attribute":"direction","grouping":"Properties","value":"Row","script":"","translation":[]}],"fieldPos":480},{"fieldNo":"6f046584-1508-4bd7-85c7-632256583780","fieldName":"pwaInstallAppLogo","fieldParent":"10918632-f5f2-4eca-8a0d-841fae82eb24","fieldType":"sap.m.Image","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginEnd","script":"","translation":[]}],"fieldPos":481},{"fieldNo":"cc43c01a-f535-42fb-a158-828c6dcd2620","fieldName":"diaPWAInstallContentInfo","fieldParent":"10918632-f5f2-4eca-8a0d-841fae82eb24","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"direction","grouping":"Properties","value":"Column","script":"","translation":[]}],"fieldPos":482},{"fieldNo":"aa6b88f3-ceab-423f-9bc4-626bc163c084","fieldName":"pwaInstallAppTitle","fieldParent":"cc43c01a-f535-42fb-a158-828c6dcd2620","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":483},{"fieldNo":"0796b257-a476-41bd-c40d-43a1d2fd7763","fieldName":"pwaInstallAppUrl","fieldParent":"cc43c01a-f535-42fb-a158-828c6dcd2620","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":484},{"fieldNo":"86bf8cfb-304c-48f4-a5f0-27243caac238","fieldName":"diaPWAInstallFooter","fieldParent":"18aeaa7b-edd6-47b7-f2f3-181c6902e5c3","fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"InfoToolbar","script":"","translation":[]}],"fieldPos":485},{"fieldNo":"16c23231-61b2-4669-f0e3-783c27c64719","fieldName":"diaPWAInstallFooterSpacer","fieldParent":"86bf8cfb-304c-48f4-a5f0-27243caac238","fieldType":"sap.m.ToolbarSpacer","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":486},{"fieldNo":"5470e9c8-8d5f-492a-8289-8c884965c4f0","fieldName":"diaPWAInstallCancel","fieldParent":"86bf8cfb-304c-48f4-a5f0-27243caac238","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Cancel","script":"","translation":[{"language":"AF","value":"Kanselleer"},{"language":"AR","value":"يلغي"},{"language":"BG","value":"Отказ"},{"language":"CA","value":"Cancel · lar"},{"language":"CS","value":"zrušení"},{"language":"DA","value":"Afbestille"},{"language":"DE","value":"Stornieren"},{"language":"EL","value":"Ματαίωση"},{"language":"ES","value":"Cancelar"},{"language":"ET","value":"Tühista"},{"language":"FI","value":"Peruuttaa"},{"language":"FR","value":"Annuler"},{"language":"HE","value":"לְבַטֵל"},{"language":"HR","value":"Otkazati"},{"language":"HU","value":"Megszünteti"},{"language":"ID","value":"Membatalkan"},{"language":"IS","value":"Hætta við"},{"language":"IT","value":"Annulla"},{"language":"JA","value":"キャンセル"},{"language":"KO","value":"취소"},{"language":"LT","value":"Atšaukti"},{"language":"LV","value":"Atcelt"},{"language":"MS","value":"Batal"},{"language":"NL","value":"Annuleren"},{"language":"NN","value":"Avbryt"},{"language":"NO","value":"Avbryt"},{"language":"PL","value":"Anulować"},{"language":"PT","value":"Cancelar"},{"language":"RO","value":"Anulare"},{"language":"RU","value":"Отмена"},{"language":"SE","value":"Cealkit"},{"language":"SH","value":"Otkaži"},{"language":"SK","value":"Zrušiť"},{"language":"SL","value":"Prekliči"},{"language":"SR","value":"Поништити, отказати"},{"language":"SV","value":"Annullera"},{"language":"TH","value":"ยกเลิก"},{"language":"TR","value":"İptal etmek"},{"language":"UK","value":"Скасувати"},{"language":"ZF","value":"取消"},{"language":"ZH","value":"取消"}]},{"attribute":"press","grouping":"Events","value":"setPWAInstallQueryStatus();","script":"setPWAInstallQueryStatus();","translation":[]}],"fieldPos":487},{"fieldNo":"2377bee0-485d-43f5-b7c0-0e682f39c34e","fieldName":"diaPWAInstallApp","fieldParent":"86bf8cfb-304c-48f4-a5f0-27243caac238","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Install Application","script":"","translation":[{"language":"AF","value":"Installeer toepassing"},{"language":"AR","value":"تثبيت التطبيق"},{"language":"BG","value":"Инсталиране на приложение"},{"language":"CA","value":"Instal·leu l'aplicació"},{"language":"CS","value":"Nainstalujte aplikaci"},{"language":"DA","value":"Installer applikation"},{"language":"DE","value":"Anwendung installieren"},{"language":"EL","value":"Εγκαταστήστε την εφαρμογή"},{"language":"ES","value":"Instalar aplicación"},{"language":"ET","value":"Installige rakendus"},{"language":"FI","value":"Asenna sovellus"},{"language":"FR","value":"Installer l'application"},{"language":"HE","value":"התקן אפליקציה"},{"language":"HR","value":"Instalirajte aplikaciju"},{"language":"HU","value":"Alkalmazás telepítése"},{"language":"ID","value":"Instal Aplikasi"},{"language":"IS","value":"Settu upp forrit"},{"language":"IT","value":"Installa l'applicazione"},{"language":"JA","value":"アプリケーションのインストール"},{"language":"KO","value":"애플리케이션 설치"},{"language":"LT","value":"Įdiegti programą"},{"language":"LV","value":"Instalējiet lietojumprogrammu"},{"language":"MS","value":"Pasang Aplikasi"},{"language":"NL","value":"Applicatie installeren"},{"language":"NN","value":"Installer applikasjon"},{"language":"NO","value":"Installer applikasjon"},{"language":"PL","value":"Zainstaluj aplikację"},{"language":"PT","value":"Instalar aplicativo"},{"language":"RO","value":"Instalați aplicația"},{"language":"RU","value":"Установить приложение"},{"language":"SE","value":"Asenna applikašuvdna"},{"language":"SH","value":"Instaliraj aplikaciju"},{"language":"SK","value":"Nainštalujte aplikáciu"},{"language":"SL","value":"Namestite aplikacijo"},{"language":"SR","value":"Инсталирајте апликацију"},{"language":"SV","value":"Installera applikation"},{"language":"TH","value":"ติดตั้งแอปพลิเคชัน"},{"language":"TR","value":"Uygulamayı Yükle"},{"language":"UK","value":"Встановити додаток"},{"language":"ZF","value":"安裝應用程式"},{"language":"ZH","value":"安装应用程序"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"setPWAInstallQueryStatus();\npromptForPWAInstall();","translation":[]}],"fieldPos":488},{"fieldNo":"ec08c387-b02f-427b-abbd-72c97e7bd23a","fieldName":"diaCookie","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldType":"sap.m.Dialog","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"escapeHandler","grouping":"Events","value":"setCookieConfirmationQueryStatus();","script":"setCookieConfirmationQueryStatus();","translation":[]},{"attribute":"setInitLoad","grouping":"Model","value":"cache","script":"","translation":[]},{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"showCookieDialog();","script":"showCookieDialog();","translation":[]}],"fieldPos":489},{"fieldNo":"b99e60b3-ae2f-431e-bb06-aed23c951743","fieldName":"diaCookieHeader","fieldParent":"ec08c387-b02f-427b-abbd-72c97e7bd23a","fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}],"fieldPos":490},{"fieldNo":"78e1514a-0346-4780-fff8-886c5581615f","fieldName":"diaCookieHeaderLeft","fieldParent":"b99e60b3-ae2f-431e-bb06-aed23c951743","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentLeft","script":"","translation":[]}],"fieldPos":491},{"fieldNo":"3d60da1c-7528-47f2-f490-1ce15374e45e","fieldName":"diaCookieHeaderTitle","fieldParent":"78e1514a-0346-4780-fff8-886c5581615f","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"diaCookieHeaderTitle","script":"","translation":[{"language":"NN","value":"Informasjonskapseloverskrift"},{"language":"SE","value":"Adaptive Framework konfigurášuvdna ii leat ožžon"}]}],"fieldPos":492},{"fieldNo":"bffbad40-c029-4499-ae1e-fbebfdd6f9ab","fieldName":"diaCookieHeaderRight","fieldParent":"b99e60b3-ae2f-431e-bb06-aed23c951743","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}],"fieldPos":493},{"fieldNo":"6d61a3eb-0126-4b17-e0aa-31e784ea4031","fieldName":"diaCookieHeaderCloseBtn","fieldParent":"bffbad40-c029-4499-ae1e-fbebfdd6f9ab","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setCookieConfirmationQueryStatus();","script":"setCookieConfirmationQueryStatus();","translation":[]}],"fieldPos":494},{"fieldNo":"4a60367a-d781-4a70-c2a7-17f2182e1646","fieldName":"diaCookieFlexbox","fieldParent":"ec08c387-b02f-427b-abbd-72c97e7bd23a","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMargin","script":"","translation":[]}],"fieldPos":495},{"fieldNo":"a9f36a7f-e077-4add-8c22-2b8db14aeee2","fieldName":"diaCookieContent","fieldParent":"4a60367a-d781-4a70-c2a7-17f2182e1646","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":496},{"fieldNo":"55afab30-d311-438b-cb4e-8bc1dd24ad5c","fieldName":"diaCookieFooter","fieldParent":"ec08c387-b02f-427b-abbd-72c97e7bd23a","fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"InfoToolbar","script":"","translation":[]}],"fieldPos":497},{"fieldNo":"14dda232-fb76-40d8-e0f5-a4f08013b810","fieldName":"diaCookieFooterSeparator","fieldParent":"55afab30-d311-438b-cb4e-8bc1dd24ad5c","fieldType":"sap.m.ToolbarSpacer","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":498},{"fieldNo":"973d9e6a-e87c-4292-d811-02279c97e96a","fieldName":"diaCookieFooterCloseButton","fieldParent":"55afab30-d311-438b-cb4e-8bc1dd24ad5c","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Close","script":"","translation":[{"language":"NN","value":"Lukk"},{"language":"SE","value":"Gulat"}]},{"attribute":"press","grouping":"Events","value":"setCookieConfirmationQueryStatus();","script":"setCookieConfirmationQueryStatus();","translation":[]}],"fieldPos":499},{"fieldNo":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldName":"Data","fieldParent":99999,"fieldType":"neptune.folder","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":500},{"fieldNo":"4fb5b3db-f6fb-4536-812e-ca429d71810b","fieldName":"Languages","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldType":"neptune.Script","script":"const masterLanguages = [\n    { 'ISOCODE': '', 'NAME': '' },\n    { 'ISOCODE': 'AF', 'NAME': 'Afrikaans' },\n    { 'ISOCODE': 'AR', 'NAME': 'Arabic' },\n    { 'ISOCODE': 'BG', 'NAME': 'Bulgarian' },\n    { 'ISOCODE': 'CA', 'NAME': 'Catalan' },\n    { 'ISOCODE': 'ZH', 'NAME': 'Chinese' },\n    { 'ISOCODE': 'ZF', 'NAME': 'Chinese trad.' },\n    { 'ISOCODE': 'HR', 'NAME': 'Croatian' },\n    { 'ISOCODE': 'CS', 'NAME': 'Czech' },\n    { 'ISOCODE': 'DA', 'NAME': 'Danish' },\n    { 'ISOCODE': 'NL', 'NAME': 'Dutch' },\n    { 'ISOCODE': 'EN', 'NAME': 'English' },\n    { 'ISOCODE': 'ET', 'NAME': 'Estonian' },\n    { 'ISOCODE': 'FI', 'NAME': 'Finnish' },\n    { 'ISOCODE': 'FR', 'NAME': 'French' },\n    { 'ISOCODE': 'DE', 'NAME': 'German' },\n    { 'ISOCODE': 'EL', 'NAME': 'Greek' },\n    { 'ISOCODE': 'HE', 'NAME': 'Hebrew' },\n    { 'ISOCODE': 'HU', 'NAME': 'Hungarian' },\n    { 'ISOCODE': 'IS', 'NAME': 'Icelandic' },\n    { 'ISOCODE': 'ID', 'NAME': 'Indonesian' },\n    { 'ISOCODE': 'IT', 'NAME': 'Italian' },\n    { 'ISOCODE': 'JA', 'NAME': 'Japanese' },\n    { 'ISOCODE': 'KO', 'NAME': 'Korean' },\n    { 'ISOCODE': 'LV', 'NAME': 'Latvian' },\n    { 'ISOCODE': 'LT', 'NAME': 'Lithuanian' },\n    { 'ISOCODE': 'MS', 'NAME': 'Malaysian' },\n    { 'ISOCODE': 'NO', 'NAME': 'Norwegian' },\n    { 'ISOCODE': 'NN', 'NAME': 'Nynorsk' },\n    { 'ISOCODE': 'PL', 'NAME': 'Polish' },\n    { 'ISOCODE': 'PT', 'NAME': 'Portuguese' },\n    { 'ISOCODE': 'RO', 'NAME': 'Rumanian' },\n    { 'ISOCODE': 'RU', 'NAME': 'Russian' },\n    { 'ISOCODE': 'SE', 'NAME': 'Sámi' },\n    { 'ISOCODE': 'SR', 'NAME': 'Serbian' },\n    { 'ISOCODE': 'SH', 'NAME': 'Serbian (Latin)' },\n    { 'ISOCODE': 'SK', 'NAME': 'Slovakian' },\n    { 'ISOCODE': 'SL', 'NAME': 'Slovenian' },\n    { 'ISOCODE': 'ES', 'NAME': 'Spanish' },\n    { 'ISOCODE': 'SV', 'NAME': 'Swedish' },\n    { 'ISOCODE': 'TH', 'NAME': 'Thai' },\n    { 'ISOCODE': 'TR', 'NAME': 'Turkish' },\n    { 'ISOCODE': 'UK', 'NAME': 'Ukrainian' }\n];","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":501},{"fieldNo":"a9af9e72-12d5-40fb-8719-f4461a90e011","fieldName":"DataSettings","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldType":"neptune.model","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"AppCache.setSettings();","script":"AppCache.setSettings();","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"LocalStorage","script":"","translation":[]},{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]}],"fieldPos":502},{"fieldNo":"c03d017e-5606-4045-8449-8b2f8fc7516c","fieldName":"AppCacheTiles","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldType":"neptune.model.array","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheUserBased","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"cacheLoaded++;","script":"cacheLoaded++;","translation":[]}],"fieldPos":503},{"fieldNo":"38c179dd-f009-4908-9e1e-6ec01c2f50c5","fieldName":"AppCacheTilesFav","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldType":"neptune.model.array","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheUserBased","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"cacheLoaded++;","script":"cacheLoaded++;","translation":[]}],"fieldPos":504},{"fieldNo":"d41371df-9bf0-43a1-fc4e-a1d539b8e21d","fieldName":"AppCacheTilesRun","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldType":"neptune.model.array","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheUserBased","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"cacheLoaded++;","script":"cacheLoaded++;","translation":[]}],"fieldPos":505},{"fieldNo":"d0eaf97d-30a6-4b2c-d580-934a02705f2c","fieldName":"AppCacheCategory","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldType":"neptune.model.array","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheUserBased","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"cacheLoaded++;","script":"cacheLoaded++;","translation":[]}],"fieldPos":506},{"fieldNo":"ec5b8fa5-6059-4dc7-926c-c689b125e940","fieldName":"AppCacheCategoryChild","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldType":"neptune.model.array","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheUserBased","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"cacheLoaded++;","script":"cacheLoaded++;","translation":[]}],"fieldPos":507},{"fieldNo":"8b675d10-c284-40c3-97af-0b76a38af065","fieldName":"AppCacheAppTimestamp","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldType":"neptune.model.object","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]}],"fieldPos":508},{"fieldNo":"1c76b3b8-1f22-431b-8c22-bc9979364652","fieldName":"AppCacheCustomization","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldType":"neptune.model.object","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheUserBased","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"cacheLoaded++;","script":"cacheLoaded++;","translation":[]}],"fieldPos":509},{"fieldNo":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldName":"Translation","fieldParent":99999,"fieldType":"neptune.folder","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":510},{"fieldNo":"eba3c643-6f3f-434c-8f5e-90ceef26a562","fieldName":"AppCache_tAdaptiveNotFound","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Adaptive Framework configuration not found","script":"","translation":[{"language":"AF","value":"Adaptive Framework-opstelling nie gevind nie"},{"language":"AR","value":"لم يتم العثور على تكوين الإطار التكيفي"},{"language":"BG","value":"Конфигурацията на Adaptive Framework не е намерена"},{"language":"CA","value":"No s'ha trobat la configuració d'Adaptive Framework"},{"language":"CS","value":"Konfigurace Adaptive Framework nebyla nalezena"},{"language":"DA","value":"Adaptive Framework-konfiguration blev ikke fundet"},{"language":"DE","value":"Adaptive Framework-Konfiguration nicht gefunden"},{"language":"EL","value":"Δεν βρέθηκε η διαμόρφωση του Adaptive Framework"},{"language":"EN","value":"Adaptive Framework configuration not found"},{"language":"ES","value":"Configuración del marco adaptable no encontrada"},{"language":"ET","value":"Adaptive Frameworki konfiguratsiooni ei leitud"},{"language":"FI","value":"Adaptive Framework -kokoonpanoa ei löydy"},{"language":"FR","value":"Configuration du framework adaptatif introuvable"},{"language":"HE","value":"לא נמצאה תצורת Adaptive Framework"},{"language":"HR","value":"Konfiguracija Adaptive Frameworka nije pronađena"},{"language":"HU","value":"Az adaptív keretrendszer konfigurációja nem található"},{"language":"ID","value":"Konfigurasi Kerangka Adaptif tidak ditemukan"},{"language":"IS","value":"Aðlögunarramma stilling fannst ekki"},{"language":"IT","value":"Configurazione del framework adattivo non trovata"},{"language":"JA","value":"アダプティブ フレームワーク構成が見つかりません"},{"language":"KO","value":"적응형 프레임워크 구성을 찾을 수 없습니다."},{"language":"LT","value":"Adaptive Framework konfigūracija nerasta"},{"language":"LV","value":"Adaptīvā ietvara konfigurācija nav atrasta"},{"language":"MS","value":"Konfigurasi Rangka Kerja Adaptif tidak ditemui"},{"language":"NL","value":"Adaptive Framework-configuratie niet gevonden"},{"language":"NN","value":"Adaptiv rammeverkskonfigurasjon ikke funnet"},{"language":"NO","value":"Finner ikke konfigurasjon for Adaptive Framework"},{"language":"PL","value":"Nie znaleziono konfiguracji Adaptive Framework"},{"language":"PT","value":"Configuração do Adaptive Framework não encontrada"},{"language":"RO","value":"Configurația cadru adaptiv nu a fost găsită"},{"language":"RU","value":"Конфигурация Adaptive Framework не найдена"},{"language":"SH","value":"Konfiguracija adaptivnog okvira nije pronađena"},{"language":"SK","value":"Konfigurácia adaptívneho rámca sa nenašla"},{"language":"SL","value":"Konfiguracije Adaptive Framework ni mogoče najti"},{"language":"SR","value":"Конфигурација Адаптиве Фрамеворк-а није пронађена"},{"language":"SV","value":"Adaptive Framework-konfigurationen hittades inte"},{"language":"TH","value":"ไม่พบการกำหนดค่า Adaptive Framework"},{"language":"TR","value":"Uyarlanabilir Çerçeve yapılandırması bulunamadı"},{"language":"UK","value":"Конфігурація Adaptive Framework не знайдена"},{"language":"ZF","value":"未找到自適應框架配置"},{"language":"ZH","value":"找不到自适应框架配置"}]}],"fieldPos":511},{"fieldNo":"39396645-af8b-4344-e20e-3a4d02d2b233","fieldName":"AppCache_Fingerprint","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Login with Fingerprint","script":"","translation":[{"language":"AF","value":"Teken in met vingerafdruk"},{"language":"AR","value":"تسجيل الدخول ببصمة الإصبع"},{"language":"BG","value":"Влезте с пръстов отпечатък"},{"language":"CA","value":"Inicieu sessió amb empremta digital"},{"language":"CS","value":"Přihlaste se pomocí otisku prstu"},{"language":"DA","value":"Log ind med fingeraftryk"},{"language":"DE","value":"Einloggen mit Fingerprint"},{"language":"EL","value":"Είσοδος με δακτυλικό αποτύπωμα"},{"language":"EN","value":"Login with Fingerprint"},{"language":"ES","value":"Iniciar sesión con huella digital"},{"language":"ET","value":"Logige sisse sõrmejäljega"},{"language":"FI","value":"Kirjaudu sisään sormenjäljellä"},{"language":"FR","value":"Connectez-vous avec votre empreinte digitale"},{"language":"HE","value":"התחבר עם טביעת אצבע"},{"language":"HR","value":"Prijavite se otiskom prsta"},{"language":"HU","value":"Jelentkezzen be ujjlenyomattal"},{"language":"ID","value":"Masuk dengan Sidik Jari"},{"language":"IS","value":"Skráðu þig inn með fingrafari"},{"language":"IT","value":"Accedi con l'impronta digitale"},{"language":"JA","value":"指紋によるログイン"},{"language":"KO","value":"지문으로 로그인"},{"language":"LT","value":"Prisijunkite naudodami pirštų atspaudus"},{"language":"LV","value":"Piesakieties ar pirkstu nospiedumu"},{"language":"MS","value":"Log masuk dengan Cap Jari"},{"language":"NL","value":"Inloggen met vingerafdruk"},{"language":"NN","value":"Logg inn med fingeravtrykk"},{"language":"NO","value":"Logg inn med fingeravtrykk"},{"language":"PL","value":"Zaloguj się za pomocą odcisku palca"},{"language":"PT","value":"Login com impressão digital"},{"language":"RO","value":"Conectați-vă cu amprenta digitală"},{"language":"RU","value":"Войти с помощью отпечатка пальца"},{"language":"SE","value":"Logget sisa fingerprinta"},{"language":"SH","value":"Prijavi se pomoću otiska prsta"},{"language":"SK","value":"Prihláste sa pomocou odtlačku prsta"},{"language":"SL","value":"Prijavite se s prstnim odtisom"},{"language":"SR","value":"Пријавите се помоћу отиска прста"},{"language":"SV","value":"Logga in med fingeravtryck"},{"language":"TH","value":"เข้าสู่ระบบด้วยลายนิ้วมือ"},{"language":"TR","value":"Parmak İzi ile Giriş Yapın"},{"language":"UK","value":"Увійти за допомогою відбитка пальця"},{"language":"ZF","value":"使用指紋登錄"},{"language":"ZH","value":"指纹登录"}]}],"fieldPos":512},{"fieldNo":"c4c30591-5b7b-4474-e9d7-b9315495da0a","fieldName":"AppCache_tPhoneModel","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Phone Model","script":"","translation":[{"language":"AF","value":"Telefoon model"},{"language":"AR","value":"طراز الهاتف"},{"language":"BG","value":"Модел на телефона"},{"language":"CA","value":"Model de telèfon"},{"language":"CS","value":"Model telefonu"},{"language":"DA","value":"Telefonmodel"},{"language":"DE","value":"Geräte Modell"},{"language":"EL","value":"Μοντέλο τηλεφώνου"},{"language":"EN","value":"Phone Model"},{"language":"ES","value":"Modelo de teléfono"},{"language":"ET","value":"Telefoni mudel"},{"language":"FI","value":"Puhelimen malli"},{"language":"FR","value":"Modèle de téléphone"},{"language":"HE","value":"דגם טלפון"},{"language":"HR","value":"Model telefona"},{"language":"HU","value":"Telefon modell"},{"language":"ID","value":"Model Telepon"},{"language":"IS","value":"Gerð síma"},{"language":"IT","value":"Modello di telefono"},{"language":"JA","value":"電話機のモデル"},{"language":"KO","value":"전화 모델"},{"language":"LT","value":"Telefono modelis"},{"language":"LV","value":"Tālruņa modelis"},{"language":"MS","value":"Model Telefon"},{"language":"NL","value":"Telefoon model"},{"language":"NN","value":"Telefonmodell"},{"language":"NO","value":"Telefonmodell"},{"language":"PL","value":"Model telefonu"},{"language":"PT","value":"Modelo de telefone"},{"language":"RO","value":"Model de telefon"},{"language":"RU","value":"Модель телефона"},{"language":"SE","value":"Telefovdna modella"},{"language":"SH","value":"Model telefona"},{"language":"SK","value":"Model telefónu"},{"language":"SL","value":"Model telefona"},{"language":"SR","value":"Модел телефона"},{"language":"SV","value":"Telefonmodell"},{"language":"TH","value":"รุ่นโทรศัพท์"},{"language":"TR","value":"Telefon modeli"},{"language":"UK","value":"Модель телефону"},{"language":"ZF","value":"手機型號"},{"language":"ZH","value":"手机型号"}]}],"fieldPos":513},{"fieldNo":"a93e0e44-1498-4ce8-9719-d3d4dad85864","fieldName":"AppCache_tSearchResult","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Search Result","script":"","translation":[{"language":"AF","value":"Soekresultaat"},{"language":"AR","value":"نتيجة البحث"},{"language":"BG","value":"Резултат от търсенето"},{"language":"CA","value":"Resultat de la cerca"},{"language":"CS","value":"Výsledek hledání"},{"language":"DA","value":"Søgeresultat"},{"language":"DE","value":"Suchergebnis"},{"language":"EL","value":"Αποτέλεσμα αναζήτησης"},{"language":"EN","value":"Search Result"},{"language":"ES","value":"Resultado de búsqueda"},{"language":"ET","value":"Otsingutulemus"},{"language":"FI","value":"Hakutulos"},{"language":"FR","value":"Résultat de la recherche"},{"language":"HE","value":"תוצאות חיפוש"},{"language":"HR","value":"Rezultat pretrage"},{"language":"HU","value":"Keresési eredmény"},{"language":"ID","value":"Hasil pencarian"},{"language":"IS","value":"Leitarniðurstaða"},{"language":"IT","value":"Risultato della ricerca"},{"language":"JA","value":"検索結果"},{"language":"KO","value":"검색 결과"},{"language":"LT","value":"Paieškos rezultatas"},{"language":"LV","value":"Meklēšanas rezultāts"},{"language":"MS","value":"Hasil carian"},{"language":"NL","value":"Zoekresultaat"},{"language":"NN","value":"Søkeresultat"},{"language":"NO","value":"Søkeresultat"},{"language":"PL","value":"Wynik wyszukiwania"},{"language":"PT","value":"Resultado da pesquisa"},{"language":"RO","value":"Rezultatul căutării"},{"language":"RU","value":"Результат поиска"},{"language":"SE","value":"Ruoŧŧa vástádus"},{"language":"SH","value":"Rezultat pretrage"},{"language":"SK","value":"Výsledok hľadania"},{"language":"SL","value":"Rezultat iskanja"},{"language":"SR","value":"Сеарцх Ресулт"},{"language":"SV","value":"Sökresultat"},{"language":"TH","value":"ผลการค้นหา"},{"language":"TR","value":"Arama sonuçları"},{"language":"UK","value":"Результат пошуку"},{"language":"ZF","value":"搜索結果"},{"language":"ZH","value":"搜索结果"}]}],"fieldPos":514},{"fieldNo":"baaaa070-f7da-4c66-9a19-3ec14ffb19cb","fieldName":"AppCache_tPhoneType","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Phone Type","script":"","translation":[{"language":"AF","value":"Soort telefoon"},{"language":"AR","value":"نوع الهاتف"},{"language":"BG","value":"Тип телефон"},{"language":"CA","value":"Tipus de telèfon"},{"language":"CS","value":"Typ telefonu"},{"language":"DA","value":"Telefontype"},{"language":"DE","value":"Geräte Typ"},{"language":"EL","value":"Τύπος τηλεφώνου"},{"language":"EN","value":"Phone Type"},{"language":"ES","value":"Tipo de telefono"},{"language":"ET","value":"Telefoni tüüp"},{"language":"FI","value":"Puhelimen tyyppi"},{"language":"FR","value":"Type de téléphone"},{"language":"HE","value":"סוג טלפון"},{"language":"HR","value":"Vrsta telefona"},{"language":"HU","value":"Telefon típusa"},{"language":"ID","value":"Jenis Telepon"},{"language":"IS","value":"Tegund síma"},{"language":"IT","value":"Tipo di telefono"},{"language":"JA","value":"電話の種類"},{"language":"KO","value":"전화 유형"},{"language":"LT","value":"Telefono tipas"},{"language":"LV","value":"Tālruņa veids"},{"language":"MS","value":"Jenis Telefon"},{"language":"NL","value":"Telefoon type"},{"language":"NN","value":"Telefontype"},{"language":"NO","value":"Telefontype"},{"language":"PL","value":"Rodzaj telefonu"},{"language":"PT","value":"Tipo de telefone"},{"language":"RO","value":"Tip de telefon"},{"language":"RU","value":"Тип телефона"},{"language":"SE","value":"Telefovdna týpus"},{"language":"SH","value":"Vrsta telefona"},{"language":"SK","value":"Typ telefónu"},{"language":"SL","value":"Vrsta telefona"},{"language":"SR","value":"Тип телефона"},{"language":"SV","value":"Telefontyp"},{"language":"TH","value":"ประเภทโทรศัพท์"},{"language":"TR","value":"Telefon türü"},{"language":"UK","value":"Тип телефону"},{"language":"ZF","value":"手機類型"},{"language":"ZH","value":"手机类型"}]}],"fieldPos":515},{"fieldNo":"c919c54b-ae12-4d2d-963b-c009213d216a","fieldName":"AppCache_tPhoneVersion","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Phone Version","script":"","translation":[{"language":"AF","value":"Foon weergawe"},{"language":"AR","value":"نسخة الهاتف"},{"language":"BG","value":"Версия за телефон"},{"language":"CA","value":"Versió de telèfon"},{"language":"CS","value":"Verze telefonu"},{"language":"DA","value":"Telefonversion"},{"language":"DE","value":"Geräte Version"},{"language":"EL","value":"Έκδοση τηλεφώνου"},{"language":"EN","value":"Phone Version"},{"language":"ES","value":"Versión del teléfono"},{"language":"ET","value":"Telefoni versioon"},{"language":"FI","value":"Puhelin versio"},{"language":"FR","value":"Version du téléphone"},{"language":"HE","value":"גרסת הטלפון"},{"language":"HR","value":"Telefonska verzija"},{"language":"HU","value":"Telefonos verzió"},{"language":"ID","value":"Versi Telepon"},{"language":"IS","value":"Símaútgáfa"},{"language":"IT","value":"Versione del telefono"},{"language":"JA","value":"電話バージョン"},{"language":"KO","value":"전화 버전"},{"language":"LT","value":"Telefono versija"},{"language":"LV","value":"Tālruņa versija"},{"language":"MS","value":"Versi Telefon"},{"language":"NL","value":"Telefoonversie"},{"language":"NN","value":"Telefonversjon"},{"language":"NO","value":"Telefonversjon"},{"language":"PL","value":"Wersja na telefon"},{"language":"PT","value":"Versão do telefone"},{"language":"RO","value":"Versiunea telefonului"},{"language":"RU","value":"Версия для телефона"},{"language":"SE","value":"Telefovdna várdi"},{"language":"SH","value":"Verzija telefona"},{"language":"SK","value":"Verzia telefónu"},{"language":"SL","value":"Različica telefona"},{"language":"SR","value":"Пхоне Версион"},{"language":"SV","value":"Telefonversion"},{"language":"TH","value":"เวอร์ชันโทรศัพท์"},{"language":"TR","value":"Telefon Versiyonu"},{"language":"UK","value":"Версія для телефону"},{"language":"ZF","value":"手機版本"},{"language":"ZH","value":"手机版本"}]}],"fieldPos":516},{"fieldNo":"f3549c57-928f-4f68-e0ba-5959b5508794","fieldName":"AppCache_tCordovaVersion","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Cordova Version","script":"","translation":[{"language":"AF","value":"Cordova weergawe"},{"language":"AR","value":"نسخة كوردوفا"},{"language":"BG","value":"Версия Cordova"},{"language":"CA","value":"Versió Còrdova"},{"language":"CS","value":"Verze Cordova"},{"language":"DA","value":"Cordova Version"},{"language":"DE","value":"Cordova Version"},{"language":"EL","value":"Έκδοση Cordova"},{"language":"EN","value":"Cordova Version"},{"language":"ES","value":"Versión Córdoba"},{"language":"ET","value":"Cordova versioon"},{"language":"FI","value":"Cordova versio"},{"language":"FR","value":"Version Cordoue"},{"language":"HE","value":"גרסת קורדובה"},{"language":"HR","value":"Cordova verzija"},{"language":"HU","value":"Cordova verzió"},{"language":"ID","value":"Versi Kordoba"},{"language":"IS","value":"Cordova útgáfa"},{"language":"IT","value":"Versione Cordova"},{"language":"JA","value":"コルドバのバージョン"},{"language":"KO","value":"코르도바 버전"},{"language":"LT","value":"Cordova versija"},{"language":"LV","value":"Cordova versija"},{"language":"MS","value":"Versi Cordova"},{"language":"NL","value":"Cordova-versie"},{"language":"NN","value":"Cordova-versjon"},{"language":"NO","value":"Cordova versjon"},{"language":"PL","value":"Wersja Cordova"},{"language":"PT","value":"Versão Córdoba"},{"language":"RO","value":"Versiunea Cordova"},{"language":"RU","value":"Версия Кордовы"},{"language":"SE","value":"Cordova várdi"},{"language":"SH","value":"Cordova verzija"},{"language":"SK","value":"Verzia Cordova"},{"language":"SL","value":"Različica Cordova"},{"language":"SR","value":"Цордова Версион"},{"language":"SV","value":"Cordova version"},{"language":"TH","value":"เวอร์ชั่นคอร์โดวา"},{"language":"TR","value":"Cordova Versiyonu"},{"language":"UK","value":"Версія Cordova"},{"language":"ZF","value":"Cordova 版本"},{"language":"ZH","value":"科尔多瓦版本"}]}],"fieldPos":517},{"fieldNo":"9c8d3bd4-9c18-42c3-bc91-bbb7a17713db","fieldName":"AppCache_tAppVersion","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"App Version","script":"","translation":[{"language":"AF","value":"App weergawe"},{"language":"AR","value":"نسخة التطبيق"},{"language":"BG","value":"Версия на приложението"},{"language":"CA","value":"Versió de l'aplicació"},{"language":"CS","value":"Verze aplikace"},{"language":"DA","value":"App Version"},{"language":"DE","value":"App Version"},{"language":"EL","value":"Έκδοση εφαρμογής"},{"language":"EN","value":"App Version"},{"language":"ES","value":"Version de aplicacion"},{"language":"ET","value":"Rakenduse versioon"},{"language":"FI","value":"Sovelluksen versio"},{"language":"FR","value":"Version de l'application"},{"language":"HE","value":"גרסת האפליקציה"},{"language":"HR","value":"Verzija aplikacije"},{"language":"HU","value":"Alkalmazás verziója"},{"language":"ID","value":"Versi Aplikasi"},{"language":"IS","value":"App útgáfa"},{"language":"IT","value":"Versione dell'app"},{"language":"JA","value":"アプリのバージョン"},{"language":"KO","value":"앱 버전"},{"language":"LT","value":"Programos versija"},{"language":"LV","value":"Lietotnes versija"},{"language":"MS","value":"Versi Apl"},{"language":"NL","value":"App versie"},{"language":"NN","value":"App-versjon"},{"language":"NO","value":"Appversjon"},{"language":"PL","value":"Wersja aplikacji"},{"language":"PT","value":"Versão do aplicativo"},{"language":"RO","value":"Versiunea aplicației"},{"language":"RU","value":"Версия приложения"},{"language":"SE","value":"Applikašuvdna várdi"},{"language":"SH","value":"Verzija aplikacije"},{"language":"SK","value":"Verzia aplikácie"},{"language":"SL","value":"Različica aplikacije"},{"language":"SR","value":"Верзија апликације"},{"language":"SV","value":"Appversion"},{"language":"TH","value":"เวอร์ชันของแอป"},{"language":"TR","value":"Uygulama sürümü"},{"language":"UK","value":"Версія програми"},{"language":"ZF","value":"應用版本"},{"language":"ZH","value":"应用程序版本"}]}],"fieldPos":518},{"fieldNo":"f041fb8d-6dc3-4610-ac73-3b1eb8e1b3ca","fieldName":"AppCache_tNoConnection","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"No connection","script":"","translation":[{"language":"AF","value":"Geen verbinding"},{"language":"AR","value":"لا يوجد اتصال"},{"language":"BG","value":"Няма връзка"},{"language":"CA","value":"Sense conexió"},{"language":"CS","value":"Žádné připojení"},{"language":"DA","value":"Ingen forbindelse"},{"language":"DE","value":"Keine Verbindung"},{"language":"EL","value":"Χωρίς σύνδεση"},{"language":"EN","value":"No connection"},{"language":"ES","value":"Sin conexión"},{"language":"ET","value":"Ühendust pole"},{"language":"FI","value":"Ei yhteyttä"},{"language":"FR","value":"Pas de connection"},{"language":"HE","value":"אין חיבור"},{"language":"HR","value":"Nema veze"},{"language":"HU","value":"Nincs kapcsolat"},{"language":"ID","value":"Tidak ada koneksi"},{"language":"IS","value":"Engin tenging"},{"language":"IT","value":"Nessuna connessione"},{"language":"JA","value":"接続がありません"},{"language":"KO","value":"연결되지 않음"},{"language":"LT","value":"Nėra ryšio"},{"language":"LV","value":"Nav savienojuma"},{"language":"MS","value":"Tiada sambungan"},{"language":"NL","value":"Geen connectie"},{"language":"NN","value":"Ingen tilkobling"},{"language":"NO","value":"Ingen forbindelse"},{"language":"PL","value":"Brak połączenia"},{"language":"PT","value":"Sem conexão"},{"language":"RO","value":"Nici o conexiune"},{"language":"RU","value":"Нет соединения"},{"language":"SE","value":"Eai leat sápmelaš"},{"language":"SH","value":"Nema veze"},{"language":"SK","value":"Žiadne spojenie"},{"language":"SL","value":"Ni povezave"},{"language":"SR","value":"Без конекције"},{"language":"SV","value":"Ingen förbindelse"},{"language":"TH","value":"ไม่มีการเชื่อมต่อ"},{"language":"TR","value":"Bağlantı yok"},{"language":"UK","value":"Немає з'єднання"},{"language":"ZF","value":"無連接"},{"language":"ZH","value":"无连接"}]}],"fieldPos":519},{"fieldNo":"7af40ce3-f6bf-4841-e4ce-2b5e8db3ab76","fieldName":"AppCache_tUserLogout","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"User logged out","script":"","translation":[{"language":"AF","value":"Gebruiker het afgemeld"},{"language":"AR","value":"قام المستخدم بتسجيل الخروج"},{"language":"BG","value":"Потребителят е излязъл"},{"language":"CA","value":"L'usuari ha tancat la sessió"},{"language":"CS","value":"Uživatel se odhlásil"},{"language":"DA","value":"Bruger logget ud"},{"language":"DE","value":"Benutzer abgemeldet"},{"language":"EL","value":"Ο χρήστης αποσυνδέθηκε"},{"language":"EN","value":"User logged out"},{"language":"ES","value":"Usuario desconectado"},{"language":"ET","value":"Kasutaja logis välja"},{"language":"FI","value":"Käyttäjä kirjautui ulos"},{"language":"FR","value":"Utilisateur déconnecté"},{"language":"HE","value":"המשתמש התנתק"},{"language":"HR","value":"Korisnik odjavljen"},{"language":"HU","value":"Felhasználó kijelentkezett"},{"language":"ID","value":"Pengguna keluar"},{"language":"IS","value":"Notandi skráði sig út"},{"language":"IT","value":"L'utente si è disconnesso"},{"language":"JA","value":"ユーザーがログアウトしました"},{"language":"KO","value":"사용자가 로그아웃했습니다."},{"language":"LT","value":"Vartotojas atsijungė"},{"language":"LV","value":"Lietotājs ir atteicies"},{"language":"MS","value":"Pengguna telah log keluar"},{"language":"NL","value":"Gebruiker uitgelogd"},{"language":"NN","value":"Bruker logget ut"},{"language":"NO","value":"Bruker logget ut"},{"language":"PL","value":"Użytkownik wylogowany"},{"language":"PT","value":"Usuário desconectado"},{"language":"RO","value":"Utilizatorul sa deconectat"},{"language":"RU","value":"Пользователь вышел из системы"},{"language":"SE","value":"Geavaheaddji lea logget sutnje"},{"language":"SH","value":"Korisnik se odjavio"},{"language":"SK","value":"Používateľ sa odhlásil"},{"language":"SL","value":"Uporabnik je odjavljen"},{"language":"SR","value":"Корисник се одјавио"},{"language":"SV","value":"Användaren loggade ut"},{"language":"TH","value":"ผู้ใช้ออกจากระบบ"},{"language":"TR","value":"Kullanıcı oturumu kapattı"},{"language":"UK","value":"Користувач вийшов із системи"},{"language":"ZF","value":"用戶已登出"},{"language":"ZH","value":"用户已退出"}]}],"fieldPos":520},{"fieldNo":"a9f8b956-bb00-4c0a-f05b-46ff8a7884e1","fieldName":"AppCache_tEnterUsename","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Enter username","script":"","translation":[{"language":"AF","value":"Voer gebruikersnaam in"},{"language":"AR","value":"ادخل اسم المستخدم"},{"language":"BG","value":"Въведете потребителско име"},{"language":"CA","value":"Introduïu el nom d'usuari"},{"language":"CS","value":"Zadejte uživatelské jméno"},{"language":"DA","value":"Indtast brugernavn"},{"language":"DE","value":"Nutzernamen eingeben"},{"language":"EL","value":"Εισάγετε όνομα χρήστη"},{"language":"EN","value":"Enter usename"},{"language":"ES","value":"Introduzca su nombre de usuario"},{"language":"ET","value":"Sisesta kasutajanimi"},{"language":"FI","value":"Syötä käyttäjätunnus"},{"language":"FR","value":"Saisissez votre nom d'utilisateur"},{"language":"HE","value":"הכנס שם משתמש"},{"language":"HR","value":"Unesite korisničko ime"},{"language":"HU","value":"Adja meg a felhasználónevet"},{"language":"ID","value":"Masukkan nama pengguna"},{"language":"IS","value":"Sláðu inn notandanafn"},{"language":"IT","value":"Inserire username"},{"language":"JA","value":"ユーザーネームを入力してください"},{"language":"KO","value":"사용자 이름을 입력하세요"},{"language":"LT","value":"Įveskite vartotojo vardą"},{"language":"LV","value":"Ievadiet lietotājvārdu"},{"language":"MS","value":"Masukkan nama pengguna"},{"language":"NL","value":"Vul je gebruikersnaam in"},{"language":"NN","value":"Skriv inn brukernavn"},{"language":"NO","value":"Oppgi brukernavn"},{"language":"PL","value":"Wpisz nazwę użytkownika"},{"language":"PT","value":"Insira nome de usuário"},{"language":"RO","value":"Introduceti numele de utilizator"},{"language":"RU","value":"Введите имя пользователя"},{"language":"SE","value":"Skriv geavaheaddji namma"},{"language":"SH","value":"Unesite korisničko ime"},{"language":"SK","value":"Zadajte používateľské meno"},{"language":"SL","value":"Vnesite uporabniško ime"},{"language":"SR","value":"Унесите име"},{"language":"SV","value":"Skriv in ditt användarnamn"},{"language":"TH","value":"กรอกชื่อผู้ใช้"},{"language":"TR","value":"Kullanıcı adı girin"},{"language":"UK","value":"Введіть ім'я користувача"},{"language":"ZF","value":"輸入用戶名"},{"language":"ZH","value":"输入用户名"}]}],"fieldPos":521},{"fieldNo":"66dac954-3069-4452-bc15-c53a23bac1fa","fieldName":"AppCache_tEnterPassword","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Enter password","script":"","translation":[{"language":"AF","value":"Sleutel wagwoord in"},{"language":"AR","value":"أدخل كلمة المرور"},{"language":"BG","value":"Въведете паролата"},{"language":"CA","value":"Introduir la contrasenya"},{"language":"CS","value":"Zadejte heslo"},{"language":"DA","value":"Indtast adgangskode"},{"language":"DE","value":"Passwort eingeben"},{"language":"EL","value":"Εισάγετε τον κωδικό πρόσβασης"},{"language":"EN","value":"Enter password"},{"language":"ES","value":"Introducir la contraseña"},{"language":"ET","value":"Sisestage parool"},{"language":"FI","value":"Kirjoita salasana"},{"language":"FR","value":"Entrer le mot de passe"},{"language":"HE","value":"הזן את הסיסמה"},{"language":"HR","value":"Upišite lozinku"},{"language":"HU","value":"Írd be a jelszót"},{"language":"ID","value":"Masukkan kata kunci"},{"language":"IS","value":"Sláðu inn lykilorð"},{"language":"IT","value":"Inserire la password"},{"language":"JA","value":"パスワードを入力する"},{"language":"KO","value":"암호를 입력"},{"language":"LT","value":"Įvesti slaptažodį"},{"language":"LV","value":"Ievadi paroli"},{"language":"MS","value":"Masukkan kata laluan"},{"language":"NL","value":"Voer wachtwoord in"},{"language":"NN","value":"Skriv inn passord"},{"language":"NO","value":"Oppgi passord"},{"language":"PL","value":"Wprowadź hasło"},{"language":"PT","value":"Digite a senha"},{"language":"RO","value":"Introdu parola"},{"language":"RU","value":"Введите пароль"},{"language":"SE","value":"Skriv passord"},{"language":"SH","value":"Unesite lozinku"},{"language":"SK","value":"Zadajte heslo"},{"language":"SL","value":"Vnesite geslo"},{"language":"SR","value":"Унесите лозинку"},{"language":"SV","value":"Skriv in lösenord"},{"language":"TH","value":"ใส่รหัสผ่าน"},{"language":"TR","value":"Parolanı Gir"},{"language":"UK","value":"Введіть пароль"},{"language":"ZF","value":"輸入密碼"},{"language":"ZH","value":"输入密码"}]}],"fieldPos":522},{"fieldNo":"582bfc0d-2fd8-4727-9463-60f617461d8f","fieldName":"AppCache_tEnterNewPasscode","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Enter new pin code","script":"","translation":[{"language":"AF","value":"Voer nuwe PIN-kode in"},{"language":"AR","value":"أدخل الرمز السري الجديد"},{"language":"BG","value":"Въведете нов пин код"},{"language":"CA","value":"Introduïu el codi PIN nou"},{"language":"CS","value":"Zadejte nový PIN kód"},{"language":"DA","value":"Indtast ny pinkode"},{"language":"DE","value":"Neuen PIN eingeben"},{"language":"EL","value":"Εισαγάγετε νέο κωδικό PIN"},{"language":"EN","value":"Enter new pin code"},{"language":"ES","value":"Introduce el nuevo código PIN"},{"language":"ET","value":"Sisestage uus PIN-kood"},{"language":"FI","value":"Syötä uusi pin-koodi"},{"language":"FR","value":"Entrez le nouveau code PIN"},{"language":"HE","value":"הזן קוד PIN חדש"},{"language":"HR","value":"Unesite novi PIN kod"},{"language":"HU","value":"Írja be az új PIN kódot"},{"language":"ID","value":"Masukkan kode pin baru"},{"language":"IS","value":"Sláðu inn nýtt PIN-númer"},{"language":"IT","value":"Inserisci il nuovo codice PIN"},{"language":"JA","value":"新しいPINコードを入力してください"},{"language":"KO","value":"새 핀 코드를 입력하세요"},{"language":"LT","value":"Įveskite naują PIN kodą"},{"language":"LV","value":"Ievadiet jauno PIN kodu"},{"language":"MS","value":"Masukkan kod pin baharu"},{"language":"NL","value":"Voer een nieuwe pincode in"},{"language":"NN","value":"Skriv inn ny PIN-kode"},{"language":"NO","value":"Oppgi ny pinkode"},{"language":"PL","value":"Wprowadź nowy kod PIN"},{"language":"PT","value":"Insira o novo código PIN"},{"language":"RO","value":"Introdu noul cod PIN"},{"language":"RU","value":"Введите новый пин-код"},{"language":"SE","value":"Skriv ođđa pin-kode"},{"language":"SH","value":"Unesite novi PIN kod"},{"language":"SK","value":"Zadajte nový kód PIN"},{"language":"SL","value":"Vnesite novo pin kodo"},{"language":"SR","value":"Унесите нови пин код"},{"language":"SV","value":"Ange ny pinkod"},{"language":"TH","value":"ป้อนรหัสพินใหม่"},{"language":"TR","value":"Yeni pin kodunu girin"},{"language":"UK","value":"Введіть новий пін-код"},{"language":"ZF","value":"輸入新的 PIN 碼"},{"language":"ZH","value":"输入新的 PIN 码"}]}],"fieldPos":523},{"fieldNo":"0a122420-f0c8-4cbe-e81b-a893366ebe68","fieldName":"AppCache_tEnterRepeatPasscode","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Repeat pin code","script":"","translation":[{"language":"AF","value":"Herhaal pinkode"},{"language":"AR","value":"كرر الرمز السري"},{"language":"BG","value":"Повторете пин кода"},{"language":"CA","value":"Repetiu el codi PIN"},{"language":"CS","value":"Opakujte PIN kód"},{"language":"DA","value":"Gentag PIN-kode"},{"language":"DE","value":"PIN wiederholen"},{"language":"EL","value":"Επαναλάβετε τον κωδικό PIN"},{"language":"EN","value":"Repeat pin code"},{"language":"ES","value":"Repetir código pin"},{"language":"ET","value":"Korda PIN-koodi"},{"language":"FI","value":"Toista pin-koodi"},{"language":"FR","value":"Répéter le code PIN"},{"language":"HE","value":"חזור על קוד PIN"},{"language":"HR","value":"Ponovite pin kod"},{"language":"HU","value":"Ismételje meg a PIN kódot"},{"language":"ID","value":"Ulangi kode pin"},{"language":"IS","value":"Endurtaktu PIN-númerið"},{"language":"IT","value":"Ripeti il codice PIN"},{"language":"JA","value":"PIN コードを繰り返す"},{"language":"KO","value":"핀 코드 반복"},{"language":"LT","value":"Pakartokite PIN kodą"},{"language":"LV","value":"Atkārtojiet PIN kodu"},{"language":"MS","value":"Ulang kod pin"},{"language":"NL","value":"Herhaal pincode"},{"language":"NN","value":"Gjenta PIN-kode"},{"language":"NO","value":"Gjenta pinkode"},{"language":"PL","value":"Powtórz kod PIN"},{"language":"PT","value":"Repita o código PIN"},{"language":"RO","value":"Repetați codul PIN"},{"language":"RU","value":"Повторите пин-код"},{"language":"SE","value":"Davvisápin-kode"},{"language":"SH","value":"Ponovite PIN kod"},{"language":"SK","value":"Zopakujte PIN kód"},{"language":"SL","value":"Ponovi pin kodo"},{"language":"SR","value":"Поновите пин код"},{"language":"SV","value":"Upprepa pinkoden"},{"language":"TH","value":"ทำซ้ำรหัสพิน"},{"language":"TR","value":"Pin kodunu tekrarla"},{"language":"UK","value":"Повторіть пін-код"},{"language":"ZF","value":"重複輸入 PIN 碼"},{"language":"ZH","value":"重复 PIN 码"}]}],"fieldPos":524},{"fieldNo":"6e827096-b2ff-4084-b601-d59cf6b64396","fieldName":"AppCache_tNoPasscodeMatch","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Pin code do not match","script":"","translation":[{"language":"AF","value":"Pinkode stem nie ooreen nie"},{"language":"AR","value":"الرمز السري غير متطابق"},{"language":"BG","value":"Пин кодът не съвпада"},{"language":"CA","value":"El codi PIN no coincideix"},{"language":"CS","value":"PIN kód se neshoduje"},{"language":"DA","value":"Pin kode stemmer ikke overens"},{"language":"DE","value":"PIN inkorrekt"},{"language":"EL","value":"Ο κωδικός PIN δεν ταιριάζει"},{"language":"EN","value":"Pin code do not match"},{"language":"ES","value":"El código PIN no coincide"},{"language":"ET","value":"Pin-kood ei ühti"},{"language":"FI","value":"Pin-koodi ei täsmää"},{"language":"FR","value":"Le code PIN ne correspond pas"},{"language":"HE","value":"קוד PIN אינו תואם"},{"language":"HR","value":"Pin kodovi ne odgovaraju"},{"language":"HU","value":"A PIN kód nem egyezik"},{"language":"ID","value":"Kode pin tidak cocok"},{"language":"IS","value":"PIN-númerið passar ekki"},{"language":"IT","value":"Il codice PIN non corrisponde"},{"language":"JA","value":"PINコードが一致しません"},{"language":"KO","value":"핀코드가 일치하지 않습니다"},{"language":"LT","value":"Pin kodas nesutampa"},{"language":"LV","value":"Pin kods nesakrīt"},{"language":"MS","value":"Kod pin tidak sepadan"},{"language":"NL","value":"Pincode komt niet overeen"},{"language":"NN","value":"PIN-kodene stemmer ikke overens"},{"language":"NO","value":"Pinkodene er ikke like"},{"language":"PL","value":"Kod PIN nie pasuje"},{"language":"PT","value":"O código PIN não corresponde"},{"language":"RO","value":"Codul PIN nu se potrivește"},{"language":"RU","value":"Пин-код не совпадает"},{"language":"SE","value":"Pin-kode eai sáhtán ávkkástallet"},{"language":"SH","value":"PIN kodovi se ne podudaraju"},{"language":"SK","value":"PIN kód sa nezhoduje"},{"language":"SL","value":"PIN koda se ne ujemata"},{"language":"SR","value":"Пин код се не поклапа"},{"language":"SV","value":"Pinkoden matchar inte"},{"language":"TH","value":"รหัสพินไม่ตรงกัน"},{"language":"TR","value":"Pin kodu eşleşmiyor"},{"language":"UK","value":"Пін-код не збігається"},{"language":"ZF","value":"PIN 碼不匹配"},{"language":"ZH","value":"PIN 码不匹配"}]}],"fieldPos":525},{"fieldNo":"6153fd1d-5817-439e-d636-7f2282bab517","fieldName":"AppCache_tNewPasswordNoMatch","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Passwords do not match","script":"","translation":[{"language":"AF","value":"Wagwoorde stem nie ooreen nie"},{"language":"AR","value":"كلمة المرور غير مطابقة"},{"language":"BG","value":"Паролите не съвпадат"},{"language":"CA","value":"Les contrasenyes no coincideixen"},{"language":"CS","value":"Hesla se neshodují"},{"language":"DA","value":"adgangskoderne stemmer ikke overens"},{"language":"DE","value":"Passwort inkorrekt"},{"language":"EL","value":"Οι κωδικοί πρόσβασης δεν ταιριάζουν"},{"language":"EN","value":"Passwords do not match"},{"language":"ES","value":"Las contraseñas no coinciden"},{"language":"ET","value":"Paroolid ei kattu"},{"language":"FI","value":"Salasanat eivät täsmää"},{"language":"FR","value":"Les mots de passe ne correspondent pas"},{"language":"HE","value":"סיסמאות לא תואמות"},{"language":"HR","value":"Lozinke se ne podudaraju"},{"language":"HU","value":"A jelszavak nem egyeznek"},{"language":"ID","value":"Sandi tidak cocok"},{"language":"IS","value":"Lykilorð passa ekki saman"},{"language":"IT","value":"le passwords non corrispondono"},{"language":"JA","value":"パスワードが一致していません"},{"language":"KO","value":"비밀번호가 일치하지 않습니다"},{"language":"LT","value":"Slaptažodžiai nesutampa"},{"language":"LV","value":"Paroles nesakrīt"},{"language":"MS","value":"Kata laluan tidak sepadan"},{"language":"NL","value":"Wachtwoorden komen niet overeen"},{"language":"NN","value":"Passordene stemmer ikke overens"},{"language":"NO","value":"Passordene er ikke like"},{"language":"PL","value":"Hasła nie pasują do siebie"},{"language":"PT","value":"As senhas não coincidem"},{"language":"RO","value":"parolele nu se potrivesc"},{"language":"RU","value":"Пароли не совпадают"},{"language":"SE","value":"Passord eai sáhtán ávkkástallet"},{"language":"SH","value":"Lozinke se ne podudaraju"},{"language":"SK","value":"Heslá sa nezhodujú"},{"language":"SL","value":"geslo se ne ujema"},{"language":"SR","value":"Лозинке се не поклапају"},{"language":"SV","value":"Lösenorden matchar inte"},{"language":"TH","value":"รหัสผ่านไม่ตรงกัน"},{"language":"TR","value":"Parolalar uyuşmuyor"},{"language":"UK","value":"Паролі не збігаються"},{"language":"ZF","value":"密碼不匹配"},{"language":"ZH","value":"密码不匹配"}]}],"fieldPos":526},{"fieldNo":"f3ee0a15-4c89-4940-dd51-303c33c1b50d","fieldName":"AppCache_tPasscodeToShort","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Pin code to short, min chars","script":"","translation":[{"language":"AF","value":"Pin-kode na kort, min karakters"},{"language":"AR","value":"الرمز السري إلى أحرف قصيرة ودقيقة"},{"language":"BG","value":"Пин код до кратък, мин. символи"},{"language":"CA","value":"Codi PIN a caràcters curts i mínims"},{"language":"CS","value":"Kód PIN na krátký, min. znaků"},{"language":"DA","value":"Pin kode til korte, min tegn"},{"language":"DE","value":"PIN zu kurz, mind. Zeichen"},{"language":"EL","value":"Pin κωδικός σε σύντομους χαρακτήρες ελάχ"},{"language":"EN","value":"Pin code too short, min digits"},{"language":"ES","value":"Código PIN para caracteres cortos y mínimos"},{"language":"ET","value":"Pin-kood lühikesteks, minimaalseteks tähemärkideks"},{"language":"FI","value":"Pin-koodi lyhyisiin, minimimerkkeihin"},{"language":"FR","value":"Code PIN court, minimum de caractères"},{"language":"HE","value":"קוד קוד קצר לתווים קצרים"},{"language":"HR","value":"Pin kod je kratak, min znakova"},{"language":"HU","value":"Pin-kód rövid, minimális karakterekre"},{"language":"ID","value":"Kode pin menjadi pendek, karakter minimum"},{"language":"IS","value":"PIN-kóði á stuttar, mín. stafir"},{"language":"IT","value":"Codice PIN su caratteri brevi e minimi"},{"language":"JA","value":"PIN コードを短く、最小文字数にします"},{"language":"KO","value":"짧은 최소 문자에 대한 핀 코드"},{"language":"LT","value":"Pin kodą iki trumpų, min simbolių"},{"language":"LV","value":"Piespraust kodu līdz īsām, minimālām rakstzīmēm"},{"language":"MS","value":"Kod pin kepada aksara pendek, min"},{"language":"NL","value":"Pincode te kort, min. tekens"},{"language":"NO","value":"Pinkoden er for kort, min. tegn"},{"language":"PL","value":"Kod PIN za krótki, min. znaków"},{"language":"PT","value":"Código PIN para caracteres curtos e mínimos"},{"language":"RO","value":"Codul PIN în caractere scurte, minime"},{"language":"RU","value":"Короткий пин-код, мин. символов"},{"language":"SH","value":"PIN kod je prekratak, minimalno karaktera"},{"language":"SK","value":"Kód PIN na krátky, min. znakov"},{"language":"SL","value":"Pin koda na kratke, najmanj znakov"},{"language":"SR","value":"Пин код на кратке, минималне знакове"},{"language":"SV","value":"Pin-kod till korta, minsta tecken"},{"language":"TH","value":"ปักหมุดรหัสให้สั้น ตัวอักษรขั้นต่ำ"},{"language":"TR","value":"Kısa, minimum karaktere pin kodu"},{"language":"UK","value":"Пін-код короткий, мінімальна кількість символів"},{"language":"ZF","value":"PIN 碼太短，最少字符數"},{"language":"ZH","value":"将 Pin 码设置为短、最少字符"}]}],"fieldPos":527},{"fieldNo":"7a5825d2-1365-4048-f1ce-2cf8a8323aac","fieldName":"AppCache_tWrongResponse","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"No valid APPLID or other Error","script":"","translation":[{"language":"AF","value":"Geen geldige APPLID of ander fout nie"},{"language":"AR","value":"لا يوجد APPLID صالح أو خطأ آخر"},{"language":"BG","value":"Няма валиден APPLID или друга грешка"},{"language":"CA","value":"No hi ha APPLID vàlid ni cap altre error"},{"language":"CS","value":"Žádná platná APPLID nebo jiná chyba"},{"language":"DA","value":"Ingen gyldig APPLID eller anden fejl"},{"language":"DE","value":"APPLID ungültig oder anderer Fehler"},{"language":"EL","value":"Κανένα έγκυρο APPLID ή άλλο σφάλμα"},{"language":"EN","value":"No valid APPLID or other Error"},{"language":"ES","value":"No hay APPLID válido u otro error"},{"language":"ET","value":"Puudub kehtiv APPLID või muu viga"},{"language":"FI","value":"Ei kelvollista APPLID- tai muuta virhettä"},{"language":"FR","value":"Aucun APPLID valide ou autre erreur"},{"language":"HE","value":"אין APPLID חוקי או שגיאה אחרת"},{"language":"HR","value":"Nema važećeg APPLID-a ili druge pogreške"},{"language":"HU","value":"Nincs érvényes APPLID vagy más hiba"},{"language":"ID","value":"Tidak ada APPLID yang valid atau Kesalahan lainnya"},{"language":"IS","value":"Ekkert gilt APPLID eða önnur villa"},{"language":"IT","value":"Nessun APPLID valido o altro errore"},{"language":"JA","value":"有効なAPPLIDがない、またはその他のエラー"},{"language":"KO","value":"유효한 APPLID가 없거나 기타 오류가 발생했습니다."},{"language":"LT","value":"Nėra galiojančios APPLID ar kitos klaidos"},{"language":"LV","value":"Nav derīgas APPLID vai citas kļūdas"},{"language":"MS","value":"Tiada APPLID yang sah atau Ralat lain"},{"language":"NL","value":"Geen geldige APPLID of andere fout"},{"language":"NN","value":"Ingen gyldig APPLID eller annen feil"},{"language":"NO","value":"Ingen gyldig APPID eller annen feil"},{"language":"PL","value":"Brak prawidłowego APPLID lub innego błędu"},{"language":"PT","value":"Nenhum APPLID válido ou outro erro"},{"language":"RO","value":"Nu există aplicație validă sau altă eroare"},{"language":"RU","value":"Нет действительного APPLID или другая ошибка."},{"language":"SE","value":"Eai leat ovttas APPLID dahje eará várás"},{"language":"SH","value":"Nema validnog APPLID-a ili druga greška"},{"language":"SK","value":"Žiadna platná APPLID alebo iná chyba"},{"language":"SL","value":"Ni veljavnega APPLID ali druge napake"},{"language":"SR","value":"Нема важеће АППЛИД или друге грешке"},{"language":"SV","value":"Inget giltigt APPLID eller annat fel"},{"language":"TH","value":"ไม่มี APPLID ที่ถูกต้องหรือข้อผิดพลาดอื่นๆ"},{"language":"TR","value":"Geçerli bir APPLID veya başka bir hata yok"},{"language":"UK","value":"Немає дійсного APPLID або іншої помилки"},{"language":"ZF","value":"無有效的 APPLID 或其他錯誤"},{"language":"ZH","value":"无有效的 APPLID 或其他错误"}]}],"fieldPos":528},{"fieldNo":"3b8c35e1-7683-4f8d-c62c-bfbfd8020b74","fieldName":"AppCache_tWrongActivationCode","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Wrong Activation Code","script":"","translation":[{"language":"AF","value":"Verkeerde aktiveringskode"},{"language":"AR","value":"رمز التفعيل خاطئ"},{"language":"BG","value":"Грешен код за активиране"},{"language":"CA","value":"Codi d'activació incorrecte"},{"language":"CS","value":"Chybný aktivační kód"},{"language":"DA","value":"Forkert aktiveringskode"},{"language":"DE","value":"Aktivierungscode inkorrekt"},{"language":"EL","value":"Λάθος κωδικός ενεργοποίησης"},{"language":"EN","value":"Wrong Activation Code"},{"language":"ES","value":"Código de activación incorrecto"},{"language":"ET","value":"Vale aktiveerimiskood"},{"language":"FI","value":"Väärä aktivointikoodi"},{"language":"FR","value":"Mauvais code d'activation"},{"language":"HE","value":"קוד הפעלה שגוי"},{"language":"HR","value":"Pogrešan aktivacijski kod"},{"language":"HU","value":"Hibás aktiválási kód"},{"language":"ID","value":"Kode Aktivasi Salah"},{"language":"IS","value":"Rangur virkjunarkóði"},{"language":"IT","value":"Codice di attivazione errato"},{"language":"JA","value":"間違ったアクティベーション コード"},{"language":"KO","value":"잘못된 활성화 코드"},{"language":"LT","value":"Neteisingas aktyvinimo kodas"},{"language":"LV","value":"Nepareizs aktivizācijas kods"},{"language":"MS","value":"Kod Pengaktifan Salah"},{"language":"NL","value":"Verkeerde activeringscode"},{"language":"NN","value":"Feil aktiveringskode"},{"language":"NO","value":"Feil aktiveringskode"},{"language":"PL","value":"Zły kod aktywacyjny"},{"language":"PT","value":"Código de ativação errado"},{"language":"RO","value":"Cod de activare greșit"},{"language":"RU","value":"Неправильный код активации"},{"language":"SE","value":"Válddejuvvojit aktivieringkoda"},{"language":"SH","value":"Pogrešan aktivacioni kod"},{"language":"SK","value":"Nesprávny aktivačný kód"},{"language":"SL","value":"Napačna aktivacijska koda"},{"language":"SR","value":"Погрешан код за активирање"},{"language":"SV","value":"Fel aktiveringskod"},{"language":"TH","value":"รหัสเปิดใช้งานไม่ถูกต้อง"},{"language":"TR","value":"Yanlış Etkinleştirme Kodu"},{"language":"UK","value":"Неправильний код активації"},{"language":"ZF","value":"激活碼錯誤"},{"language":"ZH","value":"激活码错误"}]}],"fieldPos":529},{"fieldNo":"6e00741b-81f5-489a-8d9c-588a5f5dc96c","fieldName":"AppCache_tWrongUserNamePass","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Wrong username/password","script":"","translation":[{"language":"AF","value":"Verkeerde gebruikersnaam/wagwoord"},{"language":"AR","value":"اسم المستخدم خاطئ / كلمة المرور"},{"language":"BG","value":"Грешно потребителско име/парола"},{"language":"CA","value":"Nom d'usuari/contrasenya incorrectes"},{"language":"CS","value":"Chybné uživatelské jméno/heslo"},{"language":"DA","value":"Forkert brugernavn / kodeord"},{"language":"DE","value":"Nutzername / Passwort inkorrekt"},{"language":"EL","value":"Λάθος όνομα χρήστη/κωδικός πρόσβασης"},{"language":"EN","value":"Wrong username/password"},{"language":"ES","value":"Usuario / contraseña incorrecta"},{"language":"ET","value":"Vale kasutajanimi/parool"},{"language":"FI","value":"Väärä käyttäjätunnus/salasana"},{"language":"FR","value":"Nom d'utilisateur incorrect / mot de passe"},{"language":"HE","value":"שם משתמש / סיסמא שגויים"},{"language":"HR","value":"Pogrešno korisničko ime/lozinka"},{"language":"HU","value":"Hibás felhasználónév/jelszó"},{"language":"ID","value":"Nama pengguna/kata sandi salah"},{"language":"IS","value":"Rangt notendanafn/lykilorð"},{"language":"IT","value":"Nome utente/password errati"},{"language":"JA","value":"ユーザー名/パスワードが間違っています"},{"language":"KO","value":"잘못된 사용자 이름/비밀번호"},{"language":"LT","value":"Neteisingas vartotojo vardas / slaptažodis"},{"language":"LV","value":"Nepareizs lietotājvārds/parole"},{"language":"MS","value":"Nama pengguna/kata laluan salah"},{"language":"NL","value":"Verkeerde gebruikersnaam / wachtwoord"},{"language":"NN","value":"Feil brukernavn/passord"},{"language":"NO","value":"Feil brukernavn / passord"},{"language":"PL","value":"Nieprawidłowa nazwa użytkownika/hasło"},{"language":"PT","value":"Nome de usuário/senha errados"},{"language":"RO","value":"Nume de utilizator/parolă greșit"},{"language":"RU","value":"Неверное имя пользователя/пароль"},{"language":"SE","value":"Válddejuvvojit geavaheaddji/namma"},{"language":"SH","value":"Pogrešno korisničko ime/lozinka"},{"language":"SK","value":"Nesprávne používateľské meno/heslo"},{"language":"SL","value":"Napačno uporabniško ime/geslo"},{"language":"SR","value":"Погрешно корисничко име/лозинка"},{"language":"SV","value":"Fel användarnamn/lösenord"},{"language":"TH","value":"ชื่อผู้ใช้/รหัสผ่านไม่ถูกต้อง"},{"language":"TR","value":"Yanlış kullanıcı adı / şifre"},{"language":"UK","value":"Неправильний логін/пароль"},{"language":"ZF","value":"用戶名/密碼錯誤"},{"language":"ZH","value":"用户名/密码错误"}]}],"fieldPos":530},{"fieldNo":"db4a47c0-f81d-4a2c-9762-e9c62136c85e","fieldName":"AppCache_tErrorDownloading","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Error downloading new version","script":"","translation":[{"language":"AF","value":"Kon nie nuwe weergawe aflaai nie"},{"language":"AR","value":"حدث خطأ أثناء تنزيل الإصدار الجديد"},{"language":"BG","value":"Грешка при изтеглянето на новата версия"},{"language":"CA","value":"S'ha produït un error en baixar la versió nova"},{"language":"CS","value":"Chyba při stahování nové verze"},{"language":"DA","value":"Fejl ved download af ny version"},{"language":"DE","value":"Fehler beim Herunterladen der neuen Version"},{"language":"EL","value":"Σφάλμα κατά τη λήψη της νέας έκδοσης"},{"language":"EN","value":"Error downloading new version"},{"language":"ES","value":"Error al descargar la nueva versión"},{"language":"ET","value":"Viga uue versiooni allalaadimisel"},{"language":"FI","value":"Virhe uuden version lataamisessa"},{"language":"FR","value":"Erreur lors du téléchargement de la nouvelle version"},{"language":"HE","value":"שגיאה בהורדת גרסה חדשה"},{"language":"HR","value":"Pogreška pri preuzimanju nove verzije"},{"language":"HU","value":"Hiba az új verzió letöltése közben"},{"language":"ID","value":"Terjadi kesalahan saat mengunduh versi baru"},{"language":"IS","value":"Villa við að hlaða niður nýrri útgáfu"},{"language":"IT","value":"Errore durante il download della nuova versione"},{"language":"JA","value":"新しいバージョンのダウンロード中にエラーが発生しました"},{"language":"KO","value":"새 버전을 다운로드하는 중에 오류가 발생했습니다."},{"language":"LT","value":"Klaida atsisiunčiant naują versiją"},{"language":"LV","value":"Lejupielādējot jauno versiju, radās kļūda"},{"language":"MS","value":"Ralat memuat turun versi baharu"},{"language":"NL","value":"Fout bij downloaden van nieuwe versie"},{"language":"NN","value":"Feil ved nedlasting av ny versjon"},{"language":"NO","value":"Feil ved nedlasting av ny versjon"},{"language":"PL","value":"Błąd podczas pobierania nowej wersji"},{"language":"PT","value":"Erro ao baixar a nova versão"},{"language":"RO","value":"Eroare la descărcarea versiunii noi"},{"language":"RU","value":"Ошибка загрузки новой версии"},{"language":"SE","value":"Várás oahpahus ođđa várdii"},{"language":"SH","value":"Greška pri preuzimanju nove verzije"},{"language":"SK","value":"Chyba pri sťahovaní novej verzie"},{"language":"SL","value":"Napaka pri prenosu nove različice"},{"language":"SR","value":"Грешка при преузимању нове верзије"},{"language":"SV","value":"Fel vid nedladdning av ny version"},{"language":"TH","value":"เกิดข้อผิดพลาดในการดาวน์โหลดเวอร์ชันใหม่"},{"language":"TR","value":"Yeni sürüm indirilirken hata oluştu"},{"language":"UK","value":"Помилка завантаження нової версії"},{"language":"ZF","value":"下載新版本時出錯"},{"language":"ZH","value":"下载新版本时出错"}]}],"fieldPos":531},{"fieldNo":"4e31c45d-f273-4de9-889d-3760c2753949","fieldName":"AppCache_tAppUpdated","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"App updated. New logon required","script":"","translation":[{"language":"AF","value":"Program opgedateer. Nuwe aanmelding vereis"},{"language":"AR","value":"تم تحديث التطبيق. تسجيل الدخول الجديد مطلوب"},{"language":"BG","value":"Приложението е актуализирано. Изисква се ново влизане"},{"language":"CA","value":"S'ha actualitzat l'aplicació. Cal un nou inici de sessió"},{"language":"CS","value":"Aplikace aktualizována. Je vyžadováno nové přihlášení"},{"language":"DA","value":"App opdateret. Ny logon kræves"},{"language":"DE","value":"App aktualisiert. Neue Anmeldung erforderlich"},{"language":"EL","value":"Η εφαρμογή ενημερώθηκε. Απαιτείται νέα σύνδεση"},{"language":"EN","value":"App updated. New logon required"},{"language":"ES","value":"Aplicación actualizada. Se requiere nuevo inicio de sesión"},{"language":"ET","value":"Rakendust värskendati. Vajalik uus sisselogimine"},{"language":"FI","value":"Sovellus päivitetty. Uusi kirjautuminen vaaditaan"},{"language":"FR","value":"Application mise à jour. Nouvelle connexion requise"},{"language":"HE","value":"האפליקציה עודכנה. נדרשת כניסה חדשה"},{"language":"HR","value":"Aplikacija ažurirana. Potrebna je nova prijava"},{"language":"HU","value":"Alkalmazás frissítve. Új bejelentkezés szükséges"},{"language":"ID","value":"Aplikasi diperbarui. Diperlukan logon baru"},{"language":"IS","value":"App uppfært. Ný innskráning krafist"},{"language":"IT","value":"Applicazione aggiornata. È richiesto un nuovo accesso"},{"language":"JA","value":"アプリが更新されました。新しいログオンが必要です"},{"language":"KO","value":"앱이 업데이트되었습니다. 새로 로그온해야 함"},{"language":"LT","value":"Programėlė atnaujinta. Reikalingas naujas prisijungimas"},{"language":"LV","value":"Lietotne ir atjaunināta. Nepieciešama jauna pieteikšanās"},{"language":"MS","value":"Apl dikemas kini. Log masuk baharu diperlukan"},{"language":"NL","value":"App bijgewerkt. Nieuwe aanmelding vereist"},{"language":"NN","value":"Appen er oppdatert. Ny pålogging kreves"},{"language":"NO","value":"App oppdatert. Ny pålogging kreves"},{"language":"PL","value":"Aplikacja zaktualizowana. Wymagane nowe logowanie"},{"language":"PT","value":"Aplicativo atualizado. Novo login necessário"},{"language":"RO","value":"Aplicația a fost actualizată. Este necesară o nouă conectare"},{"language":"RU","value":"Приложение обновлено. Требуется новый вход в систему"},{"language":"SE","value":"Applikašuvdna lea oahpahuvvon. Ođđa loggat lea dárbbašan"},{"language":"SH","value":"Aplikacija je ažurirana. Potrebna je nova prijava"},{"language":"SK","value":"Aplikácia bola aktualizovaná. Vyžaduje sa nové prihlásenie"},{"language":"SL","value":"Aplikacija posodobljena. Potrebna je nova prijava"},{"language":"SR","value":"Апликација је ажурирана. Потребно је ново пријављивање"},{"language":"SV","value":"App uppdaterad. Ny inloggning krävs"},{"language":"TH","value":"อัปเดตแอปแล้ว จำเป็นต้องเข้าสู่ระบบใหม่"},{"language":"TR","value":"Uygulama güncellendi. Yeni oturum açma gerekli"},{"language":"UK","value":"Додаток оновлено. Потрібен новий вхід"},{"language":"ZF","value":"應用已更新。需要重新登錄"},{"language":"ZH","value":"应用程序已更新。需要新登录"}]}],"fieldPos":532},{"fieldNo":"cab6a801-47b4-421c-f2cc-c81571c78a6b","fieldName":"AppCache_tNoCurrentConfig","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"No Launchpad ID selected","script":"","translation":[{"language":"AF","value":"Geen Launchpad ID gekies nie"},{"language":"AR","value":"لم يتم تحديد معرف Launchpad"},{"language":"BG","value":"Няма избран ИД на Launchpad"},{"language":"CA","value":"No s'ha seleccionat cap identificador de Launchpad"},{"language":"CS","value":"Není vybráno ID Launchpadu"},{"language":"DA","value":"Ingen start-id blev valgt"},{"language":"DE","value":"Keine Launchpad-ID ausgewählt"},{"language":"EL","value":"Δεν έχει επιλεγεί αναγνωριστικό Launchpad"},{"language":"EN","value":"No Launchpad ID selected"},{"language":"ES","value":"No se seleccionó ningún ID de Launchpad"},{"language":"ET","value":"Launchpad ID-d pole valitud"},{"language":"FI","value":"Launchpad-tunnusta ei ole valittu"},{"language":"FR","value":"Aucun ID Launchpad sélectionné"},{"language":"HE","value":"לא נבחר מזהה Launchpad"},{"language":"HR","value":"Nije odabran ID podloge za pokretanje"},{"language":"HU","value":"Nincs kiválasztva Launchpad azonosító"},{"language":"ID","value":"Tidak ada ID Launchpad yang dipilih"},{"language":"IS","value":"Ekkert Launchpad ID valið"},{"language":"IT","value":"Nessun ID Launchpad selezionato"},{"language":"JA","value":"Launchpad ID が選択されていません"},{"language":"KO","value":"선택된 런치패드 ID가 없습니다."},{"language":"LT","value":"Nepasirinktas paleidimo pultelio ID"},{"language":"LV","value":"Nav atlasīts palaišanas bloka ID"},{"language":"MS","value":"Tiada ID Launchpad dipilih"},{"language":"NL","value":"Geen Launchpad-ID geselecteerd"},{"language":"NN","value":"Ingen Launchpad-ID valgt"},{"language":"NO","value":"Ingen Launchpad ID valgt"},{"language":"PL","value":"Nie wybrano identyfikatora Launchpada"},{"language":"PT","value":"Nenhum ID do Launchpad selecionado"},{"language":"RO","value":"Niciun ID Launchpad selectat"},{"language":"RU","value":"Идентификатор панели запуска не выбран"},{"language":"SE","value":"Eai leat váldán Launchpad ID"},{"language":"SH","value":"Nije izabran Launchpad ID"},{"language":"SK","value":"Nie je vybraté žiadne ID Launchpadu"},{"language":"SL","value":"Ni izbranega ID-ja zaganjalnika"},{"language":"SR","value":"Није изабран ИД Лаунцхпад-а"},{"language":"SV","value":"Inget Launchpad ID valt"},{"language":"TH","value":"ไม่ได้เลือก Launchpad ID"},{"language":"TR","value":"Başlatma Çubuğu Kimliği seçilmedi"},{"language":"UK","value":"Ідентифікатор панелі запуску не вибрано"},{"language":"ZF","value":"未選擇 Launchpad ID"},{"language":"ZH","value":"未选择启动板 ID"}]}],"fieldPos":533},{"fieldNo":"2499dafc-8f59-4dc2-dcc5-e968e1a7c0a5","fieldName":"AppCache_tSessionTimeout","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Session timed out - please try again","script":"","translation":[{"language":"AF","value":"Sessie het uitgetel - probeer asseblief weer"},{"language":"AR","value":"انتهت مهلة الجلسة - يرجى المحاولة مرة أخرى"},{"language":"BG","value":"Сесията изтече - моля, опитайте отново"},{"language":"CA","value":"La sessió s'ha esgotat"},{"language":"CS","value":"Časový limit relace vypršel – zkuste to prosím znovu"},{"language":"DA","value":"Session timed out - prøv igen"},{"language":"DE","value":"Sitzung abgelaufen - bitte versuchen Sie es erneut"},{"language":"EL","value":"Η περίοδος λειτουργίας έληξε - δοκιμάστε ξανά"},{"language":"EN","value":"Session timed out - please try again"},{"language":"ES","value":"Se agotó el tiempo de espera de la sesión. Vuelva a intentarlo."},{"language":"ET","value":"Seanss aegus – proovige uuesti"},{"language":"FI","value":"Istunto aikakatkaistiin – yritä uudelleen"},{"language":"FR","value":"La session a expiré - veuillez réessayer"},{"language":"HE","value":"תם הזמן הקצוב להפעלה - אנא נסה שוב"},{"language":"HR","value":"Sesija je istekla - pokušajte ponovno"},{"language":"HU","value":"A munkamenet időtúllépése lejárt – próbálja újra"},{"language":"ID","value":"Waktu sesi habis - silakan coba lagi"},{"language":"IS","value":"Tími rann út - reyndu aftur"},{"language":"IT","value":"Sessione scaduta: riprova"},{"language":"JA","value":"セッションがタイムアウトしました - もう一度試してください"},{"language":"KO","value":"세션 시간이 초과되었습니다. 다시 시도해 주세요."},{"language":"LT","value":"Baigėsi sesijos skirtasis laikas – bandykite dar kartą"},{"language":"LV","value":"Sesijas noildze — lūdzu, mēģiniet vēlreiz"},{"language":"MS","value":"Sesi tamat masa - sila cuba lagi"},{"language":"NL","value":"Er is een time-out voor de sessie opgetreden. Probeer het opnieuw"},{"language":"NN","value":"Økta har gått ut - prøv igjen"},{"language":"NO","value":"Økten ble tidsavbrutt - prøv igjen"},{"language":"PL","value":"Upłynął limit czasu sesji — spróbuj ponownie"},{"language":"PT","value":"A sessão expirou. Tente novamente"},{"language":"RO","value":"Sesiunea a expirat - vă rugăm să încercați din nou"},{"language":"RU","value":"Время сеанса истекло. Повторите попытку."},{"language":"SH","value":"Sesija je istekla - molimo pokušajte ponovo"},{"language":"SK","value":"Časový limit relácie vypršal - skúste to znova"},{"language":"SL","value":"Časovna omejitev seje je potekla - poskusite znova"},{"language":"SR","value":"Временско ограничење сесије је истекло - покушајте поново"},{"language":"SV","value":"Sessionen tog timeout - försök igen"},{"language":"TH","value":"เซสชันหมดเวลา - โปรดลองอีกครั้ง"},{"language":"TR","value":"Oturum zaman aşımına uğradı - lütfen tekrar deneyin"},{"language":"UK","value":"Час очікування минув. Повторіть спробу"},{"language":"ZF","value":"會話超時 - 請重試"},{"language":"ZH","value":"会话超时 - 请重试"}]}],"fieldPos":534},{"fieldNo":"ed0c0b82-93f7-4af0-d6c8-966a86a48863","fieldName":"AppCache_tMaxFileSize","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"File is too large. Max file size is 200k","script":"","translation":[{"language":"AF","value":"Lêer is te groot. Maksimum lêergrootte is 200k"},{"language":"AR","value":"الملف كبير جدا. الحد الأقصى لحجم الملف هو 200 كيلو بايت"},{"language":"BG","value":"Файлът е твърде голям. Максималният размер на файла е 200k"},{"language":"CA","value":"El fitxer és massa gran. La mida màxima del fitxer és de 200 k"},{"language":"CS","value":"Soubor je příliš velký. Maximální velikost souboru je 200 kB"},{"language":"DA","value":"Filen er for stor. Maks filstørrelse er 200k"},{"language":"DE","value":"Datei ist zu groß. Max. Dateigröße beträgt 200 KB"},{"language":"EL","value":"Το αρχείο είναι πολύ μεγάλο. Το μέγιστο μέγεθος αρχείου είναι 200k"},{"language":"EN","value":"File is too large. Max file size is 200k"},{"language":"ES","value":"El archivo es demasiado grande. El tamaño máximo del archivo es 200k"},{"language":"ET","value":"Fail on liiga suur. Maksimaalne faili suurus on 200 kB"},{"language":"FI","value":"Tiedosto on liian suuri. Tiedoston enimmäiskoko on 200 kt"},{"language":"FR","value":"Le fichier est trop grand. La taille maximale du fichier est de 200 Ko"},{"language":"HE","value":"הקובץ גדול מדי. גודל הקובץ המרבי הוא 200K"},{"language":"HR","value":"Datoteka je prevelika. Maksimalna veličina datoteke je 200k"},{"language":"HU","value":"A fájl túl nagy. A maximális fájlméret 200 KB"},{"language":"ID","value":"File terlalu besar. Ukuran file maksimal adalah 200k"},{"language":"IS","value":"Skráin er of stór. Hámarksskráarstærð er 200k"},{"language":"IT","value":"Il file è troppo grande. La dimensione massima del file è 200k"},{"language":"JA","value":"ファイルが大きすぎます。最大ファイルサイズは200kです"},{"language":"KO","value":"파일이 너무 큽니다. 최대 파일 크기는 200k입니다."},{"language":"LT","value":"Failas per didelis. Maksimalus failo dydis yra 200 KB"},{"language":"LV","value":"Fails ir pārāk liels. Maksimālais faila lielums ir 200 k"},{"language":"MS","value":"Fail terlalu besar. Saiz fail maksimum ialah 200k"},{"language":"NL","value":"Bestand is te groot. De maximale bestandsgrootte is 200k"},{"language":"NN","value":"Fila er for stor. Maks filstørrelse er 200k"},{"language":"NO","value":"Filen er for stor. Maks filstørrelse er 200k"},{"language":"PL","value":"Plik jest za duży. Maksymalny rozmiar pliku to 200 KB"},{"language":"PT","value":"O arquivo é muito grande. O tamanho máximo do arquivo é 200k"},{"language":"RO","value":"Fișierul este prea mare. Dimensiunea maximă a fișierului este de 200k"},{"language":"RU","value":"Файл слишком большой. Максимальный размер файла 200 КБ."},{"language":"SH","value":"Fajl je prevelik. Maksimalna veličina fajla je 200k"},{"language":"SK","value":"Súbor je príliš veľký. Maximálna veľkosť súboru je 200 kB"},{"language":"SL","value":"Datoteka je prevelika. Največja velikost datoteke je 200k"},{"language":"SR","value":"Датотека је превелика. Максимална величина датотеке је 200к"},{"language":"SV","value":"Filen är för stor. Max filstorlek är 200k"},{"language":"TH","value":"ไฟล์มีขนาดใหญ่เกินไป ขนาดไฟล์สูงสุดคือ 200k"},{"language":"TR","value":"Dosya çok büyük. Maksimum dosya boyutu 200k"},{"language":"UK","value":"Файл завеликий. Максимальний розмір файлу – 200 КБ"},{"language":"ZF","value":"文件太大。最大文件大小為200k"},{"language":"ZH","value":"文件太大。最大文件大小为 200k"}]}],"fieldPos":535},{"fieldNo":"1474a1a5-c0c7-441b-8516-5ad5400f14d3","fieldName":"AppCache_tAppNotFound","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"App not found or no policy","script":"","translation":[{"language":"AF","value":"Toepassing nie gevind nie of geen beleid nie"},{"language":"AR","value":"لم يتم العثور على التطبيق أو لا توجد سياسة"},{"language":"BG","value":"Приложението не е намерено или няма правила"},{"language":"CA","value":"No s'ha trobat l'aplicació o no hi ha política"},{"language":"CS","value":"Aplikace nebyla nalezena nebo žádné zásady"},{"language":"DA","value":"App ikke fundet eller ingen politik"},{"language":"DE","value":"App nicht gefunden oder keine Berechtigung"},{"language":"EL","value":"Η εφαρμογή δεν βρέθηκε ή δεν υπάρχει πολιτική"},{"language":"EN","value":"App not found or no policy"},{"language":"ES","value":"Aplicación no encontrada o sin política"},{"language":"ET","value":"Rakendust ei leitud või pole eeskirju"},{"language":"FI","value":"Sovellusta ei löydy tai käytäntöä ei ole"},{"language":"FR","value":"Application introuvable ou aucune politique"},{"language":"HE","value":"האפליקציה לא נמצאה או שאין מדיניות"},{"language":"HR","value":"Aplikacija nije pronađena ili nema pravila"},{"language":"HU","value":"Az alkalmazás nem található, vagy nincs szabályzat"},{"language":"ID","value":"Aplikasi tidak ditemukan atau tidak ada kebijakan"},{"language":"IS","value":"Forrit fannst ekki eða engin stefna"},{"language":"IT","value":"App non trovata o nessuna policy"},{"language":"JA","value":"アプリが見つからないか、ポリシーがありません"},{"language":"KO","value":"앱을 찾을 수 없거나 정책이 없습니다."},{"language":"LT","value":"Programa nerasta arba nėra politikos"},{"language":"LV","value":"Lietotne nav atrasta vai nav politikas"},{"language":"MS","value":"Apl tidak ditemui atau tiada dasar"},{"language":"NL","value":"App niet gevonden of geen beleid"},{"language":"NN","value":"Appen ble ikkje funnen eller har ingen retningslinjer"},{"language":"NO","value":"Appen ble ikke funnet eller ingen policy"},{"language":"PL","value":"Nie znaleziono aplikacji lub brak zasad"},{"language":"PT","value":"App não encontrado ou nenhuma política"},{"language":"RO","value":"Aplicația nu a fost găsită sau nicio politică"},{"language":"RU","value":"Приложение не найдено или нет политики"},{"language":"SH","value":"Aplikacija nije pronađena ili nema pravila"},{"language":"SK","value":"Aplikácia sa nenašla alebo žiadne pravidlá"},{"language":"SL","value":"Aplikacije ni bilo mogoče najti ali ni pravilnika"},{"language":"SR","value":"Апликација није пронађена или нема смерница"},{"language":"SV","value":"Appen hittades inte eller ingen policy"},{"language":"TH","value":"ไม่พบแอปหรือไม่มีนโยบาย"},{"language":"TR","value":"Uygulama bulunamadı veya politika yok"},{"language":"UK","value":"Додаток не знайдено або немає політики"},{"language":"ZF","value":"找不到應用程式或無政策"},{"language":"ZH","value":"找不到应用程序或没有政策"}]}],"fieldPos":536},{"fieldNo":"8da44d1d-8534-4ad6-9ffa-1072cfdd278b","fieldName":"AppCache_tNotification","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Notification","script":"","translation":[{"language":"AF","value":"Kennisgewing"},{"language":"AR","value":"إشعار"},{"language":"BG","value":"уведомление"},{"language":"CA","value":"Notificació"},{"language":"CS","value":"Oznámení"},{"language":"DA","value":"Notifikation"},{"language":"DE","value":"Benachrichtigung"},{"language":"EL","value":"Γνωστοποίηση"},{"language":"EN","value":"Notification"},{"language":"ES","value":"Notificación"},{"language":"ET","value":"Teavitus"},{"language":"FI","value":"Ilmoitus"},{"language":"FR","value":"Notification"},{"language":"HE","value":"הוֹדָעָה"},{"language":"HR","value":"Obavijest"},{"language":"HU","value":"Értesítés"},{"language":"ID","value":"Pemberitahuan"},{"language":"IS","value":"Tilkynning"},{"language":"IT","value":"Notifica"},{"language":"JA","value":"通知"},{"language":"KO","value":"공고"},{"language":"LT","value":"Pranešimas"},{"language":"LV","value":"Paziņojums"},{"language":"MS","value":"Pemberitahuan"},{"language":"NL","value":"Kennisgeving"},{"language":"NN","value":"Varsel"},{"language":"NO","value":"Varsel"},{"language":"PL","value":"Powiadomienie"},{"language":"PT","value":"Notificação"},{"language":"RO","value":"Notificare"},{"language":"RU","value":"Уведомление"},{"language":"SH","value":"Obaveštenje"},{"language":"SK","value":"Oznámenie"},{"language":"SL","value":"Obvestilo"},{"language":"SR","value":"Обавештење"},{"language":"SV","value":"Underrättelse"},{"language":"TH","value":"การแจ้งเตือน"},{"language":"TR","value":"Bildiri"},{"language":"UK","value":"Сповіщення"},{"language":"ZF","value":"通知"},{"language":"ZH","value":"通知"}]}],"fieldPos":537},{"fieldNo":"3f2e3d36-9da6-4edb-bba5-bf330491fd6f","fieldName":"AppCache_tSentActivationCode","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Activation Code Sent","script":"","translation":[{"language":"AF","value":"Aktiveringskode gestuur"},{"language":"AR","value":"تم إرسال رمز التفعيل"},{"language":"BG","value":"Кодът за активиране е изпратен"},{"language":"CA","value":"Codi d'activació enviat"},{"language":"CS","value":"Aktivační kód odeslán"},{"language":"DA","value":"Aktiveringskode sendt"},{"language":"DE","value":"Aktivierungscode gesendet"},{"language":"EL","value":"Ο κωδικός ενεργοποίησης εστάλη"},{"language":"EN","value":"Activation Code Sent"},{"language":"ES","value":"Código de activación enviado"},{"language":"ET","value":"Aktiveerimiskood saadetud"},{"language":"FI","value":"Aktivointikoodi lähetetty"},{"language":"FR","value":"Code d'activation envoyé"},{"language":"HE","value":"קוד הפעלה נשלח"},{"language":"HR","value":"Aktivacijski kod poslan"},{"language":"HU","value":"Aktiváló kód elküldve"},{"language":"ID","value":"Kode Aktivasi Terkirim"},{"language":"IS","value":"Virkjunarkóði sendur"},{"language":"IT","value":"Codice di attivazione inviato"},{"language":"JA","value":"アクティベーション コードが送信されました"},{"language":"KO","value":"활성화 코드가 전송되었습니다"},{"language":"LT","value":"Aktyvinimo kodas išsiųstas"},{"language":"LV","value":"Aktivizācijas kods ir nosūtīts"},{"language":"MS","value":"Kod Pengaktifan Dihantar"},{"language":"NL","value":"Activeringscode verzonden"},{"language":"NN","value":"Aktiveringskode sendt"},{"language":"NO","value":"Aktiveringskode sendt"},{"language":"PL","value":"Kod aktywacyjny wysłany"},{"language":"PT","value":"Código de ativação enviado"},{"language":"RO","value":"Cod de activare trimis"},{"language":"RU","value":"Код активации отправлен"},{"language":"SH","value":"Aktivacioni kod poslat"},{"language":"SK","value":"Aktivačný kód odoslaný"},{"language":"SL","value":"Aktivacijska koda poslana"},{"language":"SR","value":"Активациони код је послат"},{"language":"SV","value":"Aktiveringskod skickad"},{"language":"TH","value":"ส่งรหัสเปิดใช้งานแล้ว"},{"language":"TR","value":"Aktivasyon Kodu Gönderildi"},{"language":"UK","value":"Код активації надіслано"},{"language":"ZF","value":"啟動碼已發送"},{"language":"ZH","value":"激活码已发送"}]}],"fieldPos":538},{"fieldNo":"6e1ab0fe-dba1-4998-827a-f4059b5f3e04","fieldName":"AppCache_txtNotLoaded","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Not loaded","script":"","translation":[{"language":"AF","value":"Nie gelaai nie"},{"language":"AR","value":"غير محمل"},{"language":"BG","value":"Не е зареден"},{"language":"CA","value":"No carregat"},{"language":"CS","value":"Není načteno"},{"language":"DA","value":"Ikke indlæst"},{"language":"DE","value":"Nicht geladen"},{"language":"EL","value":"Μη φορτωμένο"},{"language":"EN","value":"Not loaded"},{"language":"ES","value":"Sin cargar"},{"language":"ET","value":"Pole laaditud"},{"language":"FI","value":"Ei ladattu"},{"language":"FR","value":"Pas chargé"},{"language":"HE","value":"לא טעון"},{"language":"HR","value":"Nije učitano"},{"language":"HU","value":"Nincs betöltve"},{"language":"ID","value":"Tidak dimuat"},{"language":"IS","value":"Ekki hlaðið"},{"language":"IT","value":"Non caricato"},{"language":"JA","value":"読み込まれていない"},{"language":"KO","value":"로드되지 않음"},{"language":"LT","value":"Neįkeltas"},{"language":"LV","value":"Nav ielādēts"},{"language":"MS","value":"Tidak dimuatkan"},{"language":"NL","value":"Niet geladen"},{"language":"NN","value":"Ikke lasta"},{"language":"NO","value":"Ikke lastet"},{"language":"PL","value":"Nie załadowano"},{"language":"PT","value":"Não carregado"},{"language":"RO","value":"Nu este încărcat"},{"language":"RU","value":"Не загружено"},{"language":"SH","value":"Nije učitano"},{"language":"SK","value":"Nenačítané"},{"language":"SL","value":"Ni naložen"},{"language":"SR","value":"Није учитано"},{"language":"SV","value":"Inte laddad"},{"language":"TH","value":"ไม่โหลด"},{"language":"TR","value":"Yüklü değil"},{"language":"UK","value":"Не завантажений"},{"language":"ZF","value":"未加載"},{"language":"ZH","value":"未加载"}]}],"fieldPos":539},{"fieldNo":"b7389d05-5851-4f19-a716-cb457fdc5c43","fieldName":"AppCache_tEnableFingerprint","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Enable Fingerprint Authentication?","script":"","translation":[{"language":"AF","value":"Aktiveer vingerafdrukstawing?"},{"language":"AR","value":"تمكين التحقق من بصمة الإصبع؟"},{"language":"BG","value":"Да се активира ли удостоверяването с пръстов отпечатък?"},{"language":"CA","value":"Habilitar l'autenticació d'empremta digital?"},{"language":"CS","value":"Povolit ověřování otisků prstů?"},{"language":"DA","value":"Aktivér fingerprinter-godkendelse?"},{"language":"DE","value":"Fingerabdruck-Authentifizierung aktivieren?"},{"language":"EL","value":"Ενεργοποίηση ελέγχου ταυτότητας με δακτυλικό αποτύπωμα"},{"language":"EN","value":"Enable Fingerprint Authentication?"},{"language":"ES","value":"¿Habilitar la autenticación de huellas digitales?"},{"language":"ET","value":"Kas lubada sõrmejäljega autentimine?"},{"language":"FI","value":"Otetaanko sormenjälkitunnistus käyttöön?"},{"language":"FR","value":"Activer l'authentification par empreinte digitale ?"},{"language":"HE","value":"להפעיל אימות טביעת אצבע?"},{"language":"HR","value":"Omogućiti autentifikaciju otiskom prsta?"},{"language":"HU","value":"Engedélyezi az ujjlenyomat-hitelesítést?"},{"language":"ID","value":"Aktifkan Otentikasi Sidik Jari?"},{"language":"IS","value":"Virkja fingrafaraauðkenningu?"},{"language":"IT","value":"Abilitare l'autenticazione tramite impronta digitale?"},{"language":"JA","value":"指紋認証を有効にしますか?"},{"language":"KO","value":"지문 인증을 활성화하시겠습니까?"},{"language":"LT","value":"Įjungti pirštų atspaudų autentifikavimą?"},{"language":"LV","value":"Vai iespējot pirkstu nospiedumu autentifikāciju?"},{"language":"MS","value":"Dayakan Pengesahan Cap Jari?"},{"language":"NL","value":"Vingerafdrukverificatie inschakelen?"},{"language":"NN","value":"Aktivere fingeravtrykk-autentisering?"},{"language":"NO","value":"Aktiver fingeravtrykksautentisering?"},{"language":"PL","value":"Włączyć uwierzytelnianie odciskiem palca?"},{"language":"PT","value":"Ativar autenticação por impressão digital?"},{"language":"RO","value":"Activați autentificarea cu amprentă?"},{"language":"RU","value":"Включить аутентификацию по отпечатку пальца?"},{"language":"SH","value":"Omogućiti autentifikaciju otiskom prsta?"},{"language":"SK","value":"Povoliť autentifikáciu odtlačkom prsta?"},{"language":"SL","value":"Omogočiti preverjanje pristnosti s prstnim odtisom?"},{"language":"SR","value":"Омогућити аутентификацију отиском прста?"},{"language":"SV","value":"Aktivera fingeravtrycksautentisering?"},{"language":"TH","value":"เปิดใช้งานการรับรองความถูกต้องด้วยลายนิ้วมือหรือไม่"},{"language":"TR","value":"Parmak İzi Kimlik Doğrulaması etkinleştirilsin mi?"},{"language":"UK","value":"Увімкнути автентифікацію за відбитками пальців?"},{"language":"ZF","value":"啟用指紋驗證？"},{"language":"ZH","value":"启用指纹认证吗？"}]}],"fieldPos":540},{"fieldNo":"e65b4a8e-3d32-4e06-9a4a-f657ef311e80","fieldName":"AppCache_tEnableFaceId","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Enable Face-ID Authentication?","script":"","translation":[{"language":"AF","value":"Aktiveer Face-ID-stawing?"},{"language":"AR","value":"تمكين مصادقة الوجه؟"},{"language":"BG","value":"Да се активира ли удостоверяването чрез Face-ID?"},{"language":"CA","value":"Habilitar l'autenticació Face-ID?"},{"language":"CS","value":"Povolit ověřování Face-ID?"},{"language":"DA","value":"Aktivér ansigts-id-godkendelse?"},{"language":"DE","value":"Face-ID Authentifizierung aktivieren?"},{"language":"EL","value":"Ενεργοποίηση Face-ID Authentication"},{"language":"EN","value":"Enable Face-ID Authentication?"},{"language":"ES","value":"¿Habilitar la autenticación Face-ID?"},{"language":"ET","value":"Kas lubada Face-ID autentimine?"},{"language":"FI","value":"Otetaanko Face-ID-todennus käyttöön?"},{"language":"FR","value":"Activer l'authentification Face-ID ?"},{"language":"HE","value":"להפעיל אימות Face-ID?"},{"language":"HR","value":"Omogućiti Face-ID autentifikaciju?"},{"language":"HU","value":"Engedélyezi a Face-ID hitelesítést?"},{"language":"ID","value":"Aktifkan Otentikasi ID Wajah?"},{"language":"IS","value":"Virkja Face-ID auðkenningu?"},{"language":"IT","value":"Abilitare l'autenticazione Face ID?"},{"language":"JA","value":"FaceID認証を有効にしますか?"},{"language":"KO","value":"Face-ID 인증을 활성화하시겠습니까?"},{"language":"LT","value":"Įgalinti veido ID autentifikavimą?"},{"language":"LV","value":"Vai iespējot sejas ID autentifikāciju?"},{"language":"MS","value":"Dayakan Pengesahan Face-ID?"},{"language":"NL","value":"Face-ID-authenticatie inschakelen?"},{"language":"NN","value":"Aktivere Face-ID-autentisering?"},{"language":"NO","value":"Aktiver ansikts-ID-godkjenning?"},{"language":"PL","value":"Włączyć uwierzytelnianie za pomocą Face-ID?"},{"language":"PT","value":"Ativar autenticação de ID facial?"},{"language":"RO","value":"Activați autentificarea Face-ID?"},{"language":"RU","value":"Включить аутентификацию Face-ID?"},{"language":"SH","value":"Omogućiti autentifikaciju prepoznavanjem lica?"},{"language":"SK","value":"Povoliť overenie Face-ID?"},{"language":"SL","value":"Omogočiti preverjanje pristnosti Face-ID?"},{"language":"SR","value":"Омогућити Фаце-ИД аутентификацију?"},{"language":"SV","value":"Aktivera Face-ID-autentisering?"},{"language":"TH","value":"เปิดใช้งานการตรวจสอบสิทธิ์ Face-ID หรือไม่"},{"language":"TR","value":"Face-ID Kimlik Doğrulaması etkinleştirilsin mi?"},{"language":"UK","value":"Увімкнути автентифікацію Face-ID?"},{"language":"ZF","value":"啟用面容識別驗證？"},{"language":"ZH","value":"启用 Face ID 身份验证吗？"}]}],"fieldPos":541},{"fieldNo":"f0ff7faf-a8d1-41d0-f682-c0ee23bc46ad","fieldName":"AppCache_tRestartForced","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"System settings received.","script":"","translation":[{"language":"AF","value":"Stelselinstellings ontvang."},{"language":"AR","value":"تم استلام إعدادات النظام."},{"language":"BG","value":"Системните настройки са получени."},{"language":"CA","value":"S'ha rebut la configuració del sistema."},{"language":"CS","value":"Systémová nastavení přijata."},{"language":"DA","value":"Systemindstillinger modtaget."},{"language":"DE","value":"Systemeinstellungen erhalten"},{"language":"EL","value":"Λήφθηκαν οι ρυθμίσεις συστήματος."},{"language":"EN","value":"System settings received."},{"language":"ES","value":"Configuración del sistema recibida."},{"language":"ET","value":"Süsteemi seaded on vastu võetud."},{"language":"FI","value":"Järjestelmäasetukset vastaanotettu."},{"language":"FR","value":"Paramètres système reçus."},{"language":"HE","value":"הגדרות המערכת התקבלו."},{"language":"HR","value":"Postavke sustava primljene."},{"language":"HU","value":"A rendszerbeállítások megérkeztek."},{"language":"ID","value":"Pengaturan sistem diterima."},{"language":"IS","value":"Kerfisstillingar mótteknar."},{"language":"IT","value":"Impostazioni di sistema ricevute."},{"language":"JA","value":"システム設定を受信しました。"},{"language":"KO","value":"시스템 설정이 수신되었습니다."},{"language":"LT","value":"Gauti sistemos nustatymai."},{"language":"LV","value":"Saņemti sistēmas iestatījumi."},{"language":"MS","value":"Tetapan sistem diterima."},{"language":"NL","value":"Systeeminstellingen ontvangen."},{"language":"NN","value":"Systeminnstillingar mottatt."},{"language":"NO","value":"Systeminnstillinger mottatt."},{"language":"PL","value":"Otrzymano ustawienia systemowe."},{"language":"PT","value":"Configurações do sistema recebidas."},{"language":"RO","value":"Au primit setări de sistem."},{"language":"RU","value":"Системные настройки получены."},{"language":"SH","value":"Sistemski podešavanja primljena."},{"language":"SK","value":"Prijaté systémové nastavenia."},{"language":"SL","value":"Sistemske nastavitve prejete."},{"language":"SR","value":"Подешавања система су примљена."},{"language":"SV","value":"Systeminställningar mottagna."},{"language":"TH","value":"ได้รับการตั้งค่าระบบแล้ว"},{"language":"TR","value":"Sistem ayarları alındı."},{"language":"UK","value":"Системні налаштування отримані."},{"language":"ZF","value":"已接收系統設定。"},{"language":"ZH","value":"收到系统设置。"}]}],"fieldPos":542},{"fieldNo":"69aece2a-08b3-4c88-c970-2bdf6819d890","fieldName":"AppCache_tOpen","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Open","script":"","translation":[{"language":"AF","value":"Maak oop"},{"language":"AR","value":"يفتح"},{"language":"BG","value":"Отворете"},{"language":"CA","value":"Obert"},{"language":"CS","value":"OTEVŘENO"},{"language":"DA","value":"Åben"},{"language":"DE","value":"Öffnen"},{"language":"EL","value":"Ανοιξε"},{"language":"EN","value":"Open"},{"language":"ES","value":"Abierto"},{"language":"ET","value":"Avatud"},{"language":"FI","value":"Avata"},{"language":"FR","value":"Ouvrir"},{"language":"HE","value":"לִפְתוֹחַ"},{"language":"HR","value":"Otvoren"},{"language":"HU","value":"Nyisd ki"},{"language":"ID","value":"Membuka"},{"language":"IS","value":"Opið"},{"language":"IT","value":"Aprire"},{"language":"JA","value":"開ける"},{"language":"KO","value":"열려 있는"},{"language":"LT","value":"Atviras"},{"language":"LV","value":"Atvērt"},{"language":"MS","value":"Buka"},{"language":"NL","value":"Open"},{"language":"NN","value":"Åpne"},{"language":"NO","value":"Åpne"},{"language":"PL","value":"otwarty"},{"language":"PT","value":"Abrir"},{"language":"RO","value":"Deschis"},{"language":"RU","value":"Открыть"},{"language":"SH","value":"Otvori"},{"language":"SK","value":"OTVORENÉ"},{"language":"SL","value":"Odprto"},{"language":"SR","value":"Отвори"},{"language":"SV","value":"Öppen"},{"language":"TH","value":"เปิด"},{"language":"TR","value":"Açık"},{"language":"UK","value":"ВІДЧИНЕНО"},{"language":"ZF","value":"打開"},{"language":"ZH","value":"打开"}]}],"fieldPos":543},{"fieldNo":"d8e9b1a5-c0ae-436b-a967-7365ef325774","fieldName":"AppCache_tAddFav","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Add to favorite","script":"","translation":[{"language":"AF","value":"Voeg by gunsteling"},{"language":"AR","value":"أضف إلى المفضلة"},{"language":"BG","value":"Добавяне към любими"},{"language":"CA","value":"Afegeix a preferit"},{"language":"CS","value":"Přidat do oblíbených"},{"language":"DA","value":"Tilføj til favorit"},{"language":"DE","value":"Zu Favoriten hinzufügen"},{"language":"EL","value":"Προσθήκη στα αγαπημένα"},{"language":"EN","value":"Add to favorite"},{"language":"ES","value":"Agregar a Favoritos"},{"language":"ET","value":"Lisa lemmikutesse"},{"language":"FI","value":"Lisää suosikkeihin"},{"language":"FR","value":"Ajouter aux Favoris"},{"language":"HE","value":"הוסף למועדף"},{"language":"HR","value":"Dodaj u favorite"},{"language":"HU","value":"Hozzáadás a kedvencekhez"},{"language":"ID","value":"Tambahkan ke favorit"},{"language":"IS","value":"Bæta við uppáhalds"},{"language":"IT","value":"Aggiungi ai favoriti"},{"language":"JA","value":"お気に入りに追加"},{"language":"KO","value":"즐겨찾기에 추가"},{"language":"LT","value":"Pridėti prie mėgstamiausių"},{"language":"LV","value":"Pievienot izlasei"},{"language":"MS","value":"Tambah ke kegemaran"},{"language":"NL","value":"Toevoegen aan favorieten"},{"language":"NN","value":"Legg til i favoritt"},{"language":"NO","value":"Legg til i favoritter"},{"language":"PL","value":"Dodaj do ulubionych"},{"language":"PT","value":"Adicionar aos favoritos"},{"language":"RO","value":"Adaugă la favorite"},{"language":"RU","value":"Добавить в любимое"},{"language":"SH","value":"Dodaj u omiljene"},{"language":"SK","value":"Pridať k obľúbeným"},{"language":"SL","value":"Dodaj med priljubljene"},{"language":"SR","value":"Додај у омиљене"},{"language":"SV","value":"Lägg i favoriter"},{"language":"TH","value":"เพิ่มในรายการโปรด"},{"language":"TR","value":"Favorilere ekle"},{"language":"UK","value":"Додати в улюблені"},{"language":"ZF","value":"添加到收藏夾"},{"language":"ZH","value":"加入我的最爱"}]}],"fieldPos":544},{"fieldNo":"5903fbe0-c019-4e63-8cf7-bb2d5019a1af","fieldName":"AppCache_tDelFav","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Delete from favorite","script":"","translation":[{"language":"AF","value":"Vee uit gunsteling"},{"language":"AR","value":"حذف من المفضلة"},{"language":"BG","value":"Изтриване от любими"},{"language":"CA","value":"Suprimeix dels preferits"},{"language":"CS","value":"Smazat z oblíbených"},{"language":"DA","value":"Slet fra favorit"},{"language":"DE","value":"Aus Favoriten enfernen"},{"language":"EL","value":"Διαγραφή από το αγαπημένο"},{"language":"EN","value":"Delete from favorite"},{"language":"ES","value":"Eliminar de favoritos"},{"language":"ET","value":"Kustuta lemmikust"},{"language":"FI","value":"Poista suosikeista"},{"language":"FR","value":"Supprimer des favoris"},{"language":"HE","value":"מחק מהמועדף"},{"language":"HR","value":"Izbriši iz favorita"},{"language":"HU","value":"Törlés a kedvencekből"},{"language":"ID","value":"Hapus dari favorit"},{"language":"IS","value":"Eyða úr uppáhalds"},{"language":"IT","value":"Elimina dai preferiti"},{"language":"JA","value":"お気に入りから削除"},{"language":"KO","value":"즐겨찾기에서 삭제"},{"language":"LT","value":"Ištrinti iš mėgstamiausių"},{"language":"LV","value":"Dzēst no izlases"},{"language":"MS","value":"Padam daripada kegemaran"},{"language":"NL","value":"Verwijderen uit favoriet"},{"language":"NN","value":"Slett frå favoritt"},{"language":"NO","value":"Fjern fra favoritter"},{"language":"PL","value":"Usuń z ulubionych"},{"language":"PT","value":"Excluir dos favoritos"},{"language":"RO","value":"Ștergeți din favorite"},{"language":"RU","value":"Удалить из избранного"},{"language":"SH","value":"Izbriši iz omiljenih"},{"language":"SK","value":"Odstrániť z obľúbených"},{"language":"SL","value":"Izbriši iz priljubljenih"},{"language":"SR","value":"Избриши из фаворита"},{"language":"SV","value":"Ta bort från favorit"},{"language":"TH","value":"ลบออกจากรายการโปรด"},{"language":"TR","value":"Favorilerden sil"},{"language":"UK","value":"Видалити з вибраного"},{"language":"ZF","value":"從收藏夾中刪除"},{"language":"ZH","value":"从收藏夹中删除"}]}],"fieldPos":545},{"fieldNo":"b423f8c6-2812-4533-e7a2-529484fb3e37","fieldName":"AppCache_tHelp","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Help","script":"","translation":[{"language":"AF","value":"Help"},{"language":"AR","value":"يساعد"},{"language":"BG","value":"Помогне"},{"language":"CA","value":"Ajuda"},{"language":"CS","value":"Pomoc"},{"language":"DA","value":"Hjælp"},{"language":"DE","value":"Hilfe"},{"language":"EL","value":"Βοήθεια"},{"language":"EN","value":"Help"},{"language":"ES","value":"Ayuda"},{"language":"ET","value":"Abi"},{"language":"FI","value":"auta"},{"language":"FR","value":"Aide"},{"language":"HE","value":"עֶזרָה"},{"language":"HR","value":"Pomozite"},{"language":"HU","value":"Segítség"},{"language":"ID","value":"Membantu"},{"language":"IS","value":"Hjálp"},{"language":"IT","value":"Aiuto"},{"language":"JA","value":"ヘルプ"},{"language":"KO","value":"돕다"},{"language":"LT","value":"Pagalba"},{"language":"LV","value":"Palīdzība"},{"language":"MS","value":"Tolong"},{"language":"NL","value":"Hulp"},{"language":"NN","value":"Hjelp"},{"language":"NO","value":"Hjelp"},{"language":"PL","value":"Pomoc"},{"language":"PT","value":"Ajuda"},{"language":"RO","value":"Ajutor"},{"language":"RU","value":"Помощь"},{"language":"SH","value":"Pomoć"},{"language":"SK","value":"Pomoc"},{"language":"SL","value":"pomoč"},{"language":"SR","value":"Помоћ"},{"language":"SV","value":"Hjälp"},{"language":"TH","value":"ช่วย"},{"language":"TR","value":"Yardım"},{"language":"UK","value":"Довідка"},{"language":"ZF","value":"幫助"},{"language":"ZH","value":"帮助"}]}],"fieldPos":546},{"fieldNo":"8fb6e584-2686-4de3-93d0-29729b1d30e1","fieldName":"AppCache_tResize","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Resize","script":"","translation":[{"language":"AF","value":"Verander grootte"},{"language":"AR","value":"تغيير الحجم"},{"language":"BG","value":"Преоразмеряване"},{"language":"CA","value":"Canvia la mida"},{"language":"CS","value":"Změnit velikost"},{"language":"DA","value":"Ændr størrelse"},{"language":"DE","value":"Größe ändern"},{"language":"EL","value":"Αλλαγή μεγέθους"},{"language":"ES","value":"Cambiar tamaño"},{"language":"ET","value":"Muuda suurust"},{"language":"FI","value":"Muuta kokoa"},{"language":"FR","value":"Redimensionner"},{"language":"HE","value":"שנה גודל"},{"language":"HR","value":"Promjena veličine"},{"language":"HU","value":"Átméretezés"},{"language":"ID","value":"Ubah ukuran"},{"language":"IS","value":"Breyta stærð"},{"language":"IT","value":"Ridimensionare"},{"language":"JA","value":"サイズ変更"},{"language":"KO","value":"크기 조정"},{"language":"LT","value":"Pakeisti dydį"},{"language":"LV","value":"Mainīt izmērus"},{"language":"MS","value":"Ubah saiz"},{"language":"NL","value":"Formaat wijzigen"},{"language":"NN","value":"Endre størrelse"},{"language":"NO","value":"Endre størrelse"},{"language":"PL","value":"Zmień rozmiar"},{"language":"PT","value":"Redimensionar"},{"language":"RO","value":"Redimensionați"},{"language":"RU","value":"Изменить размер"},{"language":"SE","value":"Stuorit"},{"language":"SH","value":"Promeni veličinu"},{"language":"SK","value":"Zmeniť veľkosť"},{"language":"SL","value":"Spremeni velikost"},{"language":"SR","value":"Промените величину"},{"language":"SV","value":"Ändra storlek"},{"language":"TH","value":"ปรับขนาด"},{"language":"TR","value":"Yeniden boyutlandır"},{"language":"UK","value":"Змінити розмір"},{"language":"ZF","value":"調整大小"},{"language":"ZH","value":"调整大小"}]}],"fieldPos":547},{"fieldNo":"09cc1170-1730-401b-cff2-71f9b943eed5","fieldName":"AppCache_tDelFavConfirm","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Do you want to remove this tile from your favorites ?","script":"","translation":[{"language":"AF","value":"Wil jy hierdie teël van jou gunstelinge verwyder?"},{"language":"AR","value":"هل تريد إزالة هذا البلاط من المفضلة لديك؟"},{"language":"BG","value":"Искате ли да премахнете тази плочка от любимите си?"},{"language":"CA","value":"Voleu eliminar aquesta fitxa dels vostres preferits?"},{"language":"CS","value":"Chcete odstranit tuto dlaždici ze svých oblíbených položek?"},{"language":"DA","value":"Vil du fjerne denne flise fra dine favoritter?"},{"language":"DE","value":"Möchten Sie diese Kachel aus Ihren Favoriten entfernen?"},{"language":"EL","value":"Θέλετε να αφαιρέσετε αυτό το πλακίδιο από τα αγαπημένα σας"},{"language":"EN","value":"Do you want to remove this tile from your favorites ?"},{"language":"ES","value":"¿Quieres eliminar este mosaico de tus favoritos?"},{"language":"ET","value":"Kas soovite selle plaadi oma lemmikute hulgast eemaldada?"},{"language":"FI","value":"Haluatko poistaa tämän laatan suosikeistasi?"},{"language":"FR","value":"Voulez-vous supprimer cette tuile de vos favoris ?"},{"language":"HE","value":"האם אתה רוצה להסיר את האריח הזה מהמועדפים שלך?"},{"language":"HR","value":"Želite li ukloniti ovu pločicu iz svojih favorita?"},{"language":"HU","value":"El szeretné távolítani ezt a csempét a kedvencei közül?"},{"language":"ID","value":"Apakah Anda ingin menghapus ubin ini dari favorit Anda?"},{"language":"IS","value":"Viltu fjarlægja þessa flís úr uppáhöldum þínum?"},{"language":"IT","value":"Vuoi rimuovere questa tessera dai preferiti?"},{"language":"JA","value":"このタイルをお気に入りから削除しますか?"},{"language":"KO","value":"즐겨찾기에서 이 타일을 제거하시겠습니까?"},{"language":"LT","value":"Ar norite pašalinti šią plytelę iš mėgstamiausių?"},{"language":"LV","value":"Vai vēlaties noņemt šo elementu no saviem izlases veidiem?"},{"language":"MS","value":"Adakah anda mahu mengalih keluar jubin ini daripada kegemaran anda?"},{"language":"NL","value":"Wil je deze tegel uit je favorieten verwijderen?"},{"language":"NN","value":"Vil du fjerne denne flisen frå favorittane dine?"},{"language":"NO","value":"Vil du fjerne denne flisen fra favorittene dine?"},{"language":"PL","value":"Czy chcesz usunąć ten kafelek z ulubionych?"},{"language":"PT","value":"Deseja remover este bloco dos seus favoritos?"},{"language":"RO","value":"Doriți să eliminați această piesă din favorite?"},{"language":"RU","value":"Вы хотите удалить эту плитку из избранного?"},{"language":"SH","value":"Da li želite da uklonite ovu pločicu iz omiljenih?"},{"language":"SK","value":"Chcete odstrániť túto dlaždicu zo svojich obľúbených položiek?"},{"language":"SL","value":"Ali želite to ploščico odstraniti iz svojih priljubljenih?"},{"language":"SR","value":"Да ли желите да уклоните ову плочицу из омиљених?"},{"language":"SV","value":"Vill du ta bort den här brickan från dina favoriter?"},{"language":"TH","value":"คุณต้องการลบไทล์นี้ออกจากรายการโปรดของคุณหรือไม่?"},{"language":"TR","value":"Bu döşemeyi favorilerinizden kaldırmak istiyor musunuz?"},{"language":"UK","value":"Ви хочете видалити цю плитку з вибраного?"},{"language":"ZF","value":"您想從收藏夾中刪除此圖塊嗎？"},{"language":"ZH","value":"您想从您的收藏夹中删除此图块吗？"}]}],"fieldPos":548},{"fieldNo":"6f1d0aa8-5051-4d36-894b-0a36d71c46fa","fieldName":"AppCache_tFavTitle","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Favorite","script":"","translation":[{"language":"AF","value":"Gunsteling"},{"language":"AR","value":"مفضل"},{"language":"BG","value":"Любима"},{"language":"CA","value":"Favorit"},{"language":"CS","value":"Oblíbený"},{"language":"DA","value":"Favorit"},{"language":"DE","value":"Favorit"},{"language":"EL","value":"Αγαπημένη"},{"language":"EN","value":"Favorite"},{"language":"ES","value":"Favorito"},{"language":"ET","value":"Lemmik"},{"language":"FI","value":"Suosikki"},{"language":"FR","value":"Préféré"},{"language":"HE","value":"אהוב"},{"language":"HR","value":"omiljena"},{"language":"HU","value":"Kedvenc"},{"language":"ID","value":"Favorit"},{"language":"IS","value":"Uppáhalds"},{"language":"IT","value":"Preferito"},{"language":"JA","value":"お気に入り"},{"language":"KO","value":"가장 좋아하는"},{"language":"LT","value":"Mėgstamiausias"},{"language":"LV","value":"Mīļākais"},{"language":"MS","value":"Kegemaran"},{"language":"NL","value":"Favoriet"},{"language":"NN","value":"Favoritt"},{"language":"NO","value":"Favoritt"},{"language":"PL","value":"Ulubiony"},{"language":"PT","value":"Favorito"},{"language":"RO","value":"Favorit"},{"language":"RU","value":"Любимый"},{"language":"SH","value":"Omiljeno"},{"language":"SK","value":"Obľúbené"},{"language":"SL","value":"Najljubša"},{"language":"SR","value":"Фаворите"},{"language":"SV","value":"Favorit"},{"language":"TH","value":"ที่ชื่นชอบ"},{"language":"TR","value":"Favori"},{"language":"UK","value":"улюблений"},{"language":"ZF","value":"收藏"},{"language":"ZH","value":"最喜欢的"}]}],"fieldPos":549},{"fieldNo":"f1fc7eb3-d891-4a82-94b7-597c9859380b","fieldName":"AppCache_tFavConfirm","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Confirmation needed","script":"","translation":[{"language":"AF","value":"Bevestiging benodig"},{"language":"AR","value":"التأكيد مطلوب"},{"language":"BG","value":"Необходимо е потвърждение"},{"language":"CA","value":"Necessita confirmació"},{"language":"CS","value":"Je potřeba potvrzení"},{"language":"DA","value":"Bekræftelse nødvendig"},{"language":"DE","value":"Bestätigung erforderlich"},{"language":"EL","value":"Χρειάζεται επιβεβαίωση"},{"language":"EN","value":"Confirmation needed"},{"language":"ES","value":"Se necesita confirmación"},{"language":"ET","value":"Vajalik kinnitus"},{"language":"FI","value":"Vahvistus tarvitaan"},{"language":"FR","value":"Confirmation nécessaire"},{"language":"HE","value":"דרוש אישור"},{"language":"HR","value":"Potrebna potvrda"},{"language":"HU","value":"Megerősítés szükséges"},{"language":"ID","value":"Diperlukan konfirmasi"},{"language":"IS","value":"Staðfesting þarf"},{"language":"IT","value":"Serve conferma"},{"language":"JA","value":"要確認"},{"language":"KO","value":"확인 필요"},{"language":"LT","value":"Reikalingas patvirtinimas"},{"language":"LV","value":"Nepieciešams apstiprinājums"},{"language":"MS","value":"Pengesahan diperlukan"},{"language":"NL","value":"Bevestiging nodig"},{"language":"NN","value":"Bekreftelse nødvendig"},{"language":"NO","value":"Bekreftelse nødvendig"},{"language":"PL","value":"Potrzebne potwierdzenie"},{"language":"PT","value":"Confirmação necessária"},{"language":"RO","value":"Este nevoie de confirmare"},{"language":"RU","value":"Требуется подтверждение"},{"language":"SH","value":"Potrebna potvrda"},{"language":"SK","value":"Potrebné potvrdenie"},{"language":"SL","value":"Potrebna je potrditev"},{"language":"SR","value":"Потребна потврда"},{"language":"SV","value":"Bekräftelse behövs"},{"language":"TH","value":"จำเป็นต้องมีการยืนยัน"},{"language":"TR","value":"Onay gerekiyor"},{"language":"UK","value":"Потрібне підтвердження"},{"language":"ZF","value":"需要確認"},{"language":"ZH","value":"需要确认"}]}],"fieldPos":550},{"fieldNo":"47fb3e99-1899-4636-b064-8ad1b6e3ba6a","fieldName":"AppCache_tDelFavRemove","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Yes, remove","script":"","translation":[{"language":"AF","value":"Ja, verwyder"},{"language":"AR","value":"نعم، إزالة"},{"language":"BG","value":"Да, премахнете"},{"language":"CA","value":"Sí, elimina"},{"language":"CS","value":"Ano, odstranit"},{"language":"DA","value":"Ja, fjern"},{"language":"DE","value":"Ja, entfernen"},{"language":"EL","value":"Ναι, αφαιρέστε"},{"language":"EN","value":"Yes, remove"},{"language":"ES","value":"Sí, eliminar"},{"language":"ET","value":"Jah, eemalda"},{"language":"FI","value":"Kyllä, poista"},{"language":"FR","value":"Oui, supprimer"},{"language":"HE","value":"כן, להסיר"},{"language":"HR","value":"Da, ukloniti"},{"language":"HU","value":"Igen, távolítsa el"},{"language":"ID","value":"Ya, hapus"},{"language":"IS","value":"Já, fjarlægðu"},{"language":"IT","value":"Sì, rimuovi"},{"language":"JA","value":"はい、削除します"},{"language":"KO","value":"예, 삭제합니다"},{"language":"LT","value":"Taip, pašalinti"},{"language":"LV","value":"Jā, noņemt"},{"language":"MS","value":"Ya, keluarkan"},{"language":"NL","value":"Ja, verwijderen"},{"language":"NN","value":"Ja, fjern"},{"language":"NO","value":"Ja, fjern"},{"language":"PL","value":"Tak, usuń"},{"language":"PT","value":"Sim, remova"},{"language":"RO","value":"Da, elimina"},{"language":"RU","value":"Да, удалить"},{"language":"SH","value":"Da, ukloni"},{"language":"SK","value":"Áno, odstrániť"},{"language":"SL","value":"Da, odstrani"},{"language":"SR","value":"Да, уклоните"},{"language":"SV","value":"Ja, ta bort"},{"language":"TH","value":"ใช่ ลบออก"},{"language":"TR","value":"Evet, kaldır"},{"language":"UK","value":"Так, видалити"},{"language":"ZF","value":"是的，刪除"},{"language":"ZH","value":"是的，删除"}]}],"fieldPos":551},{"fieldNo":"a63636f4-e1da-4006-a381-5b4f304ea1d5","fieldName":"AppCache_tIncompatible","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Incompatible","script":"","translation":[{"language":"AF","value":"Onversoenbaar"},{"language":"AR","value":"غير متوافق"},{"language":"BG","value":"Несъвместим"},{"language":"CA","value":"Incompatible"},{"language":"CS","value":"Nekompatibilní"},{"language":"DA","value":"Uforenelig"},{"language":"DE","value":"Inkompatibel"},{"language":"EL","value":"Ασύμβατες"},{"language":"EN","value":"Incompatible"},{"language":"ES","value":"Incompatible"},{"language":"ET","value":"Sobimatu"},{"language":"FI","value":"Yhteensopimaton"},{"language":"FR","value":"Incompatible"},{"language":"HE","value":"שאינו עולה בקנה אחד"},{"language":"HR","value":"Nespojivo"},{"language":"HU","value":"Összeegyeztethetetlen"},{"language":"ID","value":"Tidak kompatibel"},{"language":"IS","value":"Ósamrýmanlegt"},{"language":"IT","value":"Incompatibile"},{"language":"JA","value":"非互換"},{"language":"KO","value":"호환되지 않음"},{"language":"LT","value":"Nesuderinamas"},{"language":"LV","value":"Nesaderīgs"},{"language":"MS","value":"Tidak serasi"},{"language":"NL","value":"Onverenigbaar"},{"language":"NN","value":"Inkompatibel"},{"language":"NO","value":"Uforenlig"},{"language":"PL","value":"Niekompatybilny"},{"language":"PT","value":"Incompatível"},{"language":"RO","value":"Incompatibil"},{"language":"RU","value":"Несовместимый"},{"language":"SH","value":"Nekompatibilno"},{"language":"SK","value":"Nekompatibilné"},{"language":"SL","value":"Nezdružljivo"},{"language":"SR","value":"Некомпатибилно"},{"language":"SV","value":"Oförenlig"},{"language":"TH","value":"เข้ากันไม่ได้"},{"language":"TR","value":"Uyumsuz"},{"language":"UK","value":"Несумісні"},{"language":"ZF","value":"不相容"},{"language":"ZH","value":"不相容"}]}],"fieldPos":552},{"fieldNo":"fab29f6e-8c35-4b7c-bda6-dd2b42e2d14f","fieldName":"AppCache_tWrongPin","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Wrong Pin Code!","script":"","translation":[{"language":"AF","value":"Verkeerde PIN-kode!"},{"language":"AR","value":"رمز التعريف الشخصي خاطئ!"},{"language":"BG","value":"Грешен ПИН код!"},{"language":"CA","value":"Codi PIN incorrecte!"},{"language":"CS","value":"Špatný PIN kód!"},{"language":"DA","value":"Forkert pinkode!"},{"language":"DE","value":"Falscher PIN-Code!"},{"language":"EL","value":"Λάθος PIN!"},{"language":"EN","value":"Wrong Pin Code!"},{"language":"ES","value":"¡Código PIN incorrecto!"},{"language":"ET","value":"Vale PIN-kood!"},{"language":"FI","value":"Väärä PIN-koodi!"},{"language":"FR","value":"Mauvais code PIN !"},{"language":"HE","value":"קוד PIN שגוי!"},{"language":"HR","value":"Pogrešan PIN kod!"},{"language":"HU","value":"Hibás PIN kód!"},{"language":"ID","value":"Kode Pin Salah!"},{"language":"IS","value":"Rangt PIN-númer!"},{"language":"IT","value":"Codice PIN errato!"},{"language":"JA","value":"PIN コードが間違っています!"},{"language":"KO","value":"잘못된 핀 코드입니다!"},{"language":"LT","value":"Neteisingas PIN kodas!"},{"language":"LV","value":"Nepareizs PIN kods!"},{"language":"MS","value":"Kod Pin Salah!"},{"language":"NL","value":"Verkeerde pincode!"},{"language":"NN","value":"Feil PIN-kode!"},{"language":"NO","value":"Feil pinkode!"},{"language":"PL","value":"Zły kod PIN!"},{"language":"PT","value":"Código PIN errado!"},{"language":"RO","value":"Cod PIN greșit!"},{"language":"RU","value":"Неверный пин-код!"},{"language":"SH","value":"Pogrešan PIN kod!"},{"language":"SK","value":"Nesprávny PIN kód!"},{"language":"SL","value":"Napačna PIN koda!"},{"language":"SR","value":"Погрешан ПИН код!"},{"language":"SV","value":"Fel pinkod!"},{"language":"TH","value":"รหัสพินผิด!"},{"language":"TR","value":"Yanlış Pin Kodu!"},{"language":"UK","value":"Неправильний PIN-код!"},{"language":"ZF","value":"錯誤的PIN碼！"},{"language":"ZH","value":"密码错误！"}]}],"fieldPos":553},{"fieldNo":"4e67fdd6-62e7-46f5-ed4a-5ef98c192e3f","fieldName":"AppCache_tNoUserInfo","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"No stored user info found. Please re-login","script":"","translation":[{"language":"AF","value":"Geen gestoorde gebruikerinligting gevind nie. Meld asseblief weer aan"},{"language":"AR","value":"لم يتم العثور على معلومات المستخدم المخزنة. الرجاء إعادة تسجيل الدخول"},{"language":"BG","value":"Не е намерена съхранена потребителска информация. Моля, влезте отново"},{"language":"CA","value":"No s'ha trobat cap informació d'usuari emmagatzemada. Si us plau, torneu a iniciar sessió"},{"language":"CS","value":"Nebyly nalezeny žádné uložené informace o uživateli. Prosím znovu se přihlaste"},{"language":"DA","value":"Uforenelig"},{"language":"DE","value":"Inkompatibel"},{"language":"EL","value":"Δεν βρέθηκαν αποθηκευμένες πληροφορίες χρήστη. Παρακαλούμε συνδεθείτε ξανά"},{"language":"EN","value":"No stored user info found. Please re-login"},{"language":"ES","value":"No se encontró información de usuario almacenada. Por favor vuelve a iniciar sesión"},{"language":"ET","value":"Salvestatud kasutajateavet ei leitud. Palun logige uuesti sisse"},{"language":"FI","value":"Tallennettuja käyttäjätietoja ei löytynyt. Kirjaudu uudelleen"},{"language":"FR","value":"Aucune information utilisateur stockée trouvée. Veuillez vous reconnecter"},{"language":"HE","value":"לא נמצא פרטי משתמש מאוחסן. אנא התחבר מחדש"},{"language":"HR","value":"Nisu pronađene pohranjene korisničke informacije. Molimo ponovno se prijavite"},{"language":"HU","value":"Nem található tárolt felhasználói információ. Kérjük, jelentkezzen be újra"},{"language":"ID","value":"Tidak ditemukan info pengguna tersimpan. Silakan login ulang"},{"language":"IS","value":"Engar vistaðar notendaupplýsingar fundust. Vinsamlegast skráðu þig aftur inn"},{"language":"IT","value":"Nessuna informazione utente memorizzata trovata. Effettua nuovamente l'accesso"},{"language":"JA","value":"保存されているユーザー情報が見つかりません。再ログインしてください"},{"language":"KO","value":"저장된 사용자 정보를 찾을 수 없습니다. 다시 로그인해주세요"},{"language":"LT","value":"Išsaugotos naudotojo informacijos nerasta. Prašome prisijungti iš naujo"},{"language":"LV","value":"Netika atrasta saglabāta lietotāja informācija. Lūdzu, piesakieties atkārtoti"},{"language":"MS","value":"Tiada maklumat pengguna yang disimpan ditemui. Sila log masuk semula"},{"language":"NL","value":"Geen opgeslagen gebruikersinformatie gevonden. Gelieve opnieuw in te loggen"},{"language":"NN","value":"Ingen lagret brukerinformasjon funnet. Logg inn på nytt"},{"language":"NO","value":"Fant ingen lagret brukerinformasjon. Vennligst logg inn på nytt"},{"language":"PL","value":"Nie znaleziono zapisanych informacji o użytkowniku. Zaloguj się ponownie"},{"language":"PT","value":"Nenhuma informação de usuário armazenada encontrada. Faça login novamente"},{"language":"RO","value":"Nu au fost găsite informații despre utilizator stocate. Vă rugăm să reconectați-vă"},{"language":"RU","value":"Сохраненная информация о пользователе не найдена. Пожалуйста, повторно войдите в систему"},{"language":"SH","value":"Nisu pronađeni podaci o korisniku. Molimo prijavite se ponovo"},{"language":"SK","value":"Nenašli sa žiadne uložené informácie o používateľovi. Prihláste sa znova"},{"language":"SL","value":"Ni shranjenih podatkov o uporabniku. Prosim ponovno se prijavite"},{"language":"SR","value":"Нису пронађени сачувани подаци о кориснику. Молимо вас да се поново пријавите"},{"language":"SV","value":"Ingen lagrad användarinformation hittades. Vänligen logga in igen"},{"language":"TH","value":"ไม่พบข้อมูลผู้ใช้ที่เก็บไว้ กรุณาเข้าสู่ระบบใหม่"},{"language":"TR","value":"Saklanan kullanıcı bilgisi bulunamadı. Lütfen yeniden giriş yapın"},{"language":"UK","value":"Збережену інформацію про користувача не знайдено. Увійдіть повторно"},{"language":"ZF","value":"找不到存儲的用戶信息。請重新登錄"},{"language":"ZH","value":"未找到存储的用户信息。请重新登录"}]}],"fieldPos":554},{"fieldNo":"bf54fdb1-a0ac-405c-c65f-70dfc0c2403c","fieldName":"AppCache_tDownloading","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Downloading new version","script":"","translation":[{"language":"1","value":"下载新版本"},{"language":"AF","value":"Laai tans nuwe weergawe af"},{"language":"AR","value":"تحميل النسخة الجديدة"},{"language":"BG","value":"Изтегля се нова версия"},{"language":"CA","value":"S'està baixant la nova versió"},{"language":"CS","value":"Stahování nové verze"},{"language":"D","value":"Neue Version wird geladen…"},{"language":"DA","value":"Downloader ny version"},{"language":"DE","value":"Neue Version herunterladen"},{"language":"EL","value":"Λήψη νέας έκδοσης"},{"language":"EN","value":"Downloading new version"},{"language":"ES","value":"Descargando nueva versión"},{"language":"ET","value":"Uue versiooni allalaadimine"},{"language":"F","value":"Téléchargement d'une nouvelle version"},{"language":"FI","value":"Ladataan uutta versiota"},{"language":"FR","value":"Téléchargement de la nouvelle version"},{"language":"HE","value":"מוריד גרסה חדשה"},{"language":"HR","value":"Preuzimanje nove verzije"},{"language":"HU","value":"Új verzió letöltése"},{"language":"ID","value":"Mengunduh versi baru"},{"language":"IS","value":"Að sækja nýja útgáfu"},{"language":"IT","value":"Download della nuova versione"},{"language":"JA","value":"新しいバージョンをダウンロードする"},{"language":"K","value":"Downloader ny version..."},{"language":"KO","value":"새 버전 다운로드 중"},{"language":"LT","value":"Atsisiunčiama nauja versija"},{"language":"LV","value":"Notiek jaunas versijas lejupielāde"},{"language":"MS","value":"Memuat turun versi baharu"},{"language":"NL","value":"Nieuwe versie downloaden"},{"language":"NN","value":"Laster ned ny versjon"},{"language":"NO","value":"Laster ned ny versjon"},{"language":"O","value":"Laster ned ny versjon..."},{"language":"P","value":"Download da nova versão"},{"language":"PL","value":"Pobieranie nowej wersji"},{"language":"PT","value":"Baixando nova versão"},{"language":"R","value":"Загрузка новой версии"},{"language":"RO","value":"Se descarcă versiunea nouă"},{"language":"RU","value":"Скачиваем новую версию"},{"language":"S","value":"Descargando nueva versión"},{"language":"SH","value":"Preuzimanje nove verzije"},{"language":"SK","value":"Sťahuje sa nová verzia"},{"language":"SL","value":"Prenašanje nove različice"},{"language":"SR","value":"Преузимање нове верзије"},{"language":"SV","value":"Laddar ner ny version"},{"language":"TH","value":"กำลังดาวน์โหลดเวอร์ชันใหม่"},{"language":"TR","value":"Yeni sürüm indiriliyor"},{"language":"UK","value":"Завантаження нової версії"},{"language":"W","value":"Изтегляне на нова версия"},{"language":"ZF","value":"正在下載新版本"},{"language":"ZH","value":"正在下载新版本"}]}],"fieldPos":555},{"fieldNo":"2b4188c3-1fee-4d9e-b9db-4353624dc0ba","fieldName":"AppCache_tPWAUpdate","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"New version available. Reload required","script":"","translation":[{"language":"1","value":"下载新版本"},{"language":"AF","value":"Nuwe weergawe beskikbaar. Herlaai vereis"},{"language":"AR","value":"الإصدار الجديد متاح. إعادة التحميل مطلوبة"},{"language":"BG","value":"Налична е нова версия. Изисква се презареждане"},{"language":"CA","value":"Nova versió disponible. Cal tornar a carregar"},{"language":"CS","value":"K dispozici nová verze. Je nutné znovu načíst"},{"language":"D","value":"Neue Version wird geladen…"},{"language":"DA","value":"Ny version tilgængelig. Genindlæs påkrævet"},{"language":"DE","value":"Neue Version verfügbar. Neuladen erforderlich"},{"language":"EL","value":"Νέα έκδοση διαθέσιμη. Απαιτείται επαναφόρτωση"},{"language":"EN","value":"New version available. Reload required"},{"language":"ES","value":"Nueva versión disponible. Se requiere recarga"},{"language":"ET","value":"Uus versioon saadaval. Vajalik uuesti laadimine"},{"language":"F","value":"Téléchargement d'une nouvelle version"},{"language":"FI","value":"Uusi versio saatavilla. Uudelleenlataus vaaditaan"},{"language":"FR","value":"Nouvelle version disponible. Rechargement requis"},{"language":"HE","value":"גרסה חדשה זמינה. נדרשת טעינה מחדש"},{"language":"HR","value":"Nova verzija dostupna. Potrebno ponovno učitavanje"},{"language":"HU","value":"Új verzió elérhető. Újratöltés szükséges"},{"language":"ID","value":"Versi baru tersedia. Perlu memuat ulang"},{"language":"IS","value":"Ný útgáfa í boði. Endurhlaða krafist"},{"language":"IT","value":"Nuova versione disponibile. Ricarica necessaria"},{"language":"JA","value":"新しいバージョンが利用可能です。リロードが必要です"},{"language":"K","value":"Downloader ny version..."},{"language":"KO","value":"새 버전을 사용할 수 있습니다. 새로고침 필요"},{"language":"LT","value":"Galima nauja versija. Reikia iš naujo įkelti"},{"language":"LV","value":"Pieejama jauna versija. Nepieciešama atkārtota ielāde"},{"language":"MS","value":"Versi baharu tersedia. Muat semula diperlukan"},{"language":"NL","value":"Nieuwe versie beschikbaar. Herladen vereist"},{"language":"NN","value":"Ny versjon tilgjengelig. Omlasting påkrevd"},{"language":"NO","value":"Ny versjon tilgjengelig. Last inn på nytt"},{"language":"O","value":"Laster ned ny versjon..."},{"language":"P","value":"Download da nova versão"},{"language":"PL","value":"Nowa wersja dostępna. Wymagane ponowne załadowanie"},{"language":"PT","value":"Nova versão disponível. É necessário recarregar"},{"language":"R","value":"Загрузка новой версии"},{"language":"RO","value":"Versiune nouă disponibilă. Este necesară reîncărcarea"},{"language":"RU","value":"Доступна новая версия. Требуется перезагрузка"},{"language":"S","value":"Descargando nueva versión"},{"language":"SH","value":"Nova verzija je dostupna. Potrebno je ponovno učitavanje"},{"language":"SK","value":"K dispozícii je nová verzia. Vyžaduje sa opätovné načítanie"},{"language":"SL","value":"Na voljo nova različica. Potrebno je ponovno nalaganje"},{"language":"SR","value":"Доступна нова верзија. Потребно је поново учитати"},{"language":"SV","value":"Ny version tillgänglig. Ladda om krävs"},{"language":"TH","value":"มีเวอร์ชันใหม่แล้ว ต้องโหลดซ้ำ"},{"language":"TR","value":"Yeni sürüm mevcut. Yeniden yükleme gerekli"},{"language":"UK","value":"Доступна нова версія. Потрібне перезавантаження"},{"language":"W","value":"Изтегляне на нова версия"},{"language":"ZF","value":"有新版本可用。需要重新加載"},{"language":"ZH","value":"新版本可用。需要重新加载"}]}],"fieldPos":556},{"fieldNo":"d2e4cf32-6edf-4d0c-cf29-82669d6218de","fieldName":"AppCache_tPWAInfo","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Update Available","script":"","translation":[{"language":"1","value":"下载新版本"},{"language":"AF","value":"Opdatering beskikbaar"},{"language":"AR","value":"التحديث متاح"},{"language":"BG","value":"Налична актуализация"},{"language":"CA","value":"Actualització disponible"},{"language":"CS","value":"Aktualizace k dispozici"},{"language":"D","value":"Neue Version wird geladen…"},{"language":"DA","value":"Opdatering tilgængelig"},{"language":"DE","value":"Update verfügbar"},{"language":"EL","value":"Διαθέσιμη ενημέρωση"},{"language":"EN","value":"Update Available"},{"language":"ES","value":"Actualización disponible"},{"language":"ET","value":"Uuendus saadaval"},{"language":"F","value":"Téléchargement d'une nouvelle version"},{"language":"FI","value":"Päivitys saatavilla"},{"language":"FR","value":"Mise à jour disponible"},{"language":"HE","value":"עדכון זמין"},{"language":"HR","value":"Ažuriranje dostupno"},{"language":"HU","value":"Frissítés elérhető"},{"language":"ID","value":"Pembaruan tersedia"},{"language":"IS","value":"Uppfærsla í boði"},{"language":"IT","value":"Aggiornamento disponibile"},{"language":"JA","value":"利用可能なアップデート"},{"language":"K","value":"Downloader ny version..."},{"language":"KO","value":"업데이트 가능"},{"language":"LT","value":"Galimas atnaujinimas"},{"language":"LV","value":"Pieejams atjauninājums"},{"language":"MS","value":"Kemaskini ada"},{"language":"NL","value":"Update beschikbaar"},{"language":"NN","value":"Oppdatering tilgjengelig"},{"language":"NO","value":"Oppdatering tilgjengelig"},{"language":"O","value":"Laster ned ny versjon..."},{"language":"P","value":"Download da nova versão"},{"language":"PL","value":"Dostępna aktualizacja"},{"language":"PT","value":"Atualização disponível"},{"language":"R","value":"Загрузка новой версии"},{"language":"RO","value":"Actualizare disponibila"},{"language":"RU","value":"Доступно обновление"},{"language":"S","value":"Descargando nueva versión"},{"language":"SH","value":"Dostupno ažuriranje"},{"language":"SK","value":"Aktualizácia je dostupná"},{"language":"SL","value":"Posodobitev na voljo"},{"language":"SR","value":"Располагању новија верзија"},{"language":"SV","value":"Uppdatering tillgänglig"},{"language":"TH","value":"อัปเดตพร้อมใช้งาน"},{"language":"TR","value":"Güncelleme uygun"},{"language":"UK","value":"Оновлення доступне"},{"language":"W","value":"Изтегляне на нова версия"},{"language":"ZF","value":"有更新可用"},{"language":"ZH","value":"可用更新"}]}],"fieldPos":557},{"fieldNo":"d3a03661-29d8-4933-cccc-3eebafb31796","fieldName":"AppCache_Screen_Login","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Login","script":"","translation":[{"language":"AF","value":"Teken aan"},{"language":"AR","value":"تسجيل الدخول"},{"language":"BG","value":"Влизам"},{"language":"CA","value":"iniciar Sessió"},{"language":"CS","value":"Přihlásit se"},{"language":"DA","value":"Log på"},{"language":"DE","value":"Anmeldung"},{"language":"EL","value":"Σύνδεση"},{"language":"EN","value":"Login"},{"language":"ES","value":"Acceso"},{"language":"ET","value":"Logi sisse"},{"language":"FI","value":"Kirjaudu sisään"},{"language":"FR","value":"Se connecter"},{"language":"HE","value":"התחברות"},{"language":"HR","value":"Prijaviti se"},{"language":"HU","value":"Belépés"},{"language":"ID","value":"Gabung"},{"language":"IS","value":"Skrá inn"},{"language":"IT","value":"Login"},{"language":"JA","value":"ログイン"},{"language":"KO","value":"로그인"},{"language":"LT","value":"Prisijungti"},{"language":"LV","value":"Pieslēgties"},{"language":"MS","value":"Log masuk"},{"language":"NL","value":"Log in"},{"language":"NN","value":"Logg inn"},{"language":"NO","value":"Logg inn"},{"language":"PL","value":"Zaloguj sie"},{"language":"PT","value":"Conecte-se"},{"language":"RO","value":"Log in"},{"language":"RU","value":"Авторизоваться"},{"language":"SH","value":"Prijava"},{"language":"SK","value":"Prihlásiť sa"},{"language":"SL","value":"Vpiši se"},{"language":"SR","value":"Пријавите се"},{"language":"SV","value":"Logga in"},{"language":"TH","value":"เข้าสู่ระบบ"},{"language":"TR","value":"Giriş yapmak"},{"language":"UK","value":"Логін"},{"language":"ZF","value":"登錄"},{"language":"ZH","value":"登录"}]}],"fieldPos":558},{"fieldNo":"0937e5fa-b68a-452b-c794-2872f71401e7","fieldName":"AppCache_Screen_PIN","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Set PIN Code","script":"","translation":[{"language":"AF","value":"Stel PIN-kode in"},{"language":"AR","value":"ضبط رمز PIN"},{"language":"BG","value":"Задаване на PIN код"},{"language":"CA","value":"Estableix el codi PIN"},{"language":"CS","value":"Nastavte PIN kód"},{"language":"DA","value":"Indstil PIN-kode"},{"language":"DE","value":"PIN Code festlegen"},{"language":"EL","value":"Ορισμός κωδικού PIN"},{"language":"EN","value":"Set PIN Code"},{"language":"ES","value":"Establecer código PIN"},{"language":"ET","value":"Määra PIN-kood"},{"language":"FI","value":"Aseta PIN-koodi"},{"language":"FR","value":"Définir le code PIN"},{"language":"HE","value":"הגדר קוד PIN"},{"language":"HR","value":"Postavite PIN kod"},{"language":"HU","value":"PIN kód beállítása"},{"language":"ID","value":"Tetapkan Kode PIN"},{"language":"IS","value":"Stilltu PIN-kóða"},{"language":"IT","value":"Imposta il codice PIN"},{"language":"JA","value":"PINコードを設定する"},{"language":"KO","value":"PIN 코드 설정"},{"language":"LT","value":"Nustatykite PIN kodą"},{"language":"LV","value":"Iestatiet PIN kodu"},{"language":"MS","value":"Tetapkan Kod PIN"},{"language":"NL","value":"Pincode instellen"},{"language":"NN","value":"Sett PIN-kode"},{"language":"NO","value":"Angi pinkode"},{"language":"PL","value":"Ustaw kod PIN"},{"language":"PT","value":"Definir código PIN"},{"language":"RO","value":"Setați codul PIN"},{"language":"RU","value":"Установить PIN-код"},{"language":"SH","value":"Postavi PIN kod"},{"language":"SK","value":"Nastavte PIN kód"},{"language":"SL","value":"Nastavite kodo PIN"},{"language":"SR","value":"Подесите ПИН код"},{"language":"SV","value":"Ställ in PIN-kod"},{"language":"TH","value":"ตั้งรหัส PIN"},{"language":"TR","value":"PIN Kodunu Ayarla"},{"language":"UK","value":"Встановити PIN-код"},{"language":"ZF","value":"設置PIN碼"},{"language":"ZH","value":"设置 PIN 码"}]}],"fieldPos":559},{"fieldNo":"1aff3f71-8384-4c97-f145-a910fd2394c8","fieldName":"AppCache_Screen_PINEntry","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"PIN Code","script":"","translation":[{"language":"AF","value":"PIN-kode"},{"language":"AR","value":"رمز التعريف الشخصي"},{"language":"BG","value":"ПИН код"},{"language":"CA","value":"Codi PIN"},{"language":"CS","value":"PIN kód"},{"language":"DA","value":"Pinkode"},{"language":"DE","value":"PIN Code"},{"language":"EL","value":"Κωδικό PIN"},{"language":"EN","value":"PIN Code"},{"language":"ES","value":"Código PIN"},{"language":"ET","value":"PIN-koodi"},{"language":"FI","value":"Pin-koodi"},{"language":"FR","value":"Code PIN"},{"language":"HE","value":"קוד סודי"},{"language":"HR","value":"PIN kod"},{"language":"HU","value":"PIN-kód"},{"language":"ID","value":"Kode PIN"},{"language":"IS","value":"PIN númer"},{"language":"IT","value":"Codice PIN"},{"language":"JA","value":"ピンコード"},{"language":"KO","value":"핀 코드"},{"language":"LT","value":"PIN kodas"},{"language":"LV","value":"PIN kods"},{"language":"MS","value":"Kod PIN"},{"language":"NL","value":"Pincode"},{"language":"NN","value":"PIN-kode"},{"language":"NO","value":"Pinkode"},{"language":"PL","value":"Kod PIN"},{"language":"PT","value":"Código PIN"},{"language":"RO","value":"Cod PIN"},{"language":"RU","value":"Пин-код"},{"language":"SH","value":"PIN kod"},{"language":"SK","value":"PIN kód"},{"language":"SL","value":"PIN koda"},{"language":"SR","value":"Пин код"},{"language":"SV","value":"Pinkod"},{"language":"TH","value":"รหัสพิน"},{"language":"TR","value":"PIN Kodu"},{"language":"UK","value":"PIN-код"},{"language":"ZF","value":"PIN碼"},{"language":"ZH","value":"PIN码"}]}],"fieldPos":560},{"fieldNo":"704176cb-6989-49df-9dfe-a525d4b09525","fieldName":"AppCache_Screen_Users","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Users","script":"","translation":[{"language":"AF","value":"Gebruikers"},{"language":"AR","value":"المستخدمين"},{"language":"BG","value":"Потребители"},{"language":"CA","value":"Usuaris"},{"language":"CS","value":"Uživatelé"},{"language":"DA","value":"Brugere"},{"language":"DE","value":"Benutzer"},{"language":"EL","value":"Χρήστες"},{"language":"EN","value":"Users"},{"language":"ES","value":"Usuarios"},{"language":"ET","value":"Kasutajad"},{"language":"FI","value":"Käyttäjät"},{"language":"FR","value":"Utilisateurs"},{"language":"HE","value":"משתמשים"},{"language":"HR","value":"Korisnici"},{"language":"HU","value":"Felhasználók"},{"language":"ID","value":"Pengguna"},{"language":"IS","value":"Notendur"},{"language":"IT","value":"Utenti"},{"language":"JA","value":"ユーザー"},{"language":"KO","value":"사용자"},{"language":"LT","value":"Vartotojai"},{"language":"LV","value":"Lietotāji"},{"language":"MS","value":"Pengguna"},{"language":"NL","value":"Gebruikers"},{"language":"NN","value":"Brukere"},{"language":"NO","value":"Brukere"},{"language":"PL","value":"Użytkownicy"},{"language":"PT","value":"Usuários"},{"language":"RO","value":"Utilizatori"},{"language":"RU","value":"Пользователи"},{"language":"SE","value":"Geavaheaddjit"},{"language":"SH","value":"Korisnici"},{"language":"SK","value":"Používatelia"},{"language":"SL","value":"Uporabniki"},{"language":"SR","value":"Корисници"},{"language":"SV","value":"Användare"},{"language":"TH","value":"ผู้ใช้"},{"language":"TR","value":"Kullanıcılar"},{"language":"UK","value":"Користувачі"},{"language":"ZF","value":"使用者"},{"language":"ZH","value":"用户"}]}],"fieldPos":561},{"fieldNo":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldName":"Functions","fieldParent":99999,"fieldType":"neptune.folder","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":562},{"fieldNo":"f6e6a485-0a6f-4d4a-a7b3-cf02a10c34a1","fieldName":"types","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Typescript","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":563},{"fieldNo":"2db642c8-fb46-4eb8-cac8-2a297b6ff606","fieldName":"jquery","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"jQuery.sap.require('sap.m.MessageBox');\njQuery.sap.require('jquery.sap.storage');\n\n// common jQuery funcs\nfunction serializeDataForQueryString(data) {\n    return jQuery.param(data);\n}\n\nfunction isCordovaFilePluginAvailable() {\n    return typeof cordova.file !== 'undefined' && typeof cordova.file === 'object';\n}\n\n// read file from cordova app storage\nfunction cordovaReadFile(path, readAs = 'ArrayBuffer') {\n    return new Promise((resolve, reject) => {\n        if (!isCordovaFilePluginAvailable()) return reject('cordova file plugin is not available');\n\n        const filePath = `${cordova.file.applicationDirectory}${path}`;\n        window.resolveLocalFileSystemURL(filePath, (fileEntry) => {\n            fileEntry.file((file) => {\n                const reader = new FileReader();\n                reader.onloadend = function () {\n                    resolve(this.result);\n                };\n                \n                if (readAs === 'ArrayBuffer') reader.readAsArrayBuffer(file);\n                else if (readAs === 'Text') reader.readAsText(file);\n                else if (readAs === 'DataURL') reader.readAsDataURL(file)\n                else reject(`invalid readAs type specified in cordovaReadFile: ${filePath}`);\n            }, function (err) {\n                console.error(`cordovaReadFile - error reading file ${filePath}`, err);\n            });\n        }, (err) => {\n            console.error(`cordovaReadFile - error resolving file system url ${filePath}`, err);\n        });\n    });\n}\n\n/**\n * cordovaRequest is a proxy for jQuery.request\n * on mobile devices handling support for XHR, CORS and Cookies\n * \n * a Promise is returned which calls either success/resolve or error/reject method\n * \n * headers\n *  key: value\n */\nfunction cordovaRequest(opts) {\n    return new Promise((resolve, reject) => {\n        let url = '';\n        try {\n            if (opts.url.startsWith('/')) {\n                url = new URL(opts.url, AppCache.Url);\n            } else if (opts.url.startsWith('public/')) {\n                url = new URL(opts.url, location.origin);\n            } else {\n                url = new URL(opts.url);\n            }\n        } catch (err) {\n            console.error('cordovaRequest', err);\n        }\n        \n        const method = opts.type.toLowerCase();\n        let data = {};\n        let headers = {};\n        let params = {};\n\n        if (opts.headers && typeof headers === 'object') {\n            headers = opts.headers;\n        }\n\n        const { contentType } = opts;\n        if (contentType) {\n            headers['Content-Type'] = contentType;\n\n            if (contentType.includes('json')) {\n                cordova.plugin.http.setDataSerializer('json');\n            }\n\n            if(contentType.includes('application/x-www-form-urlencoded')) {\n                cordova.plugin.http.setDataSerializer('urlencoded');\n            }\n        }\n\n        // we pass json as string into jQuery.request\n        if (typeof opts.data !== 'undefined') {\n            if (typeof opts.data === 'string') {\n                data = JSON.parse(opts.data);\n            } else if (typeof opts.data === 'object') {\n                data = opts.data;\n            }\n        }\n\n        // jQuery.request (success, error) functions we already pass as options\n        const { success, error } = opts;\n\n        for (const [key, value] of url.searchParams.entries()) {\n            params[key] = value;\n        }\n\n        // https://www.npmjs.com/package/cordova-plugin-advanced-http\n        cordova.plugin.http.sendRequest(\n            `${url.origin}${url.pathname}`,\n            {\n                params,\n                method,\n                data,\n                headers,\n            },\n            (res) => {\n                let result;\n                if (typeof res.data !== 'undefined') {\n                    try {\n                        result = JSON.parse(res.data);\n                    } catch (e) {\n                        // if JSON is not parsed correctly. e.g. in case of OK being returned from server after correct login\n                        // we will just set result to res.data\n                        result = res.data;\n                    }\n                }\n\n                success && success(result, 'success', {\n                    headers: res.headers,\n                    getResponseHeader: function (key) {\n                        return this.headers[key.toLowerCase()];\n                    }\n                });\n                resolve(result);\n            },\n            (err) => {\n                // this is not a an error, but when the plugin parses 'OK'\n                // as response from p9 server from e.g. /user/logon/local\n                // json parsing fails, so we end up here\n                if (\n                    err.error &&\n                    err.error.includes('Unexpected identifier \"OK\"')\n                ) {\n                    success && success(err.error);\n                    resolve(err.error);\n                    return;\n                }\n\n                let result = {\n                    status: err.status,\n                };\n                if (typeof err.data !== 'undefined') {\n                    result.data = JSON.parse(err.data);\n                }\n\n                error && error(result, err.status);\n                reject(result, err.status);\n            },\n        );\n    });\n}\n\nfunction request(opts) {\n    if (typeof opts.url === undefined) throw new Error('request: no url provided for the request');\n    \n    // handling requests on cordova\n    if (\n        isCordova() &&\n        cordova.plugin &&\n        cordova.plugin.http\n    ) return cordovaRequest(opts);\n\n    return jQuery.ajax(Object.assign({}, opts));\n}\n\nfunction jsonRequest(opts) {\n    return request(\n        Object.assign({}, {\n            type: 'POST',\n            contentType: 'application/json',\n        }, opts)\n    );\n}\n\nfunction sapLoadLanguage(lang) {\n    return jQuery.sap.loadResource(`sap/ui/core/cldr/${lang}.json`, {\n        'async': true,\n        dataType: 'json',\n        failOnError: true,\n    });\n}\n\nfunction sapStorageGet(k) {\n    return jQuery.sap.storage(jQuery.sap.storage.Type.local).get(k);\n}\n\nfunction sapStoragePut(k, v) {\n    return jQuery.sap.storage(jQuery.sap.storage.Type.local).put(k, v);\n}","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":564},{"fieldNo":"65b87b65-78d9-4061-f36e-028a3e4c4f36","fieldName":"encryption","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"function generatePBKDF2Key(phrase, salt) {\n    return CryptoJS.PBKDF2(phrase, salt, {\n        keySize: 256 / 32,\n        iterations: typeof AppCache.pincodeKeyIterations !== 'undefined' ? AppCache.pincodeKeyIterations : 10,\n    });\n}\n\nfunction encryptAES(msg, secret) {\n    return CryptoJS.AES.encrypt(msg, secret);\n}\n\nfunction decryptAES(encrypted, secret) {\n    const decrypted = CryptoJS.AES.decrypt(encrypted, secret);\n    return decrypted.toString(CryptoJS.enc.Utf8);\n}","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":565},{"fieldNo":"f93f4fed-7445-4133-d436-f934b7180c37","fieldName":"helpers","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"let globalTabIndex = -1;\n\nfunction isTouchScreen() {\n    return sap.ui.Device.support.touch;\n}\n\nfunction isWidthGTE(width = 1000) {\n    return window.innerWidth >= width;\n}\n\nfunction endsWith(str, list) {\n    return list.some((value) => str.endsWith(value));\n}\n\nfunction includes(str, list) {\n    return list.some((value) => str.includes(value));\n}\n\nfunction nepPrefix() {\n    return `__nep`;\n}\n\nfunction hasNepPrefix(className) {\n    return className.startsWith(nepPrefix());\n}\n\nfunction nepId() {\n    return `${nepPrefix()}${ModelData.genID()}`;\n}\n\nfunction includesJSView(id) {\n    return id.includes('__jsview');\n}\n\nfunction sectionPrefix() {\n    return '__nepsection';\n}\n\nfunction isSection(id) {\n    return id.includes(sectionPrefix());\n}\n\nfunction closeContentNavigator() {\n    launchpadContentNavigator.setWidth('0px');\n}\n\n// AppCache Logging\nfunction appCacheLog(...args) {\n    if (AppCache.enableLogging) console.log(...args);\n}\n\nfunction appCacheError(args) {\n    if (AppCache.enableLogging) console.error(args);\n}\n\nfunction getFieldBindingText(field) {\n    const k = field.name;\n    return field.valueType ? `{${k}_value}` : `{${k}}`;\n}\n\nfunction setTextAndOpenDialogText(title, html) {\n    AppCacheText.setTitle(title);\n    \n    const textDiv = document.getElementById('textDiv');\n    if (textDiv) textDiv.innerHTML = html;\n\n    diaText.open();\n}\n\n// DOM\nfunction elById(id) {\n    return document.getElementById(id);\n}\n\nfunction querySelector(path) {\n    return document.querySelector(path);\n}\n\nfunction applyCSSToElmId(id, props) {\n    const el = elById(id);\n    if (!el) return;\n\n    Object.entries(props).forEach(function ([k, v]) {\n        el.style[k] = v;\n    });\n}\n\nfunction insertBeforeElm(el, newEl) {\n    if (!el || !newEl) return;\n    \n    const parent = el.parentNode;\n    parent.insertBefore(newEl, el);\n}\n\nfunction addClass(el, list) {\n    if (!el) return;\n\n    list.forEach(function (name) {\n        el.classList.add(name);\n    });\n}\n\nfunction removeClass(el, list) {\n    if (!el) return;\n\n    list.forEach(function (name) {\n        el.classList.remove(name);\n    });\n}\n\nfunction getStyle(el, name) { return el.style[name]; }\nfunction setStyle(el, name, value) { el.style[name] = value; }\n\nfunction getWidth(el) { return el ? el.offsetWidth : 0; }\nfunction getHeight(el) { return el ? el.offsetHeight : 0; }\n\nfunction setWidth(el, width) { return el && (el.style.width = `${width}px`); }\nfunction setHeight(el, height) { return el && (el.style.height = `${height}px`); }\n\nfunction hideChildren(elPath) {\n    const el = document.querySelector(elPath);\n    if (!el) return;\n\n    [].slice.call(el.children).forEach(function (child) {\n        child.style.display = 'none';\n    });\n}\n\nfunction appendStylesheetToHead(href) {\n    const link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.type = 'text/css';\n    link.href = href;\n    document.head.appendChild(link);\n}\n\nfunction appendIFrame(targetEl, params) {\n    const iframe = document.createElement('iframe');\n    Object.entries(params).forEach(function ([k, v]) {\n        iframe.setAttribute(k, v);\n    });\n    targetEl.appendChild(iframe);\n}\n\nfunction createStyle(cssText) {\n    const s = document.createElement('style');\n    s.appendChild(document.createTextNode(cssText))\n    return s;\n}\n\nfunction appendStyle(targetEl, style) {\n    if (!targetEl) return;\n    targetEl.appendChild(style);\n}\n\nfunction isRTL() {\n    return querySelector('html').getAttribute('dir').toLowerCase() === 'rtl';\n}\n\nfunction addCustomData(sapELm, list) {\n    for (const [key, value] of Object.entries(list)) {\n        sapELm.addCustomData(\n            new sap.ui.core.CustomData(undefined, {\n                key, value, writeToDom: true,\n            })\n        );\n    }\n}\n\nfunction getActivePageCategoryId() {\n    return AppCacheNav.getCurrentPage().getDomRef().dataset.categoryId;\n}\n\n// Launchpad issues\n\nfunction isLaunchpadNotFound(status) {\n    return status !== undefined && typeof status === 'string' && status.toLowerCase().includes('unable to find the launchpad');\n}\n\nfunction showLaunchpadNotFoundError(status) {\n    sap.m.MessageBox.show(status, {\n        title: 'Launchpad Error',\n        onClose: function (oAction) {\n            if (AppCache.isMobile) {\n                if (AppCache.enablePasscode) {\n                    AppCache.Lock();\n                } else {\n                    AppCache.Logout();\n                }\n            }\n        }\n    });\n}\n\nfunction isAppleDevice() {\n    // ios=iPhone, macintosh=iPad\n    return sap.ui.Device.os.ios || sap.ui.Device.os.macintosh;\n}\n\nfunction isPWAEnabled() {\n    return AppCache.enablePwa;\n}\n\nconst iconTypes = ['shortcut icon', 'icon', 'apple-touch-icon'];\nfunction setiOSPWAIcons() {\n    if (!isAppleDevice()) {\n        return;\n    }\n    \n    jsonRequest({\n        type: 'GET',\n        url: `${AppCache.Url}/public/launchpad/${AppCache.launchpadID}/pwa.json`,\n    }).then((data) => {\n        if (!data.icons.length) {\n            return;\n        }\n\n        function setIcon(rel, href) {\n            if (!href) return;\n            document.querySelector(`link[rel='${rel}'`).setAttribute('href', href);\n        }\n        \n        const { src } = data.icons[0];\n        iconTypes.forEach((rel) => {\n            setIcon(rel, src)\n        });\n    });\n}\n\n// launchpad path is always like e.g. /launchpad/path-name\n//      path is not like /launchpad/path-name[/something/here]\n//      otherwise server throws a 404\nfunction launchpadUrl() {\n    return `${location.origin}${location.pathname}`;\n}\n\nasync function isUrlInCache({ url, cacheName }) {\n    const cache = await caches.open(cacheName);\n    return await cache.match(url)\n}\n\nasync function addUrlToCache({ url, method, cacheName }) {\n    const response = await fetch(url, { method });\n    if (response.ok) {\n        const cache = await caches.open(cacheName);\n        cache.put(url, response);\n        appCacheLog(`added to cache ${cacheName}`, url);\n    }\n}\n\n// If app is not offline, we can remove the launchpad main page from workbox cache\n//  otherwise even after logout we will see the launchpad screen\nfunction removeLaunchpadFromCache() {\n    const url = `${location.origin}${location.pathname}`;\n    if (!AppCache.isOffline) {\n        let cacheName = '';\n        if (new RegExp('/public/launchpad/').test(url)) cacheName = 'p9pwa-public';\n        else if (new RegExp('/launchpad/').test(url)) cacheName = 'p9pwa-launchpad';\n\n        if (cacheName.length > 0) {\n            caches.open(cacheName).then(c => c.delete(url));\n        }\n    }\n}\n\nfunction determineCacheNameFromUrl(url) {\n    if (new RegExp('/public/launchpad/').test(url)) return 'p9pwa-public';\n    if (new RegExp('/launchpad/').test(url)) return 'p9pwa-launchpad';\n\n    const publicRe = [\n        new RegExp('/public/application/'),\n        new RegExp('/public/neptune/'),\n        new RegExp('/public/fontawesome/'),\n        new RegExp('/public/highsuite/'),\n        new RegExp('/public/css/')\n    ];\n    if (publicRe.some(re => re.test(url))) {\n        return 'p9pwa-public';\n    }\n\n    if (new RegExp('https://openui5.hana.ondemand.com/').test(url)) return 'p9pwa-ui5-cdn';\n    if (new RegExp('https://sapui5.hana.ondemand.com/').test(url)) return 'p9pwa-ui5-cdn';\n    \n    if (new RegExp('/public/openui5/').test(url)) return 'p9pwa-ui5';\n\n    const mediaRe = [\n        new RegExp('/public/images/'),\n        new RegExp('/public/icons/'),\n        new RegExp('/media/'),\n        new RegExp('\\.(png|jpg|jpeg|svg|gif|webp)$')\n    ];\n    if (mediaRe.some(re => re.test(url))) {\n        return 'p9pwa-images';\n    }\n\n    if (new RegExp('/public/').test(url)) {\n        return 'p9pwa-public';\n    }\n\n    // default\n    return 'p9pwa-public';\n}\n\n// On first install PWA does not cache the launchpad\n// since the install event occurs after the page has been loaded\n// e.g. random login images or other requests which might be part \nconst _pwaResources = {};\nfunction setCachablePwaResources() {\n    _pwaResources[launchpadUrl()] = { url: launchpadUrl(), method: 'GET', cacheName: determineCacheNameFromUrl(launchpadUrl()) };\n\n    if (window && window.performance && window.performance.getEntriesByType) {\n        const resources = window.performance.getEntriesByType(\"resource\").map(r => r.name);\n        const allowedExts = [\n            'js', 'json',   // scripts, data\n            'properties',   // translations\n            'gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', // images\n            'woff', 'woff2', // fonts\n            'css', // stylesheets\n        ];\n        resources\n            .filter(url => endsWith(url, allowedExts))\n            .forEach(url => (_pwaResources[url] = { url, method: 'GET', cacheName: determineCacheNameFromUrl(url) }));\n\n        const allowedApi = [\n            '/user/logon/types',\n        ];\n        resources\n            .filter(url => endsWith(url, allowedApi))\n            .forEach(url => (_pwaResources[url] = { url, method: 'GET', cacheName: determineCacheNameFromUrl(url) }));\n    }\n}\n\nfunction ensurePWACache() {\n    if (!isPWAEnabled()) return;\n\n    appCacheLog('ensure these pwa resources are available in cache', Object.keys(_pwaResources));\n\n    Object.values(_pwaResources).forEach(async ({ url, method, cacheName }) => {\n        if (await isUrlInCache({ url, cacheName })) {\n            appCacheLog(url, 'already exists in cache');\n        } else {\n            addUrlToCache({ url, method, cacheName });\n        }\n    });\n}\n\nfunction setSelectedLoginType(type) {\n    localStorage.setItem('selectedLoginType', type);\n    AppCacheUserActionPassword.setVisible(!isChpassDisabled() && type === 'local');\n}\n\nfunction clearSelectedLoginType() {\n    localStorage.removeItem('selectedLoginType');\n}\n\nfunction emptyBase64Image() {\n    return 'data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mP8Xw8AAoMBgDTD2qgAAAAASUVORK5CYII=';\n}\n\nconst _lazyLoadImagesList = [];\nlet lazyLoadImagesInProgress = false;\nfunction lazyLoadImage(src, target, type) {\n    _lazyLoadImagesList.push({ src, target, type });\n    if (!lazyLoadImagesInProgress) downloadLazyLoadImages();\n}\n\nfunction downloadLazyLoadImages() {\n    if (lazyLoadImagesInProgress || _lazyLoadImagesList.length === 0) {\n        return;\n    }\n\n    lazyLoadImagesInProgress = true;\n\n    function setImageSrc(src, target, type) {\n        if (type === 'element' && target instanceof HTMLImageElement) {\n            target.setAttribute('src', src);\n        } else if (type === 'sap-component') {\n            target.setSrc(src);\n        } else if (type === 'style') {\n            appendStyle(\n                elById('NeptuneStyleDivDynamic'),\n                createStyle(`\n                    ${target} {\n                        background-image: url(${src});\n                    }\n                `)\n            );\n        }\n    }\n\n    const { src, target, type } = _lazyLoadImagesList.shift();\n    if (src.startsWith('data:')) {\n        setImageSrc(src, target, type);\n        lazyLoadImagesInProgress = false;\n        downloadLazyLoadImages();\n        return;\n    }\n\n    // set blob url's directly, otherwise domains have be explicitly\n    //  added to Azure Blob Storage to prevent CORS errors on fetch\n    if (src.includes('blob.core.windows.net')) {\n        setImageSrc(src, target, type);\n        return;\n    }\n\n    fetch(src).then(res => {\n        if (!res.ok) return;\n        return res.blob();\n    }).then(res => {\n        setImageSrc(URL.createObjectURL(res), target, type);\n        lazyLoadImagesInProgress = false;\n        downloadLazyLoadImages();\n    }).catch(() => {\n        lazyLoadImagesInProgress = false;\n        downloadLazyLoadImages();\n    });\n}\n\nfunction setPWAInstallQueryStatus() {\n    diaPWAInstall.close();\n    modeldiaPWAInstall.setData({ visible: false });\n    setCachediaPWAInstall();\n}\n\nfunction showCookieDialog() {\n    if (AppCache.config && AppCache.config.cookieDialogEnabled) {\n        const data = modeldiaCookie.getData();\n        if (typeof data === 'undefined' || Object.keys(data).length === 0 || data.visible) {\n            const title = AppCache.config.cookieDialogTitle;\n            const message = AppCache.config.cookieDialogMessage;\n\n            if (!title && !message) {\n                return;\n            }\n\n            diaCookieHeaderTitle.setText(title);\n            diaCookieContent.setText(message);\n            diaCookie.open();\n        }\n    }\n}\n\nfunction setCookieConfirmationQueryStatus() {\n    diaCookie.close();\n    modeldiaCookie.setData({ visible: false });\n    setCachediaCookie();\n}\n\nfunction promptForPWAInstall() {\n    _pwadeferredPrompt.prompt();\n    _pwadeferredPrompt.userChoice\n    .then(function(choiceResult) {\n        if (choiceResult.outcome === 'accepted') {\n            diaPWAInstall.close();\n        }\n        _pwadeferredPrompt = null;        \n    });\n}\n\nfunction setLaunchpadIcons() {\n    iconTypes.forEach((rel) => {\n        let href = '';\n        if (typeof AppCache.CustomLogo === 'string' && AppCache.CustomLogo.trim().length > 0) {\n            href = AppCache.CustomLogo;\n        } else {\n            if (rel.includes('shortcut')) {\n                href = '/public/images/favicon.png';\n            } else {\n                href = '/public/images/NeptuneIcon192px.png';\n            }\n        }\n\n        const link = document.createElement('link');\n        link.href = href;\n        link.rel = rel;\n\n        if (rel.includes('shortcut')) {\n            link.type = 'image/x-icon';\n        }\n\n        document.head.appendChild(link);\n    });\n}\n\nfunction fetchUserInfo(success, error){\n    return sap.n.Planet9.function({\n        id: dataSet,\n        method: 'GetUserInfo',\n        success,\n        error,\n    });\n}\n\nfunction downloadApp(tile) {\n    // Application\n    if (tile.actionApplication) {\n        AppCache.Load(tile.actionApplication, {\n            load: 'download',\n            appPath: tile.urlApplication ?? '',\n            appType: tile.urlType ?? '',\n            appAuth: tile.urlAuth ?? '',\n            sapICFNode: tile.sapICFNode,\n        });\n    }\n\n    // Application in Tile\n    if (tile.type === 'application' && tile.tileApplication) {\n        AppCache.Load(tile.tileApplication, {\n            load: 'download',\n        });\n    }\n}\n\nfunction fetchAppUpdates() {\n    appCacheLog(`FetchAppUpdates`);\n    Array.isArray(modelAppCacheTiles.oData) && modelAppCacheTiles.oData.forEach(function (tile) {\n        downloadApp(tile);\n    });\n}\n\n// in certain cases for backwards compatibility, some functions don't return promises as expected\n// e.g. in 22.10.6 UpdateGetData return undefined from p9-library but we expect a promise\n// for such cases we need to create a fakePromise to take the result and monitor a change in value or timeout\n// defaultReturnValue in-case of promise timeout\n// by default each timeout is awaited for 1 sec\nfunction fakePromise(returnValue, model, fnExpectedValue, defaultReturnValue, timeout = 1000) {\n    // returned value is already a promise, we can await for it in code\n    if (returnValue instanceof Promise) {\n        return returnValue;\n    }\n\n    // check every 10ms if value resolves\n    function checkIfPromiseIsResolved(resolve) {\n        if (fnExpectedValue(model)) return resolve(model.getData());\n        setTimeout(() => checkIfPromiseIsResolved(resolve), 10);\n    }\n\n    // check returnValue\n    return Promise.race([\n        new Promise((resolve) => setTimeout(() => resolve(defaultReturnValue), timeout)),\n        new Promise((resolve) => checkIfPromiseIsResolved(resolve))\n    ]);\n}\n\nfunction getLoginData() {\n    return `${AppCache?.CurrentConfig || location?.pathname || '/'}`;\n}\n\nfunction generateUrlForImgInArrayBuffer(fileName, buffer) {\n    const fileExt = fileName.substring(fileName.lastIndexOf('.') + 1);\n    const blob = new Blob([buffer], { type: `image/${fileExt}`})\n    return URL.createObjectURL(blob);\n}\n\nfunction setCustomLogo() {\n    if (isCordova() || location.protocol === 'file:') {\n        cordovaReadFile('www/public/customlogo', 'ArrayBuffer').then((result) => {\n            const src = generateUrlForImgInArrayBuffer(AppCache.CustomLogo, result);\n            AppCacheShellLogoDesktop.setSrc(src);\n            AppCacheShellLogoMobile.setSrc(src);\n        });\n        return;\n    }\n\n    AppCacheShellLogoDesktop.setSrc(AppCache.CustomLogo);\n    AppCacheShellLogoMobile.setSrc(AppCache.CustomLogo);\n}\n\nfunction setPWACustomLogo() {\n    if (isCordova() || location.protocol === 'file:') {\n        cordovaReadFile('www/public/customlogo', 'ArrayBuffer').then((result) => {\n            const src = generateUrlForImgInArrayBuffer(AppCache.CustomLogo, result);\n            pwaInstallAppLogo.setSrc(src);\n        });\n        return;\n    }\n    \n    pwaInstallAppLogo.setSrc(AppCache.CustomLogo);\n}\n\nfunction setDefaultLogo() {\n    const path = 'public/images/nsball.png';\n    if (isCordova() || location.protocol === 'file:') {\n        AppCacheShellLogoDesktop.setSrc(path);\n        AppCacheShellLogoMobile.setSrc(path);\n        return;\n    }\n\n    AppCacheShellLogoDesktop.setSrc(`/${path}`);\n    AppCacheShellLogoMobile.setSrc(`/${path}`);\n}\n\nfunction isChpassDisabled() {\n    return AppCache.SystemConfig.disableLaunchpadChpass;\n}\n\nfunction disableChpass() {\n    if (isChpassDisabled()) {\n        AppCacheUserActionPassword.setVisible(false);\n    }\n}\n\nfunction getOpenUI5BootstrapPath() {\n    const src = document.getElementById('sap-ui-bootstrap').getAttribute('src');\n    if (src.includes('openui5.hana.ondemand.com') || src.includes('sapui5.hana.ondemand.com')) {\n        return {\n            src,\n            isCDN: true,\n        }\n    }\n    \n    return {\n        src,\n        isCDN: false,\n    };\n}\n\nfunction getResourceBundlePath(ui5Lib) {\n    const ui5Version = AppCache.coreLanguageHandler.getUI5version();\n    const ui5LibConv = ui5Lib.replace(/[.]/g, '/');\n    const { isCDN, src } = getOpenUI5BootstrapPath();\n\n    if (isCordova() || location.protocol === 'file:') {\n        return `public/openui5/${ui5Version}/${ui5LibConv}/messagebundle.properties`\n    } else if (isCDN) {\n        const resourcePath = src.substring(0, src.lastIndexOf('/'));\n        return `${resourcePath}/${ui5LibConv}/messagebundle.properties`\n    }\n    \n    return `/public/openui5/${ui5Version}/${ui5LibConv}/messagebundle.properties`;\n}\n\nfunction getLogonData() {\n    const loginId = AppCache_loginTypes.getSelectedKey();\n    const { logonTypes } = modelDataSettings.oData;\n    if (Array.isArray(logonTypes)) {\n        const loginSettings = logonTypes.find((loginType) => loginType.id === loginId);\n        if (typeof loginSettings !== 'undefined') {\n            return loginSettings;\n        }\n    }\n\n    try {\n        const data = localStorage.getItem('p9logonData')\n        return JSON.parse(data);\n    } catch (err) {}\n\n    if (AppCache.userInfo && AppCache.userInfo.logonData) {\n        return AppCache.userInfo.logonData;\n    }\n\n    return null;\n}","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":566},{"fieldNo":"0c3ad877-e6c0-42b8-af73-e02048d621fc","fieldName":"AutoLockTimer","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"function isAutoLockTimerEnabled() {\n    return AppCache.timerLock && AppCache.timerLock > 0;\n}\n\nfunction getAutoLockTimeoutInMilliSecs() {\n    return AppCache.timerLock * 1000;\n}\n\nconst AutoLockTimer = {\n    labelId: \"AutoLockTimerID\",\n    labelTimestamp: \"AutoLockTimerTimestamp\",\n    events: [\n        \"mousemove\",\n        \"mousedown\",\n        \"keypress\",\n        \"DOMMouseScroll\",\n        \"mousewheel\",\n        \"touchmove\",\n        \"MSPointerMove\",\n    ],\n    addEventListeners: function () {\n        this.events.forEach((evt) => document.addEventListener(evt, AutoLockTimer.onEvent, false));\n    },\n    removeEventListeners: function () {\n        this.events.forEach((evt) => document.removeEventListener(evt, AutoLockTimer.onEvent, false));\n    },\n    onEvent: function () {\n        AutoLockTimer.reset();\n    },\n\n    getTimeoutId: function () {\n        return localStorage.getItem(this.labelId);\n    },\n    setTimeoutId: function (id) {\n        localStorage.setItem(this.labelId, id);\n    },\n    removeTimeoutId: function () {\n        localStorage.removeItem(this.labelId);\n    },\n\n    getTimestamp: function () {\n        return localStorage.getItem(this.labelTimestamp);\n    },\n    setTimestamp: function (value) {\n        localStorage.setItem(this.labelTimestamp, value);\n    },\n    removeTimestamp: function () {\n        localStorage.removeItem(this.labelTimestamp);\n    },\n    hasElapsed: function () {\n        let timestamp = this.getTimestamp();\n        if (!timestamp) {\n            return false;\n        }\n\n        timestamp = parseInt(timestamp);\n        let elapsed = parseInt(Date.now() - timestamp);\n        return elapsed >= getAutoLockTimeoutInMilliSecs();\n    },\n\n    start: function () {\n        if (!isAutoLockTimerEnabled()) return;\n\n        const timeoutId = window.setTimeout(this.onTimeout, getAutoLockTimeoutInMilliSecs());\n        this.setTimeoutId(timeoutId);\n        this.setTimestamp(Date.now());\n\n        this.addEventListeners();\n    },\n    stop: function () {\n        if (!isAutoLockTimerEnabled()) return;\n        \n        this.removeEventListeners();\n\n        const timeoutId = this.getTimeoutId();\n        if (timeoutId) {\n            window.clearTimeout(parseInt(timeoutId));\n        }\n\n        this.removeTimeoutId();\n        this.removeTimestamp();\n    },\n    reset: function () {\n        this.stop();\n        this.start();\n    },\n    onTimeout: function () {\n        if (AppCache.enablePasscode) {\n            AppCache.Lock();\n        } else {\n            AppCache.Logout();\n        }\n    },\n};\n\nsap.n.Phonegap.onPauseCustom = function () {\n    // Handle the pause event\n    // in P9 AppCache.Initialized might not exist. Just use if (AppCache)\n    if (AppCache.Initialized) {\n        let timeoutId = AutoLockTimer.getTimeoutId();\n        if (timeoutId) {\n            window.clearTimeout(parseInt(timeoutId));\n        }\n    }\n};\n\nsap.n.Phonegap.onResumeCustom = function () {\n    // Handle the resume event\n    // in P9 AppCache.Initialized might not excist. Just use if (AppCache)\n    if (AppCache.Initialized) {\n        if (AutoLockTimer.hasElapsed()) {\n            AppCache.Lock();\n            AutoLockTimer.stop();\n        } else {\n            AutoLockTimer.start();\n        }\n    }\n};\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":567},{"fieldNo":"79bcd662-5175-4be8-c1f9-f2c740142f45","fieldName":"neptune.ElementQuery","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"'undefined' == typeof neptune && (neptune = {}), neptune.ElementQuery = {\r\n    register: function (i, s) {\r\n        let t = new this._ElementQueryClass(s);\r\n        sap.ui.core.ResizeHandler.register(i, function (s) {\r\n            t.resize(i, s.size.width)\r\n        })\r\n    },\r\n    _ElementQueryClass: function (s) {\r\n        s = s || {}, this.isolate = s.isolate || !1, this.debug = s.debug || !1, this.debugCallback = s.debugCallback || function (s) { }, this.callback = s.callback || function (s) { }, this.prefix = s.prefix || 'nepCanvas', this.canvas = {\r\n            XXXXL: 8,\r\n            XXXL: 7,\r\n            XXL: 6,\r\n            XL: 5,\r\n            L: 4,\r\n            M: 3,\r\n            S: 2,\r\n            XS: 1\r\n        }, this.width = {\r\n            xxxlarge: 2360,\r\n            xxlarge: 1880,\r\n            xlarge: 1580,\r\n            large: 1280,\r\n            medium: 980,\r\n            small: 680,\r\n            xsmall: 380\r\n        }, this.size = 9, s.width && (this.width.xxxlarge = s.width.xxxlarge || this.width.xxxlarge, this.width.xxlarge = s.width.xxlarge || this.width.xxlarge, this.width.xlarge = s.width.xlarge || this.width.xlarge, this.width.large = s.width.large || this.width.large, this.width.medium = s.width.medium || this.width.medium, this.width.small = s.width.small || this.width.small, this.width.xsmall = s.width.xsmall || this.width.xsmall), this.resize = function (s, i) {\r\n            let t, e;\r\n            0 !== i && (this.size > this.canvas.XXXXL && i > this.width.xxxlarge || i > this.width.xxxlarge && this.size !== this.canvas.XXXXL ? t = this.canvas.XXXXL : i <= this.width.xxxlarge && i > this.width.xxlarge && this.size !== this.canvas.XXXL ? t = this.canvas.XXXL : i <= this.width.xxlarge && i > this.width.xlarge && this.size !== this.canvas.XXL ? t = this.canvas.XXL : i <= this.width.xlarge && i > this.width.large && this.size !== this.canvas.XL ? t = this.canvas.XL : i <= this.width.large && i > this.width.medium && this.size !== this.canvas.L ? t = this.canvas.L : i <= this.width.medium && i > this.width.small && this.size !== this.canvas.M ? t = this.canvas.M : i <= this.width.small && i > this.width.xsmall && this.size !== this.canvas.S ? t = this.canvas.S : i <= this.width.xsmall && this.size !== this.canvas.XS && (t = this.canvas.XS), t && (this.size = t, this.debug && console.log('Resizing: ' + s.getId() + ' to -> ' + this.size), s.removeStyleClass(this.prefix + 'Full'), s.removeStyleClass(this.prefix + 'XXXLarge'), s.removeStyleClass(this.prefix + 'XXLarge'), s.removeStyleClass(this.prefix + 'XLarge'), s.removeStyleClass(this.prefix + 'Large'), s.removeStyleClass(this.prefix + 'Medium'), s.removeStyleClass(this.prefix + 'Small'), s.removeStyleClass(this.prefix + 'XSmall'), this.isolate ? (e = this.getWidth(this.size), this.size < this.canvas.XXXXL ? s.addStyleClass(this.prefix + e) : s.addStyleClass(this.prefix + 'Full')) : e = this.addAllClasses(this.size, s), this.callback({\r\n                width: i,\r\n                size: e\r\n            })), this.debug && (console.log('Width of ' + s.getId() + ' -> ' + i), this.debugCallback({\r\n                width: i,\r\n                size: this.getWidth(this.size)\r\n            })))\r\n        }, this.addAllClasses = function (s, i) {\r\n            let t = 'XXXXLarge';\r\n            return s <= this.canvas.XXXL && (t = 'XXXLarge', i.addStyleClass(this.prefix + t)), s <= this.canvas.XXL && (t = 'XXLarge', i.addStyleClass(this.prefix + t)), s <= this.canvas.XL && (t = 'XLarge', i.addStyleClass(this.prefix + t)), s <= this.canvas.L && (t = 'Large', i.addStyleClass(this.prefix + t)), s <= this.canvas.M && (t = 'Medium', i.addStyleClass(this.prefix + t)), s <= this.canvas.S && (t = 'Small', i.addStyleClass(this.prefix + t)), s <= this.canvas.XS && (t = 'XSmall', i.addStyleClass(this.prefix + t)), t\r\n        }, this.getWidth = function (s) {\r\n            return 1 === s ? 'XSmall' : 2 === s ? 'Small' : 3 === s ? 'Medium' : 4 === s ? 'Large' : 5 === s ? 'XLarge' : 6 === s ? 'XXLarge' : 7 === s ? 'XXXLarge' : 'XXXXLarge'\r\n        }\r\n    }\r\n};","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":568},{"fieldNo":"99502fb7-e080-4f4b-e8eb-04af31d5bbbb","fieldName":"sap.n.Adaptive","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"sap.n.Adaptive = {\r\n    configurations: {},\r\n    pages: {},\r\n    dialogs: {},\r\n\r\n    // Launchpad\r\n    initApp: function (report) {\r\n        jQuery.sap.require(\"sap.m.MessageBox\");\r\n\r\n        sap.n.Shell.attachBeforeDisplay(function (data) {\r\n            // Update Metadata\r\n            if (localAppID === \"ADAPTIVEDESIGNER\") {\r\n                nwd.adaptive.loadMetaData(report.metadata);\r\n\r\n                var config = null;\r\n\r\n                // Handle BI Template - for 2-way binding\r\n                if (data.application === \"planet9_adaptive_bi\") {\r\n                    config = data;\r\n                } else {\r\n                    var config = JSON.parse(JSON.stringify(data));\r\n                    config.settings.events = data.settings.events;\r\n                }\r\n                report.init(config, false);\r\n            } else {\r\n                report.init(data, true);\r\n            }\r\n        });\r\n    },\r\n\r\n    run: function (config, appdata, method) {\r\n        return new Promise(function (resolve) {\r\n            // Check required fields\r\n            let valid = true;\r\n            if (method !== \"Get\") {\r\n                const canBeValidated = config.settings.fieldsRun\r\n                    .filter(function ({ visible }) {\r\n                        return visible;\r\n                    })\r\n                    .map(function ({ name }) {\r\n                        return name;\r\n                    });\r\n                let requiredFields = config.settings.fieldsSel.filter(function ({ name, required }) {\r\n                    return required && canBeValidated.includes(name);\r\n                });\r\n                valid = sap.n.Adaptive.checkRequiredSel(requiredFields, appdata);\r\n            }\r\n            if (!valid) return resolve({ status: \"required\" });\r\n\r\n            // New Record\r\n            if (method === \"Get\" && !appdata) return resolve({});\r\n\r\n            // Script Startparameter\r\n            const s = config.settings;\r\n            const p = config.properties;\r\n            if (s && s.properties.report.scriptparam) appdata._startparam = s.properties.report.scriptparam;\r\n            if (p && p.report.scriptparam) appdata._startparam = p.report.scriptparam;\r\n\r\n            $.ajax({\r\n                type: \"POST\",\r\n                url: `${AppCache.Url}/api/functions/Adaptive/RunReport?report=${config.id}&method=${method}`,\r\n                contentType: \"application/json\",\r\n                data: JSON.stringify(appdata),\r\n                success: function (data) {\r\n                    if (method === \"Get\") return resolve(Array.isArray(data) ? data[0] : data);\r\n                    resolve(data);\r\n                },\r\n                error: function (result, _status) {\r\n                    resolve(result);\r\n                },\r\n            });\r\n        });\r\n    },\r\n\r\n    init: function (config) {\r\n        return new Promise(function (resolve) {\r\n            var reqData = {};\r\n\r\n            // Script Startparameter\r\n            if (config.settings && config.settings.properties.report.scriptparam) reqData._startparam = config.settings.properties.report.scriptparam;\r\n            if (config.properties && config.properties.report.scriptparam) reqData._startparam = config.properties.report.scriptparam;\r\n\r\n            $.ajax({\r\n                type: \"POST\",\r\n                url: AppCache.Url + \"/api/functions/Adaptive/RunSelection?report=\" + config.id,\r\n                contentType: \"application/json\",\r\n                data: JSON.stringify(reqData),\r\n                success: function (data) {\r\n                    resolve(data);\r\n                },\r\n                error: function (result, status) {\r\n                    resolve(result);\r\n                },\r\n            });\r\n        });\r\n    },\r\n\r\n    navigation: function (navigation, appdata, events, id) {\r\n        if (!navigation) return;\r\n\r\n        switch (navigation.destinationType) {\r\n            case \"F\":\r\n                sap.n.Adaptive.getConfig(navigation.destinationTargetF).then(function (data) {\r\n                    var config = data;\r\n                    config.settings.data = JSON.parse(JSON.stringify(appdata));\r\n                    config.settings.events = events;\r\n                    config.settings.navigation = navigation;\r\n\r\n                    var childPage = sap.n.Adaptive.navigate(data.application, config, navigation, id);\r\n                    if (navigation.openAs === \"P\" && events.onNavigatePage) events.onNavigatePage(childPage);\r\n                    if (navigation.openAs === \"D\" && events.onNavigateDialog) events.onNavigateDialog(childPage);\r\n                });\r\n                break;\r\n\r\n            case \"A\":\r\n                let config = {\r\n                    data: JSON.parse(JSON.stringify(appdata)),\r\n                    events: events,\r\n                };\r\n\r\n                let childPage = sap.n.Adaptive.navigate(navigation.destinationTargetA, config, navigation, id);\r\n                if (navigation.openAs === \"P\" && events.onNavigatePage) events.onNavigatePage(childPage);\r\n                if (navigation.openAs === \"D\") childPage.open();\r\n                break;\r\n\r\n            case \"S\":\r\n                $.ajax({\r\n                    type: \"POST\",\r\n                    url: `${AppCache.Url}/api/functions/Adaptive/RunReport?report=${navigation.sourceTargetS}&method=RunScript&scriptid=${navigation.destinationTargetS}`,\r\n                    contentType: \"application/json\",\r\n                    data: JSON.stringify(appdata),\r\n                    success: function (data) {\r\n                        if (events.refresh) events.refresh();\r\n                    },\r\n                    error: function (result, _status) {},\r\n                });\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n\r\n    navigate: function (pageName, config, navigation, id) {\r\n        if (!pageName) return;\r\n        if (!id) id = ModelData.genID();\r\n\r\n        pageName = pageName.toUpperCase();\r\n\r\n        // Open Navigation Destination\r\n        switch (navigation.openAs) {\r\n            case \"D\":\r\n                var pageID = pageName + \"_\" + id + \"_D\";\r\n\r\n                var title = navigation.dialogTitle || \"\";\r\n\r\n                if (navigation.dialogTitleFieldText) {\r\n                    if (navigation.dialogTitle) {\r\n                        title += \" \" + navigation.dialogTitleFieldText;\r\n                    } else {\r\n                        title = navigation.dialogTitleFieldText;\r\n                    }\r\n                }\r\n\r\n                if (sap.n.Adaptive.dialogs[pageID] && sap.n.Adaptive.dialogs[pageID].getContent().length) {\r\n                    // Apply Changes to Dialog\r\n                    if (navigation.dialogHeight) sap.n.Adaptive.dialogs[pageID].setContentHeight(navigation.dialogHeight);\r\n                    if (navigation.dialogWidth) sap.n.Adaptive.dialogs[pageID].setContentWidth(navigation.dialogWidth);\r\n                    if (navigation.dialogTitle) sap.n.Adaptive.dialogs[pageID].setTitle(title);\r\n                    if (navigation.dialogIcon) sap.n.Adaptive.dialogs[pageID].setIcon(navigation.dialogIcon);\r\n\r\n                    if (navigation.dialogResize) {\r\n                        sap.n.Adaptive.dialogs[pageID].setResizable(navigation.dialogResize);\r\n                    } else {\r\n                        sap.n.Adaptive.dialogs[pageID].setResizable(false);\r\n                    }\r\n\r\n                    if (navigation.dialogScrollHorizontal) {\r\n                        sap.n.Adaptive.dialogs[pageID].addStyleClass(\"nepScrollContent\");\r\n                    } else {\r\n                        sap.n.Adaptive.dialogs[pageID].removeStyleClass(\"nepScrollContent\");\r\n                    }\r\n\r\n                    if (navigation.dialogHeader) {\r\n                        sap.n.Adaptive.dialogs[pageID].setShowHeader(navigation.dialogHeader);\r\n                    } else {\r\n                        sap.n.Adaptive.dialogs[pageID].setShowHeader(false);\r\n                    }\r\n\r\n                    sap.n.Adaptive.dialogs[pageID].setStretch(sap.ui.Device.system.phone);\r\n\r\n                    if (sap.n.Apps[pageID] && sap.n.Apps[pageID].beforeDisplay) {\r\n                        $.each(sap.n.Apps[pageID].beforeDisplay, function (i, data) {\r\n                            data(config);\r\n                        });\r\n                    }\r\n                } else {\r\n                    sap.n.Adaptive.dialogs[pageID] = new sap.m.Dialog({\r\n                        contentWidth: navigation.dialogWidth || \"1024px\",\r\n                        contentHeight: navigation.dialogHeight || \"500px\",\r\n                        stretch: sap.ui.Device.system.phone,\r\n                        showHeader: navigation.dialogHeader || false,\r\n                        title: title,\r\n                        icon: navigation.dialogIcon,\r\n                        draggable: true,\r\n                        resizable: navigation.dialogResize || false,\r\n                        horizontalScrolling: false,\r\n                        beforeClose: function (oEvent) {\r\n                            if (sap.n.Adaptive.dialogs[pageID]._oManuallySetSize) {\r\n                                sap.n.Adaptive.dialogs[pageID].setContentWidth(sap.n.Adaptive.dialogs[pageID]._oManuallySetSize.width + \"px\");\r\n                                sap.n.Adaptive.dialogs[pageID].setContentHeight(sap.n.Adaptive.dialogs[pageID]._oManuallySetSize.height + \"px\");\r\n                            }\r\n                        },\r\n                    });\r\n\r\n                    if (navigation.dialogScrollHorizontal) {\r\n                        sap.n.Adaptive.dialogs[pageID].addStyleClass(\"nepScrollContent\");\r\n                    } else {\r\n                        sap.n.Adaptive.dialogs[pageID].removeStyleClass(\"nepScrollContent\");\r\n                    }\r\n\r\n                    delete sap.n.Apps[pageID];\r\n\r\n                    AppCache.Load(pageName, {\r\n                        appGUID: pageID,\r\n                        parentObject: sap.n.Adaptive.dialogs[pageID],\r\n                        startParams: config,\r\n                    });\r\n                }\r\n\r\n                return sap.n.Adaptive.dialogs[pageID];\r\n\r\n            case \"S\":\r\n                if (localAppID === \"ADAPTIVEDESIGNER\") {\r\n                    sap.m.MessageToast.show(\"Sidepanel can only be displayed in Launchpad\");\r\n                } else {\r\n                    var title = navigation.dialogTitle || \"\";\r\n\r\n                    if (navigation.dialogTitleFieldText) {\r\n                        if (navigation.dialogTitle) {\r\n                            title += \" \" + navigation.dialogTitleFieldText;\r\n                        } else {\r\n                            title = navigation.dialogTitleFieldText;\r\n                        }\r\n                    }\r\n\r\n                    sap.n.Shell.loadSidepanel(pageName, title, {\r\n                        icon: navigation.dialogIcon,\r\n                        additionaltext: navigation.dialogSubTitle,\r\n                        appGUID: ModelData.genID(),\r\n                        startParams: config,\r\n                    });\r\n                }\r\n                return null;\r\n\r\n            default:\r\n                var pageID = pageName + \"_\" + id + \"_P\";\r\n\r\n                if (sap.n.Adaptive.pages[pageID]) {\r\n                    if (sap.n.Apps[pageID] && sap.n.Apps[pageID].beforeDisplay) {\r\n                        $.each(sap.n.Apps[pageID].beforeDisplay, function (i, data) {\r\n                            data(config);\r\n                        });\r\n                    }\r\n                } else {\r\n                    sap.n.Adaptive.pages[pageID] = new sap.m.Page({\r\n                        showFooter: false,\r\n                        showHeader: false,\r\n                        enableScrolling: false,\r\n                    });\r\n\r\n                    AppCache.Load(pageName, {\r\n                        appGUID: pageID,\r\n                        parentObject: sap.n.Adaptive.pages[pageID],\r\n                        startParams: config,\r\n                    });\r\n                }\r\n\r\n                return sap.n.Adaptive.pages[pageID];\r\n        }\r\n    },\r\n\r\n    buildForm: function (parent, config, appdata) {\r\n        try {\r\n            parent.destroyContent();\r\n\r\n            var form = new sap.ui.layout.form.SimpleForm({\r\n                layout: \"ResponsiveGridLayout\",\r\n                editable: true,\r\n                columnsL: parseInt(config.settings.properties.form.columnsL) || 2,\r\n                columnsM: parseInt(config.settings.properties.form.columnsM) || 1,\r\n                labelSpanL: parseInt(config.settings.properties.form.labelSpanL) || 4,\r\n                labelSpanM: parseInt(config.settings.properties.form.labelSpanM) || 2,\r\n            });\r\n\r\n            if (config.settings.properties.form.enableCompact) {\r\n                form.addStyleClass(\"sapUiSizeCompact\");\r\n            } else {\r\n                form.removeStyleClass(\"sapUiSizeCompact\");\r\n            }\r\n\r\n            // Selection Fields\r\n            $.each(config.settings.fieldsSel, function (i, field) {\r\n                // Trigger new form\r\n                if (field.enableNewForm) {\r\n                    parent.addContent(form);\r\n\r\n                    form = new sap.ui.layout.form.SimpleForm({\r\n                        layout: \"ResponsiveGridLayout\",\r\n                        editable: true,\r\n                        columnsL: parseInt(field.columnsL) || 2,\r\n                        columnsM: parseInt(field.columnsM) || 1,\r\n                        labelSpanL: parseInt(field.labelSpanL) || 4,\r\n                        labelSpanM: parseInt(field.labelSpanM) || 2,\r\n                    });\r\n                }\r\n\r\n                if (field.columnLabel)\r\n                    form.addContent(\r\n                        new sap.ui.core.Title({\r\n                            text: field.columnLabel,\r\n                            level: config.settings.properties.form.titleLevel || \"Auto\",\r\n                        })\r\n                    );\r\n\r\n                switch (field.type) {\r\n                    case \"Editor\":\r\n                        form.addContent(\r\n                            new sap.m.Label({\r\n                                text: sap.n.Adaptive.translateFieldLabel(field, config),\r\n                                required: field.required,\r\n                            })\r\n                        );\r\n\r\n                        var newField = new sap.m.FlexBox({\r\n                            height: field.editorHeight || \"400px\",\r\n                            renderType: \"Bare\",\r\n                            width: \"100%\",\r\n                            visible: field.visible,\r\n                        });\r\n\r\n                        try {\r\n                            sap.n.Adaptive.editor(newField, {});\r\n                        } catch (e) {\r\n                            console.log(e);\r\n                        }\r\n\r\n                        field._editor = newField.editor;\r\n                        field._editor.setEditable(field.editable);\r\n\r\n                        form.addContent(newField);\r\n\r\n                        if (field.default) newField.setState(field.default);\r\n                        break;\r\n\r\n                    case \"DatePicker\":\r\n                        form.addContent(\r\n                            new sap.m.Label({\r\n                                text: sap.n.Adaptive.translateFieldLabel(field, config),\r\n                                required: field.required,\r\n                            })\r\n                        );\r\n\r\n                        var newField = new sap.m.DatePicker({\r\n                            visible: field.visible,\r\n                            editable: field.editable,\r\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\r\n                            dateValue: \"{AppData>/\" + field.name + \"}\",\r\n                        });\r\n                        form.addContent(newField);\r\n                        break;\r\n\r\n                    case \"DateTimePicker\":\r\n                        form.addContent(\r\n                            new sap.m.Label({\r\n                                text: sap.n.Adaptive.translateFieldLabel(field, config),\r\n                                required: field.required,\r\n                            })\r\n                        );\r\n\r\n                        var newField = new sap.m.DateTimePicker({\r\n                            visible: field.visible,\r\n                            editable: field.editable,\r\n                            secondsStep: parseInt(field.dateTimePickerSecondsStep) || 1,\r\n                            minutesStep: parseInt(field.dateTimePickerMinutesStep) || 1,\r\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\r\n                            dateValue: \"{AppData>/\" + field.name + \"}\",\r\n                        });\r\n                        form.addContent(newField);\r\n                        break;\r\n\r\n                    case \"CheckBox\":\r\n                        form.addContent(\r\n                            new sap.m.Label({\r\n                                text: sap.n.Adaptive.translateFieldLabel(field, config),\r\n                                required: field.required,\r\n                            })\r\n                        );\r\n\r\n                        var newField = new sap.m.CheckBox({\r\n                            visible: field.visible,\r\n                            editable: field.editable,\r\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\r\n                            selected: \"{AppData>/\" + field.name + \"}\",\r\n                        });\r\n                        form.addContent(newField);\r\n                        break;\r\n\r\n                    case \"Switch\":\r\n                        form.addContent(\r\n                            new sap.m.Label({\r\n                                text: sap.n.Adaptive.translateFieldLabel(field, config),\r\n                                required: field.required,\r\n                            })\r\n                        );\r\n\r\n                        var newField = new sap.m.Switch({\r\n                            visible: field.visible,\r\n                            enabled: field.editable,\r\n                            state: \"{AppData>/\" + field.name + \"}\",\r\n                        });\r\n                        form.addContent(newField);\r\n                        break;\r\n\r\n                    case \"MultiSelect\":\r\n                    case \"MultiSelectLookup\":\r\n                    case \"MultiSelectScript\":\r\n                        form.addContent(\r\n                            new sap.m.Label({\r\n                                text: sap.n.Adaptive.translateFieldLabel(field, config),\r\n                                required: field.required,\r\n                            })\r\n                        );\r\n\r\n                        newField = new sap.m.MultiComboBox({\r\n                            width: \"100%\",\r\n                            visible: field.visible,\r\n                            selectedKeys: \"{AppData>/\" + field.name + \"}\",\r\n                            placeholder: field.placeholder || \"\",\r\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\r\n                            showSecondaryValues: true,\r\n                        });\r\n\r\n                        if (field.items) field.items.sort(sort_by(\"text\"));\r\n\r\n                        $.each(field.items, function (i, item) {\r\n                            newField.addItem(\r\n                                new sap.ui.core.ListItem({\r\n                                    key: item.key,\r\n                                    text: item.text,\r\n                                    additionalText: item.additionalText,\r\n                                })\r\n                            );\r\n                        });\r\n\r\n                        form.addContent(newField);\r\n                        break;\r\n\r\n                    case \"SingleSelect\":\r\n                    case \"SingleSelectLookup\":\r\n                    case \"SingleSelectScript\":\r\n                        form.addContent(\r\n                            new sap.m.Label({\r\n                                text: sap.n.Adaptive.translateFieldLabel(field, config),\r\n                                required: field.required,\r\n                            })\r\n                        );\r\n\r\n                        var newField = new sap.m.ComboBox({\r\n                            width: \"100%\",\r\n                            visible: field.visible,\r\n                            editable: field.editable,\r\n                            placeholder: field.placeholder || \"\",\r\n                            selectedKey: \"{AppData>/\" + field.name + \"}\",\r\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\r\n                            showSecondaryValues: true,\r\n                        });\r\n                        form.addContent(newField);\r\n\r\n                        newField.addItem(new sap.ui.core.Item({ key: \"\", text: \"\" }));\r\n\r\n                        if (field.items) field.items.sort(sort_by(\"text\"));\r\n\r\n                        $.each(field.items, function (i, item) {\r\n                            newField.addItem(\r\n                                new sap.ui.core.ListItem({\r\n                                    key: item.key,\r\n                                    text: item.text,\r\n                                    additionalText: item.additionalText,\r\n                                })\r\n                            );\r\n                        });\r\n                        break;\r\n\r\n                    case \"TextArea\":\r\n                        form.addContent(\r\n                            new sap.m.Label({\r\n                                text: sap.n.Adaptive.translateFieldLabel(field, config),\r\n                                required: field.required,\r\n                            })\r\n                        );\r\n\r\n                        var newField = new sap.m.TextArea({\r\n                            visible: field.visible,\r\n                            editable: field.editable,\r\n                            rows: parseInt(field.textAreaRows) || 2,\r\n                            placeholder: field.placeholder || \"\",\r\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\r\n                            value: \"{AppData>/\" + field.name + \"}\",\r\n                            width: \"100%\",\r\n                        });\r\n                        form.addContent(newField);\r\n                        break;\r\n\r\n                    default:\r\n                        form.addContent(\r\n                            new sap.m.Label({\r\n                                text: sap.n.Adaptive.translateFieldLabel(field, config),\r\n                                required: field.required,\r\n                            })\r\n                        );\r\n\r\n                        var newField = new sap.m.Input({\r\n                            visible: field.visible,\r\n                            editable: field.editable,\r\n                            type: field.inputType || \"Text\",\r\n                            placeholder: field.placeholder || \"\",\r\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\r\n                            value: \"{AppData>/\" + field.name + \"}\",\r\n                        });\r\n                        form.addContent(newField);\r\n                        break;\r\n                }\r\n            });\r\n\r\n            parent.addContent(form);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    },\r\n\r\n    buildTableFilter: function (parent, table, config, appdata, enableSearch, run) {\r\n        try {\r\n            parent.destroyContent();\r\n\r\n            if (!config) return;\r\n\r\n            var numFields = ModelData.Find(config.settings.fieldsSel, \"visible\", true);\r\n            var numFilters = numFields ? numFields.length : 1;\r\n            if (enableSearch) numFilters++;\r\n\r\n            var columnsM = 2;\r\n            var columnsL = 2;\r\n\r\n            switch (numFilters) {\r\n                case 3:\r\n                case 5:\r\n                case 6:\r\n                case 7:\r\n                case 8:\r\n                    columnsL = 3;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            var form = new sap.ui.layout.form.SimpleForm({\r\n                layout: \"ColumnLayout\",\r\n                editable: true,\r\n                labelSpanL: 12,\r\n                labelSpanM: 12,\r\n                columnsM: columnsM,\r\n                columnsL: columnsL,\r\n            });\r\n\r\n            if (config.settings.properties.form.enableCompact) {\r\n                form.addStyleClass(\"sapUiSizeCompact\");\r\n            } else {\r\n                form.removeStyleClass(\"sapUiSizeCompact\");\r\n            }\r\n\r\n            // Search\r\n            if (enableSearch) {\r\n                form.addContent(\r\n                    new sap.m.Label({\r\n                        text: sap.n.Adaptive.translateProperty(\"report\", \"searchLabel\", config),\r\n                        width: \"100%\",\r\n                    })\r\n                );\r\n\r\n                form.addContent(\r\n                    new sap.m.SearchField({\r\n                        placeholder: sap.n.Adaptive.translateProperty(\"report\", \"searchPlaceholder\", config),\r\n                        liveChange: function (oEvent) {\r\n                            var searchField = this;\r\n                            var filters = [];\r\n                            var bindingItems = table.getBinding(\"items\");\r\n                            var fieldsFilter = ModelData.Find(config.settings.fieldsRun, \"enableFilter\", true);\r\n\r\n                            $.each(fieldsFilter, function (i, field) {\r\n                                if (field.valueType) {\r\n                                    filters.push(new sap.ui.model.Filter(field.name + \"_value\", \"Contains\", searchField.getValue()));\r\n                                } else {\r\n                                    filters.push(new sap.ui.model.Filter(field.name, \"Contains\", searchField.getValue()));\r\n                                }\r\n                            });\r\n\r\n                            bindingItems.filter([\r\n                                new sap.ui.model.Filter({\r\n                                    filters: filters,\r\n                                    and: false,\r\n                                }),\r\n                            ]);\r\n                        },\r\n                    })\r\n                );\r\n            }\r\n\r\n            $.each(config.settings.fieldsSel, function (i, field) {\r\n                if (field.default) {\r\n                    if (field.type === \"MultiSelect\" || field.type === \"MultiSelectLookup\" || field.type === \"MultiSelectScript\") {\r\n                        if (typeof field.default === \"object\") {\r\n                            appdata[field.name] = field.default;\r\n                        } else {\r\n                            if (field.default.indexOf(\"[\") > -1) {\r\n                                appdata[field.name] = JSON.parse(field.default);\r\n                            } else {\r\n                                appdata[field.name] = field.default;\r\n                            }\r\n                        }\r\n                    } else if (field.type === \"Switch\" || field.type === \"CheckBox\") {\r\n                        if (field.default === \"true\" || field.default === \"1\" || field.default === \"X\") {\r\n                            appdata[field.name] = true;\r\n                        } else {\r\n                            delete appdata[field.name];\r\n                        }\r\n                    } else {\r\n                        appdata[field.name] = field.default;\r\n                    }\r\n                }\r\n                if (field.required) delete appdata[field.name + \"ValueState\"];\r\n\r\n                switch (field.type) {\r\n                    case \"MultiSelect\":\r\n                    case \"MultiSelectLookup\":\r\n                    case \"MultiSelectScript\":\r\n                        form.addContent(\r\n                            new sap.m.Label({\r\n                                text: sap.n.Adaptive.translateFieldLabel(field, config),\r\n                                required: field.required,\r\n                            })\r\n                        );\r\n\r\n                        var selField = new sap.m.MultiComboBox({\r\n                            width: \"100%\",\r\n                            visible: field.visible,\r\n                            selectedKeys: \"{AppData>/\" + field.name + \"}\",\r\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\r\n                            showSecondaryValues: true,\r\n                            selectionChange: function (oEvent) {\r\n                                if (run) run();\r\n                            },\r\n                        });\r\n\r\n                        if (field.items) field.items.sort(sort_by(\"text\"));\r\n\r\n                        $.each(field.items, function (i, item) {\r\n                            selField.addItem(\r\n                                new sap.ui.core.ListItem({\r\n                                    key: item.key,\r\n                                    text: item.text,\r\n                                    additionalText: item.additionalText,\r\n                                })\r\n                            );\r\n                        });\r\n\r\n                        form.addContent(selField);\r\n                        break;\r\n\r\n                    case \"SingleSelect\":\r\n                    case \"SingleSelectLookup\":\r\n                    case \"SingleSelectScript\":\r\n                        form.addContent(\r\n                            new sap.m.Label({\r\n                                text: sap.n.Adaptive.translateFieldLabel(field, config),\r\n                                required: field.required,\r\n                            })\r\n                        );\r\n\r\n                        var selField = new sap.m.ComboBox({\r\n                            width: \"100%\",\r\n                            visible: field.visible,\r\n                            selectedKey: \"{AppData>/\" + field.name + \"}\",\r\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\r\n                            showSecondaryValues: true,\r\n                            change: function (oEvent) {\r\n                                if (run) run();\r\n                            },\r\n                        });\r\n\r\n                        selField.addItem(new sap.ui.core.Item({ key: \"\", text: \"\" }));\r\n\r\n                        if (field.items) field.items.sort(sort_by(\"text\"));\r\n\r\n                        $.each(field.items, function (i, item) {\r\n                            selField.addItem(\r\n                                new sap.ui.core.ListItem({\r\n                                    key: item.key,\r\n                                    text: item.text,\r\n                                    additionalText: item.additionalText,\r\n                                })\r\n                            );\r\n                        });\r\n\r\n                        form.addContent(selField);\r\n                        break;\r\n\r\n                    case \"DateRange\":\r\n                        form.addContent(\r\n                            new sap.m.Label({\r\n                                text: sap.n.Adaptive.translateFieldLabel(field, config),\r\n                                required: field.required,\r\n                            })\r\n                        );\r\n\r\n                        var selField = new sap.m.DateRangeSelection({\r\n                            width: \"100%\",\r\n                            visible: field.visible,\r\n                            dateValue: \"{AppData>/\" + field.name + \"}\",\r\n                            secondDateValue: \"{AppData>/\" + field.name + \"_end}\",\r\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\r\n                            change: function (oEvent) {\r\n                                if (run) run();\r\n                            },\r\n                        });\r\n                        form.addContent(selField);\r\n                        break;\r\n\r\n                    case \"CheckBox\":\r\n                        form.addContent(\r\n                            new sap.m.Label({\r\n                                text: sap.n.Adaptive.translateFieldLabel(field, config),\r\n                                required: field.required,\r\n                            })\r\n                        );\r\n\r\n                        var selField = new sap.m.CheckBox({\r\n                            width: \"100%\",\r\n                            visible: field.visible,\r\n                            useEntireWidth: true,\r\n                            selected: \"{AppData>/\" + field.name + \"}\",\r\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\r\n                            select: function (oEvent) {\r\n                                if (run) run();\r\n                            },\r\n                        });\r\n                        form.addContent(selField);\r\n                        break;\r\n\r\n                    case \"Switch\":\r\n                        form.addContent(\r\n                            new sap.m.Label({\r\n                                text: sap.n.Adaptive.translateFieldLabel(field, config),\r\n                                required: field.required,\r\n                            })\r\n                        );\r\n\r\n                        var selField = new sap.m.Switch({\r\n                            visible: field.visible,\r\n                            state: \"{AppData>/\" + field.name + \"}\",\r\n                            change: function (oEvent) {\r\n                                if (run) run();\r\n                            },\r\n                        });\r\n                        form.addContent(selField);\r\n                        break;\r\n\r\n                    default:\r\n                        form.addContent(\r\n                            new sap.m.Label({\r\n                                text: sap.n.Adaptive.translateFieldLabel(field, config),\r\n                                required: field.required,\r\n                            })\r\n                        );\r\n\r\n                        var selField = new sap.m.SearchField({\r\n                            width: \"100%\",\r\n                            visible: field.visible,\r\n                            value: \"{AppData>/\" + field.name + \"}\",\r\n                            // valueState: \"{AppData>/\" + field.name + \"ValueState}\",\r\n                            search: function (oEvent) {\r\n                                if (run) run();\r\n                            },\r\n                        });\r\n\r\n                        form.addContent(selField);\r\n                        break;\r\n                }\r\n            });\r\n\r\n            parent.addContent(form);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    },\r\n\r\n    translateFieldLabel: function (field, config) {\r\n        if (!config.language) return field.text;\r\n\r\n        if (config.settings.translation && config.settings.translation[config.language] && config.settings.translation[config.language].fieldCatalog[field.name]) {\r\n            return config.settings.translation[config.language].fieldCatalog[field.name];\r\n        } else {\r\n            return field.text;\r\n        }\r\n    },\r\n\r\n    translateProperty: function (parent, key, config) {\r\n        if (!config.language) return config.settings.properties[parent][key];\r\n\r\n        if (config.settings.translation && config.settings.translation[config.language] && config.settings.translation[config.language][parent][key]) {\r\n            return config.settings.translation[config.language][parent][key];\r\n        }\r\n        return config.settings.properties[parent][key];\r\n    },\r\n\r\n    // Will be moved to template instead of dependency of P9 version\r\n    buildTableColumns: function (table, config, events) {\r\n        try {\r\n            if (config.settings.properties.table.enableCompact) {\r\n                table.addStyleClass(\"sapUiSizeCompact\");\r\n            } else {\r\n                table.removeStyleClass(\"sapUiSizeCompact\");\r\n            }\r\n\r\n            try {\r\n                table.destroyColumns();\r\n            } catch (e) {}\r\n\r\n            var Column = new sap.m.ColumnListItem({ selected: \"{_sel}\" });\r\n\r\n            // Handle Item Press\r\n            if (config.settings.properties.report._navigationItemPress) {\r\n                Column.setType(\"Active\");\r\n                Column.attachPress(function (oEvent) {\r\n                    var context = oEvent.oSource.getBindingContext();\r\n                    var columnData = context.getObject();\r\n\r\n                    if (config.settings.properties.report._navigationItemPress.dialogTitleField) {\r\n                        config.settings.properties.report._navigationItemPress.dialogTitleFieldText =\r\n                            columnData[config.settings.properties.report._navigationItemPress.dialogTitleField + \"_value\"] ||\r\n                            columnData[config.settings.properties.report._navigationItemPress.dialogTitleField];\r\n                    }\r\n\r\n                    sap.n.Adaptive.navigation(config.settings.properties.report._navigationItemPress, columnData, events, table.sId);\r\n                });\r\n            }\r\n\r\n            // Build Columns\r\n            $.each(config.settings.fieldsRun, function (i, field) {\r\n                if (!field.visible) return;\r\n\r\n                var ColumnHeader = new sap.m.Column({\r\n                    width: field.width,\r\n                    minScreenWidth: field.minScreenWidth,\r\n                });\r\n\r\n                if (field.hAlign) ColumnHeader.setHAlign(field.hAlign);\r\n\r\n                // Enable Sum\r\n                if (field.enableSum && field.type === \"ObjectNumber\") {\r\n                    var sumField = new sap.m.ObjectNumber({\r\n                        number: \"{AppConfig>/settings/properties/table/_sum/\" + field.name + \"}\",\r\n                        unit: \"{AppConfig>/settings/properties/table/_sum/\" + field.name + \"_unit}\",\r\n                    });\r\n                    ColumnHeader.setFooter(sumField);\r\n                }\r\n\r\n                var HBox = new sap.m.HBox();\r\n\r\n                HBox.addItem(\r\n                    new sap.m.Label({\r\n                        text: sap.n.Adaptive.translateFieldLabel(field, config),\r\n                        wrapping: true,\r\n                    })\r\n                );\r\n\r\n                var enabled = true;\r\n                if (field.enableSort || field.enableGroup) {\r\n                    var ColumnButton = new sap.ui.core.Icon({\r\n                        src: \"sap-icon://slim-arrow-down\",\r\n                        press: function (oEvent) {\r\n                            if (events.onHeaderClick) events.onHeaderClick(field, this);\r\n                        },\r\n                    });\r\n                    ColumnButton.addStyleClass(\"sapUiTinyMarginBegin\");\r\n                    HBox.addItem(ColumnButton);\r\n                }\r\n\r\n                ColumnHeader.setHeader(HBox);\r\n\r\n                table.addColumn(ColumnHeader);\r\n\r\n                var newField = null;\r\n                var formatterProp = \"text\";\r\n\r\n                switch (field.type) {\r\n                    case \"Link\":\r\n                        var options = {\r\n                            text: field.valueType ? \"{\" + field.name + \"_value}\" : \"{\" + field.name + \"}\",\r\n                            wrapping: field.wrapping || false,\r\n                            press: function (oEvent) {\r\n                                if (!field._navigation) return;\r\n\r\n                                var context = oEvent.oSource.getBindingContext();\r\n                                var columnData = context.getObject();\r\n\r\n                                // Sidepanel Lookup Text\r\n                                if (field._navigation.openAs === \"S\") {\r\n                                    var fieldName = ModelData.FindFirst(config.settings.fieldsRun, \"name\", field._navigation.dialogTitleField);\r\n\r\n                                    if (fieldName.valueType) {\r\n                                        field._navigation.dialogTitleFieldText = columnData[field._navigation.dialogTitleField + \"_value\"];\r\n                                    } else {\r\n                                        field._navigation.dialogTitleFieldText = columnData[field._navigation.dialogTitleField];\r\n                                    }\r\n                                }\r\n\r\n                                // Add pressed fieldname\r\n                                events.objectPressed = field.name;\r\n\r\n                                sap.n.Adaptive.navigation(field._navigation, columnData, events, newField.sId);\r\n                            },\r\n                        };\r\n\r\n                        if (field.linkHrefType) {\r\n                            options.href = \"{\" + field.name + \"_href}\";\r\n                            options.target = \"_blank\";\r\n                        }\r\n\r\n                        newField = new sap.m.Link(options);\r\n                        break;\r\n\r\n                    case \"ObjectNumber\":\r\n                        formatterProp = \"number\";\r\n\r\n                        var options = {\r\n                            number: field.valueType ? \"{\" + field.name + \"_value}\" : \"{\" + field.name + \"}\",\r\n                        };\r\n\r\n                        if (field.numberUnitType) options.unit = \"{\" + field.name + \"_unit}\";\r\n                        if (field.numberStateType) options.state = \"{\" + field.name + \"_state}\";\r\n\r\n                        newField = new sap.m.ObjectNumber(options);\r\n\r\n                        if (field.numberUnitType && field.numberUnitFormatter) {\r\n                            var fieldName = field.name + \"_unit\";\r\n\r\n                            newField.bindProperty(\"unit\", {\r\n                                parts: [fieldName],\r\n                                formatter: function (fieldName) {\r\n                                    if (typeof fieldName === \"undefined\" || fieldName === null) return;\r\n                                    return sap.n.Adaptive.formatter(fieldName, field.numberUnitFormatter);\r\n                                },\r\n                            });\r\n                        }\r\n                        break;\r\n\r\n                    case \"ObjectStatus\":\r\n                        formatterProp = \"text\";\r\n\r\n                        var options = {\r\n                            text: field.valueType ? \"{\" + field.name + \"_value}\" : \"{\" + field.name + \"}\",\r\n                        };\r\n\r\n                        if (field.statusTitleType) options.title = \"{\" + field.name + \"_title}\";\r\n                        if (field.statusIconType) options.icon = \"{\" + field.name + \"_icon}\";\r\n                        if (field.statusStateType) options.state = \"{\" + field.name + \"_state}\";\r\n\r\n                        newField = new sap.m.ObjectStatus(options);\r\n\r\n                        if (field.statusTitleType && field.statusTitleFormatter) {\r\n                            var fieldName = field.name + \"_title\";\r\n\r\n                            newField.bindProperty(\"title\", {\r\n                                parts: [fieldName],\r\n                                formatter: function (fieldName) {\r\n                                    if (typeof fieldName === \"undefined\" || fieldName === null) return;\r\n                                    return sap.n.Adaptive.formatter(fieldName, field.statusTitleFormatter);\r\n                                },\r\n                            });\r\n                        }\r\n                        break;\r\n\r\n                    case \"CheckBox\":\r\n                        var editable = field.editable ? true : false;\r\n\r\n                        newField = new sap.m.CheckBox({\r\n                            selected: field.valueType ? \"{\" + field.name + \"_value}\" : \"{\" + field.name + \"}\",\r\n                            editable: editable,\r\n                            wrapping: field.wrapping || false,\r\n                            select: function (oEvent) {\r\n                                var context = oEvent.oSource.getBindingContext();\r\n                                var data = context.getObject();\r\n                                events.onTableChange(data);\r\n                            },\r\n                        });\r\n                        break;\r\n\r\n                    case \"Switch\":\r\n                        var editable = field.editable ? true : false;\r\n\r\n                        newField = new sap.m.Switch({\r\n                            state: field.valueType ? \"{\" + field.name + \"_value}\" : \"{\" + field.name + \"}\",\r\n                            enabled: editable,\r\n                            change: function (oEvent) {\r\n                                var context = oEvent.oSource.getBindingContext();\r\n                                var data = context.getObject();\r\n                                events.onTableChange(data);\r\n                            },\r\n                        });\r\n                        break;\r\n\r\n                    case \"Image\":\r\n                        newField = new sap.m.Image({\r\n                            src: field.valueType ? \"{\" + field.name + \"_value}\" : \"{\" + field.name + \"}\",\r\n                            height: \"32px\",\r\n                        });\r\n                        break;\r\n\r\n                    case \"Icon\":\r\n                        newField = new sap.ui.core.Icon({\r\n                            src: field.valueType ? \"{\" + field.name + \"_value}\" : \"{\" + field.name + \"}\",\r\n                        });\r\n                        break;\r\n\r\n                    case \"Input\":\r\n                        var editable = field.editable ? true : false;\r\n\r\n                        newField = new sap.m.Input({\r\n                            value: field.valueType ? \"{\" + field.name + \"_value}\" : \"{\" + field.name + \"}\",\r\n                            editable: editable,\r\n                            change: function (oEvent) {\r\n                                var context = oEvent.oSource.getBindingContext();\r\n                                var data = context.getObject();\r\n                                events.onTableChange(data);\r\n                            },\r\n                        });\r\n                        break;\r\n\r\n                    case \"DatePicker\":\r\n                        var editable = field.editable ? true : false;\r\n\r\n                        var newField = new sap.m.DatePicker({\r\n                            visible: field.visible,\r\n                            editable: editable,\r\n                            dateValue: field.valueType ? \"{\" + field.name + \"_value}\" : \"{\" + field.name + \"}\",\r\n                            change: function (oEvent) {\r\n                                var context = oEvent.oSource.getBindingContext();\r\n                                var data = context.getObject();\r\n                                events.onTableChange(data);\r\n                            },\r\n                        });\r\n\r\n                        var fieldName = field.name;\r\n\r\n                        newField.bindProperty(\"dateValue\", {\r\n                            parts: [fieldName],\r\n                            formatter: function (fieldName) {\r\n                                if (typeof fieldName === \"undefined\" || fieldName === null) return;\r\n                                if (typeof fieldName === \"string\" && fieldName.length === 13) return new Date(parseInt(fieldName));\r\n                                return new Date(fieldName);\r\n                            },\r\n                        });\r\n\r\n                        break;\r\n\r\n                    default:\r\n                        newField = new sap.m.Text({\r\n                            text: field.valueType ? \"{\" + field.name + \"_value}\" : \"{\" + field.name + \"}\",\r\n                            wrapping: field.wrapping || false,\r\n                        });\r\n                        break;\r\n                }\r\n\r\n                Column.addCell(newField);\r\n\r\n                // Formatter\r\n                if (field.formatter) {\r\n                    var fieldName = field.valueType ? field.name + \"_value\" : field.name;\r\n                    newField.bindProperty(formatterProp, {\r\n                        parts: [fieldName],\r\n                        formatter: function (fieldName) {\r\n                            if (typeof fieldName === \"undefined\" || fieldName === null) return;\r\n                            return sap.n.Adaptive.formatter(fieldName, field.formatter);\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n\r\n            // Row Action 1\r\n            if (config.settings.properties.table.enableAction1) {\r\n                var ColumnHeader = new sap.m.Column({\r\n                    width: config.settings.properties.table.action1Width || \"\",\r\n                });\r\n\r\n                table.addColumn(ColumnHeader);\r\n\r\n                var newField = new sap.m.Button({\r\n                    text: config.settings.properties.table.action1Text,\r\n                    icon: config.settings.properties.table.action1Icon,\r\n                    type: config.settings.properties.table.action1Type,\r\n                    press: function (oEvent) {\r\n                        if (!config.settings.properties.table._action1Nav) return;\r\n\r\n                        var context = oEvent.oSource.getBindingContext();\r\n                        var columnData = context.getObject();\r\n\r\n                        if (config.settings.properties.table._action1Nav.dialogTitleField) {\r\n                            config.settings.properties.table._action1Nav.dialogTitleFieldText =\r\n                                columnData[config.settings.properties.table._action1Nav.dialogTitleField + \"_value\"] || columnData[config.settings.properties.table._action1Nav.dialogTitleField];\r\n                        }\r\n\r\n                        sap.n.Adaptive.navigation(config.settings.properties.table._action1Nav, columnData, events, table.sId);\r\n                    },\r\n                });\r\n\r\n                Column.addCell(newField);\r\n            }\r\n\r\n            // Row Action 2\r\n            if (config.settings.properties.table.enableAction2) {\r\n                var ColumnHeader = new sap.m.Column({\r\n                    width: config.settings.properties.table.action2Width || \"\",\r\n                });\r\n\r\n                table.addColumn(ColumnHeader);\r\n\r\n                var newField = new sap.m.Button({\r\n                    text: config.settings.properties.table.action2Text,\r\n                    icon: config.settings.properties.table.action2Icon,\r\n                    type: config.settings.properties.table.action2Type,\r\n                    width: config.settings.properties.table.action2Width || \"\",\r\n                    press: function (oEvent) {\r\n                        if (!config.settings.properties.table._action2Nav) return;\r\n\r\n                        var context = oEvent.oSource.getBindingContext();\r\n                        var columnData = context.getObject();\r\n\r\n                        if (config.settings.properties.table._action2Nav.dialogTitleField) {\r\n                            config.settings.properties.table._action2Nav.dialogTitleFieldText =\r\n                                columnData[config.settings.properties.table._action2Nav.dialogTitleField + \"_value\"] || columnData[config.settings.properties.table._action2Nav.dialogTitleField];\r\n                        }\r\n\r\n                        sap.n.Adaptive.navigation(config.settings.properties.table._action2Nav, columnData, events, table.sId);\r\n                    },\r\n                });\r\n\r\n                Column.addCell(newField);\r\n            }\r\n\r\n            // Row Action 3\r\n            if (config.settings.properties.table.enableAction3) {\r\n                var ColumnHeader = new sap.m.Column({\r\n                    width: config.settings.properties.table.action3Width || \"\",\r\n                });\r\n\r\n                table.addColumn(ColumnHeader);\r\n\r\n                var newField = new sap.m.Button({\r\n                    text: config.settings.properties.table.action3Text,\r\n                    icon: config.settings.properties.table.action3Icon,\r\n                    type: config.settings.properties.table.action3Type,\r\n                    width: config.settings.properties.table.action3Width || \"\",\r\n                    press: function (oEvent) {\r\n                        if (!config.settings.properties.table._action3Nav) return;\r\n\r\n                        var context = oEvent.oSource.getBindingContext();\r\n                        var columnData = context.getObject();\r\n\r\n                        if (config.settings.properties.table._action3Nav.dialogTitleField) {\r\n                            config.settings.properties.table._action3Nav.dialogTitleFieldText =\r\n                                columnData[config.settings.properties.table._action3Nav.dialogTitleField + \"_value\"] || columnData[config.settings.properties.table._action3Nav.dialogTitleField];\r\n                        }\r\n\r\n                        sap.n.Adaptive.navigation(config.settings.properties.table._action3Nav, columnData, events, table.sId);\r\n                    },\r\n                });\r\n\r\n                Column.addCell(newField);\r\n            }\r\n\r\n            // Table - Aggregation\r\n            table.bindAggregation(\"items\", {\r\n                path: \"/\",\r\n                template: Column,\r\n                templateShareable: false,\r\n            });\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    },\r\n\r\n    formatter: function (fieldName, formatter) {\r\n        var formatDate00 = sap.ui.core.format.DateFormat.getDateTimeInstance();\r\n        var formatDate01 = sap.ui.core.format.DateFormat.getDateTimeInstance({\r\n            pattern: \"dd.MM.yyyy\",\r\n        });\r\n        var formatDate02 = sap.ui.core.format.DateFormat.getDateTimeInstance({\r\n            pattern: \"mm-dd-yyyy\",\r\n        });\r\n        var formatDate03 = sap.ui.core.format.DateFormat.getDateTimeInstance({\r\n            pattern: \"yyyy MMM\",\r\n        });\r\n        var formatDate04 = sap.ui.core.format.DateFormat.getDateTimeInstance({\r\n            pattern: \"yyyy QQ\",\r\n        });\r\n\r\n        var formatNumber01 = sap.ui.core.format.NumberFormat.getFloatInstance({\r\n            maxFractionDigits: 0,\r\n            minFractionDigits: 0,\r\n            groupingEnabled: true,\r\n            groupingSeparator: \" \",\r\n        });\r\n        var formatNumber02 = sap.ui.core.format.NumberFormat.getFloatInstance({\r\n            maxFractionDigits: 1,\r\n            minFractionDigits: 1,\r\n            groupingEnabled: true,\r\n            groupingSeparator: \" \",\r\n            decimalSeparator: \",\",\r\n        });\r\n        var formatNumber03 = sap.ui.core.format.NumberFormat.getFloatInstance({\r\n            maxFractionDigits: 2,\r\n            minFractionDigits: 2,\r\n            groupingEnabled: true,\r\n            groupingSeparator: \" \",\r\n            decimalSeparator: \",\",\r\n        });\r\n        var formatNumber04 = sap.ui.core.format.NumberFormat.getFloatInstance({\r\n            maxFractionDigits: 3,\r\n            minFractionDigits: 3,\r\n            groupingEnabled: true,\r\n            groupingSeparator: \" \",\r\n            decimalSeparator: \",\",\r\n        });\r\n        var formatNumber05 = sap.ui.core.format.NumberFormat.getFloatInstance({\r\n            maxFractionDigits: 1,\r\n            minFractionDigits: 1,\r\n            groupingEnabled: true,\r\n            groupingSeparator: \" \",\r\n            decimalSeparator: \".\",\r\n        });\r\n        var formatNumber06 = sap.ui.core.format.NumberFormat.getFloatInstance({\r\n            maxFractionDigits: 2,\r\n            minFractionDigits: 2,\r\n            groupingEnabled: true,\r\n            groupingSeparator: \" \",\r\n            decimalSeparator: \".\",\r\n        });\r\n        var formatNumber07 = sap.ui.core.format.NumberFormat.getFloatInstance({\r\n            maxFractionDigits: 3,\r\n            minFractionDigits: 3,\r\n            groupingEnabled: true,\r\n            groupingSeparator: \" \",\r\n            decimalSeparator: \".\",\r\n        });\r\n\r\n        switch (formatter) {\r\n            case \"date00\":\r\n                return formatDate00.format(sap.n.Adaptive.getDate(fieldName));\r\n\r\n            case \"date01\":\r\n                return formatDate01.format(sap.n.Adaptive.getDate(fieldName));\r\n\r\n            case \"date02\":\r\n                return formatDate02.format(sap.n.Adaptive.getDate(fieldName));\r\n\r\n            case \"date03\":\r\n                return formatDate03.format(sap.n.Adaptive.getDate(fieldName));\r\n\r\n            case \"date04\":\r\n                return formatDate04.format(sap.n.Adaptive.getDate(fieldName));\r\n\r\n            case \"sapdate01\":\r\n                return fieldName.substr(6, 2) + \".\" + fieldName.substr(4, 2) + \".\" + fieldName.substr(0, 4);\r\n\r\n            case \"sapdate02\":\r\n                return fieldName.substr(4, 2) + \"-\" + fieldName.substr(6, 2) + \"-\" + fieldName.substr(0, 4);\r\n\r\n            case \"zero\":\r\n                return fieldName.replace(/^0+/, \"\");\r\n\r\n            case \"uppercase\":\r\n                return fieldName.toUpperCase();\r\n\r\n            case \"lowercase\":\r\n                return fieldName.toLowerCase();\r\n\r\n            case \"number00\":\r\n                return parseFloat(fieldName).toLocaleString();\r\n\r\n            case \"number01\":\r\n                return formatNumber01.format(fieldName);\r\n\r\n            case \"number02\":\r\n                return formatNumber02.format(fieldName);\r\n\r\n            case \"number03\":\r\n                return formatNumber03.format(fieldName);\r\n\r\n            case \"number04\":\r\n                return formatNumber04.format(fieldName);\r\n\r\n            case \"number05\":\r\n                return formatNumber05.format(fieldName);\r\n\r\n            case \"number06\":\r\n                return formatNumber06.format(fieldName);\r\n\r\n            case \"number07\":\r\n                return formatNumber07.format(fieldName);\r\n\r\n            case \"file\":\r\n                oFileSizeFormat = sap.ui.core.format.FileSizeFormat.getInstance({\r\n                    binaryFilesize: false,\r\n                    decimals: 2,\r\n                });\r\n                return oFileSizeFormat.format(fieldName);\r\n                break;\r\n\r\n            default:\r\n                return fieldName;\r\n        }\r\n    },\r\n\r\n    getDate: function (dateValue) {\r\n        if (typeof dateValue === \"string\" && dateValue.length === 13) return new Date(parseInt(dateValue));\r\n        return new Date(dateValue);\r\n    },\r\n\r\n    getConfig: function (id) {\r\n        return new Promise(function (resolve) {\r\n            if (localAppID !== \"ADAPTIVEDESIGNER\") {\r\n                if (sap.n.Adaptive.configurations[id]) return resolve(sap.n.Adaptive.configurations[id]);\r\n            }\r\n\r\n            $.ajax({\r\n                type: \"POST\",\r\n                contentType: \"application/json\",\r\n                url: AppCache.Url + \"/api/functions/Adaptive/Get\",\r\n                data: JSON.stringify({ id: id }),\r\n                success: function (data) {\r\n                    sap.n.Adaptive.configurations[id] = data;\r\n                    resolve(data);\r\n                },\r\n                error: function (result, status) {\r\n                    resolve(result);\r\n                },\r\n            });\r\n        });\r\n    },\r\n\r\n    checkRequiredSel: function (fields, data) {\r\n        let valid = true;\r\n\r\n        fields\r\n            .filter(function (f) {\r\n                return f.required;\r\n            })\r\n            .forEach(function (field) {\r\n                const { type, name } = field;\r\n                const k = `${name}ValueState`;\r\n\r\n                data[k] = \"None\";\r\n\r\n                if (!data[field.name]) {\r\n                    data[k] = \"Error\";\r\n                    valid = false;\r\n                }\r\n\r\n                if ([\"MultiSelect\", \"MultiSelectLookup\", \"MultiSelectScript\"].includes(type) && data[name] && !data[name].length) {\r\n                    data[k] = \"Error\";\r\n                    valid = false;\r\n                }\r\n            });\r\n\r\n        // remove invalid state\r\n        if (valid) {\r\n            fields\r\n                .filter(function (f) {\r\n                    return f.required;\r\n                })\r\n                .forEach(function (field) {\r\n                    delete data[field.name + \"ValueState\"];\r\n                });\r\n        }\r\n\r\n        return valid;\r\n    },\r\n\r\n    setDefaultData: function (config, metadata) {\r\n        if (!metadata) return;\r\n        const propReport = metadata.properties.report || [];\r\n\r\n        for (let key in propReport) {\r\n            const field = propReport[key];\r\n            if (typeof field.default !== \"undefined\" && typeof config.settings.properties.report[key] === \"undefined\") config.settings.properties.report[key] = field.default;\r\n        }\r\n\r\n        const propForm = metadata.properties.form || [];\r\n\r\n        for (let key in propForm) {\r\n            const field = propForm[key];\r\n            if (typeof field.default !== \"undefined\" && typeof config.settings.properties.form[key] === \"undefined\") config.settings.properties.form[key] = field.default;\r\n        }\r\n\r\n        const propTable = metadata.properties.table || [];\r\n\r\n        for (let key in propTable) {\r\n            const field = propTable[key];\r\n            if (typeof field.default !== \"undefined\" && typeof config.settings.properties.table[key] === \"undefined\") config.settings.properties.table[key] = field.default;\r\n        }\r\n    },\r\n\r\n    grouping: function (config, groupBy, oContext) {\r\n        var data = oContext.getObject();\r\n        var field = ModelData.FindFirst(config.settings.fieldsRun, \"name\", groupBy);\r\n        var fieldName = field.valueType ? field.name + \"_value\" : field.name;\r\n\r\n        if (field.formatter) return sap.n.Adaptive.formatter(data[fieldName], field.formatter);\r\n\r\n        return data[fieldName];\r\n    },\r\n\r\n    editor: function (obj, config) {\r\n        obj.editor = {\r\n            data: config.data || \"\",\r\n            editable: config.editable || false,\r\n            setData: function (data) {\r\n                this.data = data;\r\n                if (typeof obj.editor.sun !== \"undefined\") {\r\n                    obj.editor.sun.setContents(this.data);\r\n                    obj.editor.sun.core.history.stack = [];\r\n                    obj.editor.sun.core.history.reset();\r\n                }\r\n            },\r\n            getData: function () {\r\n                return this.data;\r\n            },\r\n            onChange: config.onChange || function () {},\r\n            setEditable: function (status) {\r\n                this.editable = status;\r\n                if (typeof obj.editor.sun !== \"undefined\") {\r\n                    if (this.editable) {\r\n                        obj.editor.sun.enabled();\r\n                    } else {\r\n                        obj.editor.sun.disabled();\r\n                    }\r\n                }\r\n            },\r\n        };\r\n\r\n        var id = config.id || ModelData.genID();\r\n        var data = config.data || \"\";\r\n\r\n        obj.addStyleClass(id);\r\n\r\n        var id = \"nepHtmlEditor-\" + ModelData.genID();\r\n        obj.addStyleClass(\"nepHtmlEditor \");\r\n        obj.addStyleClass(id);\r\n        obj.addItem(new sap.ui.core.HTML(id, {}).setContent(\"<textarea id='\" + id + \"'></textarea>\"));\r\n\r\n        obj.onAfterRendering = function () {\r\n            sap.ui.Device.resize.attachHandler(function (mParams) {\r\n                if (obj.getDomRef()) {\r\n                    var height = obj.getDomRef().offsetHeight - $(\".se-toolbar.sun-editor-common\").height() - 32 - 4 - 2;\r\n                    $(\".\" + id + \" .se-wrapper-inner.se-wrapper-wysiwyg.sun-editor-editable\").height(height);\r\n                    $(\".\" + id + \" .se-wrapper-inner.se-wrapper-code\").height(height + 22);\r\n                }\r\n            });\r\n\r\n            var height = obj.getDomRef().offsetHeight - 250;\r\n\r\n            var createEditor = function () {\r\n                var editor = SUNEDITOR.create(document.getElementById(id) || id, {\r\n                    width: \"100%\",\r\n                    height: height,\r\n                    value: obj.editor.data,\r\n                    resizingBar: false,\r\n                    defaultStyle: \"font-family: cursive: font-size:14px\",\r\n                    buttonList: [\r\n                        [\"undo\", \"redo\"],\r\n                        [\"font\", \"fontSize\", \"formatBlock\"],\r\n                        [\"bold\", \"underline\", \"italic\", \"fontColor\", \"hiliteColor\"],\r\n                        [\"outdent\", \"indent\", \"align\", \"horizontalRule\", \"list\", \"lineHeight\"],\r\n                        [\"table\", \"link\", \"image\", \"video\", \"audio\"],\r\n                        [\"showBlocks\", \"removeFormat\", \"codeView\", \"fullScreen\"],\r\n                    ],\r\n                    font: [\"Arial\", \"Comic Sans MS\", \"Courier New\", \"Impact\", \"Georgia\", \"Tahoma\", \"Trebuchet MS\", \"Verdana\"],\r\n                    attributesWhitelist: {\r\n                        all: \"style\",\r\n                        img: \"src|style|data-rotatey|data-rotatex|data-index\",\r\n                    },\r\n                });\r\n\r\n                editor.onBlur = function (e, core) {\r\n                    obj.editor.data = editor.getContents();\r\n                    obj.editor.onChange(obj.editor.data);\r\n                };\r\n\r\n                editor.onChange = function (e, core) {\r\n                    obj.editor.data = editor.getContents();\r\n                    obj.editor.onChange(obj.editor.data);\r\n                };\r\n\r\n                if (obj.editor.editable) {\r\n                    editor.enabled();\r\n                } else {\r\n                    editor.disabled();\r\n                }\r\n\r\n                obj.editor.sun = editor;\r\n\r\n                setTimeout(function () {\r\n                    if (obj.getDomRef()) {\r\n                        var height = obj.getDomRef().offsetHeight - $(\".\" + id + \" .se-toolbar.sun-editor-common\").height() - 32 - 4 - 2;\r\n                        $(\".\" + id + \" .se-wrapper-inner.se-wrapper-wysiwyg.sun-editor-editable\").height(height);\r\n                        $(\".\" + id + \" .se-wrapper-inner.se-wrapper-code\").height(height + 22);\r\n                    }\r\n                }, 1);\r\n            };\r\n\r\n            if (typeof SUNEDITOR !== \"object\") {\r\n                var actions = [];\r\n                actions.push(sap.n.Adaptive.loadLibraryEditor());\r\n                Promise.all(actions).then(function (values) {\r\n                    createEditor();\r\n                });\r\n            } else {\r\n                createEditor();\r\n            }\r\n        };\r\n    },\r\n\r\n    loadLibraryEditor: function () {\r\n        return new Promise(function (resolve) {\r\n            $(\"<link/>\", {\r\n                rel: \"stylesheet\",\r\n                type: \"text/css\",\r\n                href: \"/public/editor/suneditor.min.css\",\r\n            }).appendTo(\"head\");\r\n\r\n            $.ajax({\r\n                type: \"GET\",\r\n                url: \"/public/editor/suneditor.min.js\",\r\n                success: function (data) {\r\n                    resolve(\"OK\");\r\n                },\r\n                error: function (jqXHR, textStatus, errorThrown) {\r\n                    resolve(\"ERROR\");\r\n                },\r\n                dataType: \"script\",\r\n                cache: true,\r\n            });\r\n        });\r\n    },\r\n};\r\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":569},{"fieldNo":"0549ca33-0f90-47cf-dd6b-2dbd473b329b","fieldName":"sap.n.Ajax","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"sap.n.Ajax = {\n    SuccessGetMenu: function () {\n        // Enhancement\n        if (sap.n.Enhancement.SuccessGetMenu) {\n            try {\n                sap.n.Enhancement.SuccessGetMenu();\n            } catch (e) {\n                appCacheError('Enhancement SuccessGetMenu ' + e);\n            }\n        }\n\n        let delRun = [];\n        let delFav = [];\n\n        // Check Most Run\n        Object.entries(modelAppCacheTilesRun.oData).forEach(function ([_, data]) {\n            let rec = ModelData.FindFirst(AppCacheTiles, 'id', data.id);\n            if (!rec) {\n                delRun.push(data);\n            } else {\n                ModelData.Update(AppCacheTilesRun, 'id', rec.id, rec);\n            }\n        });\n\n        delRun.forEach(function (data) {\n            ModelData.Delete(AppCacheTilesRun, 'id', data.id);\n        });\n\n        modelAppCacheTilesFav.oData.forEach(function (data) {\n            let rec = ModelData.FindFirst(AppCacheTiles, 'id', data.id);\n            if (!rec) delFav.push(data);\n        });\n\n        delFav.forEach(function (data) {\n            ModelData.Delete(AppCacheTilesFav, 'id', data.id);\n        });\n\n        // Save Run/Fav\n        setCacheAppCacheTilesRun();\n        setCacheAppCacheTilesFav();\n\n        if (delRun.length) sap.n.Launchpad.handleFavRedraw();\n\n        // Check for rebuilding menu\n        let rebuild = false;\n\n        // Tiles - Check last update\n        Array.isArray(currTiles) && currTiles.forEach(function (data) {\n            let rec = ModelData.FindFirst(AppCacheTiles, 'id', data.id);\n            if (rec) {\n                if (data.updatedAt !== rec.updatedAt) rebuild = true;\n            } else {\n                rebuild = true;\n            }\n        });\n\n        // Category - Check last update\n        Array.isArray(currCategory) && currCategory.forEach(function (data) {\n            let rec = ModelData.FindFirst(AppCacheCategory, 'id', data.id);\n            if (rec) {\n                if (data.updatedAt !== rec.updatedAt) rebuild = true;\n            } else {\n                rebuild = true;\n            }\n        });\n\n        // Category Child - Check last update\n        Array.isArray(currCategoryChild) && currCategoryChild.forEach(function (data) {\n            let rec = ModelData.FindFirst(AppCacheCategoryChild, 'id', data.id);\n            if (rec) {\n                if (data.updatedAt !== rec.updatedAt) rebuild = true;\n            } else {\n                rebuild = true;\n            }\n        });\n\n        // New/Deleted\n        if (currTiles.length !== modelAppCacheTiles.oData.length) rebuild = true;\n        if (currCategory.length !== modelAppCacheCategory.oData.length) rebuild = true;\n        if (currCategoryChild.length !== modelAppCacheCategoryChild.oData.length) rebuild = true;\n        if (currFav.length !== modelAppCacheTilesFav.oData.length) rebuild = true;\n\n        // Rebuild \n        if (rebuild) {\n            location.hash = '';\n            sap.n.Launchpad.BuildMenu();\n            sap.n.Launchpad.RebuildTiles();\n        }\n\n        // When using hash first time, need to get tiles from server before hash will work\n        if (sap.n.HashNavigation.lateNav) {\n            location.hash = sap.n.HashNavigation.lateNav;\n            sap.n.HashNavigation.lateNav = null;\n        }\n\n        // Cleanup\n        currCategoryChild = [];\n        currCategory = [];\n        currTiles = [];\n    },\n\n    loadApps: function (dataTile) {\n        if (!dataTile.urlApplication) dataTile.urlApplication = '';\n        if (!dataTile.urlType) dataTile.urlType = '';\n        if (!dataTile.urlAuth) dataTile.urlAuth = '';\n\n        // Application\n        if (dataTile.actionApplication) {\n            let viewName = 'app:' + dataTile.actionApplication + ':' + AppCache.userInfo.language + ':' + dataTile.urlApplication;\n            viewName = viewName.toUpperCase();\n\n            if (typeof p9Database !== 'undefined' && p9Database !== null) {\n                p9GetView(viewName).then(function (viewData) {\n                    if (viewData.length <= 2) {\n                        appCacheLog(`LoadApps: loading ${dataTile.actionApplication}`);\n                        AppCache.Load(dataTile.actionApplication, {\n                            load: 'download',\n                            appPath: dataTile.urlApplication,\n                            appType: dataTile.urlType,\n                            appAuth: dataTile.urlAuth,\n                            sapICFNode: dataTile.sapICFNode,\n                        });\n                    }\n                }).catch(function (e) {\n                    console.log(e);\n                });\n            } else {\n                if (!sapStorageGet(viewName)) {\n                    appCacheLog(`LoadApps: loading ${dataTile.actionApplication}`);\n                    AppCache.Load(dataTile.actionApplication, {\n                        load: 'download',\n                        appPath: dataTile.urlApplication,\n                        appType: dataTile.urlType,\n                        appAuth: dataTile.urlAuth,\n                        sapICFNode: dataTile.sapICFNode,\n                    });\n                }\n            }\n        }\n\n        // Application in Tile\n        if (dataTile.type === 'application' && dataTile.tileApplication) {\n            let viewName = 'app:' + dataTile.tileApplication + ':' + AppCache.userInfo.language + ':' + dataTile.urlApplication;\n            viewName = viewName.toUpperCase();\n\n            if (typeof p9Database !== 'undefined' && p9Database !== null) {\n                p9GetView(viewName).then(function (viewData) {\n                    if (viewData.length <= 2) {\n                        appCacheLog(`LoadApps: loading ${dataTile.tileApplication}`);\n                        AppCache.Load(dataTile.tileApplication, {\n                            load: 'download'\n                        });\n                    }\n                }).catch(function (e) {\n                    console.log(e);\n                });\n            } else {\n                if (!sapStorageGet(viewName)) {\n                    appCacheLog(`LoadApps: loading ${dataTile.tileApplication}`);\n                    AppCache.Load(dataTile.tileApplication, {\n                        load: 'download'\n                    });\n                }\n            }\n        }\n    }\n}","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":570},{"fieldNo":"090f468e-3e9c-4981-e37d-3f6b3c942ef6","fieldName":"sap.n.Card","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"sap.n.Card = {\r\n    applyDragDropToFavorites: function (container) {\r\n        function onStop (evt, ui) {\r\n            const grid = container.getDomRef();\r\n            if (!grid) return;\r\n\r\n            const updated = Array.from(grid.querySelectorAll('.nepFCardContainer'))\r\n                .map((tileElm) => tileElm.dataset.tileId)\r\n                .filter((tileId) => typeof tileId !== 'undefined')\r\n                .map((tileId) => ModelData.FindFirst(AppCacheTilesFav, 'id', tileId));\r\n            \r\n            modelAppCacheTilesFav.setData(updated);\r\n            setCacheAppCacheTilesFav();\r\n            sap.n.Launchpad.saveFav();\r\n            sap.n.Launchpad.BuildTreeMenu();\r\n        }\r\n            \r\n        sap.n.DragDrop.restrictedTo(document.getElementById(container.getId()), undefined, onStop);\r\n    },\r\n\r\n    setBackgroundShade: function (dataTile, dataCat, card, isIcon) {\r\n        let backgroundColor, backgroundShade;\r\n\r\n        if (typeof dataCat === 'undefined') dataCat = {};\r\n\r\n        if (dataCat.styleClass) card.addStyleClass(dataCat.styleClass);\r\n        if (dataTile.styleClass) card.addStyleClass(dataTile.styleClass);\r\n\r\n        if (dataCat.enableShadeCalc) {\r\n            switch (sap.n.Launchpad.backgroundShade) {\r\n                case 'ShadeA':\r\n                    sap.n.Launchpad.backgroundShade = 'ShadeB';\r\n                    break;\r\n\r\n                case 'ShadeB':\r\n                    sap.n.Launchpad.backgroundShade = 'ShadeC';\r\n                    break;\r\n\r\n                case 'ShadeC':\r\n                    sap.n.Launchpad.backgroundShade = 'ShadeD';\r\n                    break;\r\n\r\n                default:\r\n                    sap.n.Launchpad.backgroundShade = 'ShadeA';\r\n                    break;\r\n            }\r\n        } else {\r\n            sap.n.Launchpad.backgroundShade = dataCat.backgroundShade;\r\n        }\r\n\r\n        backgroundColor = dataTile.backgroundColor || dataCat.backgroundColor || '';\r\n        backgroundShade = dataTile.backgroundShade || sap.n.Launchpad.backgroundShade || 'ShadeA';\r\n\r\n        if (isIcon && !backgroundColor) backgroundColor = 'ColorSet10';\r\n\r\n        card.addStyleClass('sap' + backgroundColor + backgroundShade.substr(5, 1));\r\n    },\r\n\r\n    cardWidth: function (config) {\r\n        // Backward compability\r\n        if (parseInt(AppCache.p9Version.substring(0, 2)) < 21) {\r\n            if (!config.dataTile.cardWidth && config.dataTile.frameType) {\r\n                switch (parseInt(config.dataTile.frameType)) {\r\n                    case 20:\r\n                    case 25:\r\n                        config.dataTile.cardWidth = sap.n.Layout.tileWidth.SMALL;\r\n                        break;\r\n\r\n                    case 30:\r\n                    case 40:\r\n                        config.dataTile.cardWidth = sap.n.Layout.tileWidth.MEDIUM;\r\n                        break;\r\n\r\n                    case 50:\r\n                    case 60:\r\n                    case 70:\r\n                        config.dataTile.cardWidth = sap.n.Layout.tileWidth.WIDE;\r\n                        break;\r\n\r\n                    case 75:\r\n                    case 80:\r\n                    case 90:\r\n                        config.dataTile.cardWidth = sap.n.Layout.tileWidth.WIDER;\r\n                        break;\r\n\r\n                    case 100:\r\n                        config.dataTile.cardWidth = sap.n.Layout.tileWidth.MAX;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (!config.dataTile.cardWidth && config.dataTile.forceRow) config.dataTile.cardWidth = sap.n.Layout.tileWidth.MAX;\r\n\r\n        }\r\n\r\n        return config.dataTile.cardWidth || sap.n.Layout.tileWidth.SMALL;\r\n    },\r\n\r\n    buildCardDefault: function (config) {\r\n        // Customization Properties\r\n        const props = sap.n.Customization.getProperties([...config.path, config.dataTile.id]);\r\n        if (props.width) config.dataTile.cardWidth = props.width;\r\n        if (props.height) config.dataTile.cardHeight = props.height;\r\n\r\n        let cardWidth = sap.n.Card.cardWidth(config);\r\n        let cardHeader;\r\n\r\n        // Favorites\r\n        if (config.isFav) {\r\n            let favData = ModelData.FindFirst(AppCacheTilesFav, 'id', config.dataTile.id);\r\n            if (favData) {\r\n                if (favData.cardWidth) cardWidth = favData.cardWidth;\r\n                if (favData.cardHeight) config.dataTile.cardHeight = favData.cardHeight;\r\n            }\r\n        }\r\n\r\n        // Card Container\r\n        const cardContainerId = `${nepId()}_tile${config.dataTile.id}`;\r\n        let cardContainer = new sap.m.FlexBox(cardContainerId, {\r\n            width: '100%',\r\n            fitContainer: true,\r\n        }).addStyleClass('nepFCardContainer nepTile' + cardWidth);\r\n\r\n        cardContainer.addEventDelegate({\r\n            onkeyup: function (evt) {\r\n                // open the Tile on pressing Enter\r\n                if (evt.key === 'Enter') {\r\n                    sap.n.Launchpad.HandleTilePress(config.dataTile, config.dataCat);\r\n                }\r\n            },\r\n        });\r\n        \r\n        addCustomData(cardContainer, {\r\n            type: 'tile',\r\n            context: 'tile',\r\n            'tile-id': config.dataTile.id,\r\n        });\r\n\r\n        if (!config.isFav && !sap.n.Customization.isDisabled()) {\r\n            const { lockScreenChanges } = modelAppCacheDiaSettings.getData();\r\n            if (!lockScreenChanges) {\r\n                cardContainer.addEventDelegate(\r\n                    sap.n.Customization.Popover.createEventDelegate({\r\n                        type: 'tile',\r\n                        elmId: cardContainerId,\r\n                        tileId: config.dataTile.id,\r\n                    })\r\n                );\r\n            }\r\n\r\n            // Remove Card\r\n            const btnRemoveCard = new sap.m.Button();\r\n            btnRemoveCard.addStyleClass('nepDeleteCard');\r\n            btnRemoveCard.tooltip = new sap.ui.core.TooltipBase().setText('');\r\n            btnRemoveCard.setIcon('sap-icon://less');\r\n            btnRemoveCard.setType(sap.m.ButtonType.Reject);\r\n            btnRemoveCard.attachPress(() => {\r\n                sap.n.Customization.remove([...config.path, config.dataTile.id]);\r\n                cardContainer.destroy();\r\n            });\r\n            cardContainer.addItem(btnRemoveCard);\r\n        }\r\n\r\n        // Card\r\n        let card = new sap.f.Card(nepId(), {\r\n            width: '100%',\r\n        }).addStyleClass('nepFCard tile' + config.dataTile.id);\r\n\r\n        if (config.dataTile.styleClass) cardContainer.addStyleClass(config.dataTile.styleClass);\r\n        if (config.dataTile.cardHeight) cardContainer.addStyleClass('nepTile' + config.dataTile.cardHeight);\r\n        if (config.dataTile.openClickTile) card.addStyleClass('nepTileClickable');\r\n        if (config.dataTile.cardHeightFit || config.dataCat.cardHeightFit) card.addStyleClass('sapFCardFitContent');\r\n\r\n        // Aria Label\r\n        card.onAfterRendering = function () {\r\n            var elem = card.getDomRef();\r\n\r\n            elem.setAttribute(\r\n                \"aria-label\",\r\n                sap.n.Launchpad.translateTile(\"title\", config.dataTile) + \" \" + sap.n.Launchpad.translateTile(\"subTitle\", config.dataTile)\r\n            );\r\n        };\r\n\r\n        // Background Color\r\n        sap.n.Card.setBackgroundShade(config.dataTile, config.dataCat, card);\r\n\r\n        // Icon/Image\r\n        let cardIconSrc = config.dataTile.icon || '';\r\n\r\n        if (config.dataTile.cardImage) {\r\n            let imageUrl = AppCache.Url + config.dataTile.cardImage;\r\n            if (AppCache.isMobile && config.dataTile.cardImageData) cardIconSrc = config.dataTile.cardImageData;\r\n            cardIconSrc = imageUrl;\r\n        }\r\n\r\n        // Header\r\n        cardHeader = new sap.f.cards.Header(nepId(), {\r\n            title: sap.n.Launchpad.translateTile('title', config.dataTile),\r\n            subtitle: sap.n.Launchpad.translateTile('subTitle', config.dataTile),\r\n            statusText: sap.n.Launchpad.translateTile('footer', config.dataTile),\r\n            iconSrc: cardIconSrc,\r\n        });\r\n\r\n        // Content\r\n        let cardContent = new sap.m.FlexBox(nepId(), {\r\n            direction: 'Column',\r\n            height: '100%',\r\n            justifyContent: 'SpaceBetween',\r\n            width: '100%',\r\n            fitContainer: true\r\n        });\r\n        \r\n        // Content Body\r\n        let cardBody = new sap.m.FlexBox(nepId(), {\r\n            fitContainer: true,\r\n            renderType: 'Bare',\r\n            direction: 'Column',\r\n            justifyContent: 'Start'\r\n        }).addStyleClass('nepFCardBody');\r\n\r\n        // Background Image \r\n        let imageSource = config.dataTile.image\r\n        if (AppCache.isMobile && config.dataTile.imageData) imageSource = config.dataTile.imageData;\r\n\r\n        let inlineHeight = config.dataTile.imageHeight || 'auto';\r\n\r\n        // Background Image Inline\r\n        if (config.dataTile.image && !config.dataTile.imagePosition) {\r\n            let imageSource = config.dataTile.image\r\n            if (AppCache.isMobile && config.dataTile.imageData) imageSource = config.dataTile.imageData;\r\n\r\n            let cardImage = new sap.m.Image(nepId(), {\r\n                src: emptyBase64Image(),\r\n                width: '100%',\r\n                height: inlineHeight,\r\n                densityAware: false,\r\n            }).addStyleClass('nepFCardInlineImage tileInlineImage' + config.dataTile.id);\r\n            lazyLoadImage(imageSource, cardImage, 'sap-component');\r\n\r\n            cardBody.addItem(cardImage);\r\n        }\r\n\r\n        // Background Image on Top\r\n        function getBackgroundImageOnTop() {\r\n            cardHeader.topImageId = nepId();\r\n            const id = cardHeader.topImageId;\r\n            const tileId = config.dataTile.id;\r\n\r\n            const img = new Image();\r\n            img.oncontextmenu = function () {\r\n                if (!sap.n.Customization.isDisabled()) {\r\n                    sap.n.Customization.Popover.open(img, {\r\n                        tileId,\r\n                        type: 'tile',\r\n                        elmId: card.getId(), \r\n                    });\r\n                    return false;\r\n                }\r\n            };\r\n\r\n            Object.entries({\r\n                'src': emptyBase64Image(),\r\n                'alt': '',\r\n                'aria-hidden': 'true',\r\n                'role': 'presentation',\r\n                'data-sap-ui': id,\r\n            }).forEach(function ([k, v]) {\r\n                img.setAttribute(k, v);\r\n            });\r\n            lazyLoadImage(imageSource, img, 'element');\r\n\r\n            addClass(img, ['sapMImg', 'nepFCardTopImage', 'tileTopImage', tileId, `tileTopImage${tileId}`]);\r\n            img.style.cssText = `\r\n                width: 100%;\r\n                height: ${inlineHeight};\r\n            `;\r\n\r\n            return img;\r\n        }\r\n\r\n        const isBackgroundImageOnTop = config.dataTile.imagePosition === 'top';\r\n        const img = isBackgroundImageOnTop ? getBackgroundImageOnTop() : '';\r\n\r\n        // Card Body Content\r\n        switch (config.dataTile.type) {\r\n            case 'adaptive':\r\n                cardBody.addItem(sap.n.Card.buildCardBodyAdaptive(config));\r\n                break;\r\n\r\n            case 'application':\r\n                cardBody.addItem(sap.n.Card.buildCardBodyApplication(config));\r\n                break;\r\n\r\n            case 'intcard':\r\n                cardBody.addItem(sap.n.Card.buildCardBodyIntCard(config));\r\n                cardHeader.setVisible(false);\r\n                break;\r\n\r\n            case 'highchart':\r\n                cardBody.addItem(sap.n.Card.buildCardBodyHighchart(config));\r\n                break;\r\n\r\n            case 'highstock':\r\n                cardBody.addItem(sap.n.Card.buildCardBodyHighstock(config));\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // Description\r\n        if (config.dataTile.description) cardBody.addItem(new sap.m.Text({ text: sap.n.Launchpad.translateTile('description', config.dataTile) }).addStyleClass('nepCardDescription'));\r\n\r\n        // Action Panel\r\n        let cardAction = new sap.m.VBox(nepId());\r\n\r\n        // Add Objects\r\n        cardContainer.addItem(card);\r\n        cardContent.addItem(cardBody);\r\n        cardContent.addItem(cardAction);\r\n        card.setHeader(cardHeader);\r\n        card.setContent(cardContent);\r\n\r\n        // Actions \r\n        sap.n.Card.buildCardAction({\r\n            pageID: config.pageID,\r\n            dataTile: config.dataTile,\r\n            parent: cardAction,\r\n            cardActionParent: card,\r\n            dataCat: config.dataCat,\r\n            cardContainer: cardContainer,\r\n            isFav: config.isFav\r\n        });\r\n\r\n        let _cardHeader_delegate = {\r\n            onAfterRendering: function () {\r\n                let dom = cardHeader.getDomRef();\r\n                if (!dom) {\r\n                    return;\r\n                }\r\n\r\n                let labelledby = dom.getAttribute('aria-labelledby') || '';\r\n                let split = labelledby.split(' ');\r\n\r\n                dom.setAttribute('aria-labelledby', split[0]);\r\n                dom.removeAttribute('tabindex');\r\n\r\n                // Background Image on Top\r\n                if (config.dataTile.imagePosition === 'top') {\r\n                    if (!elById(cardHeader.topImageId)) {\r\n                        insertBeforeElm(elById(cardHeader.getId()), img);\r\n                    }\r\n                }\r\n\r\n                let focusableCardHeader = dom.querySelector(\".sapFCardHeaderWrapper\");\r\n                if (focusableCardHeader) focusableCardHeader.removeAttribute(\"tabindex\");\r\n\r\n                const ariaHeader = dom.querySelector('[role=\"heading\"]');\r\n                if (ariaHeader) ariaHeader.setAttribute('aria-level', '2');\r\n            }\r\n        };\r\n        cardHeader.addEventDelegate(_cardHeader_delegate);\r\n\r\n        return cardContainer;\r\n    },\r\n\r\n    setCardContentHeight: function (config, cardContent) {\r\n        if (config.dataTile.bodyHeight) cardContent.setHeight(config.dataTile.bodyHeight);\r\n    },\r\n\r\n    buildCardBodyAdaptive: function (config) {\r\n        let cardContent = new sap.m.Panel(nepId(), {\r\n            backgroundDesign: 'Transparent'\r\n        }).addStyleClass('sapUiNoContentPadding nepTileApplicationPanel');\r\n\r\n        this.setCardContentHeight(config, cardContent);\r\n        if (!config.dataTile.settings.adaptive.idTile) return cardContent;\r\n\r\n        sap.n.Adaptive.getConfig(config.dataTile.settings.adaptive.idTile).then(function (startParams) {\r\n            // Exists ? \r\n            if (!startParams) {\r\n                sap.m.MessageToast.show(AppCache_tAdaptiveNotFound.getText());\r\n                return;\r\n            }\r\n\r\n            AppCache.Load(startParams.application, {\r\n                parentObject: cardContent,\r\n                appGUID: ModelData.genID(),\r\n                startParams: startParams\r\n            });\r\n        }).catch(function (_data) { });\r\n        return cardContent;\r\n    },\r\n\r\n    loadAppIntoTile(app, parentObject, startParams) {\r\n        if (!refreshingAuth) {\r\n            AppCache.Load(app, { parentObject, startParams });\r\n            return;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.loadAppIntoTile(app, parentObject, startParams);\r\n        }, AppCache.DelayOnRefreshingToken.AppInTile);\r\n    },\r\n\r\n    buildCardBodyApplication: function (config) {\r\n        let cardContent = new sap.m.Panel(nepId(), {\r\n            backgroundDesign: 'Transparent'\r\n        }).addStyleClass('sapUiNoContentPadding nepTileApplicationPanel');\r\n\r\n        this.setCardContentHeight(config, cardContent);\r\n\r\n        let startParams = {};\r\n        try {\r\n            startParams = JSON.parse(config.dataTile.startParams);\r\n        } catch (e) {}\r\n\r\n        if (config.dataTile.tileApplication) {\r\n            this.loadAppIntoTile(config.dataTile.tileApplication, cardContent, startParams);\r\n        }\r\n\r\n        return cardContent;\r\n    },\r\n\r\n    buildCardBodyIntCard: function (config) {\r\n\r\n        if (!sap.ui.integration) sap.ui.getCore().loadLibrary(\"sap.ui.integration\")\r\n\r\n        let cardContent = new sap.m.Panel(nepId(), {\r\n            backgroundDesign: 'Transparent'\r\n        }).addStyleClass('sapUiNoContentPadding nepTileApplicationPanel');\r\n        this.setCardContentHeight(config, cardContent);\r\n\r\n        // Integration Card \r\n        let intCard = new sap.ui.integration.widgets.Card(nepId(), {\r\n            width: '100%',\r\n            manifest: AppCache.Url + config.dataTile.dataUrl,\r\n        }).addStyleClass('nepFCard nepICCard');\r\n\r\n        cardContent.addContent(intCard);\r\n        return cardContent;\r\n    },\r\n\r\n    buildCardBodyHighchart: function (config) {\r\n        let cardContent = new sap.m.Panel(nepId(), {\r\n            backgroundDesign: 'Transparent'\r\n        }).addStyleClass('sapUiNoContentPadding nepTileApplicationPanel');\r\n\r\n        this.setCardContentHeight(config, cardContent);\r\n\r\n        let chartId = 'chart' + ModelData.genID();\r\n        let chartHeight = config.dataTile.bodyHeight || '400px';\r\n        let oHighchart;\r\n\r\n        let oHighchartHTML = new sap.ui.core.HTML(nepId(), {\r\n            content: `<div id=\"${chartId}\" style=\"height:100%; width:100%\"></div>`,\r\n            afterRendering: function (oEvent) {\r\n                setTimeout(function () {\r\n                    let chartData = localStorage.getItem(`p9TileChart${config.dataTile.id}`);\r\n                    if (chartData) {\r\n                        chartData = JSON.parse(chartData);\r\n                        if (!chartData.chart) chartData.chart = {};\r\n                        chartData.chart.renderTo = chartId;\r\n                        oHighchart = Highcharts.chart(chartData);\r\n                    } else {\r\n                        oHighchart = Highcharts.chart({\r\n                            chart: {\r\n                                renderTo: chartId,\r\n                                height: chartHeight,\r\n                                style: { fontFamily: '72' }\r\n                            },\r\n                            credits: { enabled: false },\r\n                            title: { text: '' },\r\n                            subTitle: { text: '' },\r\n                            series: []\r\n                        });\r\n                    }\r\n\r\n                    // Fetch Data \r\n                    if (config.dataTile.dataUrl) {\r\n\r\n                        // Trigger Pull 1. Time\r\n                        setTimeout(function () { sap.n.Launchpad.getHighchartData(config.dataTile, oHighchart, config.pageID, chartId, 'start'); }, 250);\r\n\r\n                        // Pull Interval\r\n                        if (config.dataTile.dataInterval && config.dataTile.dataInterval !== '0' && !sap.n.Launchpad.Timers[chartId]) {\r\n                            sap.n.Launchpad.Timers[chartId] = {\r\n                                timer: setInterval(function () {\r\n                                    if (sap.n.Launchpad.Timers[chartId].pageId !== AppCacheNav.getCurrentPage().sId) return;\r\n                                    sap.n.Launchpad.getHighchartData(config.dataTile, oHighchart, config.pageID, chartId, 'continue');\r\n                                }, config.dataTile.dataInterval * 1000),\r\n                                pageId: config.pageID\r\n                            };\r\n                        }\r\n                    }\r\n\r\n                }, 200);\r\n            }\r\n        });\r\n\r\n        cardContent.addContent(oHighchartHTML);\r\n        return cardContent;\r\n    },\r\n\r\n    buildCardBodyHighstock: function (config) {\r\n        let cardContent = new sap.m.Panel(nepId(), {\r\n            backgroundDesign: 'Transparent'\r\n        }).addStyleClass('sapUiNoContentPadding nepTileApplicationPanel');\r\n\r\n        this.setCardContentHeight(config, cardContent);\r\n\r\n        let chartId = 'chart' + ModelData.genID();\r\n        let chartHeight = config.dataTile.bodyHeight || '400px';\r\n        let oHighchart;\r\n\r\n        let oHighchartHTML = new sap.ui.core.HTML(nepId(), {\r\n            content: `<div id=\"${chartId}\" style='height:100%;width:100%'></div>`,\r\n            afterRendering: function (oEvent) {\r\n                let chartData = localStorage.getItem('p9TileChart' + config.dataTile.id);\r\n                if (chartData) {\r\n                    let chartData = JSON.parse(chartData);\r\n                    if (!chartData.chart) chartData.chart = {};\r\n                    chartData.chart.renderTo = chartId;\r\n                    oHighchart = Highcharts.stockChart(chartData);\r\n                } else {\r\n                    oHighchart = Highcharts.stockChart({\r\n                        chart: {\r\n                            renderTo: chartId,\r\n                            height: chartHeight,\r\n                            style: { fontFamily: '72' }\r\n                        },\r\n                        credits: { enabled: false },\r\n                        title: { text: '' },\r\n                        subTitle: { text: '' },\r\n                        series: []\r\n                    });\r\n                }\r\n\r\n                // Fetch Data \r\n                if (config.dataTile.dataUrl) {\r\n                    // Trigger Pull 1. Time\r\n                    setTimeout(function () { sap.n.Launchpad.getHighstockData(config.dataTile, oHighchart, config.pageID, chartId, 'start'); }, 250);\r\n\r\n                    // Pull Interval\r\n                    if (config.dataTile.dataInterval && config.dataTile.dataInterval !== '0' && !sap.n.Launchpad.Timers[chartId]) {\r\n                        sap.n.Launchpad.Timers[chartId] = {\r\n                            timer: setInterval(function () {\r\n                                if (sap.n.Launchpad.Timers[chartId].pageId !== AppCacheNav.getCurrentPage().sId) return;\r\n                                sap.n.Launchpad.getHighstockData(config.dataTile, oHighchart, config.pageID, chartId, 'continue');\r\n                            }, config.dataTile.dataInterval * 1000),\r\n                            pageId: config.pageID\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        cardContent.addContent(oHighchartHTML);\r\n        return cardContent;\r\n    },\r\n\r\n    buildCardAction: function (config) {\r\n        let dataTile = config.dataTile;\r\n        let buttonStyle = '';\r\n        let supportedBrowser = true;\r\n        let openEnabled = true;\r\n        let cardActionContainer = new sap.m.FlexBox(nepId(), {}).addStyleClass('nepActionContainer nepCardAction sapUiSizeCompact');\r\n\r\n        // Check Offline Mode -> Disable Open button \r\n        if (AppCache.isOffline) {\r\n            if (dataTile.actionURL) openEnabled = false;\r\n            if (dataTile.type === 'storeitem') openEnabled = false;\r\n            if (!dataTile.urlApplication) dataTile.urlApplication = '';\r\n\r\n            if (dataTile.actionApplication) {\r\n                let app = ModelData.FindFirst(AppCacheData,\r\n                    ['application', 'language', 'appPath'],\r\n                    [dataTile.actionApplication.toUpperCase(),\r\n                    AppCache.userInfo.language,\r\n                    dataTile.urlApplication || '']);\r\n                if (!app) openEnabled = false;\r\n            }\r\n\r\n            if (dataTile.actionWebApp) {\r\n                if (dataTile.openWindow) {\r\n                    openEnabled = false;\r\n                } else {\r\n                    let viewName = 'webapp:' + dataTile.actionWebApp + ':' + dataTile.urlApplication;\r\n\r\n                    // Get App from Cache\r\n                    if (typeof p9Database !== 'undefined' && p9Database !== null) {\r\n                        p9GetView(viewName).then(function (viewData) {\r\n                            if (viewData.length < 10) openEnabled = false;\r\n                        });\r\n                    } else {\r\n                        if (!sapStorageGet(viewName)) openEnabled = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Supported Browsers\r\n        const w = dataTile.browserBlockWin;\r\n        if (sap.ui.Device.os.name === 'win' && w && w !== '[]' && w.indexOf(sap.ui.Device.browser.name) === -1) {\r\n            supportedBrowser = false;\r\n        }\r\n\r\n        const m = dataTile.browserBlockMac;\r\n        if (sap.ui.Device.os.name === 'mac' && m && dataTile.browserBlockWin !== '[]' && m.indexOf(sap.ui.Device.browser.name) === -1) {\r\n            supportedBrowser = false;\r\n        }\r\n\r\n        let butStart;\r\n        let inFavCat;\r\n\r\n        if (dataTile.actionType === 'F' || dataTile.actionApplication || dataTile.actionWebApp || dataTile.actionURL || dataTile.actiongroup || dataTile.type === 'storeitem') {\r\n            if (supportedBrowser) {\r\n                if (dataTile.blackoutEnabled) {\r\n                    butStart = new sap.m.Button(nepId(), {\r\n                        text: dataTile.blackoutText,\r\n                        press: function (oEvent) {\r\n                            descBlackout.editor.setData(dataTile.blackoutDescription);\r\n                            popBlackout.openBy(this);\r\n                        }\r\n                    });\r\n                    butStart.addStyleClass('nepTileAction sapUiTinyMarginEnd nepTileBlackout ' + buttonStyle);\r\n                } else {\r\n                    if (dataTile.openClickTile) {\r\n                        if (openEnabled) {\r\n                            config.cardActionParent.attachBrowserEvent('tap', function (oEvent) {\r\n                                // button would decide the tap action\r\n                                if (oEvent.target && oEvent.target.classList.contains('sapMBtnIcon')) {\r\n                                    return;\r\n                                }\r\n                                \r\n                                oEvent.stopImmediatePropagation();\r\n                                setTimeout(function () {\r\n                                    if (sap.n.Launchpad.favInProcess) {\r\n                                        sap.n.Launchpad.favInProcess = false;\r\n                                    } else {\r\n                                        sap.n.Launchpad.HandleTilePress(dataTile, config.dataCat);\r\n                                    }\r\n                                }, 50);\r\n                            });\r\n                            config.cardActionParent.attachBrowserEvent('keypress', function (oEvent) {\r\n                                setTimeout(function () {\r\n                                    if (oEvent.code !== 'Enter') {\r\n                                        return;\r\n                                    }\r\n                                    if (sap.n.Launchpad.favInProcess) {\r\n                                        sap.n.Launchpad.favInProcess = false;\r\n                                    } else {\r\n                                        sap.n.Launchpad.HandleTilePress(dataTile, config.dataCat);\r\n                                    }\r\n                                }, 50);\r\n                            });\r\n                            cardActionContainer.addStyleClass('nepNavBarTile');\r\n                            let _cardActionParent_delegate = {\r\n                                onAfterRendering: function () {\r\n                                    let elem = config.cardActionParent.getDomRef();\r\n                                    // TODO Fix tabindex\r\n                                    // elem.setAttribute(\"tabindex\", \"0\");\r\n                                    elem.setAttribute(\"role\", \"button\");\r\n                                    elem.removeAttribute(\"aria-labelledby\");\r\n                                }\r\n                            };\r\n                            config.cardActionParent.addEventDelegate(_cardActionParent_delegate);\r\n                            config.cardActionParent.exit = function () {\r\n                                config.cardActionParent.removeEventDelegate(_cardActionParent_delegate);\r\n                            };\r\n                        }\r\n                    } else {\r\n                        let openText = (dataTile.cardButtonIconOnly) ? '' : AppCache_tOpen.getText();\r\n                        if (dataTile.openText) openText = sap.n.Launchpad.translateTile('openText', dataTile);\r\n                        butStart = new sap.m.Button(nepId(), {\r\n                            text: openText,\r\n                            enabled: openEnabled,\r\n                            icon: dataTile.cardButtonIcon,\r\n                            press: function (oEvent) {\r\n                                sap.n.Launchpad.HandleTilePress(dataTile, config.dataCat);\r\n                            }\r\n                        });\r\n\r\n                        butStart.addStyleClass('nepTileAction sapUiTinyMarginEnd ' + buttonStyle);\r\n                    }\r\n                }\r\n            } else {\r\n                butStart = new sap.m.Button(nepId(), {\r\n                    text: AppCache_tIncompatible.getText(),\r\n                    iconFirst: false,\r\n                    enabled: openEnabled,\r\n                    icon: 'sap-icon://sys-help',\r\n                    press: function (oEvent) {\r\n                        let browsers;\r\n\r\n                        if (sap.ui.Device.os.name === 'win') browsers = JSON.parse(dataTile.browserBlockWin);\r\n                        if (sap.ui.Device.os.name === 'mac') browsers = JSON.parse(dataTile.browserBlockMac);\r\n\r\n                        const m = {\r\n                            'cr': 'Chrome',\r\n                            'ed': 'Edge',\r\n                            'ff': 'Firefox',\r\n                            'ie': 'Internet Explorer',\r\n                            'op': 'Opera',\r\n                            'sf': 'Safari',\r\n                        };\r\n\r\n                        let array = browsers.map(function (k) {\r\n                            return { name: m[k] };\r\n                        });\r\n                        array.sort(sort_by('name'));\r\n                        modellistSupportedBrowsers.setData(array);\r\n                        popSupportedBrowsers.openBy(this);\r\n                    }\r\n                });\r\n\r\n                butStart.addStyleClass('nepTileAction nepTileBlocked sapUiTinyMarginEnd ' + buttonStyle);\r\n                cardActionContainer.addItem(butStart);\r\n            }\r\n\r\n            let butIdAdd = config.isFav ? '' : 'FavAdd';\r\n            let butFavAdd = new sap.m.Button(`${nepPrefix()}${butIdAdd}${dataTile.id}`, {\r\n                tooltip: AppCache_tAddFav.getText(),\r\n                icon: 'sap-icon://unfavorite',\r\n                press: function (oEvent) {\r\n                    sap.n.Launchpad.favInProcess = true;\r\n\r\n                    ModelData.Update(AppCacheTilesFav, 'id', dataTile.id, dataTile);\r\n                    setCacheAppCacheTilesFav();\r\n\r\n                    butFavDel.setVisible(true);\r\n                    butFavAdd.setVisible(false);\r\n\r\n                    sap.n.Launchpad.handleFavRedraw();\r\n                }\r\n            });\r\n\r\n            butFavAdd.addStyleClass('nepTileAction sapUiTinyMarginEnd ' + buttonStyle);\r\n\r\n            let butIdDel = config.isFav ? '' : 'FavDel';\r\n            let butFavDel = new sap.m.Button(`${nepPrefix()}${butIdDel}${dataTile.id}`, {\r\n                tooltip: AppCache_tDelFav.getText(),\r\n                icon: 'sap-icon://favorite',\r\n                press: function (oEvent) {\r\n                    sap.n.Launchpad.favInProcess = true;\r\n                    sap.n.Utils.message({\r\n                        title: AppCache_tFavTitle.getText(),\r\n                        intro: AppCache_tFavConfirm.getText(),\r\n                        text1: AppCache_tDelFavConfirm.getText(),\r\n                        state: 'Warning',\r\n                        acceptText: AppCache_tDelFavRemove.getText(),\r\n                        onAccept: function (oAction) {\r\n\r\n                            ModelData.Delete(AppCacheTilesFav, 'id', dataTile.id);\r\n                            setCacheAppCacheTilesFav();\r\n\r\n                            let butFavAdd = sap.ui.getCore().byId(`${nepPrefix()}FavAdd${dataTile.id}`);\r\n                            if (butFavAdd) butFavAdd.setVisible(true);\r\n\r\n                            let butFavDel = sap.ui.getCore().byId(`${nepPrefix()}FavDel${dataTile.id}`);\r\n                            if (butFavDel) butFavDel.setVisible(false);\r\n\r\n                            sap.n.Launchpad.handleFavRedraw();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n\r\n            butFavDel.addStyleClass('nepTileAction sapUiTinyMarginEnd ' + buttonStyle);\r\n\r\n            // Tile is by default in Fav Category\r\n            inFavCat = ModelData.FindFirst(config.dataCat.tiles, 'id', dataTile.id);\r\n\r\n            // Fav\r\n            let rec = ModelData.Find(AppCacheTilesFav, 'id', dataTile.id);\r\n            if (rec.length) {\r\n                butFavAdd.setVisible(false);\r\n                butFavDel.setVisible(true);\r\n            } else {\r\n                butFavAdd.setVisible(true);\r\n                butFavDel.setVisible(false);\r\n            }\r\n\r\n            if (!dataTile.openClickTile || dataTile.blackoutEnabled) cardActionContainer.addItem(butStart);\r\n\r\n            if (!AppCache.isPublic && sap.n.Launchpad.enableFav && !AppCache.isOffline) {\r\n                if (config.dataCat.inclFav && inFavCat) {\r\n                } else {\r\n                    cardActionContainer.addItem(butFavAdd);\r\n                    cardActionContainer.addItem(butFavDel);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.addCardHelpAction(cardActionContainer, dataTile)\r\n        this.addCardResizeAction(cardActionContainer, config);\r\n\r\n        config.parent.addItem(cardActionContainer);\r\n    },\r\n\r\n    addCardHelpAction(container, dataTile) {\r\n        if (dataTile.helpEnabled) {\r\n            let butHelp = new sap.m.Button(nepId(), {\r\n                tooltip: AppCache_tHelp.getText(),\r\n                icon: 'sap-icon://sys-help',\r\n                press: function (oEvent) {\r\n                    descBlackout.editor.setData(dataTile.helpText);\r\n                    popBlackout.openBy(this);\r\n                }\r\n            });\r\n\r\n            container.addItem(butHelp);\r\n        }\r\n    },\r\n\r\n    addCardResizeAction(container, config) {\r\n        if (sap.n.Customization.isDisabled() || sap.n.Customization.areScreensLocked()) {\r\n            return;\r\n        }\r\n\r\n        // without the popover\r\n        let spacer = new sap.m.HBox(nepId(), { width: '100%' });\r\n        container.addItem(spacer);\r\n\r\n        const resizeIcon = new sap.ui.core.Icon({\r\n            src: 'sap-icon://resize-corner'\r\n        }).addStyleClass('nepResizable');\r\n        \r\n        resizeIcon.attachBrowserEvent('mousedown', (evt) => {\r\n            sap.n.Customization.Resize.onMouseDown(evt, config);\r\n        });\r\n\r\n        container.addItem(resizeIcon);\r\n    },\r\n};\r\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":571},{"fieldNo":"11606f12-e740-4cf0-b86c-45a9f756e956","fieldName":"sap.n.Dialog","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"// Dialog Constructor\nsap.m.Dialog.extend('sap.n.Dialog', {\n    metadata: {\n        properties: {\n            'hideMinimize': { type: 'boolean', defaultValue: false },\n            'hideMosaic': { type: 'boolean', defaultValue: false },\n            'hideMaximize': { type: 'boolean', defaultValue: false },\n            'icon': { type: 'sap.ui.core.Icon', },\n            'contentIsURL': { type: 'boolean', defaultValue: false },\n            '_origWidth': { type: 'sap.ui.core.CSSSize' },\n            '_origHeight': { type: 'sap.ui.core.CSSSize' },\n            '_origTop': { type: 'sap.ui.core.CSSSize' },\n            '_origLeft': { type: 'sap.ui.core.CSSSize' },\n            '_headerIcon': { type: 'sap.ui.core.Icon' },\n            '_headerTitle': { type: 'sap.m.Title' },\n            '_butMaximize': { type: 'sap.m.Button' },\n            '_butMinimize': { type: 'sap.m.Button' },\n            '_butRestore': { type: 'sap.m.Button' },\n            '_butMosaic': { type: 'sap.m.Button' },\n            '_butClose': { type: 'sap.m.Button' },\n            '_viewContent': { type: 'string' }\n        },\n    },\n\n    init: function () {\n        sap.m.Dialog.prototype.init.call(this);\n\n        const dia = this;\n        dia._viewContent = AppCache.diaView;\n\n        // Dialog Header\n        const diaHeader = new sap.m.Bar();\n        dia.setCustomHeader(diaHeader);\n\n        this._headerIcon = new sap.ui.core.Icon({ width: '30px' });\n        diaHeader.addContentLeft(this._headerIcon);\n\n        // Dialog Icon\n        if (sap.n.Launchpad.contextType === 'Tile') {\n            this._headerIcon.setSrc(sap.n.Launchpad.contextTile.icon);\n        } else {\n            this._headerIcon.setSrc();\n        }\n\n        // Dialog Title\n        this._headerTitle = new sap.m.Title({ titleStyle: 'H6' });\n        diaHeader.addContentLeft(this._headerTitle);\n\n        // Minimize button\n        this._butMinimize = new sap.m.Button({\n            icon: 'sap-icon://minimize',\n            press: function (oEvent) {\n                dia.minimize(dia);\n            }\n        });\n        this._butMinimize.setTooltip(' ');\n        diaHeader.addContentRight(this._butMinimize);\n\n        // Mosaic button\n        this._butMosaic = new sap.m.Button({\n            icon: 'sap-icon://grid',\n            press: function (oEvent) {\n                dia.mosaic();\n            }\n        });\n        this._butMosaic.setTooltip(' ');\n        diaHeader.addContentRight(this._butMosaic);\n\n\n        // Maximize button\n        this._butMaximize = new sap.m.Button({\n            icon: 'sap-icon://full-screen',\n            press: function (oEvent) {\n                dia.maximize();\n            }\n        });\n        this._butMaximize.setTooltip(' ');\n        diaHeader.addContentRight(this._butMaximize);\n\n        this._butRestore = new sap.m.Button({ // Restore button\n            icon: 'sap-icon://exit-full-screen',\n            visible: false,\n            press: function (oEvent) {\n                dia.restore();\n            }\n        });\n        this._butRestore.setTooltip(' ');\n        diaHeader.addContentRight(this._butRestore);\n\n\n        // Close button\n        this._butClose = new sap.m.Button({\n            icon: 'sap-icon://decline',\n            press: function (oEvent) {\n                dia.close();\n            }\n        });\n        this._butClose.setTooltip(' ');\n        diaHeader.addContentRight(this._butClose);\n\n        setTimeout(function () {\n            dia._headerTitle.setText(dia.getTitle());\n            if (dia.getIcon()) dia._headerIcon.setSrc(dia.getIcon());\n        }, 50);\n\n        // Dialog Styling\n        dia.addStyleClass('sapUiNoContentPadding');\n\n        const modal = AppCache.LoadOptions.dialogModal ? true : false;\n        dia.oPopup.setModal(modal);\n    },\n\n    onBeforeRendering: function () {\n        this._butMinimize.setVisible(!this.getHideMinimize());\n        this._butMosaic.setVisible(!this.getHideMosaic());\n        this._butMaximize.setVisible(!this.getHideMaximize());\n    },\n\n\n    // trigger BeforeClose event before closing\n    close: function () {\n        if (this.getContent()[0].sViewName) {\n            const applid = this.getContent()[0].sViewName.replace(/\\//g, ''); // Format ID\n            if (applid) { // trigger custom beforeClose\n                if (sap.n.Apps[applid] && sap.n.Apps[applid].beforeClose) {\n                    sap.n.Apps[applid].beforeClose.forEach(function (data) {\n                        data();\n                    });\n                }\n            }\n        }\n\n        sap.m.Dialog.prototype.close.call(this);\n        return this;\n    },\n\n    ondblclick: function (oEvent) { },\n\n    targetElId: function () { return `#${this.sId}`; },\n    targetEl: function () { return querySelector(this.targetElId()); },\n\n    _getCSS: function (name) { return getStyle(this.targetEl(), name); },\n    _setCSS: function (name, value) { setStyle(this.targetEl(), name, value); },\n\n    setVisibility: function (value) { this._setCSS('visibility', value); },\n    setHeight: function (height) {\n        const dialog = this.getDomRef();\n        if (!dialog) return;\n\n        const section = dialog.querySelector('.sapMDialogSection');\n        if (!section) return;\n\n        section.style.height = height;\n    },\n\n    maximize: function (event) {\n        if (this.getContentIsURL()) {\n            const oDomRef = this.getDomRef();\n\n            // Store original values\n            this._origLeft = oDomRef.style.left;\n            this._origTop = oDomRef.style.top;\n            this._origWidth = oDomRef.style.width;\n            this._origHeight = oDomRef.style.height;\n\n            // Maximize\n            oDomRef.style.width = '100%';\n            oDomRef.style.height = '99%';\n            oDomRef.style.top = oDomRef.style.top.includes('%') ? '50%' : '1px';\n            oDomRef.style.left = oDomRef.style.left.includes('%') ? '50%' : '1px';\n            \n            oDomRef.style['max-height'] = '94%';\n            oDomRef.style['max-width'] = '100%';\n        } else {\n            this.setStretch(true);\n        }\n\n        this.setHeight('');\n        this._butMaximize.setVisible(false);\n        this.setHideMaximize(true);\n        this._butRestore.setVisible(true);\n    },\n\n    unminimize: function (oControl) {\n        AppCacheShellDialog.focus(); // IE11 looses focus\n        oControl.destroy(); // Destroy toolbar button\n\n        if (this.getContentIsURL()) {\n            this.setVisibility('visible');\n        } else {\n            this.setVisible(true);\n        }\n\n        if (AppCacheUserDialog.getButtons().length === 1) AppCacheShellDialog.setVisible(false);\n    },\n\n    onAfterRendering: function () {\n        sap.m.Dialog.prototype.onAfterRendering.call(this);\n\n        if (!this.getContentIsURL()) { // override CSS after rerender\n            applyCSSToElmId(this.targetElId(), {\n                'max-height': '95%',\n                'max-width': '98%',\n                'min-height': 'initial',\n                'min-width': 'initial',\n                'transform': '',\n            });\n        }\n    },\n\n    minimize: function () {\n        const dia = this;\n\n        AppCacheShellDialog.setVisible(true);\n        // Add button to Top Shell Bar\n        AppCacheUserDialog.addButton(new sap.m.Button({\n            icon: dia._headerIcon.getSrc(),\n            text: dia._headerTitle.getText(),\n            press: function () {\n                dia.unminimize(this);\n            }\n\n        }));\n\n        if (this.getContentIsURL()) {\n            this.setVisibility('hidden');\n        } else {\n            this.setVisible(false);\n        }\n    },\n\n    restore: function (event) {\n        if (this.getContentIsURL()) {\n            applyCSSToElmId(this.targetElId(), {\n                'left': this._origLeft,\n                'top': this._origTop,\n                'width': this._origWidth,\n                'height': this._origHeight,\n            });\n        } else {\n            this.setStretch(false);\n        }\n\n        this.setHeight('');\n        this._butMaximize.setVisible(true);\n        this.setHideMaximize(false);\n        this._butRestore.setVisible(false);\n    },\n\n    _isPrime: function (num) {\n        for (let i = 2; i < num; i++) {\n            if (num % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    _buildPrimesArray: function (max) {\n        let arr = [2];\n        for (let i = 3; i <= max; i += 2) {\n            if (this._isPrime(i)) {\n                arr.push(i);\n            }\n        }\n        return arr;\n    },\n\n    mosaic: function () {\n        let diaArray = [];\n        AppCache.Dialogs.forEach(function (data) {\n            let dia = sap.ui.getCore().byId(data);\n            if (dia.getVisible() && dia._getCSS('visibility') !== 'hidden') {\n                diaArray.push(data);\n            }\n        });\n\n        if (diaArray.length <= 1) {\n            return;\n        }\n\n        // Calculate sections needed (prime numbers)\n        let primesArray = this._buildPrimesArray(diaArray.length);\n\n        let hsecs, vsecs;\n        for (i = 0; i < primesArray.length; i++) {\n            let r = diaArray.length % primesArray[i];\n            if (r === 0) {\n                let div = diaArray.length / primesArray[i];\n\n                if (div >= primesArray[i]) {\n                    hsecs = div;\n                    vsecs = primesArray[i];\n                } else {\n                    hsecs = primesArray[i];\n                    vsecs = div;\n                }\n                i = primesArray.length + 1;\n            }\n        }\n\n        let eachSecWidth = Math.floor((window.innerWidth - 10) / hsecs);\n        let eachSecHeight = Math.floor((window.innerHeight - 10) / vsecs) - 48;\n        let eachSecWidthCSS = eachSecWidth + 'px';\n        let eachSecHeightCSS = eachSecHeight + 'px';\n\n        let currHsec = 1;\n        let currVsec = 1;\n        for (i = 0; i < diaArray.length; i++) {\n            let newTop = ((currVsec - 1) * eachSecHeight) + 4;\n            let newLeft = ((currHsec - 1) * eachSecWidth) + 5;\n\n            if (currVsec > 1)\n                newTop = newTop + 48;\n\n            let d = sap.ui.getCore().byId(diaArray[i]);\n            //remove the transform translate\n            d._bDisableRepositioning = true;\n            d._$dialog.addClass('sapDialogDisableTransition sapMDialogTouched');\n\n            d._oManuallySetPosition = {\n                x: newLeft,\n                y: newTop\n            };\n\n            d._oManuallySetSize = {\n                height: eachSecHeightCSS,\n                width: eachSecWidthCSS\n            };\n\n            applyCSSToElmId(d.sId, {\n                'top': `${newTop}px`,\n                'left': `${newLeft}px`,\n                'width': eachSecWidthCSS,\n                'height': eachSecHeightCSS,\n                'max-height': '95%',\n                'max-width': '98%',\n                'min-height': 'initial',\n                'min-width': 'initial',\n                'transform': '',\n            });\n\n            if (currHsec === hsecs) {\n                currVsec++;\n                currHsec = 1;\n            } else {\n                currHsec++;\n            }\n        }\n    },\n\n    rerender: function () {\n        if (!this.getContentIsURL()) {\n            sap.m.Dialog.prototype.rerender.call(this);\n        }\n    },\n\n    renderer: {}\n});\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":572},{"fieldNo":"32332f2b-bb4f-4dca-e175-965c17576b82","fieldName":"sap.n.Enhancement","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"sap.n.Enhancement = {\r\n    spots: [\r\n        {\r\n            title: 'Global Functions',\r\n            name: 'global',\r\n            description: 'Reuse global functions declared in this enhancement spot. Use the object sap.n.Enhancement.global for methods/data',\r\n            param: '',\r\n            sort: 10,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'Before Startup',\r\n            name: 'BeforeStartup',\r\n            description: 'Triggers after UI5 is loaded but before Startup of desktop/mobile',\r\n            param: '',\r\n            sort: 20,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'After Get Tiles',\r\n            name: 'SuccessGetMenu',\r\n            description: 'Triggers after GetTiles request and before tiles/tile groups is re-rendered if changes are detected in tiles/tile groups',\r\n            param: '',\r\n            sort: 40,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'After Tile Group Renderer',\r\n            name: 'AfterTileGroupRenderer',\r\n            description: 'Triggers after Tile Group is rendered',\r\n            param: 'Container, dataCat',\r\n            sort: 50,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'Before Logout',\r\n            name: 'BeforeLogout',\r\n            description: 'Triggers right after user starts the logout process.',\r\n            param: '',\r\n            sort: 51,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'After Logout',\r\n            name: 'AfterLogout',\r\n            description: 'Triggers when a logout process finishes successfully.',\r\n            param: '',\r\n            sort: 52,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'Set User Info',\r\n            name: 'setUserInfo',\r\n            description: 'Triggers when we set username in the launchpad',\r\n            param: '',\r\n            sort: 32,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'After Update',\r\n            name: 'AfterUpdate',\r\n            description: 'Triggers after AppCache.Update is done',\r\n            param: '',\r\n            sort: 31,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'Before Update',\r\n            name: 'BeforeUpdate',\r\n            description: 'Triggers before AppCache.Update is started and tiles/tile groups is rendered for the first time. Supports Promise',\r\n            param: '',\r\n            sort: 30,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'Restricted Enable',\r\n            name: 'RestrictedEnable',\r\n            description: 'Triggers after user lock/logout',\r\n            param: '',\r\n            sort: 220,\r\n            group: 'Mobile/PWA'\r\n        },\r\n        {\r\n            title: 'Restricted Disable',\r\n            name: 'RestrictedDisable',\r\n            description: 'Triggers after unlock/login before AppCache.Update',\r\n            param: '',\r\n            sort: 210,\r\n            group: 'Mobile/PWA'\r\n        },\r\n        {\r\n            title: 'Before Lock',\r\n            name: 'BeforeLock',\r\n            description: 'Triggers before user is logged out when locking the user. Can be used to logoff user in other systems',\r\n            param: '',\r\n            sort: 201,\r\n            group: 'Mobile/PWA'\r\n        },\r\n        {\r\n            title: 'Before Set Settings',\r\n            name: 'BeforeSetSettingsMobile',\r\n            description: 'Triggers before applying settings from server or cache',\r\n            param: 'settings',\r\n            sort: 200,\r\n            group: 'Mobile/PWA'\r\n        },\r\n        {\r\n            title: 'Clear Cookies',\r\n            name: 'ClearCookies',\r\n            description: 'Add your own logic when clearing cookies',\r\n            param: '',\r\n            sort: 290,\r\n            group: 'Mobile/PWA'\r\n        },\r\n        {\r\n            title: 'Push Notification',\r\n            name: 'PushNotification',\r\n            description: 'Triggers when receiving push notification when the launchpad is started and in foreground',\r\n            param: 'notification',\r\n            sort: 110,\r\n            group: 'Push Notifications'\r\n        },\r\n        {\r\n            title: 'Push Registration',\r\n            name: 'PushRegistration',\r\n            description: 'Triggers when browser/device register for push notification',\r\n            param: 'dataDevice',\r\n            sort: 100,\r\n            group: 'Push Notifications'\r\n        },\r\n        {\r\n            title: 'Hash Navigation',\r\n            name: 'HashNavigation',\r\n            description: 'Intercept and add you logic when the Launchpad detects hash navigation',\r\n            param: 'hash',\r\n            sort: 900,\r\n            group: 'Events'\r\n        },\r\n        {\r\n            title: 'Tile Click',\r\n            name: 'TileClick',\r\n            description: 'Event when tile is clicked, use for custom analytics or other',\r\n            param: 'dataTile',\r\n            sort: 910,\r\n            group: 'Events'\r\n        },\r\n        {\r\n            title: 'Remote System Authentication',\r\n            name: 'RemoteSystemAuth',\r\n            description: 'When using tile from remote system you can add custom header fields',\r\n            param: 'headers',\r\n            sort: 800,\r\n            group: 'Authentication'\r\n        },\r\n        {\r\n            title: 'Pin Code Validation',\r\n            name: 'PinCodeValidation',\r\n            description: 'Called when validating the pin code that the user is attempting to set',\r\n            param: 'pincode, validity',\r\n            sort: 1000,\r\n            group: 'Mobile/PWA'\r\n        }\r\n    ],\r\n\r\n    getSpots: function () {\r\n        window.parent.postMessage({ spots: sap.n.Enhancement.spots }, location.href);\r\n    }\r\n};","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":573},{"fieldNo":"09951d87-4238-45a3-cfc7-7e64e42d19e2","fieldName":"sap.n.Fingerprint","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"function isBasicAuthSetupInvalid() {\n    return (\n        typeof cordova === 'undefined' ||\n        typeof cordova.plugins === 'undefined' ||\n        typeof cordova.plugins.SecureKeyStore === 'undefined' ||\n        window.navigator.simulator ||\n        !AppCache.biometricAuthentication\n    )\n}\n\nfunction isFaceIDAvailableOnIPhone() {\n    return (\n        sap.ui.Device.os.ios &&\n        sap.ui.Device.os.version >= 11 &&\n        device && device.model && device.model.indexOf('iPhone10') > 0\n    );\n}\n\nfunction loginUserWithInfo(userInfo) {\n    AppCache_inUsername.setValue(userInfo.username);\n    AppCache_inPassword.setValue(userInfo.password);\n    AppCache_loginTypes.setSelectedKey(userInfo.loginid);\n    AppCache_butLogon.firePress();\n}\n\nfunction setBiometricAuthToFalse() {\n    AppCache.biometricAuthentication = false;\n}\n\nfunction setKeypadBtnIcon(name) {\n    butNumpadLogin.setIcon(`sap-icon://${name}`);\n}\n\nfunction setKeypadBtn(iconName, enabled) {\n    setKeypadBtnIcon(iconName);\n    butNumpadLogin.setEnabled(enabled);\n}\n\nfunction setKeypadValueAndAttemptLogin(value) {\n    NumPad.numValue = value;\n    NumPad.Logon();\n}\n\nfunction isErrorFingerprintCancelled(err) {\n    return err === FingerprintAuth.ERRORS.FINGERPRINT_CANCELLED;\n}\n\nsap.n.Fingerprint = {\n    android: {\n        onSupported: function (res) {\n            // Check hardware, enrollment and AppCacheUsers\n            if (res.isAvailable && res.hasEnrolledFingerprints) {\n                if (AppCache.userInfo.biometric) {\n                    setKeypadBtn('mri-scan', true);\n\n                    // Get user language\n                    const pluginLanguage = sap.n.Fingerprint.android.getLanguage(AppCache.userInfo.language);\n\n                    // Biometric authentication config\n                    const decryptConfig = {\n                        clientId: AppCache.AppID,\n                        username: AppCache.userInfo.username,\n                        token: AppCache.userInfo.token,\n                        disableBackup: true,\n                        maxAttempts: 5,\n                        locale: pluginLanguage,\n                        userAuthRequired: true,\n                        dialogMessage: AppCache_Fingerprint.getText()\n                    };\n                    FingerprintAuth.decrypt(decryptConfig, sap.n.Fingerprint.android.onSuccess, sap.n.Fingerprint.android.onError);\n                }\n            }\n        },\n\n        notSupported: function (_err) {\n            setKeypadBtnIcon('accept');\n            setBiometricAuthToFalse();\n        },\n\n        onSuccess: function (res) {\n            if ((res.withFingerprint || res.withPassword) && res.password) {\n                setKeypadValueAndAttemptLogin(res.password);\n            } else { }\n        },\n\n        onError: function (err) {\n            if (isErrorFingerprintCancelled(err)) { } else { }\n        },\n\n        getLanguage: function (lang) {\n            const m = {\n                'NO': 'no',\n                'FR': 'fr',\n                'ES': 'es',\n                'PT': 'pt',\n                'DE': 'de',\n                'IT': 'it',\n                'EN': 'en_US',\n                'ZH': 'zh',\n            };\n\n            if (m[lang] === undefined) {\n                return 'en_US';\n            }\n\n            return m[lang];\n        }\n    },\n\n    ios: {\n        checkSupport: function () {\n            if (AppCache.userInfo.biometric) {\n                setKeypadBtnIcon('mri-scan');\n                butNumpadLogin.setEnabled(true);\n\n                // Authenticate using iOS SAMKeychain library\n                let dialogText = AppCache_Fingerprint.getText();\n                if (isFaceIDAvailableOnIPhone()) {\n                    dialogText = AppCache_tEnableFaceId.getText();\n                }\n\n                CID.checkAuth(dialogText, function (res) {\n                    if (res == 'success') {\n                        cordova.plugins.SecureKeyStore.get(setKeypadValueAndAttemptLogin, function (err) {\n                            console.log(err);\n                        }, AppCache.userInfo.username);\n                    } else {\n                        console.log(res);\n                    }\n                }, function (err) {\n                    console.log(err);\n                });\n            } else {\n                setKeypadBtn('accept', false);\n            }\n        }\n    },\n\n    saveBasicAuth: function () {\n        if (isBasicAuthSetupInvalid()) {\n            return;\n        }\n\n        // Save userinfo\n        cordova.plugins.SecureKeyStore.set(function (_res) { }, function (_err) {\n            setBiometricAuthToFalse();\n        }, AppCache.deviceID, AppCache.Auth);\n    },\n\n    getBasicAuth: function () {\n        if (isBasicAuthSetupInvalid()) {\n            return;\n        }\n\n        let dialogText = AppCache_Fingerprint.getText();\n        if (isFaceIDAvailableOnIPhone()) {\n            dialogText = AppCache_tEnableFaceId.getText();\n        }\n\n        // Any stored userinfo ? \n        cordova.plugins.SecureKeyStore.get(function (res) {\n            let userInfo;\n            try {\n                userInfo = JSON.parse(Base64.decode(res));\n            } catch (e) { }\n\n            if (!userInfo) return;\n\n            if (sap.ui.Device.os.android && window.FingerprintAuth) {\n                try {\n                    FingerprintAuth.isAvailable(function (res) {\n                        if (res.isAvailable && res.hasEnrolledFingerprints) {\n                            // Biometric authentication config\n                            const encryptConfig = {\n                                clientId: AppCache.AppID,\n                                username: AppCache.deviceID,\n                                password: AppCache.deviceID,\n                                disableBackup: true,\n                                maxAttempts: 5,\n                                locale: 'en_US',\n                                userAuthRequired: true,\n                            };\n\n                            // Encrypt\n                            FingerprintAuth.encrypt(encryptConfig, function (result) {\n                                // Encryption success\n                                if (result.withFingerprint || result.withBackup) loginUserWithInfo(userInfo);\n                                else setBiometricAuthToFalse();\n                            }, function (err) {\n                                if (!isErrorFingerprintCancelled(err)) setBiometricAuthToFalse();\n                            });\n                        } else {\n                            setBiometricAuthToFalse();\n                        }\n                    }, function (_err) {\n                        setBiometricAuthToFalse();\n                    });\n                } catch (err) {\n                    setBiometricAuthToFalse();\n                }\n            } else if (sap.ui.Device.os.ios && typeof CID !== 'undefined') {\n                CID.checkAuth(dialogText, function (res) {\n                    if (res === 'success') loginUserWithInfo(userInfo);\n                    else console.log(res);\n                }, function (err) {\n                    console.log('CID.checkAuth', err);\n                    setBiometricAuthToFalse();\n                });\n            } else {\n                setBiometricAuthToFalse();\n            }\n\n        }, function (_err) { }, AppCache.deviceID);\n    }\n};","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":574},{"fieldNo":"973204c2-36cc-46ee-bb04-e729f30056af","fieldName":"sap.n.HashNavigation","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"sap.n.HashNavigation = {\n    lateNav: null,\n\n    _handler: function () {\n        if (location.hash === '#') location.hash === '';\n\n        // Any content ?\n        if (location.hash === '') return;\n\n        // Sections \n        if (isSection(location.hash)) return;\n\n        // AppCache Home\n        if (location.hash === '#Home') {\n            AppCache._Home();\n            return;\n        }\n\n        // AppCache Back\n        if (location.hash === '#Back') {\n            AppCache._Back();\n            return;\n        }\n\n        // Parse Hash\n        let parts = location.hash.substring(1).split('&');\n\n        // Top Menu Navigation\n        if (parts[0].indexOf('neptopmenu') > -1) {\n            const category = sap.n.Customization.getCategory(parts[1]);\n            if (category) {\n                sap.n.Launchpad.BuildTiles(category);\n            } else {\n                const url = window.location.href;\n                window.location = url.substr(0, url.indexOf('#'));\n            }\n            return;\n        }\n\n        // Enhancement\n        if (sap.n.Enhancement.HashNavigation) {\n            try {\n                let preventDefault = sap.n.Enhancement.HashNavigation(location.hash);\n                if (preventDefault) return;\n            } catch (e) {\n                appCacheError('Enhancement HashNavigation ' + e);\n            }\n        }\n\n        // Object\n        if (parts[0].indexOf('-') > -1) {\n            sap.n.HashNavigation.object = parts[0].split('-')[0];\n            sap.n.HashNavigation.action = parts[0].split('-')[1];\n        }\n\n        // Data\n        if (typeof parts[1] !== 'undefined') {\n            sap.n.HashNavigation.data = decodeURIComponent(parts[1]);\n        } else {\n            sap.n.HashNavigation.data = '';\n        }\n\n        // Tile\n        if (typeof sap.n.HashNavigation.object !== 'undefined' && typeof sap.n.HashNavigation.action !== 'undefined') {\n            if (typeof modelAppCacheTiles === 'undefined') {\n                sap.n.HashNavigation.initialLoad(sap.n.HashNavigation.guid);\n                return;\n            }\n\n            let tileData = sap.n.HashNavigation.findTile();\n            if (tileData.id) {\n                let dataCat = sap.n.HashNavigation.findCategory(tileData.id);\n                if (sap.n.Launchpad.currentTile && sap.n.Launchpad.currentTile.id === tileData.id) {\n                    if (!sap.n.Apps[tileData.id]) {\n                        sap.n.Launchpad._HandleTilePress(tileData, dataCat);\n                        return;\n                    }\n\n                    if (sap.n.Apps[tileData.id].onNavigation) {\n                        sap.n.Apps[tileData.id].onNavigation.forEach(function (data) {\n                            if (sap.n.HashNavigation.data) {\n                                sap.n.HashNavigation.data = JSON.parse(sap.n.HashNavigation.data);\n                            }\n                            data(sap.n.HashNavigation.data);\n                            sap.n.HashNavigation.data = '';\n                        });\n                    } else {\n                        sap.n.Launchpad._HandleTilePress(tileData, dataCat);\n                    }\n                } else {\n                    sap.n.Launchpad._HandleTilePress(tileData, dataCat);\n                }\n            } else {\n                sap.n.HashNavigation.lateNav = location.hash;\n                location.hash = '';\n            }\n\n        } else {\n            location.hash = '';\n            sap.n.Launchpad.SelectHomeMenu();\n        }\n    },\n\n    findTile: function () {\n        return ModelData.FindFirst(AppCacheTiles, ['navObject', 'navAction'], [sap.n.HashNavigation.object, sap.n.HashNavigation.action]) || {};\n    },\n\n    findCategory: function (tileId) {\n        let dataCat = {};\n\n        // TileGroups\n        modelAppCacheCategory.oData.forEach(function (category) {\n            let tileFound = ModelData.FindFirst(category.tiles, 'id', tileId)\n            if (tileFound) dataCat = category;\n        });\n\n        // TileGroupsChild\n        modelAppCacheCategoryChild.oData.forEach(function (category) {\n            let tileFound = ModelData.FindFirst(category.tiles, 'id', tileId)\n            if (tileFound) dataCat = category;\n        });\n\n        return dataCat;\n    },\n\n    toExternal: function (data) {\n        if (data.params) {\n            if (data.params === '{}') {\n                location.hash = data.target.semanticObject + '-' + data.target.action;\n            } else {\n                location.hash = data.target.semanticObject + '-' + data.target.action + '&' + encodeURIComponent(JSON.stringify(data.params));\n            }\n        } else {\n            location.hash = data.target.semanticObject + '-' + data.target.action\n        }\n    },\n}\n\n// Register Event\nwindow.onhashchange = function () {\n    sap.n.HashNavigation._handler();\n}","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":575},{"fieldNo":"12a6ce8a-4a08-44cf-9e02-3b810bc0c702","fieldName":"sap.n.Launchpad","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"sap.n.Launchpad = {\r\n    initSideBar: false,\r\n    Timers: [],\r\n    menuArray: [],\r\n    menuIndex: 0,\r\n    useMenuList: false,\r\n    setShellBackground: true,\r\n    backgroundShade: null,\r\n    currLayout: '',\r\n    currLayoutContent: '',\r\n    searchBackgroundType: 'cards',\r\n    searchBackgroundColor: 'ColorSet6',\r\n    searchBackgroundShade: 'ShadeA',\r\n    searchEnableShadeCalc: true,\r\n    usedBackgroundType: 'cards',\r\n    usedBackgroundColor: 'ColorSet5',\r\n    usedBackgroundShade: 'ShadeA',\r\n    usedEnableShadeCalc: false,\r\n    favInProcess: false,\r\n    hideBackIcon: false,\r\n    enableFav: false,\r\n    openAppExpanded: false,\r\n    openAppsSideMenuSize: '68px',\r\n    verticalMenuLimit: 1024,\r\n    openAppPops: {},\r\n\r\n    sidepanelWidth: {\r\n        xsmall: '300px',\r\n        small: '400px',\r\n        medium: '500px',\r\n        large: '600px',\r\n        xlarge: '700px',\r\n        xxlarge: '800px',\r\n        xxxlarge: '900px',\r\n        widescreen: '1024px',\r\n        xwidescreen: '1280px',\r\n        xxwidescreen: '1980px',\r\n    },\r\n\r\n    cardsAvailable: false,\r\n    tileContent: {},\r\n    tileGroupsInPage: {},\r\n\r\n    device: {\r\n        DESKTOP: 'D',\r\n        TABLET: 'T',\r\n        PHONE: 'P'\r\n    },\r\n\r\n    UpdateTileInfo: function (data) {\r\n        // P8 Compability\r\n    },\r\n\r\n    sidepanelOpen: function (options) {\r\n        if (!options) options = {};\r\n        if (launchpadContentSideApp.getWidth() === '0px') {\r\n            let sidepanelWidth = sap.n.Launchpad.sidepanelWidth[modelAppCacheDiaSettings.oData.sidepanelWidth || 'large'];\r\n            if (options.width) sidepanelWidth = options.width;\r\n            applyCSSToElmId('launchpadContentSideApp', { display: 'flex' });\r\n            launchpadContentSideApp.setWidth(sidepanelWidth);\r\n            sap.n.Launchpad.setLaunchpadContentWidth();\r\n            AppCacheUserActionSidepanel.setIcon('sap-icon://navigation-right-arrow');\r\n        }\r\n    },\r\n\r\n    sidepanelClose: function () {\r\n        if (launchpadContentSideApp.getWidth() !== '0px') {\r\n            applyCSSToElmId('launchpadContentSideApp', { display: 'none' });\r\n            launchpadContentSideApp.setWidth('0px');\r\n            sap.n.Launchpad.setLaunchpadContentWidth();\r\n            AppCacheUserActionSidepanel.setIcon('sap-icon://navigation-left-arrow');\r\n        }\r\n    },\r\n\r\n    settingsMenuOpen: function () {\r\n        if (sap.n.Customization.isJiggling()) {\r\n            sap.n.Customization.stopJiggling();\r\n        }\r\n\r\n        if (sap.n.Customization.isDisabled()) {\r\n            AppCacheUserActionEditScreen.setVisible(false);\r\n        } else {\r\n            const { lockScreenChanges } = modelAppCacheDiaSettings.getData();\r\n            AppCacheUserActionEditScreen.setVisible(!lockScreenChanges);\r\n        }\r\n\r\n        applyCSSToElmId('launchpadSettings', { display: 'flex' });\r\n        applyCSSToElmId('launchpadSettingsContainer', { width: '100%' });\r\n        applyCSSToElmId('launchpadSettingsClickArea', { display: 'block' });\r\n    },\r\n\r\n    settingsMenuClose: function () {\r\n        unsetTabIndicesForAppCacheListMenu();\r\n    },\r\n\r\n    setOpenAppsExpanded: function () {\r\n        openApps.setVisible(sap.n.Launchpad.openAppExpanded);\r\n        openAppMaster.setIcon(`sap-icon://fa-solid/${sap.n.Launchpad.openAppExpanded ? 'caret-down' : 'caret-right'}`);\r\n    },\r\n\r\n    setMenuActiveState: function () {\r\n        ContentMenu.getItems().forEach(function (menu) {\r\n            if (menu.getIcon()) {\r\n                menu.addStyleClass('nepTreeItemAction');\r\n            } else {\r\n                menu.removeStyleClass('nepTreeItemAction');\r\n            }\r\n        });\r\n    },\r\n\r\n    handleTreeNavigation: function (selectedItem) {\r\n        const context = selectedItem.getBindingContext();\r\n        const data = context.getObject();\r\n\r\n        let dataTile, dataCat, pageCatId;\r\n\r\n        switch (data.type) {\r\n            case 'tile':\r\n                dataTile = ModelData.FindFirst(AppCacheTiles, 'id', data.id);\r\n                dataCat = ModelData.FindFirst(AppCacheCategory, 'id', data.parent);\r\n                if (!dataCat) dataCat = ModelData.FindFirst(AppCacheCategoryChild, 'id', data.parent);\r\n                sap.n.Launchpad.HandleTilePress(dataTile, dataCat);\r\n                break;\r\n\r\n            case 'cat':\r\n                dataCat = sap.n.Customization.getCategory(data.id);\r\n                if (!dataCat) dataCat = ModelData.FindFirst(AppCacheCategoryChild, 'id', data.id);\r\n                sap.n.Launchpad.handleAppTitle(AppCache.launchpadTitle);\r\n                location.hash = 'neptopmenu&' + dataCat.id;\r\n                sap.n.currentView = '';\r\n                break;\r\n\r\n            case 'subcat':\r\n                sap.n.Launchpad.handleAppTitle();\r\n                dataCat = ModelData.FindFirst(AppCacheCategory, 'id', data.parent);\r\n                if (!dataCat) dataCat = ModelData.FindFirst(AppCacheCategoryChild, 'id', data.parent);\r\n                sap.n.Launchpad.handleAppTitle(dataCat.title);\r\n\r\n                sap.n.currentView = '';\r\n\r\n                if (sap.n.Launchpad.currentTileGroupPage !== `page${dataCat.id}`) {\r\n                    sap.n.Launchpad.BuildTiles(dataCat, data.id);\r\n                } else {\r\n                    if (typeof sap.n.Launchpad.currentTile === 'object' && Object.keys(sap.n.Launchpad.currentTile).length > 0) AppCache.Back();\r\n                    sap.n.Launchpad.scrollToTileGroup(data.id);\r\n                }\r\n                break;\r\n        }\r\n\r\n        if (!AppCache.config.verticalMenu) {\r\n            sap.n.Launchpad.overflowMenuClose();\r\n        }\r\n    },\r\n\r\n    overflowMenuClose: function () {\r\n        launchpadOverflow.removeStyleClass('nepLaunchpadMenuOverflowOpen');\r\n        applyCSSToElmId('launchpadOverflowContainer', { width: '0' });\r\n        applyCSSToElmId('launchpadOverflowClickArea', { display: 'none' });\r\n        launchpadContentMenu.setVisible(false);\r\n        \r\n        unsetTabIndicesForContentMenu();\r\n        if (!AppCache.config.verticalMenu) {\r\n            setTabIndex(launchpadOverflowBtn, -1);\r\n            setTabIndex(AppCacheShellMenu, 1);\r\n        }\r\n\r\n        setTimeout(() => {\r\n            sap.n.Launchpad.setLaunchpadContentWidth();\r\n        }, 100);\r\n    },\r\n\r\n    overflowMenuOpen: function () {\r\n        launchpadOverflow.addStyleClass('nepLaunchpadMenuOverflowOpen');\r\n        launchpadContentMenu.setVisible(true);\r\n        launchpadContentMenu.addItem(pageVerticalMenu).setWidth('300px');\r\n        openAppMaster.setVisible((openApps.getItems().length > 0));\r\n\r\n        setTimeout(function () {\r\n            sap.n.Layout.setHeaderPadding();\r\n\r\n            setTabIndicesForContentMenu();\r\n            if (!AppCache.config.verticalMenu) {\r\n                setTabIndex(AppCacheShellMenu, -1);\r\n                setTabIndex(launchpadOverflowBtn, 1);\r\n                launchpadOverflowBtn.focus();\r\n            }\r\n        }, 100);\r\n    },\r\n\r\n    setLaunchpadContentWidth: function () {\r\n        const menuWidth = getWidth(elById('launchpadContentMenu'));\r\n        const navWidth = getWidth(elById('launchpadContentNavigator'));\r\n\r\n        const left = (menuWidth + navWidth) + 'px';\r\n        const right = launchpadContentSideApp.getWidth();\r\n\r\n        if (isRTL()) {\r\n            let l = left;\r\n            left = right;\r\n            right = l;\r\n        }\r\n\r\n        applyCSSToElmId('launchpadContentMain', {\r\n            'left': left,\r\n            'right': right,\r\n            'width': 'auto'\r\n        });\r\n    },\r\n\r\n    setShellWidth: function () {\r\n        if (!sap.n.Launchpad.currLayout) return;\r\n\r\n        // Launchpad Width\r\n        ['nepShellFull', 'nepShellXXXLarge', 'nepShellXXLarge', 'nepShellXLarge', 'nepShellLarge', 'nepShellMedium', 'nepShellSmall', 'nepShellXSmall'].forEach(function (c) {\r\n            AppCacheShellUI.removeStyleClass(c);\r\n        });\r\n\r\n        let shellContentWidth = sap.n.Launchpad.currLayoutContent.shellContentWidth || 'Large';\r\n        AppCacheShellUI.addStyleClass('nepShell' + shellContentWidth);\r\n\r\n        if (shellContentWidth === 'Full') {\r\n            AppCacheShellUI.setAppWidthLimited(false);\r\n        } else {\r\n            AppCacheShellUI.setAppWidthLimited(true);\r\n        }\r\n\r\n        // Header Width\r\n        ['nepHeaderFull', 'nepHeaderXXXLarge', 'nepHeaderXXLarge', 'nepHeaderXLarge', 'nepHeaderLarge', 'nepHeaderMedium', 'nepHeaderSmall', 'nepHeaderXSmall'].forEach(function (c) {\r\n            toolTopMenu.removeStyleClass(c);\r\n        });\r\n\r\n        let headerContentWidth = sap.n.Launchpad.currLayoutContent.headerContentWidth || 'Full';\r\n        toolTopMenu.addStyleClass('nepHeader' + headerContentWidth);\r\n    },\r\n\r\n    BuildCardContent: function (config) {\r\n        let tiles = [];\r\n        let rowId = `${nepPrefix()}Cat${config.dataCat.id}`;\r\n\r\n        // Favorites \r\n        if (config.isFav) {\r\n            tiles = modelAppCacheTilesFav.oData;\r\n            rowId = `${nepPrefix()}CatFav${config.dataCat.id}`;\r\n\r\n            if (tiles.length === 0) {\r\n                tiles = sap.n.Customization.getTiles(config.dataCat.id);\r\n            }\r\n        } else {\r\n            tiles = sap.n.Customization.getTiles(config.dataCat.id);\r\n        }\r\n\r\n        // Card Group\r\n        if (config.parentCat && config.parentCat.cardPerRow && !config.dataCat.cardPerRow) config.dataCat.cardPerRow = config.parentCat.cardPerRow;\r\n        let cardPerRow = config.dataCat.cardPerRow || sap.n.Layout.row.MORE;\r\n        config.cardParent.addStyleClass('nepBlockLayoutTileRow ' + rowId + ' nepGrid' + cardPerRow);\r\n\r\n        sap.n.Launchpad.backgroundShade = '';\r\n\r\n        tiles.forEach(function (tile) {\r\n            if (!tile || !tile.id) return;\r\n            let dataTile = ModelData.FindFirst(AppCacheTiles, 'id', tile.id);\r\n            if (!dataTile) return;\r\n            if (dataTile.disabled) return;\r\n\r\n            // Fav settings override\r\n            if (config.isFav) {\r\n                dataTile = JSON.parse(JSON.stringify(dataTile));\r\n                if (tile.frameType) dataTile.frameType = tile.frameType;\r\n                if (tile.forceRow) dataTile.forceRow = tile.forceRow;\r\n            }\r\n\r\n            if (sap.n.Launchpad.isDesktop() && dataTile.hideTileDesktop) return;\r\n            if (sap.n.Launchpad.isTablet() && dataTile.hideTileTablet) return;\r\n            if (sap.n.Launchpad.isPhone() && dataTile.hideTileMobile) return;\r\n            if (dataTile.type === 'storeitem' && isCordova()) return;\r\n\r\n            // Tile Content\r\n            config.cardParent.addItem(sap.n.Card.buildCardDefault({\r\n                pageID: config.pageID,\r\n                dataTile: dataTile,\r\n                dataCat: config.dataCat,\r\n                isFav: config.isFav,\r\n                path: config.path,\r\n            }));\r\n        });\r\n\r\n        // add add new Card Button\r\n        if (!config.isFav && !sap.n.Customization.isDisabled() && sap.n.Customization.isInitialized()) {\r\n            const cardContainer = new sap.m.FlexBox(nepId(), {\r\n                width: '100%',\r\n                fitContainer: true,\r\n            }).addStyleClass('nepFCardContainer nepNewCard nepTile100 ui-state-disabled');\r\n            \r\n            const btnAddCard = new sap.m.Button();\r\n            btnAddCard.tooltip = new sap.ui.core.TooltipBase().setText('');\r\n            btnAddCard.setIcon('sap-icon://add');\r\n            btnAddCard.addStyleClass('nepAddCard');\r\n            btnAddCard.setType(sap.m.ButtonType.Default);\r\n            btnAddCard.setWidth('100%');\r\n            btnAddCard.attachPress(() => {\r\n                sap.n.Customization.onAddTile(config.path);\r\n            });\r\n            cardContainer.addItem(btnAddCard);\r\n            config.cardParent.addItem(cardContainer);\r\n        }\r\n    },\r\n\r\n    setInitialGridWidth: function (grid) {\r\n        let navWidth = getWidth(elById('AppCacheNav'));\r\n\r\n        let c = '';\r\n        if (navWidth < 380) c = 'nepGridXSmall';\r\n        else if (navWidth < 680) c = 'nepGridSmall';\r\n        else if (navWidth < 980) c = 'nepGridMedium';\r\n        else if (navWidth < 1280) c = 'nepGridLarge';\r\n        else if (navWidth < 1580) c = 'nepGridXLarge';\r\n        else if (navWidth < 1880) c = 'nepGridXXLarge';\r\n        else if (navWidth < 2360) c = 'nepGridXXXLarge';\r\n\r\n        grid.addStyleClass(c);\r\n    },\r\n\r\n    updateUserLanguage(language = '') {\r\n        AppCache.userInfo.language = language;\r\n        ModelData.Update(AppCacheUsers, 'username', AppCache.userInfo.username, AppCache.userInfo);\r\n        setCacheAppCacheUsers();\r\n\r\n        sap.n.Planet9.function({\r\n            id: dataSet,\r\n            method: 'UpdateUserDetails',\r\n            data: { language },\r\n            success: function (data) {\r\n                if (AppCache.isMobile) {\r\n                    AppCache.translate(language);\r\n                    sap.n.Launchpad.RebuildTiles();\r\n                    sap.n.Launchpad.BuildMenuTop();\r\n                    sap.n.Launchpad.BuildTreeMenu();\r\n                } else {\r\n                    location.reload();\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    // if language set by user is removed, reset to default language\r\n    validateActiveLanguageOrRevert() {\r\n        // supported for user selected language has been removed\r\n        const { languages } = AppCache.config;\r\n        const { language } = AppCache.userInfo;\r\n        if (\r\n            typeof language !== 'undefined' && (\r\n                Array.isArray(languages) && !languages.includes(language)\r\n            ) && language !== 'EN'\r\n        ) {\r\n            // revert to default language\r\n            this.updateUserLanguage();\r\n        }\r\n    },\r\n\r\n    applyLanguages: function (languages) {\r\n        inAppCacheFormSettingsLang.setVisible(true);\r\n        inAppCacheFormSettingsLang.destroyItems();\r\n\r\n        inAppCacheFormSettingsLang.addItem(new sap.ui.core.ListItem({ key: '', text: '' }));\r\n        masterLanguages.forEach(function ({ ISOCODE: key, NAME: text }) {\r\n            if (languages.includes(key)) {\r\n                inAppCacheFormSettingsLang.addItem(new sap.ui.core.ListItem({ key, text }));\r\n            }\r\n        });\r\n    },\r\n\r\n    applyLayout: function (layout) {\r\n        if (!layout) return;\r\n        if (sap.n.Launchpad.currLayout === layout.id) return;\r\n\r\n        ModelData.Delete(AppCache.layout, 'active', false);\r\n\r\n        if (AppCache.layout.length > 1) {\r\n            inAppCacheFormSettingsTHEME.setVisible(true);\r\n            inAppCacheFormSettingsTHEME.destroyItems();\r\n            AppCache.layout.forEach(function (data) {\r\n                inAppCacheFormSettingsTHEME.addItem(new sap.ui.core.Item(nepId(), {\r\n                    key: data.id,\r\n                    text: data.name\r\n                }));\r\n            });\r\n        }\r\n\r\n        if (layout.style) {\r\n            const cssText = layout.style.replace('<style>', '').replace('</style>', '');\r\n            const s = createStyle(cssText);\r\n            appendStyle(\r\n                elById('NeptuneStyleDiv'),\r\n                s\r\n            );\r\n        }\r\n\r\n        [\r\n            'searchBackgroundType', 'searchBackgroundColor', 'searchBackgroundShade', 'searchEnableShadeCalc',\r\n            'usedBackgroundType', 'usedBackgroundColor', 'usedBackgroundShade', 'usedEnableShadeCalc',\r\n        ].forEach(function (k) {\r\n            if (layout[k]) sap.n.Launchpad[k] = layout[k];\r\n        });\r\n\r\n        sap.n.Launchpad.hideBackIcon = !!layout.topBackIconHide;\r\n\r\n        if (typeof StatusBar !== 'undefined') {\r\n            switch (layout.mobileStatusbarText) {\r\n                case 'styleLightContent':\r\n                    StatusBar.styleLightContent();\r\n                    break;\r\n\r\n                case 'styleBlackTranslucent':\r\n                    StatusBar.styleBlackTranslucent();\r\n                    break;\r\n\r\n                case 'styleBlackOpaque':\r\n                    StatusBar.styleBlackOpaque();\r\n                    break;\r\n\r\n                default:\r\n                    StatusBar.styleDefault();\r\n                    break;\r\n            }\r\n\r\n            const c = layout.mobileStatusbarColor;\r\n            if (c) {\r\n                if (c.includes('#')) StatusBar.backgroundColorByHexString(c);\r\n                else StatusBar.backgroundColorByName(c);\r\n            } else {\r\n                StatusBar.backgroundColorByHexString('#000000');\r\n                StatusBar.styleDefault();\r\n            }\r\n        }\r\n\r\n        sap.n.Launchpad.currLayout = layout.id;\r\n        sap.n.Launchpad.currLayoutContent = layout;\r\n        sap.n.Launchpad.setShellWidth();\r\n        sap.n.Layout.setHeaderPadding();\r\n    },\r\n\r\n    applyThemeMode: function () {\r\n        let theme = sap.ui.getCore().getConfiguration().getTheme();\r\n        const el = document.querySelector('html');\r\n        removeClass(el, ['nepLayout', 'nepThemeLight', 'nepThemeDark']);\r\n\r\n        if (theme.endsWith('_dark')) {\r\n            addClass(el, ['nepLayout', 'nepThemeDark']);\r\n        } else {\r\n            addClass(el, ['nepLayout', 'nepThemeLight']);\r\n        }\r\n    },\r\n\r\n    applyUserTheme: function () {\r\n        if (modelAppCacheDiaSettings.oData && modelAppCacheDiaSettings.oData.userTheme) {\r\n            AppCache.layout.forEach(function (data) {\r\n                if (data.id === modelAppCacheDiaSettings.oData.userTheme) {\r\n                    let layout = JSON.parse(JSON.stringify(data));\r\n\r\n                    // UI5 Theme \r\n                    if (layout.ui5Theme) {\r\n                        if (layout.ui5Theme.indexOf('sap_') === -1) sap.ui.getCore().setThemeRoot(layout.ui5Theme, '/public/ui5theme/' + layout.ui5Theme);\r\n                        sap.ui.getCore().applyTheme(layout.ui5Theme);\r\n                    } else {\r\n                        sap.ui.getCore().applyTheme(AppCache.defaultTheme);\r\n                    }\r\n\r\n                    if (modelAppCacheDiaSettings.oData.userBackImage) {\r\n                        layout.style = layout.style.replace('</style>', `.nepShell {\r\n                                background-image: url('${modelAppCacheDiaSettings.oData.userBackImage}') !important;\r\n                                background-repeat:no-repeat;\r\n                                background-size:cover;\r\n                            }\r\n                            .nepPage {\r\n                                background:transparent;\r\n                            }\r\n                            </style>\r\n                        `);\r\n                    }\r\n                    sap.n.Launchpad.currLayout = '';\r\n                    sap.n.Launchpad.applyLayout(layout);\r\n                }\r\n            });\r\n        }\r\n    },\r\n\r\n    BuildMenu: function () {\r\n        // Enable Fav Buttons\r\n        let cat = ModelData.FindFirst(AppCacheCategory, 'inclFav', true);\r\n        if (cat && cat.inclFav) {\r\n            sap.n.Launchpad.enableFav = cat.inclFav;\r\n        } else {\r\n            cat = ModelData.FindFirst(AppCacheCategoryChild, 'inclFav', true);\r\n            if (cat && cat.inclFav) sap.n.Launchpad.enableFav = cat.inclFav;\r\n        }\r\n\r\n        // Add Tile Group/Tile CSS\r\n        appendStyle(\r\n            elById('NeptuneStyleDivDynamic'),\r\n            createStyle(sap.n.Launchpad.buildContentCss())\r\n        );\r\n\r\n        if (AppCache.config.enableTopMenu) sap.n.Launchpad.BuildMenuTop();\r\n        sap.n.Launchpad.BuildTreeMenu();\r\n        sap.n.Launchpad.BuildTags();\r\n        sap.n.Launchpad.SelectHomeMenu();\r\n\r\n        // Fallback, no startApp or Tiles -> Build empty page \r\n        if (!AppCache.StartApp && !AppCache.StartWebApp && !modelAppCacheCategory.oData.length) {\r\n\r\n            let pageCat = new sap.m.Page(nepId(), {\r\n                showHeader: false,\r\n                showFooter: false,\r\n                backgroundDesign: 'Transparent',\r\n            });\r\n\r\n            pageCat.addStyleClass('nepPage');\r\n            AppCacheNav.addPage(pageCat);\r\n            AppCacheNav.to(pageCat);\r\n\r\n        }\r\n    },\r\n\r\n    BuildMenuTop: function () {\r\n        AppCacheAppButton.removeAllItems();\r\n\r\n        // BuildMenuTop will be called via BuildMenu when sap.n.Customization.init is complete\r\n        if (!sap.n.Customization.isInitialized()) {\r\n            return;\r\n        }\r\n        \r\n        sap.n.Customization.getCategories().forEach(function (dataCat) {\r\n            if (dataCat.hideFromMenu) return;\r\n            \r\n            let menuText = sap.n.Launchpad.translateTile('title', dataCat);\r\n            if (dataCat.isCustom) {\r\n                menuText = dataCat.props.menuText;\r\n            }\r\n            \r\n            let popSubMenu;\r\n            let menuItem = new sap.m.Button(`${nepPrefix()}${dataCat.id}`, {\r\n                text: menuText,\r\n                type: 'Transparent',\r\n                press: function (oEvent) {\r\n                    location.hash = `neptopmenu&${dataCat.id}`;\r\n                    if (popSubMenu) popSubMenu.close();\r\n                }\r\n            }).addStyleClass('nepTopMenuBtn');\r\n\r\n            // Navigation Panel\r\n            const tileGroups = sap.n.Customization.getTileGroups(dataCat.id);\r\n            if (tileGroups.length > 0) {\r\n                let listSubMenu = new sap.m.List(nepId(), {\r\n                    showSeparators: 'None'\r\n                });\r\n\r\n                let menuFn = {\r\n                    popOverEntered: false,\r\n                    btnEntered: false\r\n                };\r\n\r\n                let buildSubMenu = false;\r\n                tileGroups.forEach(function (data) {\r\n                    let dataCatChild = ModelData.FindFirst(AppCacheCategory, 'id', data.id);\r\n                    if (!dataCatChild) dataCatChild = ModelData.FindFirst(AppCacheCategoryChild, 'id', data.id);\r\n                    if (!dataCatChild) return;\r\n                    if (dataCatChild.hideFromMenu) return;\r\n\r\n                    const navBtn = new sap.m.StandardListItem(nepId(), {\r\n                        title: sap.n.Launchpad.translateTile('title', dataCatChild),\r\n                        type: 'Active',\r\n                        press: function (e) {\r\n                            const pageCatID = `page${dataCat.id}`;\r\n\r\n                            if (sap.n.Launchpad.currentTileGroupPage === pageCatID) {\r\n                                sap.n.Launchpad.scrollToTileGroup(dataCatChild.id);\r\n                            } else if (sap.n.Launchpad.currentTileGroupPage !== pageCatID) {\r\n                                menuItem.fireEvent('press');\r\n                                sap.n.Launchpad.BuildTiles(dataCat, dataCatChild.id);\r\n                            } else {\r\n                                if (sap.n.Launchpad.currentTile) AppCache.Back();\r\n                                sap.n.Launchpad.scrollToTileGroup(dataCatChild.id);\r\n                            }\r\n\r\n                            menuFn.popOverEntered = false;\r\n                            menuFn.btnEntered = false;\r\n                            if (popSubMenu) popSubMenu.close();\r\n\r\n                            AppCacheAppButton.getItems().forEach(function (item) {\r\n                                if (item.removeStyleClass) item.removeStyleClass('nepTopMenuActive');\r\n                            });\r\n                            menuItem.addStyleClass('nepTopMenuActive');\r\n                        }\r\n                    });\r\n\r\n                    listSubMenu.addItem(navBtn);\r\n                    buildSubMenu = true;\r\n                });\r\n\r\n                if (buildSubMenu) {\r\n                    popSubMenu = new sap.m.Popover(`${nepPrefix()}SubMenu${ModelData.genID()}`, {\r\n                        placement: 'Bottom',\r\n                        resizable: false,\r\n                        showArrow: false,\r\n                        showHeader: false,\r\n                        contentWidth: '300px',\r\n                        offsetY: 5\r\n                    }).addStyleClass('nepSubMenu nepOverflowMenu');\r\n\r\n                    popSubMenu.attachBrowserEvent('mouseenter', function (e) {\r\n                        menuFn.popOverEntered = true;\r\n                        menuItem.addStyleClass('nepTopMenuActiveHover');\r\n                    });\r\n\r\n                    popSubMenu.attachBrowserEvent('mouseleave', function (e) {\r\n                        menuFn.popOverEntered = false;\r\n                        menuItem.removeStyleClass('nepTopMenuActiveHover');\r\n\r\n                        setTimeout(function () {\r\n                            if (!menuFn.btnEntered) popSubMenu.close();\r\n                        }, 100);\r\n                    });\r\n\r\n                    // Open SubMenu\r\n                    menuItem.attachBrowserEvent('mouseenter', function (e) {\r\n                        popSubMenu.openBy(menuItem);\r\n                        menuFn.btnEntered = true;\r\n                    });\r\n\r\n                    menuItem.attachBrowserEvent('mouseleave', function (e) {\r\n                        menuFn.btnEntered = false;\r\n                        setTimeout(function () {\r\n                            if (!menuFn.popOverEntered) popSubMenu.close();\r\n                        }, 100);\r\n                    });\r\n\r\n                    popSubMenu.addContent(listSubMenu);\r\n                }\r\n            }\r\n\r\n            AppCacheAppButton.addItem(menuItem);\r\n        });\r\n    },\r\n\r\n    BuildTags: function () {\r\n        AppCacheShellSearchTags.destroyItems();\r\n\r\n        let tags = {};\r\n        Array.isArray(modelAppCacheTiles.oData) && modelAppCacheTiles.oData.forEach(function (tile) {\r\n            if (!tile.tags) return;\r\n            let tileTags = tile.tags.split(',');\r\n            tileTags.forEach(function (tag) {\r\n                tag = tag.toUpperCase();\r\n                if (tags[tag]) return;\r\n                tags[tag] = tag\r\n            });\r\n        });\r\n\r\n        let tagsArr = [];\r\n        Object.entries(tags).forEach(function ([_, elem]) {\r\n            tagsArr.push({ tag: elem });\r\n        });\r\n\r\n        toolVerticalMenuTags.setVisible(tagsArr.length > 0);\r\n        tagsArr.sort(sort_by('tag'));\r\n\r\n        tagsArr.forEach(function (tag) {\r\n            AppCacheShellSearchTags.addItem(new sap.ui.core.ListItem({\r\n                key: tag.tag,\r\n                text: tag.tag\r\n            }));\r\n        });\r\n    },\r\n\r\n    BuildTreeMenu: function () {\r\n        let treeData = [];\r\n        let _buildMenuTile = function (dataTileID, dataCat, treeData, parent) {\r\n            let dataTile = ModelData.FindFirst(AppCacheTiles, 'id', dataTileID.id);\r\n\r\n            if (sap.n.Launchpad.isDesktop() && dataTile.hideTileDesktop) return;\r\n            if (sap.n.Launchpad.isTablet() && dataTile.hideTileTablet) return;\r\n            if (sap.n.Launchpad.isPhone() && dataTile.hideTileMobile) return;\r\n\r\n            let title = sap.n.Launchpad.translateTile('title', dataTile);\r\n\r\n            if (title && (dataTile.actionApplication || dataTile.actionWebApp || dataTile.actionURL || dataTile.actiongroup || dataTile.actionType === 'F' || dataTile.type === 'storeitem')) {\r\n                let icon = dataTile.icon || 'sap-icon://less';\r\n                let type = 'tile';\r\n\r\n                if (dataTile.actiongroup) {\r\n                    icon = ''; //'sap-icon://fa-solid/layer-group';\r\n                    type = 'subcat';\r\n                }\r\n\r\n                treeData.push({\r\n                    id: dataTile.id,\r\n                    parent: parent || dataCat.id,\r\n                    title: title,\r\n                    type: type,\r\n                    filter: sap.n.Launchpad.translateTile('title', dataCat),\r\n                    tags: dataTile.tags,\r\n                    icon: icon\r\n                });\r\n            }\r\n\r\n            // Tile with Tile Group\r\n            if (dataTile.actiongroup) {\r\n                let dataCat = ModelData.FindFirst(AppCacheCategoryChild, 'id', dataTile.actiongroup);\r\n                if (!dataCat) return;\r\n\r\n                // Tiles\r\n                Array.isArray(dataCat.tiles) && dataCat.tiles.forEach(function (dataSubTile) {\r\n                    _buildMenuTile(dataSubTile, dataCat, treeData, dataTile.id);\r\n                });\r\n\r\n                // Tile Groups\r\n                Array.isArray(dataCat.tilegroups) && dataCat.tilegroups.forEach(function (dataCatID) {\r\n                    let dataCatChild = ModelData.FindFirst(AppCacheCategory, 'id', dataCatID.id);\r\n                    if (!dataCatChild) dataCatChild = ModelData.FindFirst(AppCacheCategoryChild, 'id', dataCatID.id);\r\n                    if (!dataCatChild) return;\r\n                    if (dataCatChild.hideFromMenu) return;\r\n\r\n                    treeData.push({\r\n                        id: dataCatChild.id,\r\n                        parent: dataTile.id,\r\n                        title: sap.n.Launchpad.translateTile('title', dataCatChild),\r\n                        type: 'childcat',\r\n                        icon: '',\r\n                        filter: sap.n.Launchpad.translateTile('title', dataCatChild),\r\n                    });\r\n\r\n                    // Favorites \r\n                    if (dataCatChild.inclFav) {\r\n                        modelAppCacheTilesFav.oData.forEach(function (dataTile) {\r\n                            _buildMenuTile(dataTile, dataCatChild, treeData, dataCatID.id);\r\n                        });\r\n                    }\r\n\r\n                    // Tiles\r\n                    dataCatChild.tiles.forEach(function (dataTile) {\r\n                        _buildMenuTile(dataTile, dataCatChild, treeData, dataCatID.id);\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n        sap.n.Customization.getCategories().forEach(function (dataCat) {\r\n            if (dataCat.hideFromMenu) return;\r\n\r\n            let title = sap.n.Launchpad.translateTile('title', dataCat);\r\n            if (!title && dataCat.isCustom && dataCat.status === 'active') {\r\n                title = dataCat.props.menuText || dataCat.props.title;\r\n            }\r\n\r\n            treeData.push({\r\n                id: dataCat.id,\r\n                parent: '',\r\n                title,\r\n                type: 'cat',\r\n            });\r\n\r\n            // Favorites \r\n            if (dataCat.inclFav) {\r\n                modelAppCacheTilesFav.oData.forEach(function (dataTileID) {\r\n                    _buildMenuTile(dataTileID, dataCat, treeData);\r\n                });\r\n            }\r\n\r\n            // Tiles\r\n            dataCat.tiles.forEach(function (dataTile) {\r\n                _buildMenuTile(dataTile, dataCat, treeData);\r\n            });\r\n\r\n            dataCat.tilegroups.forEach(function (dataCatID) {\r\n                let dataCatChild = ModelData.FindFirst(AppCacheCategory, 'id', dataCatID.id);\r\n                if (!dataCatChild) dataCatChild = ModelData.FindFirst(AppCacheCategoryChild, 'id', dataCatID.id);\r\n                if (!dataCatChild) return;\r\n                if (dataCatChild.hideFromMenu) return;\r\n\r\n                treeData.push({\r\n                    id: dataCatChild.id,\r\n                    parent: dataCat.id,\r\n                    title: sap.n.Launchpad.translateTile('title', dataCatChild),\r\n                    type: 'subcat',\r\n                    icon: '', //'sap-icon://fa-solid/layer-group',\r\n                    filter: sap.n.Launchpad.translateTile('title', dataCatChild),\r\n                });\r\n\r\n                // Favorites \r\n                if (dataCatChild.inclFav) {\r\n                    modelAppCacheTilesFav.oData.forEach(function (dataTile) {\r\n                        _buildMenuTile(dataTile, dataCatChild, treeData);\r\n                    });\r\n                }\r\n\r\n                // Tiles\r\n                dataCatChild.tiles.forEach(function (dataTile) {\r\n                    _buildMenuTile(dataTile, dataCatChild, treeData);\r\n                });\r\n            });\r\n        });\r\n\r\n        modelContentMenu.setData({\r\n            'children': _convertFlatToNested(treeData, 'id', 'parent')\r\n        });\r\n    },\r\n\r\n    scrollToTileGroup: function (tileGroupId) {\r\n        setTimeout(function () {\r\n            const elm = querySelector(`#${sectionPrefix()}${tileGroupId}`);\r\n            if (elm && elm.scrollIntoView) {\r\n                elm.scrollIntoView();\r\n            }\r\n        }, 500);\r\n    },\r\n\r\n    RebuildTiles: function () {\r\n        let currentPage = AppCacheNav.getCurrentPage();\r\n        AppCacheNav.getPages().forEach(function (page) {\r\n            // only for Tile Group + Childs \r\n            if (page.sId.indexOf('page') > -1) {\r\n                // destroy page content, rebuild later when user navigates there\r\n                page.destroyContent();\r\n\r\n                // rebuild current page \r\n                if (currentPage.sId === page.sId) {\r\n                    const id = currentPage.sId;\r\n                    const pageId = id.split('page')[1];\r\n\r\n                    // can be either a category, or a tilegroup\r\n                    let item = sap.n.Customization.getCategory(pageId);\r\n                    if (!item) item = sap.n.Customization.getTileGroup(pageId);\r\n\r\n                    if (!item) AppCache.Home();\r\n                    else sap.n.Launchpad.BuildTiles(item, item.id);\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    SelectHomeMenu: function () {\r\n        // Start with hash \r\n        if (location.hash) {\r\n            sap.n.HashNavigation._handler();\r\n        } else {\r\n            const category = sap.n.Customization.getCategories()[0];\r\n            if (category) location.hash = 'neptopmenu&' + category.id;\r\n        }\r\n    },\r\n\r\n    SetHeader: function () {\r\n        if (sap.n.Launchpad.currentTile) {\r\n            sap.n.Launchpad.setActiveIcon(sap.n.Launchpad.currentTile.id);\r\n        } else {\r\n            sap.n.Launchpad.setActiveIcon();\r\n        }\r\n    },\r\n\r\n    MarkTopMenu: function (menuID) {\r\n        const activeId = `${nepPrefix()}${menuID}`;\r\n        AppCacheAppButton.getItems().forEach(function (item) {\r\n            if (item.removeStyleClass && item.sId !== activeId) item.removeStyleClass('nepTopMenuActive');\r\n            if (item.sId === activeId) item.addStyleClass('nepTopMenuActive');\r\n        });\r\n    },\r\n\r\n    GetGroupHeader: function (data, cards) {\r\n        let header = new sap.m.FlexBox(nepId()).addStyleClass('nepGrid');        \r\n        sap.n.Launchpad.setInitialGridWidth(header);\r\n\r\n        // Content Width\r\n        if (data.cardContentWidth) {\r\n            header.addStyleClass('nepGroup' + data.cardContentWidth);\r\n        }\r\n\r\n        let cardContentAlign = sap.n.Launchpad.currLayoutContent.cardContentAlign || 'Center';\r\n        if (cardContentAlign) {\r\n            header.addStyleClass('nepGridAlign' + cardContentAlign);\r\n        }\r\n\r\n        if (!data.hideHeader || data.isCustom) {\r\n            // Group Header\r\n            const groupHeader = sap.n.Launchpad.buildGroupHeader(data);\r\n            const oHeaderCell = new sap.m.VBox(nepId(), {});\r\n            oHeaderCell.addStyleClass('nepTileMax');\r\n            oHeaderCell.addItem(groupHeader);\r\n            header.addItem(oHeaderCell);\r\n        }\r\n\r\n        if (data.enableMessage) {\r\n            const message = sap.n.Launchpad.buildGroupMessage(data);\r\n            const oHeaderCell = new sap.m.VBox(nepId(), {});\r\n            oHeaderCell.addStyleClass('nepTileMax sapUiSmallMarginBottom');\r\n            oHeaderCell.addItem(message);\r\n            header.addItem(oHeaderCell);\r\n        }\r\n\r\n        return header;\r\n    },\r\n\r\n    GetGroupCards: function (data, type, dragDropContext) {\r\n        const cards = new sap.m.FlexBox(nepId()).addStyleClass('nepGrid');\r\n        if (data.styleClass) cards.addStyleClass(data.styleClass);\r\n\r\n        if (!data.inclFav) {\r\n            cards.addStyleClass(sap.n.Customization.tilesDragDropClass);\r\n        }\r\n\r\n        // use Neptune Element Query to determine dynamic page width\r\n        neptune.ElementQuery.register(cards, {\r\n            prefix: 'nepGrid',\r\n            isolate: true,\r\n            width: AppCache.cssGridBreakpoints\r\n        });\r\n        \r\n        sap.n.Launchpad.setInitialGridWidth(cards);\r\n\r\n        // Content Width\r\n        if (data.cardContentWidth) {\r\n            cards.addStyleClass('nepGroup' + data.cardContentWidth);\r\n        }\r\n\r\n        // Content Alignment\r\n        let cardContentAlign = sap.n.Launchpad.currLayoutContent.cardContentAlign || 'Center';\r\n        if (data.cardContentAlign) cardContentAlign = data.cardContentAlign\r\n        if (cardContentAlign) {\r\n            cards.addStyleClass('nepGridAlign' + cardContentAlign);\r\n        }\r\n\r\n        function applyDragDrop() {\r\n            if (data.inclFav && !(sap.n.Customization.isDisabled() || sap.n.Customization.areScreensLocked())) {\r\n                sap.n.Card.applyDragDropToFavorites(cards);\r\n            }\r\n        }\r\n\r\n        function applyTileGroupEnhancement() {\r\n            if (sap.n.Enhancement.AfterTileGroupRenderer) {\r\n                try {\r\n                    sap.n.Enhancement.AfterTileGroupRenderer(cards, data);\r\n                } catch (e) {\r\n                    appCacheError('Enhancement AfterTileGroupRenderer ' + e);\r\n                }\r\n            }\r\n        }\r\n        \r\n        cards.onAfterRendering = function () {\r\n            applyDragDrop();\r\n            applyTileGroupEnhancement();\r\n        }\r\n\r\n        return cards;\r\n    },\r\n\r\n    BuildTiles: function (dataCat, subCat) {\r\n        let isFav = dataCat.inclFav;\r\n        let pageCatID = `page${dataCat.id}`;\r\n\r\n        const tiles = sap.n.Customization.getTiles(dataCat.id, isFav);\r\n        const tileGroups = sap.n.Customization.getTileGroups(dataCat.id, isFav);\r\n        if (tiles.length === 0 && tileGroups.length === 0) return;\r\n\r\n        sap.n.Launchpad.currentTileGroupPage = pageCatID;\r\n        sap.n.currentView = '';\r\n\r\n        // Mark Menu \r\n        sap.n.Launchpad.MarkTopMenu(dataCat.id);\r\n\r\n        // UI Handling\r\n        sap.n.Launchpad.setShellWidth();\r\n        sap.n.Launchpad.setHideHeader(false);\r\n\r\n        // Back Button         \r\n        if (!subCat && !sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(false);\r\n\r\n        // Create Page Per Tile Group \r\n        let pageCat = sap.ui.getCore().byId(pageCatID);\r\n\r\n        // Pages with Fav, always create\r\n        tileGroups.forEach(function (data) {\r\n            let dataCatChild = sap.n.Customization.getCategory(data.id);\r\n            if (!dataCatChild) dataCatChild = sap.n.Customization.getTileGroup(data.id);\r\n            if (dataCatChild && dataCatChild.inclFav) isFav = true;\r\n        });\r\n\r\n        if (pageCat && isFav) {\r\n            AppCacheNav.removePage(pageCat);\r\n            pageCat.destroy();\r\n            pageCat = null;\r\n        }\r\n\r\n        if (!pageCat) {\r\n            pageCat = new sap.m.Page(pageCatID, {\r\n                showHeader: false,\r\n                showFooter: false,\r\n                backgroundDesign: 'Transparent',\r\n            });\r\n\r\n            pageCat.onAfterRendering = function () {\r\n                if (!sap.n.Customization.isDisabled() && !sap.n.Customization.areScreensLocked()) {\r\n                    sap.n.Customization.applyDragDropToTiles(pageCat);\r\n                }\r\n            };\r\n\r\n            addCustomData(pageCat, {\r\n                type: 'page',\r\n                context: 'page',\r\n                'category-id': dataCat.id,\r\n            });\r\n\r\n            pageCat.addStyleClass('nepPage');\r\n            AppCacheNav.addPage(pageCat);\r\n        }\r\n\r\n        if (pageCat.getContent().length === 0) {\r\n            let versionParts = sap.ui.version.split(\".\");\r\n\r\n            // BlockLayout vs Cards\r\n            if (versionParts[0] >= 1 && versionParts[1] >= 64) {\r\n                sap.n.Launchpad.cardsAvailable = true;\r\n\r\n                //Grid containerOpenApp\r\n                let gridContainer = new sap.m.FlexBox(`${sectionPrefix()}${dataCat.id}`, {\r\n                    direction: 'Column',\r\n                    alignItems: 'Start'\r\n                }).addStyleClass('nepGridContainer nepGridCards');\r\n                \r\n                addCustomData(gridContainer, {\r\n                    type: 'category',\r\n                    context: 'category-tiles',\r\n                    'category-id': dataCat.id,\r\n                });\r\n\r\n                const cards = sap.n.Launchpad.GetGroupCards(dataCat, 'category', { category: dataCat });\r\n                sap.n.Launchpad.BuildCardContent({\r\n                    pageID: pageCatID,\r\n                    dataCat: dataCat,\r\n                    cardParent: cards,\r\n                    isFav: !!dataCat.inclFav,\r\n                    path: [dataCat.id],\r\n                });\r\n\r\n                if (!!dataCat.inclFav) {\r\n                    cards.addStyleClass('favorite-cards');\r\n                }\r\n\r\n                gridContainer.addItem(sap.n.Launchpad.GetGroupHeader(dataCat, cards));\r\n                gridContainer.addItem(cards);\r\n\r\n                // Add Grid to Page\r\n                if (tileGroups.length > 0 || cards.getItems().length > 0) {\r\n                    pageCat.addContent(gridContainer);\r\n                }\r\n\r\n                // Child Tile Groups\r\n                tileGroups.forEach(function (data) {\r\n                    let dataCatChild = sap.n.Customization.getCategory(data.id);\r\n\r\n                    if (!dataCatChild) dataCatChild = sap.n.Customization.getTileGroup(data.id);\r\n                    if (!dataCatChild) return;\r\n\r\n                    //Grid containerOpenApp\r\n                    let tilegroupContainer = new sap.m.FlexBox(`${sectionPrefix()}${dataCat.id}${dataCatChild.id}`, {\r\n                        direction: 'Column',\r\n                        alignItems: 'Start'\r\n                    }).addStyleClass('nepGridContainer nepGridCards');\r\n                    \r\n                    addCustomData(tilegroupContainer, {\r\n                        type: 'tilegroup',\r\n                        context: 'tilegroup-tiles',\r\n                        'category-id': dataCat.id,\r\n                        'tilegroup-id': dataCatChild.id,\r\n                    });\r\n\r\n                    const cards = sap.n.Launchpad.GetGroupCards(\r\n                        dataCatChild,\r\n                        'tilegroup',\r\n                        {\r\n                            category: dataCat,\r\n                            tilegroup: dataCatChild,\r\n                        }\r\n                    );\r\n                    if (!!dataCatChild.inclFav) {\r\n                        cards.addStyleClass('favorite-cards');\r\n                    }\r\n                    sap.n.Launchpad.BuildCardContent({\r\n                        pageID: pageCatID,\r\n                        dataCat: dataCatChild,\r\n                        cardParent: cards,\r\n                        parentCat: dataCat,\r\n                        isFav: !!dataCatChild.inclFav,\r\n                        path: [dataCat.id, dataCatChild.id],\r\n                    });\r\n\r\n                    tilegroupContainer.addItem(sap.n.Launchpad.GetGroupHeader(dataCatChild, cards));\r\n                    tilegroupContainer.addItem(cards);\r\n\r\n                    pageCat.addContent(tilegroupContainer);\r\n                });\r\n\r\n                if (tileGroups.length > 0 || cards.getItems().length > 0) {\r\n                    // add an empty box\r\n                    pageCat.addContent(\r\n                        new sap.m.HBox(nepId(), {\r\n                            height: '50px'\r\n                        })\r\n                    );\r\n                }\r\n            } else {\r\n                // Build Group Header\r\n                if (!dataCat.hideHeader) pageCat.addContent(sap.n.Launchpad.buildGroupHeader(dataCat));\r\n\r\n                // Message \r\n                if (dataCat.enableMessage) pageCat.addContent(sap.n.Launchpad.buildGroupMessage(dataCat));\r\n\r\n                if (!dataCat.backgroundType) dataCat.backgroundType = 'cards';\r\n\r\n                // Cards Type\r\n                if (dataCat.backgroundType === 'cards') {\r\n                    dataCat.backgroundType = 'Default';\r\n                    dataCat.enableCards = true;\r\n                }\r\n\r\n                // Block Parent\r\n                let AppCacheObjectTiles = new sap.ui.layout.BlockLayout(nepId(), {\r\n                    background: dataCat.backgroundType,\r\n                    keepFontSize: true\r\n                });\r\n\r\n                if (dataCat.styleClass) AppCacheObjectTiles.addStyleClass(dataCat.styleClass);\r\n\r\n                // Fav \r\n                if (dataCat.inclFav) sap.n.Launchpad.BuildTilesContent(dataCat, AppCacheObjectTiles, true);\r\n\r\n                // Tiles \r\n                sap.n.Launchpad.BuildTilesContent(dataCat, AppCacheObjectTiles);\r\n\r\n                // Add Block to Page\r\n                pageCat.addContent(AppCacheObjectTiles);\r\n\r\n                // Child Tile Groups\r\n                dataCat.tilegroups.forEach(function (data) {\r\n                    let dataCatChild = ModelData.FindFirst(AppCacheCategory, 'id', data.id);\r\n\r\n                    if (!dataCatChild) dataCatChild = ModelData.FindFirst(AppCacheCategoryChild, 'id', data.id);\r\n                    if (!dataCatChild) return;\r\n\r\n                    if (!dataCatChild.backgroundType) dataCatChild.backgroundType = 'cards';\r\n\r\n                    // Cards Type\r\n                    if (dataCatChild.backgroundType === 'cards') {\r\n                        dataCatChild.backgroundType = 'Default';\r\n                        dataCatChild.enableCards = true;\r\n                    }\r\n\r\n                    // Build Group Header\r\n                    if (!dataCatChild.hideHeader) pageCat.addContent(sap.n.Launchpad.buildGroupHeader(dataCatChild));\r\n\r\n                    // Block Parent\r\n                    let AppCacheObjectTiles = new sap.ui.layout.BlockLayout(nepId(), {\r\n                        background: dataCatChild.backgroundType,\r\n                        keepFontSize: true\r\n                    });\r\n\r\n                    if (dataCat.styleClass) AppCacheObjectTiles.addStyleClass(dataCat.styleClass);\r\n\r\n                    // Fav \r\n                    if (dataCatChild.inclFav) sap.n.Launchpad.BuildTilesContent(dataCatChild, AppCacheObjectTiles, true);\r\n\r\n                    // Tiles \r\n                    sap.n.Launchpad.BuildTilesContent(dataCatChild, AppCacheObjectTiles);\r\n\r\n                    // Add Block to Page\r\n                    pageCat.addContent(AppCacheObjectTiles);\r\n                });\r\n\r\n                if (dataCat.tilegroups.length > 0) {\r\n                    // add an empty box\r\n                    pageCat.addContent(\r\n                        new sap.m.HBox(nepId(), {\r\n                            height: (window.innerHeight - 270) + 'px'\r\n                        })\r\n                    );\r\n                }\r\n\r\n                if (subCat) {\r\n                    setTimeout(function () {\r\n                        pageCat.scrollTo(0);\r\n                    }, 100);\r\n                }\r\n            }\r\n        }\r\n\r\n        sap.n.Launchpad.backApp = pageCat;\r\n        sap.n.Launchpad.setMenuPage(dataCat);\r\n\r\n        // Navigate\r\n        setTimeout(function () {\r\n            const transition = modelAppCacheDiaSettings.oData.TRANSITION || 'show';\r\n            AppCacheNav.to(pageCat, transition);\r\n        }, 100);\r\n\r\n        // Scrolling to SubMenu\r\n        if (subCat) {\r\n            setTimeout(function () {\r\n                sap.n.Launchpad.scrollToTileGroup(subCat);\r\n            }, 300);\r\n        }\r\n    },\r\n\r\n    BuildTilesContent: function (dataCat, AppCacheObjectTiles, isFav) {\r\n        let oBlockCell;\r\n\r\n        // Create First Row\r\n        let numSections = 0;\r\n        let maxTiles = dataCat.numTiles || 4;\r\n        let defaultSize = Math.ceil(100 / maxTiles);\r\n        let oBlockRowTiles = '';\r\n        let tiles = isFav ? modelAppCacheTilesFav.oData : dataCat.tiles;\r\n\r\n        sap.n.Launchpad.backgroundShade = '';\r\n\r\n        tiles.forEach(function (tile) {\r\n            let dataTile = sap.n.Customization.getTile(tile.id);\r\n            if (!dataTile) return;\r\n            if (dataTile.disabled) return;\r\n\r\n            // Fav settings override\r\n            if (isFav) {\r\n                dataTile = JSON.parse(JSON.stringify(dataTile));\r\n                if (tile.frameType) dataTile.frameType = tile.frameType;\r\n                if (tile.forceRow) dataTile.forceRow = tile.forceRow;\r\n            }\r\n\r\n            if (sap.n.Launchpad.isDesktop() && dataTile.hideTileDesktop) return;\r\n            if (sap.n.Launchpad.isTablet() && dataTile.hideTileTablet) return;\r\n            if (sap.n.Launchpad.isPhone() && dataTile.hideTileMobile) return;\r\n            if (dataTile.type === 'storeitem' && isCordova()) return;\r\n\r\n            if (numSections === 0 || dataTile.forceRow) {\r\n\r\n                oBlockRowTiles = new sap.ui.layout.BlockLayoutRow(nepId(), {\r\n                    scrollable: dataCat.enableScroll\r\n                });\r\n\r\n                AppCacheObjectTiles.addContent(oBlockRowTiles);\r\n                numSections = 0;\r\n            }\r\n\r\n            // Tile Size\r\n            let tileWidth = parseInt(dataTile.frameType) || defaultSize;\r\n            numSections = numSections + (maxTiles / 100) * tileWidth;\r\n\r\n            // Tile Content\r\n            switch (dataTile.type) {\r\n\r\n                case 'intcard':\r\n                    oBlockCell = sap.n.Launchpad.buildTileIntegrationCard(dataTile, tileWidth, dataCat);\r\n                    oBlockRowTiles.addContent(oBlockCell);\r\n                    break;\r\n\r\n                case 'application':\r\n                    oBlockCell = sap.n.Launchpad.buildTileApplication(dataTile, tileWidth, dataCat);\r\n                    oBlockRowTiles.addContent(oBlockCell);\r\n                    break;\r\n\r\n                case 'highchart':\r\n                    oBlockCell = sap.n.Launchpad.buildTileHighchart(dataTile, tileWidth, dataCat);\r\n                    oBlockRowTiles.addContent(oBlockCell);\r\n                    break;\r\n\r\n                case 'highstock':\r\n                    oBlockCell = sap.n.Launchpad.buildTileHighstock(dataTile, tileWidth, dataCat);\r\n                    oBlockRowTiles.addContent(oBlockCell);\r\n                    break;\r\n\r\n                case 'sub':\r\n                    const oBlockRowSub = new sap.ui.layout.BlockLayoutRow(nepId(), {\r\n                        scrollable: false\r\n                    });\r\n                    AppCacheObjectTiles.addContent(oBlockRowSub);\r\n                    oBlockRowSub.addContent(sap.n.Launchpad.buildTileSubHeader(dataTile, tileWidth, dataCat));\r\n                    break;\r\n\r\n                default:\r\n                    oBlockCell = sap.n.Launchpad.buildTileDefault(dataTile, tileWidth, dataCat);\r\n                    oBlockRowTiles.addContent(oBlockCell);\r\n                    break;\r\n            }\r\n\r\n            if (!dataCat.enableScroll) {\r\n                if (numSections >= maxTiles) numSections = 0;\r\n            }\r\n\r\n            if (dataTile.frameType && !sap.n.Launchpad.isPhone()) oBlockCell.addStyleClass('nepTileCardsFixed' + dataTile.frameType);\r\n\r\n        });\r\n    },\r\n\r\n    HandleTilePress: function (dataTile, dataCat) {\r\n        if (dataTile.navObject && dataTile.navAction) {\r\n            location.hash = dataTile.navObject + '-' + dataTile.navAction;\r\n        } else {\r\n            location.hash = '';\r\n            sap.n.Launchpad._HandleTilePress(dataTile, dataCat);\r\n        }\r\n    },\r\n\r\n    _HandleTilePress: function (dataTile, dataCat) {\r\n        let appTitle;\r\n\r\n        // Any tile ?\r\n        if (!dataTile) return;\r\n\r\n        // Clear Hash if no semantic navigation\r\n        if (!dataTile.navObject && !dataTile.navAction) location.hash = '';\r\n\r\n        // Avoid double start\r\n        if (sap.n.Launchpad.currentTile && !sap.n.Launchpad.currentTile.actionURL) {\r\n            if (sap.n.Launchpad.currentTile.id === dataTile.id) return;\r\n        }\r\n\r\n        AppCacheShellHelp.setVisible(false);\r\n        sap.n.Launchpad.contextType = 'Menu';\r\n\r\n        // Start SidePanel\r\n        if (dataTile.sidepanelApp && !sap.n.Launchpad.isPhone()) {\r\n            sap.n.Shell.loadSidepanel(dataTile.sidepanelApp, dataTile.sidepanelTitle);\r\n        } else {\r\n            sap.n.Shell.closeSidepanel();\r\n        }\r\n\r\n        // Set App Title\r\n        if (sap.n.Launchpad.isPhone() || dataTile.subTitle === '' || dataTile.subTitle === null) {\r\n            appTitle = dataTile.title;\r\n        } else {\r\n            appTitle = dataTile.title + ' - ' + dataTile.subTitle;\r\n        }\r\n\r\n        // Header Handling \r\n        let hideHeader = false;\r\n        if (sap.n.Launchpad.isDesktop() && dataTile.hideHeaderL) hideHeader = true;\r\n        if (sap.n.Launchpad.isTablet() && dataTile.hideHeaderM) hideHeader = true;\r\n        if (sap.n.Launchpad.isPhone() && dataTile.hideHeaderS) hideHeader = true;\r\n\r\n        sap.n.Launchpad.setHideHeader(hideHeader);\r\n\r\n        if (dataTile.urlApplication === null) dataTile.urlApplication = \"\";\r\n\r\n        // Show back Button \r\n        if (!dataTile.openDialog && !dataTile.openWindow) {\r\n            if (dataTile.actionApplication || dataTile.actionURL || dataTile.actionWebApp || dataTile.actionType === 'F') {\r\n                sap.n.Launchpad.currentTile = dataTile;\r\n            }\r\n\r\n            if (!sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(true);\r\n        }\r\n\r\n        // Trace\r\n        if (AppCache.enableTrace && !AppCache.isOffline) sap.n.Launchpad.traceTile(dataTile);\r\n\r\n        // Enhancement\r\n        if (sap.n.Enhancement.TileClick) {\r\n            try {\r\n                sap.n.Enhancement.TileClick(dataTile);\r\n            } catch (e) {\r\n                appCacheError('Enhancement TileClick ' + e);\r\n            }\r\n        }\r\n\r\n\r\n        // Adaptive Framework\r\n        if (dataTile.actionType === 'F') {\r\n\r\n            sap.n.Adaptive.getConfig(dataTile.settings.adaptive.id).then(function (config) {\r\n\r\n                // Exists ? \r\n                if (!config) {\r\n                    sap.m.MessageToast.show(AppCache_tAdaptiveNotFound.getText());\r\n                    return;\r\n                }\r\n\r\n                if (dataTile.openDialog) {\r\n\r\n                    AppCache.Load(config.application, {\r\n                        appGUID: dataTile.id,\r\n                        dialogShow: true,\r\n                        dialogTitle: appTitle,\r\n                        dialogHeight: dataTile.dialogHeight || '90%',\r\n                        dialogWidth: dataTile.dialogWidth || '1200px',\r\n                        startParams: config\r\n                    });\r\n\r\n                    sap.n.Launchpad.contextType = 'Tile';\r\n                    sap.n.Launchpad.contextTile = dataTile;\r\n                    location.hash = '';\r\n\r\n                } else {\r\n\r\n                    // Start App\r\n                    sap.n.Launchpad.handleAppTitle(appTitle);\r\n                    sap.n.Launchpad.handleNavButton(dataTile, dataCat);\r\n                    sap.n.Launchpad.handleRunListApp(dataTile);\r\n\r\n                    AppCache.Load(config.application, {\r\n                        appGUID: dataTile.id,\r\n                        startParams: config,\r\n                        openFullscreen: dataTile.openFullscreen\r\n                    });\r\n\r\n                    // Sidepanel User Assistance\r\n                    if (dataTile.enableDocumentation && !AppCache.isPublic) AppCacheShellHelp.setVisible(true);\r\n\r\n                    // Mark Open From \r\n                    if (sap.n.Shell.openSidePanelApps[dataTile.actionApplication]) sap.n.Shell.openSidepanel();\r\n\r\n                }\r\n\r\n            });\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        // Store Item\r\n        if (dataTile.type === 'storeitem') {\r\n            // Get Mobile Client\r\n            request({\r\n                type: 'GET',\r\n                contentType: 'application/json; charset=utf-8',\r\n                url: AppCache.Url + '/mobileClients/' + dataTile.storeItem.mobileClient,\r\n                dataType: 'json',\r\n                success: function (data) {\r\n                    // Get Active Version \r\n                    data.activeBuild = {};\r\n                    data.builds.forEach(function (build) {\r\n                        if (data.activeVersion === build.version) data.activeBuild = build;\r\n                    });\r\n\r\n                    // Hide image on phone\r\n                    if (sap.n.Launchpad.isPhone()) {\r\n                        oTileImageCell.setVisible(false);\r\n                    } else {\r\n                        oTileImage.setSrc(AppCache.Url + '/media/' + data.iconId);\r\n                    }\r\n\r\n                    // Install button \r\n                    AppCachePageStoreInstall.setEnabled(false);\r\n                    switch (sap.ui.Device.os.name) {\r\n\r\n                        case 'win':\r\n                            if (data.buildWindows && data.activeBuild.dataWindows) AppCachePageStoreInstall.setEnabled(true);\r\n                            break;\r\n\r\n                        case 'Android':\r\n                            if (data.buildAndroid && data.activeBuild.dataAndroid) AppCachePageStoreInstall.setEnabled(true);\r\n                            break;\r\n\r\n                        case 'iOS':\r\n                            if (data.buildIOS && data.activeBuild.dataIos) AppCachePageStoreInstall.setEnabled(true);\r\n                            break;\r\n\r\n                    }\r\n\r\n                    modelAppCachePageStore.setData(data);\r\n                    AppCacheNav.to(AppCachePageStore);\r\n                },\r\n                error: function (data) {\r\n                    sap.m.MessageToast.show(data.status);\r\n                }\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        // Tile Group \r\n        if (dataTile.actiongroup) {\r\n            let dataCat = ModelData.FindFirst(AppCacheCategory, 'id', dataTile.actiongroup);\r\n            if (!dataCat) dataCat = ModelData.FindFirst(AppCacheCategoryChild, 'id', dataTile.actiongroup);\r\n            if (dataCat) {\r\n                if (!sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(true);\r\n                sap.n.Launchpad.handleAppTitle(dataTile.title);\r\n                sap.n.Launchpad.BuildTiles(dataCat, true);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // External URL\r\n        if (dataTile.actionURL) {\r\n            sap.n.Launchpad.handleRunListApp(dataTile);\r\n\r\n            if (dataTile.openWindow) {\r\n                if (AppCache.isMobile) {\r\n                    window.open(dataTile.actionURL, '_blank', 'location=0,status=0');\r\n                } else {\r\n                    sap.m.URLHelper.redirect(dataTile.actionURL, dataTile.openWindow);\r\n                }\r\n\r\n                location.hash = '';\r\n                AppCacheShellBack.setVisible(false);\r\n            } else if (dataTile.openDialog) {\r\n                sap.n.Launchpad.contextType = 'Tile';\r\n                sap.n.Launchpad.contextTile = dataTile;\r\n\r\n                sap.n.Shell.openUrl(dataTile.actionURL, {\r\n                    dialogTitle: appTitle,\r\n                    dialogHeight: dataTile.dialogHeight || '90%',\r\n                    dialogWidth: dataTile.dialogWidth || '1200px',\r\n                });\r\n\r\n                location.hash = '';\r\n                AppCacheShellBack.setVisible(false);\r\n            } else {\r\n                sap.n.Launchpad.handleAppTitle(appTitle);\r\n                sap.n.Launchpad.handleNavButton(dataTile, dataCat);\r\n\r\n                AppCacheNav.to(AppCache_boxURL, modelAppCacheDiaSettings.oData.TRANSITION || 'show');\r\n\r\n                if (dataTile.openFullscreen) {\r\n                    AppCacheShellUI.setAppWidthLimited(false);\r\n                } else {\r\n                    AppCacheShellUI.setAppWidthLimited(true);\r\n                }\r\n\r\n                // Hide All\r\n                hideChildren('#AppCache_URLDiv');\r\n\r\n                // Check If element exist > Display or Create\r\n                let el = elById(`iFrame${dataTile.id}`);\r\n\r\n                if (el) {\r\n                    el.style.display = 'block';\r\n                } else {\r\n                    appendIFrame(\r\n                        querySelector('#AppCache_URLDiv'),\r\n                        {\r\n                            'id': `iFrame${dataTile.id}`,\r\n                            'frameborder': '0',\r\n                            'style': 'border: 0;',\r\n                            'width': '100%',\r\n                            'height': '100%',\r\n                            'src': dataTile.actionURL\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // Web App\r\n        if (dataTile.actionWebApp) {\r\n            if (dataTile.openWindow) {\r\n                let url = '/webapp/' + dataTile.actionWebApp;\r\n                if (dataTile.urlApplication) {\r\n                    url = dataTile.urlApplication + url;\r\n                } else {\r\n                    url = AppCache.Url + url;\r\n                }\r\n\r\n                if (AppCache.isMobile) {\r\n                    window.open(url, '_blank', 'location=0,status=0');\r\n                } else {\r\n                    sap.m.URLHelper.redirect(url, dataTile.openWindow);\r\n                }\r\n\r\n                location.hash = '';\r\n                AppCacheShellBack.setVisible(false);\r\n            } else {\r\n                sap.n.Launchpad.handleAppTitle(appTitle);\r\n\r\n                let viewName = 'webapp:' + dataTile.actionWebApp + ':' + dataTile.urlApplication;\r\n                let webApp = ModelData.FindFirst(AppCacheData, ['application', 'appPath'], [dataTile.actionWebApp, dataTile.urlApplication]);\r\n\r\n                if (webApp) {\r\n\r\n                    // Get App from Memory\r\n                    if (AppCache.View[viewName]) {\r\n                        AppCache.buildWebApp(dataTile, null, dataCat);\r\n                        return;\r\n                    }\r\n\r\n                    // Get App from Cache\r\n                    if (typeof p9Database !== 'undefined' && p9Database !== null) {\r\n                        p9GetView(viewName).then(function (viewData) {\r\n                            if (viewData.length > 10 && !webApp.invalid) {\r\n                                AppCache.buildWebApp(dataTile, viewData, dataCat);\r\n                            } else {\r\n                                AppCache.getWebApp(dataTile, dataCat);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        let data = sapStorageGet(viewName);\r\n                        if (data && !webApp.invalid) {\r\n                            AppCache.buildWebApp(dataTile, data, dataCat);\r\n                        } else {\r\n                            AppCache.getWebApp(dataTile, dataCat);\r\n                        }\r\n                    }\r\n                } else {\r\n                    AppCache.getWebApp(dataTile, dataCat);\r\n                }\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // Application\r\n        if (dataTile.actionApplication) {\r\n            if (dataTile.openDialog) {\r\n                AppCache.Load(dataTile.actionApplication, {\r\n                    appGUID: dataTile.id,\r\n                    appPath: dataTile.urlApplication,\r\n                    appAuth: dataTile.urlAuth,\r\n                    appType: dataTile.urlType,\r\n                    dialogShow: true,\r\n                    dialogTitle: appTitle,\r\n                    sapICFNode: dataTile.sapICFNode || '',\r\n                    dialogHeight: dataTile.dialogHeight || '90%',\r\n                    dialogWidth: dataTile.dialogWidth || '1200px',\r\n                    startParams: dataTile.actionParameters\r\n                });\r\n\r\n                sap.n.Launchpad.contextType = 'Tile';\r\n                sap.n.Launchpad.contextTile = dataTile;\r\n                location.hash = '';\r\n\r\n            } else if (dataTile.openWindow) {\r\n                let url = `/app/${dataTile.actionApplication}`;\r\n                if (dataTile.isPublic) url = `/public/app/${dataTile.actionApplication}`;\r\n\r\n                if (dataTile.urlApplication) url = `${dataTile.urlApplication}${url}`;\r\n                else url = `${AppCache.Url}${url}`;\r\n\r\n                if (AppCache.isMobile) {\r\n                    window.open(url, '_blank', 'location=0,status=0');\r\n                } else {\r\n                    sap.m.URLHelper.redirect(url, dataTile.openWindow);\r\n                }\r\n            } else {\r\n                // Start App\r\n                sap.n.Launchpad.handleAppTitle(appTitle);\r\n                sap.n.Launchpad.handleNavButton(dataTile, dataCat);\r\n                sap.n.Launchpad.handleRunListApp(dataTile);\r\n\r\n                AppCache.Load(dataTile.actionApplication, {\r\n                    appGUID: dataTile.id,\r\n                    appPath: dataTile.urlApplication,\r\n                    appAuth: dataTile.urlAuth,\r\n                    appType: dataTile.urlType,\r\n                    sapICFNode: dataTile.sapICFNode,\r\n                    startParams: dataTile.actionParameters,\r\n                    openFullscreen: dataTile.openFullscreen\r\n                });\r\n\r\n                // Sidepanel User Assistance\r\n                if (dataTile.enableDocumentation && !AppCache.isPublic) AppCacheShellHelp.setVisible(true);\r\n\r\n                // Mark Open From \r\n                if (sap.n.Shell.openSidePanelApps[dataTile.actionApplication]) sap.n.Shell.openSidepanel();\r\n            }\r\n            \r\n            return;\r\n        }\r\n    },\r\n\r\n    handleAppTitle: function (appTitle) {\r\n        if (sap.n.Layout.showAppTitle() && !AppCache.config.enableTopMenu) {\r\n            AppCacheShellAppTitle.setText(appTitle || '');\r\n        }\r\n    },\r\n\r\n    handleRunListApp: function (dataTile) {\r\n        // Get Data from Fav List\r\n        let rec = ModelData.FindFirst(AppCacheTilesRun, 'id', dataTile.id);\r\n\r\n        // Update counter\r\n        if (rec) {\r\n            rec.sort = parseInt(rec.sort) + 1;\r\n        } else {\r\n            rec = dataTile;\r\n            rec.sort = 1;\r\n        }\r\n\r\n        // Update Fav List\r\n        ModelData.Update(AppCacheTilesRun, 'id', dataTile.id, rec);\r\n\r\n        // Fix\r\n        if (!modelAppCacheTilesRun.oData.length) modelAppCacheTilesRun.setData([]);\r\n\r\n        // Only Last 10\r\n        let sorted = modelAppCacheTilesRun.oData.sort(function (a, b) {\r\n            if (a.sort > b.sort)\r\n                return -1;\r\n            if (a.sort < b.sort)\r\n                return 1;\r\n            return 0;\r\n        });\r\n\r\n        modelAppCacheTilesRun.setData(sorted.splice(0, 10));\r\n        setCacheAppCacheTilesRun();\r\n    },\r\n\r\n    getIconUrl: function (dataTile) {\r\n        if (dataTile.icon) return dataTile.icon;\r\n\r\n        if (dataTile.actionType === 'F') return 'sap-icon://chart-table-view';\r\n        else if (dataTile.actionApplication) return 'sap-icon://sys-monitor';\r\n\r\n        return 'sap-icon://chain-link';\r\n    },\r\n\r\n    handleNavButton: function (dataTile, dataCat) {\r\n        // Tree Menu - Active Apps\r\n        const containerAppId = `${nepPrefix()}OpenAppContainer${dataTile.id}`;\r\n        containerOpenApp = sap.ui.getCore().byId(containerAppId);\r\n\r\n        if (!containerOpenApp) {\r\n            containerOpenApp = new sap.m.HBox(containerAppId, {\r\n                width: '100%',\r\n                justifyContent: 'SpaceBetween',\r\n                alignItems: 'Center'\r\n            }).addStyleClass('nepOpenAppsContainer');\r\n\r\n            let butOpenApp = new sap.m.Button(`${nepPrefix()}OpenApp${dataTile.id}`, {\r\n                text: sap.n.Launchpad.translateTile('title', dataTile),\r\n                icon: sap.n.Launchpad.getIconUrl(dataTile),\r\n                iconFirst: true,\r\n                press: function (oEvent) {\r\n                    sap.n.Launchpad.HandleTilePress(dataTile, dataCat);\r\n                    if (!AppCache.config.verticalMenu) sap.n.Launchpad.overflowMenuClose();\r\n                }\r\n            }).addStyleClass('nepOpenAppsBtn nepOpenAppsBtnItem');\r\n\r\n            let butOpenAppClose = new sap.ui.core.Icon(nepId(), {\r\n                size: '1.375rem',\r\n                src: 'sap-icon://sys-cancel',\r\n                press: function (oEvent) {\r\n                    sap.n.Shell.closeTile(dataTile);\r\n                }\r\n            }).addStyleClass('nepOpenAppsClose');\r\n\r\n            openApps.addItem(containerOpenApp);\r\n            containerOpenApp.addItem(butOpenApp);\r\n            containerOpenApp.addItem(butOpenAppClose);\r\n            openAppMaster.setVisible(true);\r\n        }\r\n\r\n        // New Button - Side\r\n        if (sap.n.Layout.activeAppsSide()) {\r\n            const blockCellId = `but${dataTile.id}`;\r\n            let oBlockCell = sap.ui.getCore().byId(blockCellId);\r\n            if (!oBlockCell) {\r\n                // Top\r\n                let oBlockCell = new sap.ui.layout.BlockLayoutCell(blockCellId).addStyleClass('tileEmpty');\r\n                sap.n.Launchpad.setBackgroundShade(dataTile, dataCat, oBlockCell, true);\r\n                oBlockCell.addStyleClass('nepTileCardsRunning nepNavBarTile');\r\n\r\n                let boxTop = new sap.m.FlexBox(nepId(), {\r\n                    justifyContent: 'Start',\r\n                    alignContent: 'Center',\r\n                    height: '35px'\r\n                });\r\n\r\n                let boxIcon = new sap.m.VBox(nepId(), {\r\n                    width: '38px'\r\n                }).addStyleClass('nepNavBarBoxIcon');\r\n\r\n                if (dataTile.cardImage) {\r\n                    boxIcon.addItem(\r\n                        new sap.m.Image(nepId(), {\r\n                            src: dataTile.cardImage,\r\n                            height: '37px',\r\n                            densityAware: false,\r\n                        })\r\n                    );\r\n                } else {\r\n                    boxIcon.addItem(\r\n                        new sap.ui.core.Icon(nepId(), {\r\n                            src: sap.n.Launchpad.getIconUrl(dataTile),\r\n                            size: '2rem',\r\n                            useIconTooltip: false\r\n                        })\r\n                    );\r\n                }\r\n\r\n                let boxTitle = new sap.m.VBox(nepId(), {\r\n                    width: '190px'\r\n                }).addStyleClass('nepNavBarBoxTitle');\r\n\r\n                let textTitle = new sap.m.Text(nepId(), {\r\n                    wrapping: false,\r\n                    text: sap.n.Launchpad.translateTile('title', dataTile),\r\n                }).addStyleClass('nepNavBarTitle');\r\n\r\n                let textSubTitle = new sap.m.Text(nepId(), {\r\n                    wrapping: false,\r\n                    text: sap.n.Launchpad.translateTile('subTitle', dataTile),\r\n                }).addStyleClass('nepNavBarSubTitle');\r\n\r\n                let boxActions = new sap.m.VBox(nepId(), {\r\n                    justifyContent: 'Start',\r\n                    width: '40px'\r\n                });\r\n\r\n                let butClose = new sap.m.Button(nepId(), {\r\n                    type: 'Transparent',\r\n                    icon: 'sap-icon://sys-cancel',\r\n                    press: function (oEvent) {\r\n                        sap.n.Shell.closeTile(dataTile);\r\n                    }\r\n                });\r\n\r\n                let buttonStyle = sap.n.Launchpad.buildTileActionStyle(oBlockCell);\r\n                butClose.addStyleClass('nepTileAction nepNavBarAction ' + buttonStyle);\r\n\r\n                // Event - Click\r\n                boxIcon.attachBrowserEvent('click', function (oEvent) {\r\n                    sap.n.Launchpad.setActiveIcon(dataTile.id);\r\n                    sap.n.Launchpad.HandleTilePress(dataTile, dataCat);\r\n                    popNavBar.close();\r\n                });\r\n\r\n                // Placement\r\n                oBlockCell.addContent(boxTop);\r\n                boxTop.addItem(boxIcon);\r\n                boxTop.addItem(boxTitle);\r\n                boxTop.addItem(boxActions);\r\n                boxTitle.addItem(textTitle);\r\n                boxTitle.addItem(textSubTitle);\r\n                boxActions.addItem(butClose);\r\n\r\n                blockRunningRow.addContent(oBlockCell);\r\n\r\n                if (!isTouchScreen() || isWidthGTE(1000)) {\r\n                    oBlockCell.attachBrowserEvent('mouseenter', function (oEvent) {\r\n                        blockPopoverRow.removeAllContent();\r\n                        blockPopoverRow.addContent(sap.n.Launchpad.handlePopButton(dataTile, dataCat));\r\n\r\n                        popNavBar.setPlacement('Right');\r\n                        popNavBar.setOffsetX(-63);\r\n                        popNavBar.setOffsetY(0);\r\n\r\n                        setTimeout(function () {\r\n                            popNavBar.openBy(oBlockCell);\r\n                        }, 100);\r\n                    });\r\n                }\r\n\r\n                sap.n.Layout.setHeaderPadding();\r\n            }\r\n        }\r\n\r\n        if (sap.n.Layout.activeAppsTop()) {\r\n            // New Button\r\n            let tileButton = sap.ui.getCore().byId(`butTop${dataTile.id}`);\r\n            if (!tileButton) {\r\n                tileButton = new sap.m.Button(`butTop${dataTile.id}`, {\r\n                    type: 'Transparent',\r\n                    icon: sap.n.Launchpad.getIconUrl(dataTile),\r\n                    press: function (oEvent) { sap.n.Launchpad.HandleTilePress(dataTile); }\r\n                }).addStyleClass('nepTopMenuBtn nepTopMenuActive');\r\n\r\n                AppCacheShellOpenApps.addItem(tileButton);\r\n\r\n                if (!isTouchScreen() || isWidthGTE(1000)) {\r\n                    tileButton.attachBrowserEvent('mouseenter', function (e) {\r\n                        blockPopoverRow.removeAllContent();\r\n                        blockPopoverRow.addContent(sap.n.Launchpad.handlePopButton(dataTile, dataCat));\r\n                        popNavBar.setPlacement('Bottom');\r\n                        popNavBar.setOffsetX(-150);\r\n                        popNavBar.setOffsetY(4);\r\n\r\n                        setTimeout(function () {\r\n                            popNavBar.openBy(tileButton);\r\n                        }, 100);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        // Set Active \r\n        sap.n.Launchpad.setActiveIcon(dataTile.id);\r\n    },\r\n\r\n    handlePopButton: function (dataTile, dataCat) {\r\n        // Top \r\n        let oBlockCell = new sap.ui.layout.BlockLayoutCell(nepId()).addStyleClass('nepIconActive nepTileCardsPop nepNavBarTile');\r\n\r\n        sap.n.Launchpad.setBackgroundShade(dataTile, dataCat, oBlockCell, true);\r\n\r\n        // oBlockCell.addStyleClass('nepTileCardsPop nepNavBarTile');\r\n\r\n        let boxTop = new sap.m.FlexBox(nepId(), {\r\n            justifyContent: 'Start',\r\n            alignContent: 'Center',\r\n            height: '35px'\r\n        });\r\n\r\n        let boxIcon = new sap.m.VBox(nepId(), {\r\n            width: '38px'\r\n        }).addStyleClass('nepNavBarBoxIcon');\r\n\r\n        if (dataTile.cardImage) {\r\n            let oBlockImage = new sap.m.Image(nepId(), {\r\n                src: dataTile.cardImage,\r\n                height: '37px',\r\n                densityAware: false,\r\n            });\r\n            boxIcon.addItem(oBlockImage);\r\n        } else {\r\n            let oBlockIcon = new sap.ui.core.Icon(nepId(), {\r\n                src: sap.n.Launchpad.getIconUrl(dataTile),\r\n                size: '2rem',\r\n                useIconTooltip: false\r\n            });\r\n            boxIcon.addItem(oBlockIcon);\r\n        }\r\n\r\n        let boxTitle = new sap.m.VBox(nepId(), {\r\n            width: '190px'\r\n        }).addStyleClass('nepNavBarBoxTitle');\r\n\r\n        let textTitle = new sap.m.Text(nepId(), {\r\n            wrapping: false,\r\n            text: sap.n.Launchpad.translateTile('title', dataTile),\r\n        }).addStyleClass('nepNavBarTitle');\r\n\r\n        let textSubTitle = new sap.m.Text(nepId(), {\r\n            wrapping: false,\r\n            text: sap.n.Launchpad.translateTile('subTitle', dataTile),\r\n        }).addStyleClass('nepNavBarSubTitle');\r\n\r\n        let boxActions = new sap.m.VBox(nepId(), {\r\n            justifyContent: 'Start',\r\n            width: '40px'\r\n        });\r\n\r\n        let butClose = new sap.m.Button(nepId(), {\r\n            type: 'Transparent',\r\n            icon: 'sap-icon://sys-cancel',\r\n            press: function (oEvent) {\r\n                sap.n.Shell.closeTile(dataTile);\r\n                popNavBar.close();\r\n            }\r\n        });\r\n\r\n        let buttonStyle = sap.n.Launchpad.buildTileActionStyle(oBlockCell);\r\n        butClose.addStyleClass('nepTileAction nepNavBarAction ' + buttonStyle);\r\n\r\n        // Event - Click\r\n        oBlockCell.attachBrowserEvent('click', function (oEvent) {\r\n            sap.n.Launchpad.setActiveIcon(dataTile.id);\r\n            sap.n.Launchpad.HandleTilePress(dataTile, dataCat);\r\n            popNavBar.close();\r\n        });\r\n\r\n        // Placement\r\n        oBlockCell.addContent(boxTop);\r\n        boxTop.addItem(boxIcon);\r\n        boxTop.addItem(boxTitle);\r\n        boxTitle.addItem(textTitle);\r\n        boxTitle.addItem(textSubTitle);\r\n        boxTop.addItem(boxActions);\r\n        boxActions.addItem(butClose);\r\n\r\n        return oBlockCell;\r\n    },\r\n\r\n    isMenuPage: function () {\r\n        let id = AppCacheNav.getCurrentPage().sId;\r\n        id = id.split('page')[1];\r\n\r\n        if (id) {\r\n            const dataCatChild = ModelData.FindFirst(AppCacheCategoryChild, 'id', id);\r\n            return dataCatChild ? false : true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    setMenuPage: function (dataCat) {\r\n        // AppCacheShellUI.setAppWidthLimited(!dataCat.enableFullScreen);\r\n\r\n        // Close Help\r\n        AppCacheShellHelp.setVisible(false);\r\n        sap.n.Shell.closeSidepanel();\r\n\r\n        // Clear currentTile\r\n        sap.n.Launchpad.currentTile = {};\r\n\r\n        // Title\r\n        sap.n.Launchpad.SetHeader();\r\n    },\r\n\r\n    handleFavRedraw: function () {\r\n        // Rebuild Page if on Fav Tile Group\r\n        let cat = AppCacheNav.getCurrentPage().sId;\r\n        cat = cat.split('page')[1];\r\n\r\n        let dataCat = ModelData.FindFirst(AppCacheCategory, 'id', cat);\r\n        if (!dataCat) dataCat = ModelData.FindFirst(AppCacheCategoryChild, 'id', cat);\r\n\r\n        // Check tilegroups on page \r\n        let favFound = false;\r\n\r\n        dataCat.tilegroups.forEach(function (tilegroup) {\r\n            let dataCatSub = ModelData.FindFirst(AppCacheCategory, 'id', tilegroup.id);\r\n            if (!dataCatSub) dataCatSub = ModelData.FindFirst(AppCacheCategoryChild, 'id', tilegroup.id);\r\n            if (dataCatSub && dataCatSub.inclFav) favFound = true;\r\n        });\r\n\r\n        if (dataCat && dataCat.inclFav) favFound = true;\r\n\r\n        if (favFound) {\r\n            this.reCreateCurrentPage();\r\n        }\r\n\r\n        sap.n.Launchpad.saveFav();\r\n    },\r\n\r\n    reCreateCurrentPage: function () {\r\n        const current = AppCacheNav.getCurrentPage();\r\n        const categoryId = current.sId.split('page')[1];\r\n\r\n        const category = sap.n.Customization.getCategory(categoryId);\r\n        \r\n        this.destroyPage(current);\r\n        if (category) sap.n.Launchpad.BuildTiles(category);\r\n    },\r\n\r\n    destroyPage: function (page) {\r\n        if (!page) return;\r\n\r\n        AppCacheNav.removePage(page);\r\n        page.destroy();\r\n    },\r\n\r\n    saveFav: function () {\r\n        if (!modelAppCacheTilesFav.oData.length) modelAppCacheTilesFav.oData = [];\r\n\r\n        let favList = modelAppCacheTilesFav.oData.map(function (fav) {\r\n            return {\r\n                id: fav.id,\r\n                cardWidth: fav.cardWidth,\r\n                cardHeight: fav.cardHeight\r\n            };\r\n        });\r\n\r\n        // Update P9 DB with data \r\n        sap.n.Planet9.function({\r\n            id: dataSet,\r\n            method: 'SaveFav',\r\n            data: {\r\n                tiles: favList,\r\n                launchpad: AppCache.launchpadID,\r\n            }\r\n        });\r\n    },\r\n\r\n    setHideHeader: function (hideHeader) {\r\n        if (AppCache.config && AppCache.config.hideTopHeader) return;\r\n        topMenu.setHeight(hideHeader ? '0px' : '48px');\r\n    },\r\n\r\n    setHideTopButtons: function (hide) {\r\n        if (hide) {\r\n            if (!AppCache.StartApp && !AppCache.StartWebApp) AppCacheShellMenu.setVisible(!hide);\r\n            if (!sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(!hide);\r\n        } else {\r\n            if (!AppCache.StartApp && !AppCache.StartWebApp) AppCacheShellMenu.setVisible(hide);\r\n            if (!sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(hide);\r\n        }\r\n    },\r\n\r\n    setActiveIcon: function (id) {\r\n        // Sidebar\r\n        blockRunningRow.getContent().forEach(function (data) {\r\n            if (data.sId === `but${id}`) {\r\n                data.addStyleClass('nepIconActive');\r\n            } else {\r\n                data.removeStyleClass('nepIconActive');\r\n            }\r\n        });\r\n\r\n        // Header Icons\r\n        AppCacheShellOpenApps.getItems().forEach(function (data) {\r\n            if (data.sId === `butTop${id}`) {\r\n                data.addStyleClass('nepTopMenuActive');\r\n            } else {\r\n                data.removeStyleClass('nepTopMenuActive');\r\n            }\r\n        });\r\n    },\r\n\r\n    getPageTitle: function (dataCat) {\r\n        if (dataCat.isCustom) {\r\n            return [dataCat.props.title, dataCat.props.subTitle];\r\n        }\r\n\r\n        return [\r\n            sap.n.Launchpad.translateTile('title', dataCat),\r\n            dataCat.subTitle ? sap.n.Launchpad.translateTile('subTitle', dataCat) : '',\r\n        ];\r\n    },\r\n\r\n    buildGroupHeader: function (dataCat) {\r\n        // unique CSS class for this header\r\n        let id = `${nepPrefix()}CatHeader${dataCat.id}`;\r\n\r\n        let panel = new sap.m.Panel(`${sectionPrefix()}-header-${dataCat.id}`, {\r\n            backgroundDesign: 'Transparent',\r\n            width: '100%'\r\n        }).addStyleClass('nepCatPanel ' + id + ' sapUiNoContentPadding');\r\n\r\n        if (dataCat.styleClass) panel.addStyleClass(dataCat.styleClass);\r\n\r\n        // fixes aria-labelledby\r\n        let headerToolbar = new sap.m.Toolbar('navBarToolbar' + dataCat.id, {\r\n            visible: false\r\n        });\r\n        panel.setHeaderToolbar(headerToolbar);\r\n\r\n        let vbox = new sap.m.VBox(nepId(), {\r\n            alignItems: 'Start', //dataCat.titleAlignment || 'Start',\r\n        }).addStyleClass('nepCatTitleLayout');\r\n        panel.addContent(vbox);\r\n\r\n        const [title, subTitle] = this.getPageTitle(dataCat);\r\n        vbox.addItem(new sap.m.Title(nepId(), {\r\n            level: 'H1',\r\n            text: title\r\n        }).addStyleClass('nepCatTitle'));\r\n        panel.addStyleClass('nepCatTitleLayoutTitle');\r\n\r\n        if (subTitle) {\r\n            vbox.addItem(new sap.m.Title(nepId(), {\r\n                level: 'H3',\r\n                text: subTitle,\r\n            }).addStyleClass('nepCatSubTitle'));\r\n            panel.addStyleClass('nepCatTitleLayoutSubTitle');\r\n        }\r\n\r\n        return panel;\r\n    },\r\n\r\n    buildGroupMessage: function (dataCat) {\r\n        return new sap.m.MessageStrip(nepId(), {\r\n            type: dataCat.configMessage.type || 'None',\r\n            text: dataCat.configMessage.text || '',\r\n            showIcon: dataCat.configMessage.showIcon || false,\r\n            customIcon: dataCat.configMessage.icon || '',\r\n            showCloseButton: dataCat.configMessage.showCloseButton || false,\r\n            enableFormattedText: true,\r\n        });\r\n    },\r\n\r\n    // TILES\r\n    buildTileApplication: function (dataTile, tileWidth, dataCat) {\r\n        let oBlockIcon;\r\n\r\n        let oBlockCell = new sap.ui.layout.BlockLayoutCell(nepId(), {\r\n            width: tileWidth,\r\n            title: sap.n.Launchpad.translateTile('title', dataTile),\r\n            titleAlignment: dataTile.titleAlignment || 'Begin',\r\n            titleLevel: dataTile.titleLevel || 'Auto',\r\n        }).addStyleClass('nepTileApplication');\r\n\r\n        sap.n.Launchpad.setBackgroundShade(dataTile, dataCat, oBlockCell);\r\n\r\n        let oBlockContentParent = new sap.m.VBox(nepId(), {\r\n            justifyContent: 'SpaceBetween',\r\n            height: 'calc(100% - 25px)'\r\n        });\r\n\r\n        let oBlockContentTop = new sap.m.VBox(nepId());\r\n\r\n        oBlockCell.addContent(oBlockContentParent);\r\n        oBlockContentParent.addItem(oBlockContentTop);\r\n\r\n        // SubTitle - Box\r\n        let oBlockContent = new sap.m.HBox(nepId(), {\r\n            width: '100%',\r\n            justifyContent: 'SpaceBetween'\r\n        });\r\n\r\n        // Reverse if title at End\r\n        if (dataTile.titleAlignment === 'End') oBlockContent.setDirection('RowReverse');\r\n\r\n        oBlockContent.addStyleClass('sapUiSmallMarginBottom');\r\n        oBlockContentTop.addItem(oBlockContent);\r\n\r\n        // SubTitle\r\n        if (dataTile.subTitle) {\r\n            let oBlockInfo = new sap.m.Text(nepId(), {\r\n                text: sap.n.Launchpad.translateTile('subTitle', dataTile)\r\n            });\r\n\r\n            oBlockContent.addItem(oBlockInfo);\r\n            oBlockInfo.addStyleClass('nepTileSubTitle');\r\n        }\r\n\r\n        if (dataTile.icon) {\r\n\r\n            if (dataTile.icon.indexOf('sap-icon') > -1) {\r\n                oBlockIcon = new sap.ui.core.Icon(nepId(), {\r\n                    src: dataTile.icon,\r\n                    size: '1.5rem',\r\n                    useIconTooltip: false\r\n                });\r\n            } else {\r\n                oBlockIcon = new sap.m.Image(nepId(), {\r\n                    src: dataTile.icon,\r\n                    width: '38px',\r\n                    densityAware: false,\r\n                });\r\n            }\r\n\r\n            if (dataTile.titleAlignment === 'End') {\r\n                oBlockIcon.addStyleClass('nepTileIconLeft');\r\n            } else {\r\n                oBlockIcon.addStyleClass('nepTileIconRight');\r\n            }\r\n\r\n            oBlockContent.addItem(oBlockIcon);\r\n        }\r\n\r\n        let oBlockContentApp = new sap.m.Panel(nepId(), {\r\n            backgroundDesign: 'Transparent'\r\n        });\r\n        oBlockContentApp.addStyleClass('sapUiNoContentPadding');\r\n\r\n        oBlockContentTop.addItem(oBlockContentApp);\r\n\r\n        // Load Application\r\n        if (dataTile.tileApplication) {\r\n            AppCache.Load(dataTile.tileApplication, {\r\n                parentObject: oBlockContentApp,\r\n                startParams: dataTile.actionParameters,\r\n                sapICFNode: dataTile.sapICFNode\r\n            });\r\n        }\r\n\r\n        // Actions \r\n        sap.n.Launchpad.buildTileAction(dataTile, oBlockContentParent, oBlockCell, dataCat);\r\n        return oBlockCell;\r\n    },\r\n\r\n    buildTileSubHeader: function (dataTile, tileWidth, dataCat) {\r\n        let oBlockCell = new sap.ui.layout.BlockLayoutCell(nepId(), {\r\n            width: tileWidth,\r\n            title: sap.n.Launchpad.translateTile('title', dataTile),\r\n            titleAlignment: dataTile.titleAlignment || 'Begin',\r\n        });\r\n\r\n        sap.n.Launchpad.setBackgroundShade(dataTile, dataCat, oBlockCell);\r\n\r\n        if (dataTile.image) {\r\n            let imageUrl;\r\n            let inlineStyle = new sap.ui.core.HTML(nepId());\r\n\r\n            if (AppCache.isMobile) {\r\n                imageUrl = dataTile.imageData;\r\n            } else {\r\n                imageUrl = dataTile.image.startsWith('http') ? dataTile.image : `${AppCache.Url}${dataTile.image}`;\r\n            }\r\n\r\n            inlineStyle.setDOMContent(`\r\n                <style>\r\n                .tileImage${dataTile.id} {\r\n                    background-image: url('${imageUrl}');\r\n                    background-size: 100% auto;\r\n                    background-position: 0 80%;\r\n                }\r\n                </style>\r\n            `);\r\n\r\n            oBlockCell.addStyleClass('tileImage' + dataTile.id);\r\n            oBlockCell.addContent(inlineStyle);\r\n        }\r\n\r\n        let oHeaderInfoText = new sap.m.Text(nepId(), {\r\n            textAlign: 'Begin',\r\n            width: '100%',\r\n            text: sap.n.Launchpad.translateTile('subTitle', dataTile),\r\n        });\r\n        oBlockCell.addContent(oHeaderInfoText);\r\n\r\n        return oBlockCell;\r\n    },\r\n\r\n    // device = mobile, tablet or desktop\r\n    getTileGroupHeaderBackgroundCSS: function (dataCat, device) {\r\n        let url;\r\n        let position, defaultPosition = 'center center';\r\n        let size, defaultSize = 'cover';\r\n        let repeat, defaultRepeat = 'no-repeat';\r\n        let height, defaultHeight = '82px';\r\n\r\n        if (device === 'mobile') {\r\n            url = dataCat.imageMobile;\r\n            position = dataCat.imageMobilePlacement;\r\n            size = dataCat.imageMobileSize;\r\n            repeat = dataCat.imageMobileRepeat;\r\n            height = dataCat.imageMobileHeight;\r\n        } else if (device === 'tablet') {\r\n            url = dataCat.imageTablet;\r\n            position = dataCat.imageTabletPlacement;\r\n            size = dataCat.imageTabletSize;\r\n            repeat = dataCat.imageTabletRepeat;\r\n            height = dataCat.imageTabletHeight;\r\n        } else if (device === 'desktop') {\r\n            url = dataCat.image;\r\n            position = dataCat.imagePlacement;\r\n            size = dataCat.imageSize;\r\n            repeat = dataCat.imageRepeat;\r\n            height = dataCat.imageHeight;\r\n        }\r\n\r\n        const bgImg = url.startsWith('http') ? url : `${AppCache.Url}${url}`;\r\n        if (url) {\r\n            let id = `${nepPrefix()}CatHeader${dataCat.id}`;\r\n            lazyLoadImage(bgImg, `.${id} .sapMPanelContent`, 'style');\r\n        }\r\n\r\n        return `\r\n            height: ${height || defaultHeight} !important;\r\n            background-repeat: ${repeat || defaultRepeat};\r\n            background-position: ${position || defaultPosition};\r\n            background-size: ${size || defaultSize};\r\n        `;\r\n    },\r\n\r\n    buildHeaderCss: function (dataCat) {\r\n        let css = '';\r\n        let id = `${nepPrefix()}CatHeader${dataCat.id}`;\r\n        let borderWidth = dataCat.headBorderWidth || '3px';\r\n\r\n        const idClass = `.${id}`;\r\n        if (dataCat.headColor) css += `${idClass} { background-color: ${dataCat.headColor}; }`;\r\n        if (dataCat.headTxtClr) css += `${idClass} .nepCatTitle.sapMTitle { color: ${dataCat.headTxtClr} !important; }`;\r\n        if (dataCat.subheadTxtClr) css += `${idClass} .nepCatSubTitle.sapMTitle { color: ${dataCat.subheadTxtClr} !important; }`;\r\n        if (dataCat.headBorderClr) css += `${idClass} { border-bottom: ${borderWidth} solid ${dataCat.headBorderClr}; }`;\r\n\r\n        if (dataCat.imageMobile) {\r\n            css += `\r\n                .nepGridSmall .${id} .sapMPanelContent,\r\n                .nepGridXSmall .${id} .sapMPanelContent {\r\n                    ${this.getTileGroupHeaderBackgroundCSS(dataCat, 'mobile')}\r\n                }\r\n            `;\r\n        }\r\n\r\n        if (dataCat.imageTablet) {\r\n            css += `\r\n                .nepGridMedium .${id} .sapMPanelContent {\r\n                    ${this.getTileGroupHeaderBackgroundCSS(dataCat, 'tablet')}\r\n                }\r\n            `;\r\n        }\r\n\r\n        if (dataCat.image) {\r\n            css += `\r\n                .${id} .sapMPanelContent {\r\n                    ${this.getTileGroupHeaderBackgroundCSS(dataCat, 'desktop')}\r\n                }\r\n            `;\r\n        }\r\n\r\n        return css;\r\n    },\r\n\r\n    buildContentCss: function () {\r\n        let css = '';\r\n\r\n        // CSS - Tile Groups\r\n        modelAppCacheCategory.oData.forEach(function (dataCat) {\r\n            css += sap.n.Launchpad.buildHeaderCss(dataCat);\r\n            dataCat.tilegroups.forEach(function (data) {\r\n                let dataCatChild = ModelData.FindFirst(AppCacheCategory, 'id', data.id);\r\n                if (!dataCatChild) dataCatChild = ModelData.FindFirst(AppCacheCategoryChild, 'id', data.id);\r\n                if (dataCatChild) css += sap.n.Launchpad.buildHeaderCss(dataCatChild);\r\n            });\r\n        });\r\n\r\n        // CSS - Tiles\r\n        css += sap.n.Launchpad.buildTileCss();\r\n        return css;\r\n    },\r\n\r\n    buildTileCss: function () {\r\n        let css = '';\r\n        Array.isArray(modelAppCacheTiles.oData) && modelAppCacheTiles.oData.forEach(function (dataTile) {\r\n            // Background Image\r\n            if (dataTile.image) {\r\n                let imageUrl = dataTile.image.startsWith('http') ? dataTile.image : `${AppCache.Url}${dataTile.image}`;\r\n                if (AppCache.isMobile) imageUrl = dataTile.imageData || imageUrl;\r\n\r\n                let repeat = (!!dataTile.imageRepeat) ? dataTile.imageRepeat : 'no-repeat';\r\n                let size = (!!dataTile.imageSize) ? dataTile.imageSize : 'cover';\r\n                let position = (!!dataTile.imagePlacement) ? dataTile.imagePlacement : 'center';\r\n\r\n                if (dataTile.imagePosition === 'cover') {\r\n                    css += `\r\n                        .tile${dataTile.id} {\r\n                            background-image: url('${emptyBase64Image()}');\r\n                            background-repeat: ${repeat};\r\n                            background-size: ${size};\r\n                            background-position: ${position};\r\n                        }\r\n                    `;\r\n                    lazyLoadImage(imageUrl, `.tile${dataTile.id}`, 'style');\r\n                } else {\r\n                    const sel = (dataTile.imagePosition === 'top') ? 'Top' : 'Inline';\r\n                    css += `\r\n                        .tile${sel}Image${dataTile.id} {\r\n                            max-height: 100%;\r\n                            object-fit: ${size};\r\n                            object-position: ${position};\r\n                        }\r\n                    `;\r\n                }\r\n            }\r\n        });\r\n\r\n        return css;\r\n    },\r\n\r\n    setBackgroundShade: function (dataTile, dataCat, oBlockCell, isIcon) {\r\n        // Cards Handling\r\n        if (sap.n.Launchpad.cardsAvailable) {\r\n            sap.n.Card.setBackgroundShade(dataTile, dataCat, oBlockCell, isIcon);\r\n            return;\r\n        }\r\n\r\n        let backgroundColor, backgroundShade;\r\n\r\n        if (typeof dataCat === 'undefined') dataCat = {};\r\n\r\n        // Styleclasses \r\n        if (!isIcon) oBlockCell.addStyleClass('nepTile');\r\n        if (dataCat.styleClass) oBlockCell.addStyleClass(dataCat.styleClass);\r\n        if (dataTile.styleClass) oBlockCell.addStyleClass(dataTile.styleClass);\r\n        if (dataCat.enableCards && !isIcon) oBlockCell.addStyleClass('nepTileCards');\r\n\r\n        if (dataCat.backgroundType === 'Default' || dataCat.backgroundType === 'cards') {\r\n            if (dataCat.enableShadeCalc) {\r\n                switch (sap.n.Launchpad.backgroundShade) {\r\n                    case 'ShadeA':\r\n                        sap.n.Launchpad.backgroundShade = 'ShadeB';\r\n                        break;\r\n\r\n                    case 'ShadeB':\r\n                        sap.n.Launchpad.backgroundShade = 'ShadeC';\r\n                        break;\r\n\r\n                    case 'ShadeC':\r\n                        sap.n.Launchpad.backgroundShade = 'ShadeD';\r\n                        break;\r\n\r\n                    default:\r\n                        sap.n.Launchpad.backgroundShade = 'ShadeA';\r\n                        break;\r\n                }\r\n            } else {\r\n                sap.n.Launchpad.backgroundShade = dataCat.backgroundShade;\r\n            }\r\n\r\n            backgroundColor = dataTile.backgroundColor || dataCat.backgroundColor || '';\r\n            backgroundShade = dataTile.backgroundShade || sap.n.Launchpad.backgroundShade || 'ShadeA';\r\n\r\n        } else if (dataCat.backgroundType === 'Dashboard' && isIcon) {\r\n            backgroundColor = '';\r\n            backgroundShade = sap.n.Launchpad.backgroundShade;\r\n        }\r\n\r\n        if (backgroundColor) oBlockCell.setBackgroundColorSet(backgroundColor);\r\n        if (backgroundShade) oBlockCell.setBackgroundColorShade(backgroundShade);\r\n\r\n    },\r\n\r\n    buildTileDefault: function (dataTile, tileWidth, dataCat, isMostUsed) {\r\n        // Top \r\n        let oBlockCell = new sap.ui.layout.BlockLayoutCell(nepId(), {\r\n            title: sap.n.Launchpad.translateTile('title', dataTile),\r\n            titleAlignment: dataTile.titleAlignment || 'Begin',\r\n            titleLevel: dataTile.titleLevel || 'Auto',\r\n            width: tileWidth,\r\n        }).addStyleClass('nepTile');\r\n\r\n        sap.n.Launchpad.setBackgroundShade(dataTile, dataCat, oBlockCell);\r\n\r\n        let oBlockContentParent = new sap.m.VBox(nepId(), {\r\n            justifyContent: 'SpaceBetween',\r\n            height: 'calc(100% - 25px)'\r\n        });\r\n\r\n        let oBlockContentTop = new sap.m.VBox(nepId());\r\n\r\n        oBlockCell.addContent(oBlockContentParent);\r\n        oBlockContentParent.addItem(oBlockContentTop);\r\n\r\n        // SubTitle - Box\r\n        let oBlockContent = new sap.m.HBox(nepId(), {\r\n            width: '100%',\r\n            justifyContent: 'SpaceBetween'\r\n        });\r\n\r\n        // Reverse if title at End\r\n        if (dataTile.titleAlignment === 'End') oBlockContent.setDirection('RowReverse');\r\n\r\n        oBlockContent.addStyleClass('sapUiSmallMarginBottom');\r\n        oBlockContentTop.addItem(oBlockContent);\r\n\r\n        // SubTitle\r\n        if (dataTile.subTitle) {\r\n            let oBlockInfo = new sap.m.Text(nepId(), {\r\n                text: sap.n.Launchpad.translateTile('subTitle', dataTile)\r\n            });\r\n\r\n            oBlockContent.addItem(oBlockInfo);\r\n            oBlockInfo.addStyleClass('nepTileSubTitle');\r\n        }\r\n\r\n        if (dataTile.icon) {\r\n            let oBlockIcon;\r\n            if (dataTile.icon.indexOf('sap-icon') > -1) {\r\n                oBlockIcon = new sap.ui.core.Icon(nepId(), {\r\n                    src: dataTile.icon,\r\n                    size: '1.5rem',\r\n                    useIconTooltip: false\r\n                });\r\n            } else {\r\n                oBlockIcon = new sap.m.Image(nepId(), {\r\n                    src: dataTile.icon,\r\n                    width: '38px',\r\n                    densityAware: false,\r\n                });\r\n            }\r\n\r\n            if (dataTile.titleAlignment === 'End') {\r\n                oBlockIcon.addStyleClass('nepTileIconLeft');\r\n            } else {\r\n                oBlockIcon.addStyleClass('nepTileIconRight');\r\n            }\r\n\r\n            oBlockContent.addItem(oBlockIcon);\r\n        }\r\n\r\n        // With Description\r\n        if (dataTile.type === 'carddesc') {\r\n            let textDescription = new sap.m.Text(nepId(), {\r\n                text: sap.n.Launchpad.translateTile('description', dataTile)\r\n            });\r\n            textDescription.addStyleClass('nepTileDescription');\r\n            oBlockContentTop.addItem(textDescription);\r\n        }\r\n\r\n        if (!isMostUsed) {\r\n            // Image - background or image card\r\n            if (dataTile.image) {\r\n                let imageUrl;\r\n                let inlineStyle = new sap.ui.core.HTML(nepId());\r\n\r\n                if (AppCache.isMobile) {\r\n                    imageUrl = dataTile.imageData;\r\n                } else {\r\n                    imageUrl = dataTile.image.startsWith('http') ? dataTile.image : `${AppCache.Url}${dataTile.image}`;\r\n                }\r\n\r\n                inlineStyle.setDOMContent(`\r\n                    <style>\r\n                    .tileImage${dataTile.id} {\r\n                        background-image: url('${imageUrl}');\r\n                        background-size: cover;\r\n                        background-position: 0 80%;\r\n                    }\r\n                    </style>\r\n                `);\r\n\r\n                oBlockCell.addStyleClass('tileImage' + dataTile.id);\r\n                oBlockCell.addContent(inlineStyle);\r\n            }\r\n        }\r\n\r\n        // Actions\r\n        sap.n.Launchpad.buildTileAction(dataTile, oBlockContentParent, oBlockCell, dataCat);\r\n        return oBlockCell\r\n    },\r\n\r\n    translateTile: function (field, dataTile) {\r\n        if (!dataTile) return;\r\n        if (dataTile[field] === null || dataTile[field] === 'null' || typeof dataTile[field] === 'undefined') return '';\r\n\r\n        let text = dataTile[field];\r\n\r\n        if (!dataTile.translation || dataTile.translation === '[]' || dataTile.translation.length === 0) return text;\r\n\r\n        dataTile.translation.forEach(function (data) {\r\n            if (data.language === AppCache.userInfo.language) text = data[field];\r\n        });\r\n\r\n        return text;\r\n    },\r\n\r\n    buildTileAction: function (dataTile, parent, oBlockCell, dataCat) {\r\n        let buttonStyle = sap.n.Launchpad.buildTileActionStyle(oBlockCell);\r\n        let supportedBrowser = true;\r\n        let openEnabled = true;\r\n\r\n        let oBlockContent = new sap.m.HBox(nepId());\r\n        oBlockContent.addStyleClass('nepTileAction sapUiSizeCompact');\r\n\r\n        // Check Offline Mode -> Disable Open button \r\n        if (AppCache.isOffline) {\r\n            if (dataTile.actionURL) openEnabled = false;\r\n            if (dataTile.type === 'storeitem') openEnabled = false;\r\n\r\n            if (dataTile.actionApplication) {\r\n                let app = ModelData.FindFirst(AppCacheData,\r\n                    ['application', 'language', 'appPath'],\r\n                    [dataTile.actionApplication.toUpperCase(),\r\n                    AppCache.userInfo.language,\r\n                    dataTile.urlApplication || '']);\r\n                if (!app) openEnabled = false;\r\n            }\r\n\r\n            if (dataTile.actionWebApp) {\r\n                if (dataTile.openWindow) {\r\n                    openEnabled = false;\r\n                } else {\r\n                    let viewName = 'webapp:' + dataTile.actionWebApp + ':' + dataTile.urlApplication;\r\n\r\n                    // Get App from Cache\r\n                    if (typeof p9Database !== 'undefined' && p9Database !== null) {\r\n                        p9GetView(viewName.toUpperCase()).then(function (viewData) {\r\n                            if (viewData.length < 10) openEnabled = false;\r\n                        });\r\n                    } else {\r\n                        if (!sapStorageGet(viewName.toUpperCase())) openEnabled = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check usage of Remote Systems \r\n        if (dataTile.urlApplication && !AppCache.userInfo.azureToken) openEnabled = false;\r\n\r\n        // Supported Browsers\r\n        if (sap.ui.Device.os.name === 'win' && dataTile.browserBlockWin && dataTile.browserBlockWin !== '[]' && dataTile.browserBlockWin.indexOf(sap.ui.Device.browser.name) === -1) {\r\n            supportedBrowser = false;\r\n        }\r\n\r\n        if (sap.ui.Device.os.name === 'mac' && dataTile.browserBlockMac && dataTile.browserBlockWin !== '[]' && dataTile.browserBlockMac.indexOf(sap.ui.Device.browser.name) === -1) {\r\n            supportedBrowser = false;\r\n        }\r\n\r\n        if (dataTile.actionApplication || dataTile.actionWebApp || dataTile.actionURL || dataTile.actiongroup || dataTile.type === 'storeitem') {\r\n            if (supportedBrowser) {\r\n                if (dataTile.blackoutEnabled) {\r\n                    let butStart = new sap.m.Button(nepId(), {\r\n                        text: dataTile.blackoutText,\r\n                        type: 'Emphasized',\r\n                        press: function (oEvent) {\r\n                            descBlackout.editor.setData(dataTile.blackoutDescription);\r\n                            popBlackout.openBy(this);\r\n                        }\r\n                    });\r\n\r\n                    butStart.addStyleClass('nepTileAction sapUiTinyMarginEnd nepTileBlackout ' + buttonStyle);\r\n                } else {\r\n                    if (dataTile.openClickTile) {\r\n                        if (openEnabled) {\r\n                            oBlockCell.attachBrowserEvent('click', function (oEvent) {\r\n                                setTimeout(function () {\r\n                                    if (sap.n.Launchpad.favInProcess) {\r\n                                        sap.n.Launchpad.favInProcess = false;\r\n                                    } else {\r\n                                        sap.n.Launchpad.HandleTilePress(dataTile, dataCat);\r\n                                    }\r\n                                }, 50);\r\n                            });\r\n\r\n                            oBlockCell.addStyleClass('nepNavBarTile');\r\n                        }\r\n\r\n                    } else {\r\n                        let butStart = new sap.m.Button(nepId(), {\r\n                            text: AppCache_tOpen.getText(),\r\n                            type: 'Emphasized',\r\n                            enabled: openEnabled,\r\n                            press: function (oEvent) {\r\n                                sap.n.Launchpad.HandleTilePress(dataTile, dataCat);\r\n                            }\r\n                        });\r\n\r\n                        butStart.addStyleClass('nepTileAction sapUiTinyMarginEnd ' + buttonStyle);\r\n                    }\r\n                }\r\n            } else {\r\n                let butStart = new sap.m.Button(nepId(), {\r\n                    text: AppCache_tIncompatible.getText(),\r\n                    iconFirst: false,\r\n                    enabled: openEnabled,\r\n                    type: 'Emphasized',\r\n                    icon: 'sap-icon://sys-help',\r\n                    press: function (oEvent) {\r\n                        let browsers;\r\n\r\n                        if (sap.ui.Device.os.name === 'win') browsers = JSON.parse(dataTile.browserBlockWin);\r\n                        if (sap.ui.Device.os.name === 'mac') browsers = JSON.parse(dataTile.browserBlockMac);\r\n\r\n                        const m = {\r\n                            'cr': 'Chrome',\r\n                            'ed': 'Edge',\r\n                            'ff': 'Firefox',\r\n                            'ie': 'Internet Explorer',\r\n                            'op': 'Opera',\r\n                            'sf': 'Safari',\r\n                        };\r\n\r\n                        let array = browsers.map(function (k) {\r\n                            return { name: m[k] };\r\n                        });\r\n                        array.sort(sort_by('name'));\r\n                        modellistSupportedBrowsers.setData(array);\r\n                        popSupportedBrowsers.openBy(this);\r\n                    }\r\n                });\r\n\r\n                butStart.addStyleClass('nepTileAction nepTileBlocked sapUiTinyMarginEnd ' + buttonStyle);\r\n                oBlockContent.addItem(butStart);\r\n            }\r\n\r\n            let butFavAdd = new sap.m.Button(`${nepPrefix()}FavAdd${dataTile.id}`, {\r\n                tooltip: AppCache_tAddFav.getText(),\r\n                icon: 'sap-icon://unfavorite',\r\n                type: 'Emphasized',\r\n                press: function (oEvent) {\r\n                    sap.n.Launchpad.favInProcess = true;\r\n\r\n                    ModelData.Update(AppCacheTilesFav, 'id', dataTile.id, dataTile);\r\n                    setCacheAppCacheTilesFav();\r\n\r\n                    butFavDel.setVisible(true);\r\n                    butFavAdd.setVisible(false);\r\n\r\n                    sap.n.Launchpad.handleFavRedraw();\r\n                }\r\n            });\r\n\r\n            butFavAdd.addStyleClass('nepTileAction ' + buttonStyle);\r\n\r\n            let butFavDel = new sap.m.Button(`${nepPrefix()}FavDel${dataTile.id}`, {\r\n                tooltip: AppCache_tDelFav.getText(),\r\n                icon: 'sap-icon://favorite',\r\n                type: 'Emphasized',\r\n                press: function (oEvent) {\r\n                    sap.n.Launchpad.favInProcess = true;\r\n                    sap.n.Utils.message({\r\n                        title: AppCache_tFavTitle.getText(),\r\n                        intro: AppCache_tFavConfirm.getText(),\r\n                        text1: AppCache_tDelFavConfirm.getText(),\r\n                        state: 'Warning',\r\n                        acceptText: AppCache_tDelFavRemove.getText(),\r\n                        onAccept: function (oAction) {\r\n                            ModelData.Delete(AppCacheTilesFav, 'id', dataTile.id);\r\n                            setCacheAppCacheTilesFav();\r\n\r\n                            let butFavAdd = sap.ui.getCore().byId(`${nepPrefix()}FavAdd${dataTile.id}`);\r\n                            if (butFavAdd) butFavAdd.setVisible(true);\r\n\r\n                            sap.n.Launchpad.handleFavRedraw();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n\r\n            butFavDel.addStyleClass('nepTileAction ' + buttonStyle);\r\n\r\n            // Fav\r\n            let rec = ModelData.Find(AppCacheTilesFav, 'id', dataTile.id);\r\n\r\n            if (rec.length) {\r\n                butFavAdd.setVisible(false);\r\n                butFavDel.setVisible(true);\r\n            } else {\r\n                butFavAdd.setVisible(true);\r\n                butFavDel.setVisible(false);\r\n            }\r\n\r\n            if (!dataTile.openClickTile || dataTile.blackoutEnabled) oBlockContent.addItem(butStart);\r\n\r\n            if (!AppCache.isPublic && sap.n.Launchpad.enableFav && !AppCache.isOffline) {\r\n                oBlockContent.addItem(butFavAdd);\r\n                oBlockContent.addItem(butFavDel);\r\n            }\r\n\r\n        }\r\n\r\n        // Help \r\n        if (dataTile.helpEnabled) {\r\n            let butHelp = new sap.m.Button(nepId(), {\r\n                tooltip: AppCache_tHelp.getText(),\r\n                icon: 'sap-icon://sys-help',\r\n                type: 'Transparent',\r\n                press: function (oEvent) {\r\n                    descBlackout.editor.setData(dataTile.helpText);\r\n                    popBlackout.openBy(this);\r\n                }\r\n            });\r\n\r\n            oBlockContent.addItem(butHelp);\r\n        }\r\n\r\n\r\n        // Footer\r\n        if (dataTile.footer) {\r\n            let boxFooter = new sap.m.HBox(nepId(), {\r\n                width: '100%',\r\n                justifyContent: 'End',\r\n                alignContent: 'Center'\r\n            });\r\n            let footer = new sap.m.Text(nepId(), {\r\n                text: sap.n.Launchpad.translateTile('footer', dataTile)\r\n            });\r\n            footer.addStyleClass('nepTileFooter');\r\n            boxFooter.addItem(footer);\r\n            oBlockContent.addItem(boxFooter);\r\n        }\r\n\r\n        parent.addItem(oBlockContent);\r\n    },\r\n\r\n    buildTileActionStyle: function (oBlockCell) {\r\n        let color = oBlockCell.getBackgroundColorSet();\r\n\r\n        if (color) {\r\n            color = color.split('ColorSet')[1];\r\n        } else {\r\n            color = 5;\r\n        }\r\n        return 'nepTileAction' + color;\r\n    },\r\n\r\n    buildTileIntegrationCard: function (dataTile, tileWidth, dataCat) {\r\n\r\n        if (!sap.ui.integration) sap.ui.getCore().loadLibrary(\"sap.ui.integration\")\r\n\r\n        let oBlockCell = new sap.ui.layout.BlockLayoutCell(nepId(), {\r\n            width: tileWidth,\r\n        }).addStyleClass('nepTileIntegartionCard');\r\n\r\n        oBlockCell.addStyleClass('sapUiNoContentPadding');\r\n\r\n        sap.n.Launchpad.setBackgroundShade(dataTile, dataCat, oBlockCell);\r\n\r\n        let oBlockContentParent = new sap.m.VBox(nepId(), {\r\n            justifyContent: 'SpaceBetween',\r\n            height: 'calc(100% - 25px)'\r\n        });\r\n\r\n        let oBlockContentTop = new sap.m.VBox(nepId());\r\n        let oBlockContentAction = new sap.m.VBox(nepId());\r\n\r\n        oBlockContentAction.addStyleClass('sapUiContentPadding');\r\n\r\n        oBlockCell.addContent(oBlockContentParent);\r\n        oBlockContentParent.addItem(oBlockContentTop);\r\n        oBlockContentParent.addItem(oBlockContentAction);\r\n\r\n        let objectId = 'intcard' + ModelData.genID();\r\n        let pageId = 'page' + dataCat.id;\r\n\r\n        let intCard = new sap.ui.integration.widgets.Card(objectId, {\r\n            manifest: dataTile.dataUrl,\r\n        });\r\n\r\n        oBlockContentTop.addItem(intCard);\r\n\r\n        // Pull Interval\r\n        if (dataTile.dataInterval && dataTile.dataInterval !== '0' && !sap.n.Launchpad.Timers[objectId]) {\r\n\r\n            sap.n.Launchpad.Timers[objectId] = {\r\n                timer: setInterval(function () {\r\n                    if (sap.n.Launchpad.Timers[objectId].pageId !== AppCacheNav.getCurrentPage().sId) return;\r\n\r\n                    let card = sap.ui.getCore().byId(objectId);\r\n                    if (card) card.refresh();\r\n\r\n                }, dataTile.dataInterval * 1000),\r\n                pageId: pageId\r\n            };\r\n        }\r\n\r\n        // Actions\r\n        sap.n.Launchpad.buildTileAction(dataTile, oBlockContentAction, oBlockCell, dataCat);\r\n        return oBlockCell;\r\n    },\r\n\r\n    buildTileHighchart: function (dataTile, tileWidth, dataCat) {\r\n        let oBlockCell = new sap.ui.layout.BlockLayoutCell(nepId(), {\r\n            title: sap.n.Launchpad.translateTile('title', dataTile),\r\n            titleAlignment: dataTile.titleAlignment || 'Begin',\r\n            titleLevel: dataTile.titleLevel || 'Auto',\r\n            width: tileWidth,\r\n        }).addStyleClass('nepTileHighchart');\r\n\r\n        sap.n.Launchpad.setBackgroundShade(dataTile, dataCat, oBlockCell);\r\n\r\n        let oBlockContentParent = new sap.m.VBox(nepId(), {\r\n            justifyContent: 'SpaceBetween',\r\n            height: 'calc(100% - 25px)'\r\n        });\r\n\r\n        let oBlockContentTop = new sap.m.VBox(nepId());\r\n\r\n        oBlockCell.addContent(oBlockContentParent);\r\n        oBlockContentParent.addItem(oBlockContentTop);\r\n\r\n        // SubTitle - Box\r\n        let oBlockContent = new sap.m.HBox(nepId(), {\r\n            width: '100%',\r\n            justifyContent: 'SpaceBetween'\r\n        });\r\n\r\n        // Reverse if title at End\r\n        if (dataTile.titleAlignment === 'End') oBlockContent.setDirection('RowReverse');\r\n\r\n        oBlockContent.addStyleClass('sapUiSmallMarginBottom');\r\n        oBlockContentTop.addItem(oBlockContent);\r\n\r\n        // SubTitle\r\n        if (dataTile.subTitle) {\r\n            let oBlockInfo = new sap.m.Text(nepId(), {\r\n                text: sap.n.Launchpad.translateTile('subTitle', dataTile)\r\n            });\r\n\r\n            oBlockContent.addItem(oBlockInfo);\r\n            oBlockInfo.addStyleClass('nepTileSubTitle');\r\n        }\r\n\r\n        if (dataTile.icon) {\r\n            let oBlockIcon;\r\n            if (dataTile.icon.indexOf('sap-icon') > -1) {\r\n                oBlockIcon = new sap.ui.core.Icon(nepId(), {\r\n                    src: dataTile.icon,\r\n                    size: '1.4rem',\r\n                    useIconTooltip: false\r\n                });\r\n            } else {\r\n                oBlockIcon = new sap.m.Image(nepId(), {\r\n                    src: dataTile.icon,\r\n                    width: '32px',\r\n                    densityAware: false,\r\n                });\r\n            }\r\n            oBlockContent.addItem(oBlockIcon);\r\n        }\r\n\r\n        let chartId = `chart${ModelData.genID()}`;\r\n        let pageId = `page${dataCat.id}`;\r\n\r\n        let oHighchart;\r\n        let oHighchartHTML = new sap.ui.core.HTML(nepId(), {\r\n            content: `<div id='${chartId}' style='height: 100%; width: 100%'></div>`,\r\n            afterRendering: function (oEvent) {\r\n                let chartData = localStorage.getItem('p9TileChart' + dataTile.id);\r\n                if (chartData) {\r\n                    let chartData = JSON.parse(chartData);\r\n                    if (!chartData.chart) chartData.chart = {};\r\n                    chartData.chart.renderTo = chartId;\r\n                    oHighchart = Highcharts.chart(chartData);\r\n                } else {\r\n                    oHighchart = Highcharts.chart({\r\n                        chart: {\r\n                            height: 100,\r\n                            renderTo: chartId,\r\n                            style: { fontFamily: '72' }\r\n                        },\r\n                        credits: { enabled: false },\r\n                        title: { text: '' },\r\n                        subTitle: { text: '' },\r\n                        series: []\r\n                    });\r\n                }\r\n\r\n                // Fetch Data \r\n                if (dataTile.dataUrl) {\r\n                    // Trigger Pull 1. Time\r\n                    setTimeout(function () {\r\n                        sap.n.Launchpad.getHighchartData(dataTile, oHighchart, pageId, chartId, 'start');\r\n                    }, 100);\r\n\r\n                    // Pull Interval\r\n                    if (dataTile.dataInterval && dataTile.dataInterval !== '0' && !sap.n.Launchpad.Timers[chartId]) {\r\n                        sap.n.Launchpad.Timers[chartId] = {\r\n                            timer: setInterval(function () {\r\n                                if (sap.n.Launchpad.Timers[chartId].pageId !== AppCacheNav.getCurrentPage().sId) return;\r\n                                sap.n.Launchpad.getHighchartData(dataTile, oHighchart, pageId, chartId, 'continue');\r\n                            }, dataTile.dataInterval * 1000),\r\n                            pageId: pageId\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        oBlockContentTop.addItem(oHighchartHTML);\r\n\r\n        // Actions\r\n        sap.n.Launchpad.buildTileAction(dataTile, oBlockContentParent, oBlockCell, dataCat);\r\n\r\n        return oBlockCell;\r\n    },\r\n\r\n    buildTileHighstock: function (dataTile, tileWidth, dataCat) {\r\n        let oBlockCell = new sap.ui.layout.BlockLayoutCell(nepId(), {\r\n            title: sap.n.Launchpad.translateTile('title', dataTile),\r\n            titleAlignment: dataTile.titleAlignment || 'Begin',\r\n            titleLevel: dataTile.titleLevel || 'Auto',\r\n            width: tileWidth,\r\n        }).addStyleClass('nepTileHighstock');\r\n\r\n        sap.n.Launchpad.setBackgroundShade(dataTile, dataCat, oBlockCell);\r\n\r\n        let oBlockContentParent = new sap.m.VBox(nepId(), {\r\n            justifyContent: 'SpaceBetween',\r\n            height: 'calc(100% - 25px)'\r\n        });\r\n\r\n        let oBlockContentTop = new sap.m.VBox(nepId());\r\n\r\n        oBlockCell.addContent(oBlockContentParent);\r\n        oBlockContentParent.addItem(oBlockContentTop);\r\n\r\n        // SubTitle - Box\r\n        let oBlockContent = new sap.m.HBox(nepId(), {\r\n            width: '100%',\r\n            justifyContent: 'SpaceBetween'\r\n        });\r\n\r\n        // Reverse if title at End\r\n        if (dataTile.titleAlignment === 'End') oBlockContent.setDirection('RowReverse');\r\n\r\n        oBlockContent.addStyleClass('sapUiSmallMarginBottom');\r\n        oBlockContentTop.addItem(oBlockContent);\r\n\r\n        // SubTitle\r\n        if (dataTile.subTitle) {\r\n            let oBlockInfo = new sap.m.Text(nepId(), {\r\n                text: sap.n.Launchpad.translateTile('subTitle', dataTile)\r\n            });\r\n\r\n            oBlockContent.addItem(oBlockInfo);\r\n            oBlockInfo.addStyleClass('nepTileSubTitle');\r\n        }\r\n\r\n        if (dataTile.icon) {\r\n            let oBlockIcon;\r\n            if (dataTile.icon.indexOf('sap-icon') > -1) {\r\n                oBlockIcon = new sap.ui.core.Icon(nepId(), {\r\n                    src: dataTile.icon,\r\n                    size: '1.4rem',\r\n                    useIconTooltip: false\r\n                });\r\n            } else {\r\n                oBlockIcon = new sap.m.Image(nepId(), {\r\n                    src: dataTile.icon,\r\n                    width: '32px',\r\n                    densityAware: false,\r\n                });\r\n            }\r\n            oBlockContent.addItem(oBlockIcon);\r\n        }\r\n\r\n        const chartId = 'chart' + ModelData.genID();\r\n        const pageId = 'page' + dataCat.id;\r\n\r\n        let oHighchart;\r\n        let oHighchartHTML = new sap.ui.core.HTML(nepId(), {\r\n            content: `<div id=\"${chartId}\" style=\"height: 100%px; width: 100%\"></div>`,\r\n            afterRendering: function (oEvent) {\r\n                oHighchart = Highcharts.stockChart({\r\n                    chart: {\r\n                        height: 100,\r\n                        renderTo: chartId,\r\n                        style: { fontFamily: '72' }\r\n                    },\r\n                    credits: { enabled: false },\r\n                    title: { text: '' },\r\n                    subTitle: { text: '' },\r\n                    series: []\r\n                });\r\n\r\n                // Fetch Data \r\n                if (dataTile.dataUrl) {\r\n                    // Trigger Pull 1. Time\r\n                    setTimeout(function () {\r\n                        sap.n.Launchpad.getHighstockData(dataTile, oHighchart, pageId, chartId, 'start');\r\n                    }, 100);\r\n\r\n                    // Pull Interval\r\n                    if (dataTile.dataInterval && dataTile.dataInterval !== '0' && !sap.n.Launchpad.Timers[chartId]) {\r\n                        sap.n.Launchpad.Timers[chartId] = {\r\n                            timer: setInterval(function () {\r\n                                if (sap.n.Launchpad.Timers[chartId].pageId !== AppCacheNav.getCurrentPage().sId) return;\r\n                                sap.n.Launchpad.getHighstockData(dataTile, oHighchart, pageId, chartId, 'continue');\r\n                            }, dataTile.dataInterval * 1000),\r\n                            pageId: pageId\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        oBlockContentTop.addItem(oHighchartHTML);\r\n\r\n        // Actions\r\n        sap.n.Launchpad.buildTileAction(dataTile, oBlockContentParent, oBlockCell, dataCat);\r\n        return oBlockCell;\r\n    },\r\n\r\n\r\n    getHighchartData: function (dataTile, chart, pageId, chartId, init) {\r\n        let url = dataTile.dataUrl;\r\n        let querySep = '?';\r\n\r\n        if (url.indexOf('http') === -1) url = AppCache.Url + url;\r\n\r\n        // Add URL Query\r\n        if (url.indexOf('?') > -1) querySep = '&';\r\n        url = url + querySep + 'init=' + init;\r\n\r\n        request({\r\n            type: 'GET',\r\n            contentType: 'application/json',\r\n            url: url,\r\n            success: function (data) {\r\n                if (!chart) return;\r\n                if (!chart.series) return;\r\n\r\n                // Save to cache \r\n                localStorage.setItem('p9TileChart' + dataTile.id, JSON.stringify(data));\r\n\r\n                // Only redraw chart when number of series changes.\r\n                if (Array.isArray(data.series) && Array.isArray(chart.series) && chart.series.length !== data.series.length) {\r\n                    Array.isArray(data.series) && data.series.forEach(function (serie) {\r\n                        chart.addSeries(serie, false);\r\n                    });\r\n                    chart.update(data);\r\n                    chart.redraw();\r\n                } else {\r\n                    // Only update series values to get animation\r\n                    let seriesData = [];\r\n                    Array.isArray(data.series) && data.series.forEach(function (serie, i) {\r\n                        chart.series[i].setData(serie.data);\r\n                    });\r\n                }\r\n            },\r\n            error: function (result, status) {\r\n                if (sap.n.Launchpad.Timers[chartId]) clearInterval(sap.n.Launchpad.Timers[chartId].timer);\r\n            }\r\n        });\r\n\r\n    },\r\n\r\n    getHighstockData: function (dataTile, chart, pageId, chartId, init) {\r\n        let url = dataTile.dataUrl;\r\n        let querySep = '?';\r\n\r\n        if (url.indexOf('http') === -1) url = AppCache.Url + url;\r\n\r\n        // Add URL Query\r\n        if (url.indexOf('?') > -1) querySep = '&';\r\n        url = url + querySep + 'init=' + init;\r\n\r\n        request({\r\n            type: 'GET',\r\n            contentType: 'application/json',\r\n            url: url,\r\n            success: function (data) {\r\n                if (!chart) return;\r\n                if (!chart.series) return;\r\n\r\n                // Only redraw chart when number of series changes.\r\n                if (chart.series.length === 0) {\r\n                    data.series.forEach(function (serie) {\r\n                        chart.addSeries(serie, false);\r\n                    });\r\n                    chart.update(data);\r\n                    chart.redraw();\r\n                } else {\r\n                    // Only update series values to get animation\r\n                    let seriesData = [];\r\n                    data.series.forEach(function (serie, i) {\r\n                        chart.series[i].addPoint(serie.data, true, true);\r\n                    });\r\n                }\r\n            },\r\n            error: function (result, status) {\r\n                if (sap.n.Launchpad.Timers[chartId]) clearInterval(sap.n.Launchpad.Timers[chartId].timer);\r\n            }\r\n        });\r\n\r\n    },\r\n\r\n    traceTile: function (dataTile) {\r\n        if (!dataTile) return;\r\n        let system = sap.n.Launchpad.deviceType();\r\n\r\n        sap.n.Planet9.function({\r\n            id: dataSet,\r\n            method: 'TraceTile',\r\n            data: {\r\n                tile: dataTile.id,\r\n                launchpad: AppCache.launchpadID,\r\n                browserName: sap.ui.Device.browser.name,\r\n                browserVersion: sap.ui.Device.browser.version,\r\n                osName: sap.ui.Device.os.name,\r\n                osVersion: sap.ui.Device.os.version,\r\n                system: system\r\n            }\r\n        });\r\n\r\n    },\r\n\r\n    deviceType: function () {\r\n        const desktop = sap.ui.Device.system.desktop;\r\n        const tablet = sap.ui.Device.system.tablet;\r\n        const phone = sap.ui.Device.system.phone;\r\n\r\n        const deviceDesktop = sap.n.Launchpad.device.DESKTOP;\r\n        const deviceTablet = sap.n.Launchpad.device.TABLET;\r\n        const devicePhone = sap.n.Launchpad.device.PHONE;\r\n\r\n        if (desktop && tablet) {\r\n            if (isCordova()) return deviceTablet;\r\n            return deviceDesktop;\r\n        }\r\n\r\n        if (tablet && !isCordova()) return deviceDesktop;\r\n        if (desktop) return deviceDesktop;\r\n        if (tablet) return deviceTablet;\r\n        if (phone) return devicePhone;\r\n\r\n        return deviceDesktop;\r\n    },\r\n\r\n    isDesktop: function () { return sap.n.Launchpad.deviceType() === sap.n.Launchpad.device.DESKTOP; },\r\n    isTablet: function () { return sap.n.Launchpad.deviceType() === sap.n.Launchpad.device.TABLET; },\r\n    isPhone: function () {\r\n        return sap.n.Launchpad.deviceType() === sap.n.Launchpad.device.PHONE;\r\n    },\r\n}","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":576},{"fieldNo":"54f9e91c-ef25-4bbf-c923-ce5e7e7aeaae","fieldName":"sap.n.Customization","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"const CustomizationStorage = {\n    formatTile(tile) {\n        return {\n            id: tile.id,\n            status: \"active\",\n            props: {},\n            isCustom: false,\n        };\n    },\n\n    formatTiles(tiles) {\n        return tiles.map(this.formatTile);\n    },\n\n    formatTileGroup(tilegroup) {\n        return {\n            id: tilegroup.id,\n            status: \"active\",\n            props: {},\n            isCustom: false,\n            tiles: this.formatTiles(tilegroup.tiles),\n            tilegroups: tilegroup.tilegroups.map((tg) => ({\n                id: tg.id,\n                status: \"active\",\n                props: {},\n                isCustom: false,\n            })),\n        };\n    },\n\n    formatCategory(selected, data) {\n        return {\n            id: selected.id,\n            status: \"active\",\n            props: {},\n            isCustom: false,\n            tiles: this.formatTiles(selected.tiles),\n            tilegroups: selected.tilegroups\n                .map((tilegroup) => {\n                    const tg = data.categoryChilds.find((child) => child.id === tilegroup.id);\n                    if (!tg) return null;\n\n                    return this.formatTileGroup(tg);\n                })\n                .filter((tilegroup) => tilegroup !== null),\n        };\n    },\n\n    formatCategories(data) {\n        return data.category.map((c) => this.formatCategory(c, data));\n    },\n\n    // convert list of objects to [{ id }]\n    arrToIds(arr) {\n        return arr.map((item) => item.id);\n    },\n\n    // get new category/tilegroup/tile from what are available\n    // current = current list of category/tilegroup/tile in customization\n    // available = available list of category/tilegroup/tile from p9 backend\n    newFromAvailable(current, available, src) {\n        const currentIds = this.arrToIds(current);\n        const availableIds = this.arrToIds(available);\n        const newIds = availableIds.filter((id) => !currentIds.includes(id));\n        return newIds\n            .map((newId) => src.find(({ id }) => id === newId))\n            .filter((item) => item !== undefined);\n    },\n\n    // check if user has access category/tilegroup/tile\n    // current = current list of category/tilegroup/tile in customization\n    // available = available list of category/tilegroup/tile from p9 backend\n    filterByAccess(current, available) {\n        const availableIds = this.arrToIds(available);\n        return current.filter((item) => {\n            if (item.isCustom) return true;\n            return availableIds.includes(item.id);\n        });\n    },\n\n    // group can be a category or a tilegroup\n    mergeTiles(type, group, data) {\n        group.tiles = this.filterByAccess(group.tiles, data.tiles);\n\n        // add new tiles\n        let groupData = null;\n        if (type === \"category\")\n            groupData = data.category.find((category) => category.id === group.id);\n        else if (type === \"tilegroup\")\n            groupData = data.categoryChilds.find((tilegroup) => tilegroup.id === group.id);\n\n        if (groupData) {\n            const newTiles = this.newFromAvailable(group.tiles, groupData.tiles, data.tiles);\n            if (newTiles.length === 0) return;\n\n            newTiles.forEach((tile) => {\n                // find tile position relative to original position inside the tiles list\n                // try to place tile on that particular position\n                const placeAt = groupData.tiles.findIndex((groupTile) => groupTile.id === tile.id)\n                const formatted = this.formatTile(tile);\n\n                // if we are able to find a position to place the tile, then place the tile\n                // otherwise just push it the end\n                if (placeAt > -1) {\n                    group.tiles.splice(placeAt, 0, formatted);\n                } else {\n                    group.tiles.push(formatted);\n                }\n            });\n        }\n    },\n\n    mergeTileGroups(category, data) {\n        category.tilegroups = this.filterByAccess(category.tilegroups, data.categoryChilds);\n\n        // add new tilegroups\n        const categoryData = data.category.find((cat) => cat.id === category.id);\n        if (categoryData) {\n            const newTileGroups = this.newFromAvailable(\n                category.tilegroups,\n                categoryData.tilegroups,\n                data.categoryChilds\n            );\n\n            if (newTileGroups.length > 0) {\n                newTileGroups.forEach((newTileGroup) => {\n                    const placeAt = categoryData.tilegroups.findIndex((tileGroup) => tileGroup.id === newTileGroup.id)\n                    const formatted = this.formatTileGroup(newTileGroup);\n\n                    if (placeAt > -1) {\n                        category.tilegroups.splice(placeAt, 0, formatted);\n                    } else {\n                        category.tilegroups.push(formatted);\n                    }\n                });\n            }\n        }\n\n        // merge tiles in tilegroup\n        for (const tilegroup of category.tilegroups) {\n            this.mergeTiles(\"tilegroup\", tilegroup, data);\n        }\n    },\n\n    mergeCategories(existing, data) {\n        existing.categories = this.filterByAccess(existing.categories, data.category);\n\n        for (const category of existing.categories) {\n            this.mergeTileGroups(category, data);\n            this.mergeTiles(\"category\", category, data);\n        }\n\n        // add newly added categories\n        const newCategories = this.newFromAvailable(\n            existing.categories,\n            data.category,\n            data.category\n        );\n        newCategories.forEach((newCategory) => {\n            const placeAt = data.category.findIndex((cat) => cat.id === newCategory.id);\n            const formatted = this.formatCategory(newCategory, data);\n\n            if (placeAt > -1) {\n                existing.categories.splice(placeAt, 0, formatted);\n            } else {\n                existing.categories.push(formatted);\n            }\n        });\n    },\n\n    merge(existing, data) {\n        this.mergeCategories(existing, data);\n    },\n};\n\nsap.n.Customization = {\n    // if customization are not enabled per device\n    // by default we will use 'default' as the device name\n    getDeviceType() {\n        return this.isDeviceBased() ? sap.n.Launchpad.deviceType() : 'default';\n    },\n\n    isEmpty(obj) {\n        return Object.keys(obj).length === 0;\n    },\n\n    isInitialized() {\n        return !this.isEmpty(this.getCustomizationsFor(this.getDeviceType()));\n    },\n\n    // buttons to customize screens is active / inactive\n    isActive: false,\n\n    setActivation(visible) {\n        this.isActive = visible;\n\n        btnAddNewPage.setVisible(visible);\n        btnManagePages.setVisible(visible);\n        btnEditPagesDone.setVisible(visible);\n\n        if (visible) {\n            this.jiggle();\n        }\n\n        this.tileSelectors.forEach((selector) => {\n            sap.n.DragDrop.setOption(selector, 'disabled', !visible);\n        });\n    },\n\n    isDeviceBased() {\n        return AppCache.config && AppCache.config.enableDeviceBasedCustomizations === true;\n    },\n\n    areScreensLocked() {\n        const { lockScreenChanges } = modelAppCacheDiaSettings.getData();\n        return !!lockScreenChanges;\n    },\n\n    isUserAnonymous() {\n        return AppCache && AppCache.userInfo && AppCache.userInfo.username && AppCache.userInfo.username === 'anonymous';\n    },\n\n    areExplicitlyDisabled() {\n        return AppCache.config && AppCache.config.disableCustomizations === true;\n    },\n\n    // force disabled, otherwise existing launchpads would break\n    isDisabled() {\n        if (this.areExplicitlyDisabled()) return true;\n        \n        if (!this.isSupported()) return true;\n\n        // anonymous user is not logged in, and has random public access to the launchpad\n        // so saving customizations for such user is not useful\n        if (this.isUserAnonymous()) return true;\n\n        // public launchpads are used by everyone in the same standard way\n        // so customizations are disabled\n        if (AppCache.isPublic) return true;\n\n        // view standard screens\n        const { disableScreenChanges } = modelAppCacheDiaSettings.getData();\n        if (disableScreenChanges) return true;\n\n        return false;\n    },\n\n    addCustomizableClass() {\n        querySelector(\"html\").classList.add(\"lp-is-customizable\");\n    },\n\n    removeCustomizableClass() {\n        querySelector(\"html\").classList.remove(\"lp-is-customizable\");\n    },\n\n    initOffline() {\n        if (!this.isDisabled()) {\n            this.addCustomizableClass();\n        }\n        \n        return Promise.resolve();\n    },\n\n    init(data) {\n        if (this.isDisabled()) {\n            this.setCustomizationsInContext(this.formatForStorage(data));\n            return Promise.resolve();\n        }\n\n        this.addCustomizableClass();\n\n        if (this.isInitialized()) {\n            CustomizationStorage.merge(this.getCustomizationsInContext(), data);\n            this.save();\n            return Promise.resolve();\n        }\n\n        return new Promise((resolve, _reject) => {\n            this.fetchFromP9()\n                .then((customizations) => {\n                    if (customizations && !this.isEmpty(customizations)) {\n                        // update from server\n                        this.setCustomizationsInContext(customizations);\n                        CustomizationStorage.merge(this.getCustomizationsInContext(), data);\n                    } else {\n                        // initiate based on current launchpad settings\n                        this.setCustomizationsInContext(this.formatForStorage(data));\n                    }\n\n                    this.save();\n                })\n                .finally(() => {\n                    resolve();\n                });\n        });\n    },\n\n    getCustomizations() {\n        return modelAppCacheCustomization.getData();\n    },\n\n    getCustomizationsFor(deviceType) {\n        const data = this.getCustomizations()[deviceType];\n        if (!data || this.isEmpty(data)) return {};\n        return data;\n    },\n\n    getCustomizationsInContext() {\n        return this.getCustomizationsFor(this.getDeviceType());\n    },\n\n    setCustomizationsFor(deviceType, customizations) {\n        const data = this.getCustomizations();\n        data[deviceType] = customizations;\n        modelAppCacheCustomization.setData(data);\n    },\n\n    setCustomizationsInContext(customizations) {\n        this.setCustomizationsFor(this.getDeviceType(), customizations);\n    },\n\n    saveToLocal() {\n        setCacheAppCacheCustomization();\n    },\n\n    // customizations are only supported for 21-lts onwards, with 22-lts offering backend storage\n    isSupported() {\n        return parseInt(AppCache.p9Version.split(\".\")[0]) >= 21;\n    },\n\n    // we only support storing customization from 22-LTS onwards\n    isP9Supported() {\n        if (!AppCache.p9Version) return false;\n        return parseInt(AppCache.p9Version.split(\".\")[0]) >= 22;\n    },\n\n    getP9URL(deviceType) {\n        return `${AppCache.Url}/api/launchpad_customizations/${AppCache.launchpadID}/${deviceType}`;\n    },\n\n    fetchFromP9() {\n        if (!this.isP9Supported()) return Promise.resolve({});\n\n        // make a call to p9 to fetch customizations for device\n        return new Promise((resolve, _reject) => {\n            jsonRequest({\n                type: \"GET\",\n                url: this.getP9URL(this.getDeviceType()),\n            }).then((res) => {\n                if (this.isEmpty(res)) {\n                    return resolve({});\n                }\n\n                return resolve(res[\"config\"]);\n            });\n        });\n    },\n\n    saveToP9() {\n        if (!this.isP9Supported()) return;\n\n        if (refreshingAuth) {\n            setTimeout(() => {\n                this.saveToP9();\n            }, 100);\n            return;\n        }\n\n        const deviceType = this.getDeviceType();\n        return jsonRequest({\n            type: \"POST\",\n            url: this.getP9URL(deviceType),\n            data: JSON.stringify({\n                config: this.getCustomizationsFor(deviceType),\n            }),\n        });\n    },\n\n    removeFromP9() {\n        if (!this.isP9Supported()) return;\n\n        const deviceType = this.getDeviceType();\n        return jsonRequest({\n            type: \"DELETE\",\n            url: this.getP9URL(deviceType),\n        });\n    },\n\n    clearCustomizations() {\n        this.setCustomizationsInContext(null);\n        this.saveToLocal();\n        return this.removeFromP9();\n    },\n\n    formatForStorage(data) {\n        return {\n            categories: CustomizationStorage.formatCategories(data),\n        };\n    },\n\n    save() {\n        this.saveToLocal();\n        this.saveToP9();\n    },\n\n    // give the id (uuid) of a Category/TileGroup/Tile find it's path\n    // only search within category if provided\n    // status = active/inactive/'', empty = don't filter on status\n    findPath(id, status = \"\") {\n        const customizations = this.getCustomizationsInContext();\n        if (this.isEmpty(customizations)) return;\n\n        const categories = customizations.categories.filter((category) => {\n            if (status === \"\") return true;\n            return category.status === status;\n        });\n\n        for (const { id: categoryId, tiles, tilegroups } of categories) {\n            if (id === categoryId) return { type: \"category\", path: [categoryId] };\n\n            for (const { id: tileId } of tiles) {\n                if (id === tileId) return { type: \"tile\", path: [categoryId, tileId] };\n            }\n\n            for (const { id: tileGroupId, tiles } of tilegroups) {\n                if (id === tileGroupId)\n                    return { type: \"tilegroup\", path: [categoryId, tileGroupId] };\n\n                for (const { id: tileId } of tiles) {\n                    if (id === tileId)\n                        return { type: \"tile\", path: [categoryId, tileGroupId, tileId] };\n                }\n            }\n        }\n    },\n\n    // find item the list [{ id }]\n    findInList(id, list) {\n        const item = list.find((item) => item.id === id);\n        if (item) return [item, list, list.findIndex((item) => item.id === id)];\n        return [null, list, -1];\n    },\n\n    // returns item for the last uuid in uuids array, and the array inside which the item exists\n    // returning\n    //      [null, message, -1] not found, message will clarify the reason\n    //      [null, list, -1]    not found, in the list\n    //      [item, list, index] item was found, in the list\n    // status can be active/inactive, on removal status becomes inactive\n    find(uuids, status = \"active\") {\n        const customizations = this.getCustomizationsInContext();\n        if (this.isEmpty(customizations)) return [null, \"customization is not initialized\", -1];\n\n        function itemStatusCheck(item) {\n            // if item exists and status to find is '' then it exists\n            if (item && status === \"\") return true;\n            return item && item.status === status;\n        }\n\n        let found;\n        const level = uuids.length;\n        if (level === 1) {\n            found = this.findInList(uuids[0], customizations.categories);\n            if (itemStatusCheck(found[0])) return found;\n            return [null, \"category does not exist\", -1];\n        } else if (level === 2) {\n            const [category, categories] = this.find([uuids[0]]);\n            if (!category) return [null, categories, -1];\n\n            // at the level 2, item exists in either a tile or  tilegroup\n\n            found = this.findInList(uuids[1], category.tiles);\n            if (itemStatusCheck(found[0])) return found;\n\n            found = this.findInList(uuids[1], category.tilegroups);\n            if (itemStatusCheck(found[0])) return found;\n\n            return [null, \"does not exist in tile or tile group\", -1];\n        } else if (level === 3) {\n            found = this.find([uuids[0], uuids[1]]);\n\n            // if tilegroup does not exist, or\n            if (!found[0]) return [null, found[1], -1];\n\n            // if tilegroup does not have tiles (which means uuids[1] probably refers to a tile)\n            //  so we won't be able to use uuid[2] further to find the actual match\n            if (found[0] && !found[0].tiles)\n                return [null, \"unable to use the 3rd uuid to find further\", -1];\n\n            // TileGroup > TileGroup > Tile\n            // at this last-level we are only looking for a tile\n            found = this.findInList(uuids[2], found[0].tiles);\n            if (itemStatusCheck(found[0])) return found;\n\n            return [null, \"tile does not exist in TileGroup > TileGroup\", -1];\n        }\n\n        // should never get here, if it does we return not found\n        return [null, \"we do not know where to look\", -1];\n    },\n\n    // type can be T=TILE or TG=TILE_GROUP\n    // add item to index, uuids is destination path\n    add(type, item, index, uuids = []) {\n        // on move the item status might be removed\n        item.status = \"active\";\n\n        // if no uuid then add it to categories\n        if (uuids.length === 0) {\n            if (type === \"TG\") {\n                const customizations = this.getCustomizationsInContext();\n                const [category, _, categoryIndex] = this.findInList(\n                    item.id,\n                    customizations.categories\n                );\n\n                if (category) customizations.categories.splice(categoryIndex, 1);\n                customizations.categories.splice(index, 0, item);\n                this.save();\n            }\n            return;\n        }\n\n        // get the item on the uuids path, add to that item to category or tilegroups at the specified index\n        let [found] = this.find(uuids, \"active\");\n        if (!found) return;\n\n        if (type === \"TG\") {\n            const [tilegroup, _, tilegroupIndex] = this.findInList(item.id, found.tilegroups);\n\n            if (tilegroup) found.tilegroups.splice(tilegroupIndex, 1);\n            found.tilegroups.splice(index, 0, item);\n        } else if (type === \"T\") {\n            const [tile, _, tileIndex] = this.findInList(item.id, found.tiles);\n            if (tile) found.tiles.splice(tileIndex, 1);\n            found.tiles.splice(index, 0, item);\n        }\n\n        this.save();\n    },\n\n    remove(uuids) {\n        let [found, list, index] = this.find(uuids);\n        if (!found) return;\n\n        found.status = \"inactive\";\n\n        // custom items can be removed\n        if (found.isCustom) {\n            list.splice(index, 1);\n        }\n\n        this.save();\n    },\n\n    // only useful for calculating then next index when moving\n    // a Category/Tile/TileGroup within it's own list\n    moveToIndex(current, next) {\n        return current === 0 || next === 0 || next + 1 >= current ? next : next - 1;\n    },\n\n    // is moving inside categories, tilegroups or within it's parent group\n    isSrcEqualToDst(src, dst) {\n        const srcLen = src.length;\n        const dstLen = dst.length;\n\n        if (srcLen === 1 && dstLen === 0) {\n            // moving category inside categories\n            return true;\n        } else if (srcLen === 2 && dstLen === 1 && src[0] === dst[0]) {\n            // moving tile group inside category or tile inside category\n            return true;\n        } else if (srcLen === 3 && dstLen === 2 && src[0] === dst[0] && src[1] === dst[1]) {\n            // moving tile inside tilegroup\n            return true;\n        }\n\n        return false;\n    },\n\n    // an array of from/to consisting of UUID's defining the location to move from/to\n    // e.g. src: [tile_group_id, tile_id], dst: [tile_group_id, tile_group_id, tile_id]\n    //      src: Tile Group > Tile\n    //      dst: Tile Group > Tile Group > Tile at (position 2)\n    move(type, src, dst, index) {\n        let [item, _list, currentIndex] = this.find(src);\n        if (!item) return;\n\n        if (this.isSrcEqualToDst(src, dst)) {\n            if (index === currentIndex) return;\n            index = this.moveToIndex(currentIndex, index);\n        }\n\n        this.remove(src);\n        this.add(type, JSON.parse(JSON.stringify(item)), index, dst);\n    },\n\n    // categories, tilegroups, tiles in an array, based on status\n    filterByStatus(item, status) {\n        return item !== undefined && item.status === status;\n    },\n\n    filterByActiveStatus(item) {\n        if (typeof item.status === 'undefined') return true;\n        return this.filterByStatus(item, \"active\");\n    },\n\n    getCategory(categoryId) {\n        const category = ModelData.FindFirst(AppCacheCategory, \"id\", categoryId);\n        if (category) return Object.assign({}, JSON.parse(JSON.stringify(category)), {\n            status: \"active\",\n        });\n\n        return this.getCategories().find((category) => category.id === categoryId);\n    },\n\n    getAllCategories() {\n        if (this.isDisabled()) {\n            return modelAppCacheCategory.getData();\n        }\n\n        const { categories } = this.getCustomizationsInContext();\n        return categories\n            .map((category) => {\n                if (category.isCustom) return category;\n                return Object.assign({}, this.getCategory(category.id), {\n                    status: category.status,\n                });\n            })\n            .filter((category) => typeof category !== \"undefined\");\n    },\n\n    getCategories() {\n        const { categories } = this.getCustomizationsInContext();\n        if (typeof categories === \"undefined\") {\n            return modelAppCacheCategory\n                .getData()\n                .map((c) => Object.assign({}, JSON.parse(JSON.stringify(c))), {\n                    status: \"active\",\n                });\n        }\n\n        return categories\n            .filter((category) => this.filterByActiveStatus(category))\n            .map((category) => {\n                if (category.isCustom) return category;\n                return Object.assign({}, this.getCategory(category.id), {\n                    status: \"active\",\n                });\n            })\n            .filter((category) => typeof category !== \"undefined\");\n    },\n\n    getTileGroup(tileGroupId) {\n        return ModelData.FindFirst(AppCacheCategoryChild, \"id\", tileGroupId);\n    },\n\n    getTileGroups(id, isFav = false) {\n        if (this.isDisabled() || isFav) {\n            const category = ModelData.FindFirst(AppCacheCategory, \"id\", id);\n            if (category) return category.tilegroups;\n        }\n\n        const result = this.findPath(id);\n        if (result === undefined) {\n            // exceptional case: tiles groups referenced from a tile group, which is linked as an action from a launchpad tile\n            // but that tile group is not included as part of standard tile groups in the launchpad\n            const tilegroup = sap.n.Customization.getTileGroup(id);\n            if (Array.isArray(tilegroup.tilegroups) && tilegroup.tilegroups.length > 0) {\n                return tilegroup.tilegroups;\n            }\n\n            return [];\n        }\n\n        const { path } = this.findPath(id);\n        if (path.length === 0) return [];\n\n        const [item] = this.find(path);\n        if (!item) return [];\n\n        const { tilegroups } = item;\n        return tilegroups\n            .filter((tileGroup) => this.filterByActiveStatus(tileGroup))\n            .map((tileGroup) => this.getTileGroup(tileGroup.id))\n            .filter((tileGroup) => typeof tileGroup !== \"undefined\");\n    },\n\n    getTile(tileId) {\n        return ModelData.FindFirst(AppCacheTiles, \"id\", tileId);\n    },\n\n    getTiles(id, isFav = false) {\n        if (this.isDisabled() || isFav) {\n            const category = ModelData.FindFirst(AppCacheCategory, \"id\", id);\n            if (category) return category.tiles;\n\n            const childCategory = ModelData.FindFirst(AppCacheCategoryChild, \"id\", id);\n            if (childCategory) return childCategory.tiles;\n        }\n\n        const result = this.findPath(id);\n        if (result === undefined || result.path.length === 0) {\n            // if we are fetching tiles for tile group, but get nothing\n            // it \"might\" be a referenced from a Tile itself as action. But,\n            // the tiles inside it are not included directly as part of the launchpad\n            const tileGroup = sap.n.Customization.getTileGroup(id);\n            if (Array.isArray(tileGroup.tiles) && tileGroup.tiles.length > 0) {\n                return tileGroup.tiles;\n            }\n\n            return [];\n        }\n\n        const [item] = this.find(result.path);\n        if (!item) return [];\n\n        const { tiles } = item;\n        return tiles\n            .filter((tile) => this.filterByActiveStatus(tile))\n            .map((tile) => this.getTile(tile.id))\n            .filter((tile) => typeof tile !== \"undefined\");\n    },\n\n    jiggleElement() {\n        return querySelector(\"html\");\n    },\n\n    jiggle() {\n        this.jiggleElement().classList.add(\"jiggle\");\n    },\n\n    isJiggling() {\n        return this.jiggleElement().classList.contains(\"jiggle\");\n    },\n\n    stopJiggling() {\n        this.setActivation(false);\n        this.jiggleElement().classList.remove(\"jiggle\");\n        sap.n.Launchpad.BuildTreeMenu();\n    },\n\n    checkToStopJigglingOnMouseDown(e) {\n        if (!sap.n.Customization.isJiggling()) return;\n\n        let el = e.target;\n\n        // check if mousedown has occurred inside the AppCacheNav\n        let inContext = false;\n        while (el) {\n            if (el.id === \"AppCacheNav\") {\n                inContext = true;\n                break;\n            }\n\n            el = el.parentNode;\n        }\n\n        if (!inContext) return;\n\n        // check if event was recieved by nepFCardContainer or one of it's children\n        const clsCardContainer = \"nepFCardContainer\";\n        const clsNewCard = \"nepNewCard\";\n        el = e.target;\n        while (\n            el &&\n            el.classList &&\n            !el.classList.contains(clsCardContainer) &&\n            !el.classList.contains(clsNewCard)\n        ) {\n            el = el.parentNode;\n        }\n\n        // event was not recieved on the Edit Screen interactive element\n        if (\n            !el ||\n            !el.classList ||\n            (!el.classList.contains(clsCardContainer) && !el.classList.contains(clsNewCard))\n        ) {\n            sap.n.Customization.stopJiggling();\n        }\n    },\n\n    findTileIndex(tileId, parentElm) {\n        return Array.from(parentElm.querySelectorAll(\".nepFCardContainer\")).findIndex((tileElm) => {\n            return tileElm.dataset.tileId === tileId;\n        });\n    },\n\n    findTileElement(elm) {\n        for (let parent = elm; parent; parent = parent.parentNode) {\n            const ds = parent.dataset;\n            if (ds.context && ds.context === \"tile\") {\n                return parent;\n            }\n        }\n\n        return null;\n    },\n\n    findTileDragContext(tileId, tileElm) {\n        const index = this.findTileIndex(tileId, tileElm.parentNode);\n\n        for (let parent = tileElm.parentNode; parent; parent = parent.parentNode) {\n            const ds = parent.dataset;\n            if (ds.context) {\n                const context = ds.context;\n\n                if (context === \"page\" || context === \"category-tiles\") {\n                    return {\n                        index,\n                        tileId,\n                        context,\n                        parent: [ds.categoryId],\n                    };\n                } else if (context === \"tilegroup-tiles\") {\n                    return {\n                        index,\n                        tileId,\n                        context,\n                        parent: [ds.categoryId, ds.tilegroupId],\n                    };\n                }\n            }\n        }\n\n        return null;\n    },\n\n    tilesDragDropClass: \"tiles-drag-drop\",\n    tileSelectors: new Set(),\n    applyDragDropToTiles(sapElm) {\n        if (this.isDisabled()) return;\n\n        let src, dst;\n\n        function onStart(evt, ui) {\n            const elm = ui.item.get(0);\n            if (!elm) return;\n\n            const tileId = elm.dataset.tileId;\n            if (!tileId) return;\n\n            src = this.findTileDragContext(tileId, elm);\n        }\n\n        function onStop(evt, ui) {\n            const elm = ui.item.get(0);\n            if (!elm) return;\n\n            const tileId = elm.dataset.tileId;\n            if (!tileId) return;\n\n            dst = this.findTileDragContext(tileId, elm);\n\n            // moving tiles within category / tilegroup\n            if (src.parent.join(\"\") === dst.parent.join(\"\")) {\n                dst.index = sap.n.Customization.moveToIndex(src.index, dst.index);\n            }\n\n            sap.n.Customization.move(\"T\", [...src.parent, src.tileId], dst.parent, dst.index);\n        }\n\n        const selector = `#${sapElm.getId()} .${this.tilesDragDropClass}`;\n        this.tileSelectors.add(selector);\n        \n        sap.n.DragDrop.connectWith(selector, onStart.bind(this), onStop.bind(this));\n        sap.n.DragDrop.setOption(selector, 'disabled', true);\n    },\n\n    setCardSize(elm, width, height) {\n        if (!elm) return;\n\n        elm.classList.remove(\n            ...[\"Small\", \"Medium\", \"Wide\", \"Wider\", \"Max\", \"Tall\", \"Tower\", \"Skyscraper\"].map(\n                (v) => `nepTile${v}`\n            )\n        );\n\n        elm.classList.add(`nepTile${width ?? \"Small\"}`);\n        if (height) elm.classList.add(`nepTile${height}`);\n    },\n\n    showManagePagesDialog() {\n        modelManagePages.setData(\n            sap.n.Customization.getAllCategories().map((c) => ({\n                id: c.id,\n                status: c.status,\n                isCustom: !!c.isCustom,\n                title: c.isCustom ? c.props.menuText : c.title,\n            }))\n        );\n\n        diaManagePages.open();\n    },\n\n    showAddPageDialog() {\n        modelPageForm.setData({\n            menuText: \"New Screen\",\n            title: \"New Screen Title\",\n            subTitle: \"\",\n        });\n        diaPage.open();\n    },\n\n    addPage(props) {\n        const id = ModelData.genID();\n        const customizations = this.getCustomizationsInContext();\n        this.add(\n            \"TG\",\n            {\n                props,\n                id,\n                isCustom: true,\n                tilegroups: [],\n                tiles: [],\n            },\n            customizations.categories.length\n        );\n        sap.n.Launchpad.BuildMenuTop();\n        location.hash = `neptopmenu&${id}`;\n\n        // activate edit screen, on creating a new screen\n        this.setActivation(true);\n        this.jiggle();\n\n        // open add new app dialog\n        this.onAddTile([id]);\n    },\n\n    setPage(props) {\n        const categoryId = props.id;\n        const { menuText, title, subTitle } = props;\n        this.saveProperties([categoryId], { menuText, title, subTitle });\n\n        const pageCat = sap.ui.getCore().byId(`page${categoryId}`);\n        if (pageCat) pageCat.destroy();\n\n        const category = this.getCategory(categoryId);\n        if (category) sap.n.Launchpad.BuildTiles(category);\n\n        sap.n.Launchpad.BuildMenuTop();\n    },\n\n    onAddTile(parent) {\n        const [obj, _list, index] = sap.n.Customization.find(parent);\n        if (index === -1) return;\n\n        const activeTileIds = obj.tiles\n            .filter((tile) => sap.n.Customization.filterByActiveStatus(tile))\n            .map((tile) => tile.id);\n        const missingTiles = modelAppCacheTiles\n            .getData()\n            .filter((tile) => !activeTileIds.includes(tile.id));\n\n        modelAddTiles.setData(\n            missingTiles.map((tile) => ({\n                parent,\n                id: tile.id,\n                title: tile.title,\n                subTitle: tile.subTitle,\n                visible: true,\n            }))\n        );\n        diaAddTile.open();\n    },\n\n    // path to where page/tilegroup/tile exists\n    // props can be anything from { width, height } to complete information about the page/tilegroup/tile\n    saveProperties(path, props) {\n        let [found] = this.find(path);\n        if (!found) return;\n\n        found.props = props;\n        this.save();\n    },\n\n    getProperties(path) {\n        let [found] = this.find(path);\n        if (!found) return false;\n        return found.props;\n    },\n};\n\nsap.n.Customization.Popover = {\n    // context in which popover was called\n    context: null,\n\n    createEventDelegate(config) {\n        let longPressTimer = null;\n        return {\n            oncontextmenu(e) {\n                if (sap.n.Customization.isJiggling()) return;\n                if (e.button < 2) return;\n\n                const { disableScreenChanges } = modelAppCacheDiaSettings.getData();\n                if (disableScreenChanges) return true;\n\n                const elm = elById(config.elmId);\n                if (!elm) return;\n\n                sap.n.Customization.Popover.open(elm, config);\n                e.preventDefault();\n            },\n            onmousedown(e) {\n                if (sap.n.Customization.isJiggling()) return;\n\n                const { disableScreenChanges } = modelAppCacheDiaSettings.getData();\n                if (disableScreenChanges) return true;\n\n                // long press to show user menu is not applicable for the desktop\n                if (navigator.maxTouchPoints === 0) return;\n\n                longPressTimer = setTimeout(() => {\n                    const elm = elById(config.elmId);\n                    if (!elm) return;\n\n                    sap.n.Customization.Popover.open(elm, config);\n                }, 1000);\n            },\n            onmouseup(e) {\n                clearTimeout(longPressTimer);\n            },\n        };\n    },\n\n    onEditCustomPage(id) {\n        const category = sap.n.Customization.getCategory(id);\n        if (!category) return;\n\n        const { menuText, title, subTitle } = category.props;\n        modelPageForm.setData({ id, menuText, title, subTitle });\n        diaPage.open();\n        diaManagePages.close();\n    },\n\n    onAddCustomPage() {\n        sap.n.Customization.showAddPageDialog();\n        this.close();\n    },\n\n    onEditPage() {\n        sap.n.Customization.setActivation(true);\n        sap.n.Customization.jiggle();\n        this.close();\n    },\n\n    onDeletePage(id) {\n        diaManagePages.close();\n\n        const category = sap.n.Customization.getCategory(id);\n        if (!category) return;\n\n        let title = category.title;\n        if (category.isCustom) title = category.props.menuText;\n\n        sap.m.MessageBox.confirm(`Are you sure, you want to remove ${title}? `, {\n            onClose: function (action) {\n                if (action === \"OK\") {\n                    sap.n.Customization.remove([id]);\n                    sap.n.Launchpad.BuildMenuTop();\n\n                    if (id === getActivePageCategoryId()) {\n                        AppCache._Home();\n                    }\n\n                    sap.n.Customization.showManagePagesDialog();\n                }\n            },\n        });\n    },\n\n    onActivatePage(id) {\n        const [category] = sap.n.Customization.find([id], \"inactive\");\n        if (!category) return;\n\n        category.status = \"active\";\n        sap.n.Customization.save();\n        sap.n.Launchpad.BuildMenuTop();\n    },\n\n    onManagePages() {\n        this.close();\n        sap.n.Customization.showManagePagesDialog();\n    },\n\n    addTileFromDialog(tileId, parent) {\n        const item = CustomizationStorage.formatTile(sap.n.Customization.getTile(tileId));\n        const [parentItem] = sap.n.Customization.find(parent);\n        sap.n.Customization.add(\"T\", item, parentItem.tiles.length, parent);\n        sap.n.Launchpad.RebuildTiles();\n    },\n\n    onTileResize() {\n        console.log(\"onTileResize\");\n        this.close();\n    },\n\n    onMoveTileToAnotherPage() {\n        modeldiaMoveTile.setData(this.context);\n        \n        const cats = sap.n.Customization.getCategories().filter((c) => c.id !== getActivePageCategoryId());\n        modelMoveTile.setData(\n            cats.map((c) => ({\n                id: c.id,\n                title: c.isCustom ? c.props.menuText : c.title,\n            }))\n        );\n\n        this.close();\n        diaMoveTile.open();\n    },\n\n    onTileRemove() {\n        const { elmId, tileId } = this.context;\n        const elm = sap.ui.getCore().byId(elmId);\n        if (elm) {\n            const ctx = sap.n.Customization.findTileDragContext(tileId, elm.getDomRef());\n            if (!ctx) return;\n\n            sap.n.Customization.remove([...ctx.parent, ctx.tileId]);\n            elm.destroy();\n        }\n\n        this.close();\n    },\n\n    init() {\n        if (sap.n.Customization.isDisabled()) return;\n    },\n\n    isOpen() {\n        return popCustomizationTiles.isOpen();\n    },\n\n    open(elm, config) {\n        if (!elm || this.isOpen()) return;\n        \n        this.context = config;\n        popCustomizationTiles.openBy(elm);\n    },\n\n    close() {\n        popCustomizationTiles.close();\n    },\n};\n\n// used for resizing tiles\nsap.n.Customization.Resize = {\n    active: false,\n    context: null,\n\n    init() {\n        this.active = true;\n        this.context = {\n            config: null,\n\n            x1: -1,\n            y1: -1,\n            x2: -1,\n            y2: -1,\n\n            startWidth: -1,\n            startHeight: -1,\n            endWidth: -1,\n            endHeight: -1,\n        }\n    },\n\n    getTileSize() {\n        const rect = this.context.config.cardContainer.getDomRef().getBoundingClientRect();\n        return [rect.width, rect.height];\n    },\n\n    getTileWidthClass(width) {\n        if (width <= 215) return sap.n.Layout.tileWidth.SMALL;\n        else if (width > 215 && width <= 430) return sap.n.Layout.tileWidth.MEDIUM;\n        else if (width > 430 && width <= 645) return sap.n.Layout.tileWidth.WIDE;\n        else if (width > 645 && width <= 860) return sap.n.Layout.tileWidth.WIDER;\n        else if (width > 860) return sap.n.Layout.tileWidth.MAX;\n\n        return sap.n.Layout.tileWidth.SMALL; // default\n    },\n\n    getHeightClass(height) {\n        if (height <= 270) return sap.n.Layout.tileHeight.DEFAULT;\n        else if (height > 270 && height <= 540) return sap.n.Layout.tileHeight.TALL;\n        else if (height > 540 && height <= 710) return sap.n.Layout.tileHeight.TOWER;\n        else if (height > 710) return sap.n.Layout.tileHeight.SKYSCRAPER;\n\n        return sap.n.Layout.tileHeight.DEFAULT;\n    },\n\n    getCardFromCardContainer(container) {\n        const cards = container.getItems().filter(item => item.hasStyleClass('nepFCard'));\n        if (cards.length === 0) return null;\n        return cards[0];\n    },\n\n    setTileSize(width, height) {\n        const ref = this.context.config.cardContainer;\n        [\n            sap.n.Layout.tileWidth.SMALL,\n            sap.n.Layout.tileWidth.MEDIUM,\n            sap.n.Layout.tileWidth.WIDE,\n            sap.n.Layout.tileWidth.WIDER,\n            sap.n.Layout.tileWidth.MAX\n        ].forEach(size => ref.removeStyleClass(`nepTile${size}`));\n        const widthClass = this.getTileWidthClass(width);\n        ref.addStyleClass(`nepTile${widthClass}`);\n\n        [\n            sap.n.Layout.tileHeight.DEFAULT,\n            sap.n.Layout.tileHeight.TALL,\n            sap.n.Layout.tileHeight.TOWER,\n            sap.n.Layout.tileHeight.SKYSCRAPER,\n        ].forEach(size => ref.removeStyleClass(`nepTile${size}`));\n        \n        const heightClass = this.getHeightClass(height);\n        if (heightClass) ref.addStyleClass(`nepTile${heightClass}`);\n        console.log('nepTile', `nepTile${heightClass}`);\n        \n        const card = this.getCardFromCardContainer(ref);\n        if (!card) return;\n\n        card.setWidth(`${width}px`);\n        card.setHeight(`${height}px`);\n    },\n\n    onMouseDown(evt, config) {\n        this.init();\n        document.body.classList.add('resizing');\n\n        this.context.config = config;\n        [this.context.startWidth, this.context.startHeight] = this.getTileSize();\n        [this.context.x1, this.context.y1] = [evt.pageX, evt.pageY];\n    },\n    \n    onMouseMove(evt) {\n        if (!this.active) return;\n\n        const width = this.context.startWidth + (evt.pageX - this.context.x1);\n        const height = this.context.startHeight + (evt.pageY - this.context.y1);\n        this.setTileSize(width, height);\n    },\n\n    onMouseUp(evt) {\n        if (!this.active) return;\n\n        document.body.classList.remove('resizing');\n\n        const width = this.context.startWidth + (evt.pageX - this.context.x1);\n        const height = this.context.startHeight + (evt.pageY - this.context.y1);\n        \n        const widthClass = this.getTileWidthClass(width);\n        const heightClass = this.getHeightClass(height);\n\n        const card = this.getCardFromCardContainer(this.context.config.cardContainer);\n        card.setWidth('100%');\n        card.setHeight('100%');\n        \n        const { config } = this.context;\n        const tileId = config.dataTile.id;\n        if (config.isFav) {\n            const fav = ModelData.FindFirst(AppCacheTilesFav, \"id\", tileId);\n            fav.cardWidth = widthClass;\n            fav.cardHeight = heightClass;\n\n            ModelData.Update(AppCacheTilesFav, \"id\", tileId, fav);\n            setCacheAppCacheTilesFav();\n            sap.n.Launchpad.saveFav();\n        } else {\n            let path = null;\n            for (let parent = config.cardContainer.getDomRef(); parent; parent = parent.parentNode) {\n                const ds = parent.dataset;\n                if (!ds || !ds.context) continue;\n\n                if (ds.context === \"page\" || ds.context === \"category-tiles\") {\n                    path = [ds.categoryId, tileId];\n                    break;\n                } else if (ds.context === \"tilegroup-tiles\") {\n                    path = [ds.categoryId, ds.tilegroupId, tileId];\n                    break;\n                }\n            }\n\n            if (path) {\n                sap.n.Customization.saveProperties(path, { width: widthClass, height: heightClass });\n            }\n        }\n\n        this.active = false;\n        this.context = {\n            config: null,\n            x1: -1,\n            y1: -1,\n            x2: -1,\n            y2: -1,\n            initialWidth: -1,\n            initialHeight: -1,\n        };\n    }\n};\n\n// mousedown event to check and stop jiggling\ndocument.body.addEventListener(\"mousedown\", sap.n.Customization.checkToStopJigglingOnMouseDown);\n\n// mouse up/move events for resizing tiles\ndocument.body.addEventListener(\"mousemove\", (evt) => {\n    sap.n.Customization.Resize.onMouseMove(evt);\n});\ndocument.body.addEventListener(\"mouseup\", (evt) => {\n    sap.n.Customization.Resize.onMouseUp(evt);\n});","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":577},{"fieldNo":"fc679d4b-a3da-49d7-e760-c7de380e8570","fieldName":"sap.n.DragDrop","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"let dragDropProps = {\n    forceHelperSize: true,\n    tolerance: 'pointer',\n    revert: 25,\n    opacity: 0.5,\n    scroll: true,\n    placeholder: 'dragPlaceholder',\n    cancel: '.nepResizable',\n};\n\nsap.n.DragDrop = {\n    restrictedTo(elm, onDragStart, onDragStop) {\n        return jQuery(elm).sortable({\n            ...dragDropProps,\n            start: onDragStart,\n            stop: onDragStop,\n            containment: 'parent',\n        });\n    },\n\n    connectWith(selector, onDragStart, onDragStop) {\n        return jQuery(selector).sortable({\n            ...dragDropProps,\n            start: onDragStart,\n            stop: onDragStop,\n            connectWith: selector,\n        });\n    },\n\n    setOption(selector, attribute, value) {\n        jQuery(selector).sortable('option', attribute, value);\n    },\n};","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":578},{"fieldNo":"2d041e7e-d3b4-43ea-b015-d58ee0cd22fa","fieldName":"sap.n.Layout","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"sap.n.Layout = {\r\n    row: {\r\n        ONE: \"One\",\r\n        FEW: \"Few\",\r\n        MORE: \"More\",\r\n        MANY: \"Many\",\r\n    },\r\n    tileWidth: {\r\n        SMALL: \"Small\",\r\n        MEDIUM: \"Medium\",\r\n        WIDE: \"Wide\",\r\n        WIDER: \"Wider\",\r\n        MAX: \"Max\",\r\n    },\r\n\r\n    tileHeight: {\r\n        DEFAULT: \"\",\r\n        TALL: \"Tall\",\r\n        TOWER: \"Tower\",\r\n        SKYSCRAPER: \"Skyscraper\",\r\n    },\r\n\r\n    waitForLayout: 0,\r\n\r\n    setHeaderPadding: function (noRebuild) {\r\n        [\r\n            \"nepSideCollapsed\",\r\n            \"nepSideExpanded\",\r\n            \"nepSideMenu\",\r\n            \"nepSideMenuCollapsed\",\r\n            \"nepSideMenuExpanded\",\r\n        ].forEach(function (c) {\r\n            topMenu.removeStyleClass(c);\r\n        });\r\n\r\n        sap.n.Layout.setLaunchpadContentNavigatorWidth();\r\n        sap.n.Launchpad.setLaunchpadContentWidth();\r\n\r\n        if (\r\n            !noRebuild &&\r\n            sap.n.Launchpad.currLayoutContent.shellContentWidth !== \"Full\" &&\r\n            sap.n.Launchpad.currLayoutContent.headerContentWidth\r\n        ) {\r\n            let menu = launchpadContentMenu.getWidth();\r\n            let navBar = launchpadContentNavigator.getWidth();\r\n\r\n            if (menu === \"300px\" && navBar === \"68px\")\r\n                topMenu.addStyleClass(\"nepSideMenuCollapsed\");\r\n            else if (menu === \"300px\" && navBar === \"300px\")\r\n                topMenu.addStyleClass(\"nepSideMenuExpanded\");\r\n            else if (menu === \"300px\") topMenu.addStyleClass(\"nepSideMenu\");\r\n            else if (navBar === \"68px\") topMenu.addStyleClass(\"nepSideCollapsed\");\r\n            else if (navBar === \"300px\") topMenu.addStyleClass(\"nepSideExpanded\");\r\n        }\r\n    },\r\n\r\n    setLaunchpadContentNavigatorWidth: function () {\r\n        if (openApps.getItems().length === 0) {\r\n            launchpadContentNavigator.setWidth(\"0px\");\r\n            return;\r\n        }\r\n\r\n        if (sap.n.Launchpad.isPhone()) {\r\n            launchpadContentNavigator.setWidth(\r\n                AppCache.config.activeAppsSideMobile ? \"70px\" : \"0px\"\r\n            );\r\n        } else {\r\n            // desktop\r\n            launchpadContentNavigator.setWidth(AppCache.config.activeAppsSide ? \"70px\" : \"0px\");\r\n        }\r\n    },\r\n\r\n    showAppTitle: function () {\r\n        if (sap.n.Launchpad.isPhone()) {\r\n            if (typeof AppCache.config.showAppTitleMobile === 'undefined') {\r\n                return false;\r\n            }\r\n            return AppCache.config.showAppTitleMobile;\r\n        }\r\n\r\n        if (typeof AppCache.config.showAppTitle === 'undefined') {\r\n            return false;\r\n        }\r\n        return AppCache.config.showAppTitle;\r\n    },\r\n\r\n    activeAppsSide: function () {\r\n        if (sap.n.Launchpad.isPhone()) {\r\n            if (typeof AppCache.config.activeAppsSideMobile === 'undefined') {\r\n                return false;\r\n            }\r\n            return AppCache.config.activeAppsSideMobile;\r\n        }\r\n        \r\n        if (typeof AppCache.config.activeAppsSide === 'undefined') {\r\n            return false;\r\n        }\r\n        return AppCache.config.activeAppsSide;\r\n    },\r\n\r\n    activeAppsTop: function () {\r\n        if (sap.n.Launchpad.isPhone()) {\r\n            if (typeof AppCache.config.activeAppsTopMobile === 'undefined') {\r\n                return false;\r\n            }\r\n            return AppCache.config.activeAppsTopMobile;\r\n        }\r\n        \r\n        if (typeof AppCache.config.activeAppsTop === 'undefined') {\r\n            return false;\r\n        }\r\n        return AppCache.config.activeAppsTop;\r\n    },\r\n    \r\n    showActiveApps: function () {\r\n        return !this.showAppTitle() && !this.activeAppsSide() && !this.activeAppsTop();\r\n    },\r\n\r\n    isVerticalMenuPinned: function() {\r\n        return sap.n.Launchpad.isDesktop() && AppCache.config.verticalMenu;\r\n    },\r\n\r\n    clearAppCacheAppButtonItems: function () {\r\n        AppCacheAppButton.getItems().forEach((item) => {\r\n            if (item.sId !== 'AppCacheShellAppTitle') {\r\n                item.remove && item.remove();\r\n            }\r\n        });\r\n    },\r\n};\r\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":579},{"fieldNo":"702d07ac-8188-45b1-e273-0658e52a7212","fieldName":"sap.n.Planet9","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"sap.n.Planet9 = {\n    function: function (opts) {\n        let { id, query, method } = opts;\n        let server = opts.url || AppCache.Url;\n\n        let q = '';\n        if (query) {\n            let params = AppCache.isMobile ? `${query}&isMobile=true` : query;\n            q = `?${encodeURIComponent(params)}`;\n        } else {\n            q = AppCache.isMobile ? '?isMobile=true' : '';\n        }\n\n        // Public\n        let basePath = '/api/functions/';\n        if (AppCache.isPublic) {\n            basePath = '/public/functions/launchpad';\n            id = '';\n        }\n\n        let url = `${server}${basePath}${id}${q}`;\n        if (method) {\n            url = `${server}${basePath}${id}/${method}${q}`;\n        }\n\n        jsonRequest({\n            url,\n            data: opts.data ? JSON.stringify(opts.data) : {},\n            headers: opts.headers || {},\n            xhrFields: {\n                withCredentials: true\n            },\n            success: function (data) {\n                if (opts.success) opts.success(data);\n            },\n            error: function (result, _status) {\n                if (opts.error) opts.error(result);\n            }\n        });\n    },\n\n    arrayMove: function (arr, fromPos, toPos) {\n        while (fromPos < 0) {\n            fromPos += arr.length;\n        }\n        while (toPos < 0) {\n            toPos += arr.length;\n        }\n        if (toPos >= arr.length) {\n            let k = toPos - arr.length + 1;\n            while (k--) {\n                arr.push(undefined);\n            }\n        }\n        arr.splice(toPos, 0, arr.splice(fromPos, 1)[0]);\n    }\n}","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":580},{"fieldNo":"b1e33421-6ddf-4c51-d0a7-cc597d04a1e0","fieldName":"sap.n.Push","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"sap.n.Push = {\n    messsaging: null,\n    firebaseSetup: function () {\n        cordova.plugins.firebase.messaging.requestPermission().then(function () {\n            appCacheLog('FireBase Messaging: Push messaging is allowed');\n\n            cordova.plugins.firebase.messaging.getToken().then(function (token) {\n                appCacheLog(`FireBase Messaging: Got token ${token}`);\n\n                let system = sap.n.Launchpad.deviceType();\n                let deviceData = {\n                    token: token,\n                    launchpadId: AppCache.launchpadID,\n                    browserName: sap.ui.Device.browser.name,\n                    browserVersion: sap.ui.Device.browser.version,\n                    osName: sap.ui.Device.os.name,\n                    osVersion: sap.ui.Device.os.version,\n                    system: system\n                };\n\n                // Enhancement\n                if (sap.n.Enhancement.PushRegistration) {\n                    try {\n                        sap.n.Enhancement.PushRegistration(deviceData);\n                    } catch (e) {\n                        appCacheError('Enhancement PushRegistration ' + e);\n                    }\n                }\n\n                jsonRequest({\n                    url: AppCache.Url + '/messaging/register',\n                    data: JSON.stringify(deviceData),\n                    success: function (data) {\n                        localStorage.setItem('pushRegistered', true);\n                    },\n                    error: function (result, status) {\n                        localStorage.setItem('pushRegistered', false);\n                        if (result.responseJSON && result.responseJSON.status) {\n                            sap.m.MessageToast.show(result.responseJSON.status);\n                        }\n                    }\n                });\n            });\n        });\n\n        cordova.plugins.firebase.messaging.onMessage(function (payload) {\n            // Enhancement\n            if (sap.n.Enhancement.PushNotification) {\n                try {\n                    sap.n.Enhancement.PushNotification(payload);\n                } catch (e) {\n                    appCacheError('Enhancement PushNotification ' + e);\n                }\n            }\n        });\n\n    },\n\n    setupPush: function () {\n        if (cordova.plugins.firebase && cordova.plugins.firebase.messaging) {\n            sap.n.Push.firebaseSetup();\n            return;\n        }\n\n        if (typeof PushNotification === 'undefined') {\n            console.log('PushNotification plugin not installed');\n            return;\n        }\n\n        let push = PushNotification.init({\n            'android': {\n                'senderID': AppCache.pushSenderId\n            },\n            'browser': {},\n            'ios': {\n                'sound': true,\n                'vibration': true,\n                'badge': true\n            },\n            'windows': {}\n        });\n\n        push.on('registration', function (data) {\n            let system = sap.n.Launchpad.deviceType();\n            let deviceData = {\n                token: data.registrationId,\n                launchpadId: AppCache.launchpadID,\n                browserName: sap.ui.Device.browser.name,\n                browserVersion: sap.ui.Device.browser.version,\n                osName: sap.ui.Device.os.name,\n                osVersion: sap.ui.Device.os.version,\n                system: system\n            };\n\n            // Enhancement\n            if (sap.n.Enhancement.PushRegistration) {\n                try {\n                    sap.n.Enhancement.PushRegistration(deviceData);\n                } catch (e) {\n                    appCacheError('Enhancement PushRegistration ' + e);\n                }\n            }\n\n            jsonRequest({\n                url: AppCache.Url + '/messaging/register',\n                data: JSON.stringify(deviceData),\n                success: function (data) {\n                    localStorage.setItem('pushRegistered', true);\n                },\n                error: function (result, status) {\n                    localStorage.setItem('pushRegistered', false);\n                    if (result.responseJSON && result.responseJSON.status) {\n                        sap.m.MessageToast.show(result.responseJSON.status);\n                    }\n                }\n            });\n        });\n\n        push.on('error', function (e) {\n            console.error('push error = ' + e.message);\n        });\n\n        push.on('notification', function (data) {\n            // Enhancement\n            if (sap.n.Enhancement.PushNotification) {\n                try {\n                    sap.n.Enhancement.PushNotification(data);\n                } catch (e) {\n                    appCacheError('Enhancement PushNotification ' + e);\n                }\n            }\n\n            if (sap.ui.Device.os.name === 'iOS') {\n                push.setApplicationIconBadgeNumber(function () {\n                    console.log('Badge: success');\n                }, function () {\n                    console.log('Badge: error');\n                }, data.count);\n            }\n        });\n    }\n};","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":581},{"fieldNo":"2b9e0f95-8f49-4575-9186-c16c3b16b476","fieldName":"sap.n.Shell","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"sap.n.getObjectByID = function (id) {\n    let object;\n    object = sap.ui.getCore().byId(sap.n.currentView.createId(id));\n    return object;\n}\n\nsap.n.Shell = {\n    openSidePanelApps: {},\n    sidepanelCloseEvents: {},\n    sidepanelHelpFunction: null,\n\n    // Event - attachInit\n    attachInit: function (func) {\n        let applid = AppCache.CurrentApp.replace(/\\//g, '').toUpperCase();\n\n        if (AppCache.LoadOptions.appGUID) applid = AppCache.LoadOptions.appGUID;\n        if (!applid) return;\n        if (!sap.n.Apps[applid]) sap.n.Apps[applid] = {};\n        if (!sap.n.Apps[applid].init) sap.n.Apps[applid].init = new Array();\n\n        sap.n.Apps[applid].init.push(func);\n    },\n\n    attachBeforeSuspend: function (func) {\n        let applid = AppCache.CurrentApp.replace(/\\//g, '').toUpperCase();\n\n        if (AppCache.LoadOptions.appGUID) applid = AppCache.LoadOptions.appGUID;\n        if (!applid) return;\n        if (!sap.n.Apps[applid]) sap.n.Apps[applid] = {};\n        if (!sap.n.Apps[applid].beforeSuspend) sap.n.Apps[applid].beforeSuspend = new Array();\n\n        sap.n.Apps[applid].beforeSuspend.push(func);\n    },\n\n    attachBeforeMenuNavigation: function (func) {\n        let applid = AppCache.CurrentApp.replace(/\\//g, '').toUpperCase();\n\n        if (AppCache.LoadOptions.appGUID) applid = AppCache.LoadOptions.appGUID;\n        if (!applid) return;\n        if (!sap.n.Apps[applid]) sap.n.Apps[applid] = {};\n        if (!sap.n.Apps[applid].beforeMenuNavigation) sap.n.Apps[applid].beforeMenuNavigation = new Array();\n\n        if (!sap.n.Apps[applid].beforeMenuNavigation.length) sap.n.Apps[applid].beforeMenuNavigation.push(func);\n    },\n\n    // Event - attachBeforeDisplay\n    attachBeforeDisplay: function (func) {\n        let applid = AppCache.CurrentApp.replace(/\\//g, '').toUpperCase();\n\n        if (AppCache.LoadOptions.appGUID) applid = AppCache.LoadOptions.appGUID;\n        if (!applid) return;\n        if (!sap.n.Apps[applid]) sap.n.Apps[applid] = {};\n        if (!sap.n.Apps[applid].beforeDisplay) sap.n.Apps[applid].beforeDisplay = new Array();\n\n        if (!sap.n.Apps[applid].beforeDisplay.length) sap.n.Apps[applid].beforeDisplay.push(func);\n    },\n\n    // Event - beforeClose\n    attachBeforeClose: function (func) {\n        let applid = AppCache.CurrentApp.replace(/\\//g, '').toUpperCase();\n\n        if (AppCache.LoadOptions.appGUID) applid = AppCache.LoadOptions.appGUID;\n        if (!applid) return;\n        if (!sap.n.Apps[applid]) sap.n.Apps[applid] = {};\n        if (!sap.n.Apps[applid].beforeClose) sap.n.Apps[applid].beforeClose = new Array();\n\n        if (!sap.n.Apps[applid].beforeClose.length) sap.n.Apps[applid].beforeClose.push(func);\n    },\n\n    // Event - attachOnNavigation\n    attachOnNavigation: function (func) {\n        let applid = AppCache.CurrentApp.replace(/\\//g, '').toUpperCase();\n\n        if (AppCache.LoadOptions.appGUID) applid = AppCache.LoadOptions.appGUID;\n        if (!applid) return;\n        if (!sap.n.Apps[applid]) sap.n.Apps[applid] = {};\n        if (!sap.n.Apps[applid].onNavigation) sap.n.Apps[applid].onNavigation = new Array();\n\n        if (!sap.n.Apps[applid].onNavigation.length) sap.n.Apps[applid].onNavigation.push(func);\n    },\n\n    // Event - beforeBack\n    attachBeforeBack: function (func) {\n        let applid = AppCache.CurrentApp.replace(/\\//g, '').toUpperCase();\n\n        if (AppCache.LoadOptions.appGUID) applid = AppCache.LoadOptions.appGUID;\n        if (!applid) return;\n        if (!sap.n.Apps[applid]) sap.n.Apps[applid] = {};\n        if (!sap.n.Apps[applid].beforeBack) sap.n.Apps[applid].beforeBack = new Array();\n\n        if (!sap.n.Apps[applid].beforeBack.length) sap.n.Apps[applid].beforeBack.push(func);\n    },\n\n    // Event - beforeHome\n    attachBeforeHome: function (func) {\n        let applid = AppCache.CurrentApp.replace(/\\//g, '').toUpperCase();\n\n        if (AppCache.LoadOptions.appGUID) applid = AppCache.LoadOptions.appGUID;\n        if (!applid) return;\n        if (!sap.n.Apps[applid]) sap.n.Apps[applid] = {};\n        if (!sap.n.Apps[applid].beforeHome) sap.n.Apps[applid].beforeHome = new Array();\n\n        if (!sap.n.Apps[applid].beforeHome.length) sap.n.Apps[applid].beforeHome.push(func);\n    },\n\n    getTabKey: function (tabApplid, tabTitle, options) {\n        if (tabApplid === 'cockpit_doc_reader') return 'cockpit_doc_reader';\n\n        if (tabTitle) {\n            return tabApplid + '|' + tabTitle;\n        }\n\n        if (options && options.startParams && options.startParams.settings && options.startParams.settings.data && options.startParams.settings.data.id) {\n            return options.startParams.settings.data.id;\n        }\n\n        return tabApplid;\n\n    },\n\n    loadSidepanel: function (tabApplid, tabTitle, options) {\n        if (!options) options = {};\n\n        AppCacheUserActionSidepanel.setVisible(true);\n        AppCachePageSideTab.setVisible(true);\n\n        // Open Sidepanel\n        sap.n.Launchpad.sidepanelOpen(options);\n\n        // Check for existing\n        let tabCreated = false;\n        let tabKey = sap.n.Shell.getTabKey(tabApplid, tabTitle, options);\n\n        AppCachePageSideTab.getItems().forEach(function (tab) {\n            if (tab.getKey() === tabKey) {\n                AppCachePageSideTab.setSelectedItem(tab);\n                tabCreated = true;\n\n                if (tabKey === 'cockpit_doc_reader') {\n                    tab.setName(tabTitle);\n                    if (sap.n.Shell.sidepanelHelpFunction) sap.n.Shell.sidepanelHelpFunction();\n                }\n            }\n        });\n\n        // Add onClose Event \n        if (options.onClose) sap.n.Shell.sidepanelCloseEvents[tabKey] = options.onClose;\n\n        // Stop if tab exits\n        if (tabCreated) return;\n\n        let oTabContainerItem = new sap.m.TabContainerItem({\n            key: tabKey,\n            modified: false,\n            name: tabTitle\n        });\n\n        if (options.icon && oTabContainerItem.setIcon) oTabContainerItem.setIcon(options.icon);\n        if (options.additionaltext && oTabContainerItem.setAdditionalText) oTabContainerItem.setAdditionalText(options.additionaltext);\n\n        AppCachePageSideTab.addItem(oTabContainerItem);\n        AppCachePageSideTab.setSelectedItem(oTabContainerItem);\n\n        // Mark Open From \n        if (sap.n.Launchpad.currentTile && sap.n.Launchpad.currentTile.actionApplication) sap.n.Shell.openSidePanelApps[sap.n.Launchpad.currentTile.actionApplication] = true;\n\n        // Load Settings \n        options.parentObject = oTabContainerItem;\n\n        AppCache.Load(tabApplid, options);\n\n        // Trigger scrollTo\n        setTimeout(function () {\n            AppCachePageSideTab.setSelectedItem(oTabContainerItem);\n        }, 200);\n    },\n\n    closeSidepanelTab: function (tabKey) {\n        if (!tabKey) return;\n\n        AppCachePageSideTab.getItems().forEach(function (tab) {\n            if (tab.getKey() === tabKey) tab.destroy();\n        });\n\n        if (AppCachePageSideTab.getItems().length === 0) {\n            sap.n.Launchpad.sidepanelClose();\n        }\n    },\n\n    closeAllSidepanelTabs: function () {\n        const tabs = AppCachePageSideTab.getItems();\n        if (tabs.length > 0) {\n            tabs.forEach(function (tab) {\n                tab.destroy();\n            });\n\n            sap.n.Launchpad.sidepanelClose();\n        }\n    },\n\n    setSidepanelText: function (name, additionalText) {\n        let tabId = AppCachePageSideTab.getSelectedItem();\n\n        AppCachePageSideTab.getItems().forEach(function (tab) {\n            if (tab.sId === tabId) {\n                if (name) tab.setName(name);\n                if (additionalText) tab.setAdditionalText(additionalText);\n\n                let app = tab.getKey().split('|')[0];\n                tab.setKey(app + '|' + name);\n            }\n        });\n    },\n\n    getSidepanelText: function () {\n        let tabId = AppCachePageSideTab.getSelectedItem();\n        let data = {};\n\n        AppCachePageSideTab.getItems().forEach(function (tab) {\n            if (tab.sId === tabId) {\n                data.name = tab.getName();\n                data.additionalText = tab.getAdditionalText();\n            }\n        });\n\n        return data;\n    },\n\n    closeSidepanel: function (tabKey) {\n        sap.n.Launchpad.sidepanelClose();\n\n        // Destroy when closing Tile \n        if (tabKey) {\n            AppCachePageSideTab.getItems().forEach(function (tab) {\n                if (tab.getKey() === tabKey) tab.destroy();\n            });\n        }\n    },\n\n    openSidepanel: function (tabKey) {\n        sap.n.Launchpad.sidepanelOpen();\n    },\n\n    showGuided: function (data) {\n        let object = sap.ui.getCore().byId(sap.n.currentView.createId(data.FIELD_NAME));\n        popGuided.openBy(object)\n        popGuided.setTitle(data.STEP_TITLE);\n        docGuided.setText(data.STEP_DOC);\n    },\n\n    // Close Tile\n    closeTile: function (tileData) {\n        if (typeof tileData !== 'object' || !tileData.id) {\n            return;\n        }\n\n        location.hash = '';\n\n        // Destroy current App or URL\n        if (tileData.actionURL || tileData.actionWebApp) {\n            const iframe = querySelector(`#iFrame${tileData.id}`)\n            iframe.parentNode.removeChild(iframe);\n\n            // Navigate Back\n            if (sap.n.Launchpad.currentTile.id === tileData.id) {\n                AppCacheNav.back();\n                sap.n.Launchpad.currentTile = {};\n\n                if (tileData.sidepanelApp) sap.n.Shell.closeSidepanel(tileData.sidepanelApp);\n                if (sap.n.Launchpad.isMenuPage() && !sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(false);\n\n                AppCacheShellHelp.setVisible(false);\n                sap.n.Launchpad.setHideHeader(false);\n            }\n        } else {\n            // Custom beforeClose\n            let preventDefault = false;\n            let viewID;\n\n            if (sap.n.Apps[tileData.id] && sap.n.Apps[tileData.id].beforeClose) {\n                sap.n.Apps[tileData.id].beforeClose.forEach(function (eventFn) {\n                    let oEvent = new sap.ui.base.Event('beforeClose', new sap.ui.base.EventProvider());\n                    eventFn(oEvent);\n\n                    if (oEvent.bPreventDefault) preventDefault = true;\n                    oEvent = null;\n                });\n            }\n\n            // Default behaviour was avoided\n            if (preventDefault) return;\n\n            // Navigate Back\n            if (sap.n.Launchpad.currentTile.id === tileData.id) {\n                AppCacheNav.back();\n\n                if (typeof AppCache.StartApp === 'string' && AppCache.StartApp.trim().length > 0) {\n                    return;\n                }\n\n                sap.n.Launchpad.currentTile = {};\n\n                // Delete SidepanelApps\n                if (tileData.sidepanelApp) {\n                    sap.n.Shell.closeSidepanel(tileData.sidepanelApp);\n                    if (tileData.actionApplication) delete sap.n.Shell.openSidePanelApps[tileData.actionApplication];\n                }\n\n                if (sap.n.Launchpad.isMenuPage() && !sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(false);\n\n                AppCacheShellHelp.setVisible(false);\n                sap.n.Launchpad.setHideHeader(false);\n\n\n                // Fullscreen Handling\n                let cat = AppCacheNav.getCurrentPage().sId;\n                cat = cat.split('page')[1];\n\n                let dataCat = ModelData.FindFirst(AppCacheCategory, 'id', cat);\n\n                if (dataCat) {\n                    sap.n.Launchpad.MarkTopMenu(dataCat.id);\n                    AppCacheShellUI.setAppWidthLimited(!dataCat.enableFullScreen);\n                } else {\n                    let dataCatChild = ModelData.FindFirst(AppCacheCategoryChild, 'id', cat);\n                    if (!dataCatChild) {\n                        AppCache.Back();\n                    } else {\n                        sap.n.Launchpad.handleAppTitle(dataCatChild.title)\n                    }\n                }\n            }\n\n            // Clear View\n            if (AppCache.View[tileData.id]) {\n                viewID = AppCache.View[tileData.id].sId;\n                AppCache.View[tileData.id].destroy();\n                AppCache.View[tileData.id] = null;\n                delete AppCache.View[tileData.id];\n            }\n\n            // Clear All Events\n            delete sap.n.Apps[tileData.id];\n\n            if (viewID) sap.n.Shell.clearObjects(viewID);\n        }\n\n        // Close Active Button\n        const containerOpenApp = sap.ui.getCore().byId(`${nepPrefix()}OpenAppContainer${tileData.id}`);\n        if (containerOpenApp) {\n            openApps.removeItem(containerOpenApp);\n            containerOpenApp.destroy();\n            openAppMaster.setVisible(openApps.getItems().length > 0);\n        }\n\n        // reset launchpad content and navigator width, if all open apps have been closed\n        if (openApps.getItems().length === 0) {\n            setTimeout(() => {\n                sap.n.Layout.setHeaderPadding();\n            }, 100);\n        }\n\n        // Destroy Buttons\n        const btnByTileId = sap.ui.getCore().byId(`but${tileData.id}`);\n        if (btnByTileId) btnByTileId.destroy();\n\n        const btnTopByTileId = sap.ui.getCore().byId(`butTop${tileData.id}`);\n        if (btnTopByTileId) btnTopByTileId.destroy();\n\n        // SideBar \n        const items = blockRunningRow.getContent();\n        if (!items.length) closeContentNavigator();\n\n        // Close Objects Loaded into the App\n        AppCache.ViewChild[tileData.id] && AppCache.ViewChild[tileData.id].forEach(function (data) {\n            sap.n.Shell.clearObjects(data.sId);\n        });\n        delete AppCache.ViewChild[tileData.id];\n\n        sap.n.Launchpad.handleAppTitle(AppCache.launchpadTitle);\n        sap.n.Layout.setHeaderPadding();\n    },\n\n    closeAllTiles: function () {\n        // Close all Tiles - Clear memory\n        for (const k in AppCache.View) {\n            let tile = ModelData.FindFirst(AppCacheTiles, 'GUID', k);\n            if (tile && tile.GUID) sap.n.Shell.closeTile(tile);\n        }\n\n        // Close AppCache.Load Apps\n        for (const k in sap.n.Apps) {\n            if (AppCache.View[k]) {\n                AppCache.View[k].destroy();\n                AppCache.View[k] = null;\n                delete sap.n.Apps[k];\n            }\n        }\n\n        // Clear Pages\n        AppCacheNav.getPages().forEach(function (data) {\n            if (\n                ![\n                    'AppCachePageMenu', 'AppCachePageStore', 'AppCache_boxURL',\n                    'AppCache_boxLogon', 'AppCache_boxLogonCustom', 'AppCache_boxPassword',\n                    'AppCache_boxPasscode', 'AppCache_boxPasscodeEntry', 'AppCache_boxUsers'\n                ].includes(data.sId)\n            ) {\n                AppCacheNav.removePage(data.sId);\n                data.destroy();\n                data = null;\n            }\n        });\n\n        // Clear Views\n        AppCache.View = [];\n\n        // Extra memory cleanup\n        sap.n.Shell.clearAllObjects();\n\n        sap.n.Shell.closeSidepanel();\n\n        // Close Objects Loaded into the App\n        AppCache.ViewChild['undefined'] && AppCache.ViewChild['undefined'].forEach(function (data) {\n            sap.n.Shell.clearObjects(data.sId);\n        });\n\n        delete AppCache.ViewChild['undefined'];\n\n        blockRunningRow.destroyContent();\n        sap.n.Layout.clearAppCacheAppButtonItems();\n        openApps.removeAllItems();\n\n        AppCache.Home();\n    },\n\n    clearObjects: function (view) {\n        sap.ui.getCore().byFieldGroupId('').forEach(function (data) {\n            let id = data.getId().split('--');\n            if (id[0] === view) {\n                if (data.getDomRef()) data.getDomRef().remove();\n                data.destroy();\n                data = null;\n            }\n        });\n    },\n\n    listPattern: function (object) {\n        sap.ui.getCore().byFieldGroupId('').forEach(function (data) {\n            if (!includesJSView(data.getId()) && data.getId().indexOf(object) > -1) console.log(data.getId());\n        });\n    },\n\n    clearAllObjects: function () {\n        // JS Views \n        sap.ui.getCore().byFieldGroupId('').forEach(function (data) {\n            let id = data.getId().split('--');\n\n            if (includesJSView(id[0])) {\n                if (data.getDomRef()) data.getDomRef().remove();\n\n                try {\n                    if (typeof data.destroy === 'function') data.destroy();\n                } catch (e) {\n\n                }\n\n                data = null;\n            }\n        });\n\n        // Objects created by javascript\n        sap.ui.getCore().byFieldGroupId('').forEach(function (data) {\n            if (!includesJSView(data.getId()) && hasNepPrefix(data.getId())) {\n                if (data.getDomRef()) data.getDomRef().remove();\n\n                try {\n                    if (typeof data.destroy === 'function') data.destroy();\n                } catch (e) { }\n\n                data = null;\n            }\n        });\n    },\n\n    viewExists: function (view) {\n        let found = false;\n        sap.ui.getCore().byFieldGroupId('').forEach(function (data) {\n            let id = data.getId().split('--');\n            if (id[0] === view) found = true;\n        });\n        return found;\n    },\n\n    listObjects: function () {\n        sap.ui.getCore().byFieldGroupId('').forEach(function (data) {\n            let id = data.getId().split('--');\n            if (includesJSView(id[0])) console.log(data.getId());\n        });\n    },\n\n    openUrl: function (url, options) {\n        // Load Defaults\n        options = options || {};\n        LoadOptions = {};\n        LoadOptions.dialogHeight = options.dialogHeight || '90%';\n        LoadOptions.dialogWidth = options.dialogWidth || '1200px';\n        LoadOptions.dialogTitle = options.dialogTitle || '';\n        LoadOptions.dialogModal = options.dialogModal || false;\n        LoadOptions.webAppData = options.webAppData || null;\n\n        let contHeight = LoadOptions.dialogHeight;\n        let contWidth = LoadOptions.dialogWidth;\n        let diaTitle = LoadOptions.dialogTitle;\n        let screenWidth = window.innerWidth;\n\n        // Less Than 1200px\n        if (screenWidth < 1200) contWidth = (screenWidth * 0.8) + 'px';\n\n        // On Mobile\n        if (!sap.n.Launchpad.isDesktop()) {\n            contWidth = '100%';\n            contHeight = '100%';\n        }\n\n        // Create Dialog\n        let dia = new sap.n.Dialog({\n            contentWidth: contWidth,\n            contentHeight: contHeight,\n            type: 'Message',\n            resizable: !sap.n.Launchpad.isPhone(),\n            draggable: !sap.n.Launchpad.isPhone(),\n            stretchOnPhone: true,\n            title: diaTitle,\n            contentIsURL: true,\n            afterClose: function (oEvent) {\n                // Delete From Array\n                for (let i = 0; i < AppCache.Dialogs.length; i++) {\n                    if (AppCache.Dialogs[i] === this.getId()) {\n                        AppCache.Dialogs.splice(i, 1);\n                        break;\n                    }\n                }\n\n                if (AppCache.Dialogs.length === 0) {\n                    AppCacheShellDialog.setVisible(false);\n                }\n\n                this.destroyContent();\n                dia = null;\n            }\n        });\n\n        // Add Dialog to Array\n        AppCache.Dialogs.push(dia.getId());\n\n        if (LoadOptions.webAppData) {\n            let diaID = ModelData.genID();\n            dia.addContent(new sap.ui.core.HTML(nepId(), {\n                content: `<iframe id='diaFrame${diaID}' frameborder='0' height='100%' width='100%'></iframe>`,\n                visible: true,\n                sanitizeContent: false,\n                preferDOM: false,\n                afterRendering: function (oEvent) {\n                    let frame = document.getElementById('diaFrame' + diaID);\n                    frame.setAttribute('srcdoc', LoadOptions.webAppData);\n                }\n            }));\n        } else {\n            dia.addContent(new sap.ui.core.HTML(nepId(), {\n                content: `<iframe frameborder='0' height='100%' width='100%' src='${url}'></iframe>`,\n                visible: true,\n                sanitizeContent: false,\n                preferDOM: false\n            }));\n        }\n\n        dia.open();\n    }\n}","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":582},{"fieldNo":"ea309ade-922f-47e9-bae2-031b1f42b6f8","fieldName":"sap.n.Style","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"sap.n.Style = {\n    getLayoutCss: function (config) {\n        let layout = config.layout;\n\n        css = '<style>';\n        // Top Menu\n        if (layout.TOP_BACK_COLOR) {\n            css += `\n                .nepTopMenu {\n                    background: ${layout.TOP_BACK_COLOR};\n                }\n                .nepDialogWithObjHeader .sapContrastPlus.sapMOHR.sapMOHRBgTranslucent,\n                .sapContrastPlus .nepDialogWithObjHeader .sapMOHR.sapMOHRBgTranslucent,\n                .nepDialogSubObjHeader {\n                    background: ${layout.TOP_BACK_COLOR};\n                }\n                html.sap-desktop\n                    .nepDialogSubObjHeader\n                    .sapContrastPlus\n                    .sapMIBar.sapMFooter-CTX,\n                html.sap-desktop\n                    .nepDialogSubObjHeader\n                    .sapContrastPlus.sapMIBar.sapMFooter-CTX {\n                    border-top-color: ${layout.TOP_BACK_COLOR};\n                }\n                .nepDialogWithObjHeader.sapMDialog.sapMPopup-CTX > header .sapMHeader-CTX,\n                .nepDialogWithObjHeader.sapMDialog.sapMPopup-CTX > header .sapMSubHeader-CTX,\n                .nepDialogWithObjHeader .sapMITH {\n                    background-color: ${layout.TOP_BACK_COLOR};\n                }\n                .nepPopover.sapMDialog.sapMPopup-CTX > header .sapMHeader-CTX,\n                .nepPopover.sapMDialog.sapMPopup-CTX > header .sapMSubHeader-CTX,\n                .nepPopover :not(.sapMBtnDisabled) > .sapMBtnTransparent.sapMBtnActive,\n                .nepPopover :not(.sapMBtnDisabled):hover > .sapMBtnTransparent.sapMBtnActive,\n                .nepPopover :not(.sapMBtnDisabled) > .sapMBtnGhost.sapMBtnActive,\n                .nepPopover :not(.sapMBtnDisabled):hover > .sapMBtnGhost.sapMBtnActive {\n                    background-color: ${layout.TOP_BACK_COLOR};\n                    border-color: ${layout.TOP_BACK_COLOR};\n                }\n            `;\n        }\n\n        if (layout.TOP_ACT_COLOR) {\n            /**\n             * 1. Active Top Menu\n             * 2. Hover normal Top Menu\n             * 3. Sub Menu\n             */\n            css += `\n                .nepDialogWithObjHeader .sapMITBSelected>.sapMITBContentArrow,\n                .nepTopMenuActive.sapMBtn, \n                .nepTopMenuBtn.sapMBtn:hover {\n                    border-bottom: 4px solid ${layout.TOP_ACT_COLOR};\n                }\n                .nepSubMenu.sapMPopover,\n                .nepOverflowMenu.nepPopover.sapMPopover {\n                    border-top: 4px solid ${layout.TOP_ACT_COLOR};\n                }\n            `;\n        }\n\n        if (layout.TOP_BOR_COLOR) {\n            css += `\n                .nepTopMenu {\n                    border-bottom: 1px solid ${layout.TOP_BOR_COLOR};\n                }\n                .nepDialogWithObjHeader .sapMITH {\n                    border-bottom: 2px solid ${layout.TOP_BOR_COLOR};\n                }\n            `;\n        }\n\n        if (layout.TOP_TXT_COLOR) {\n            css += `\n                .nepTopMenu :not(.sapMBtnDisabled) .sapMBtnTransparent > .sapMBtnIcon {\n                    color: ${layout.TOP_TXT_COLOR};\n                }\n                .nepTopMenu span.sapMBtnInner,\n                .nepDialogWithObjHeader\n                    .sapMITBTextOnly\n                    .sapMITBFilterDefault.sapMITBSelected\n                    > .sapMITBText,\n                .nepDialogWithObjHeader .sapMITBTextOnly .sapMITBFilterDefault > .sapMITBText {\n                    color: ${layout.TOP_TXT_COLOR};\n                    text-shadow: none;\n                }\n                .nepTopMenu .sapMTBSeparator {\n                    background: ${layout.TOP_TXT_COLOR};\n                }\n                .nepDialogWithObjHeader .sapMOHRTitle h1,\n                .nepDialogWithObjHeader .sapMOHRIntro .sapMText,\n                .nepDialogWithObjHeader .sapMOHRIcon .sapUiIcon,\n                .nepDialogWithObjHeader .sapMBtnIcon,\n                .nepDialogSubObjHeader .sapMText {\n                    color: ${layout.TOP_TXT_COLOR};\n                    text-shadow: none;\n                }\n                .nepDialogWithObjHeader\n                    :not(.sapMBtnDisabled)\n                    > .sapMBtnInner.sapMBtnActive\n                    .sapMBtnIcon {\n                    color: ${layout.TOP_TXT_COLOR};\n                    text-shadow: none;\n                }\n                .nepPopover .sapMBtnIcon {\n                    color: ${layout.TOP_TXT_COLOR};\n                    text-shadow: none;\n                }\n            `;\n        }\n\n        if (layout.TOP_MENU_COLOR) {\n            css += `\n                .nepListMenu .sapMSLITitleOnly,\n                .nepListMenu .sapMSLIImgIcon {\n                    color: ${layout.TOP_MENU_COLOR};\n                }\n                .nepListSetting .sapMLIBHoverable:hover {\n                    background: transparent;\n                    border: 1px solid ${layout.TOP_MENU_COLOR};\n                }\n                .nepUserActionText.sapMText {\n                    color: ${layout.TOP_MENU_COLOR};\n                }\n            `;\n        }\n        \n        if (layout.TOP_HOV_COLOR) {\n            css += `\n                .nepTopMenu span.sapMBtnInner:hover,\n                .nepTopMenu .sapMBtnCustomIcon:hover,\n                .nepTopMenu .nepTopMenuActive span.sapMBtnInner:hover,\n                .nepTopMenu .nepTopMenuActiveHover span.sapMBtnInner,\n                .nepTopMenu :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n                .nepPopover .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n                .nepPopover .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n                .nepPopover :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n                .nepTopMenu .sapMBtn:hover > .sapMBtnTransparent.sapMBtnHoverable:not(.sapMBtnActive):not(.sapMToggleBtnPressed),\n                .nepTopMenu .sapMIBar-CTX .sapMBtn:hover > .sapMBtnTransparent.sapMBtnHoverable:not(.sapMBtnActive):not(.sapMToggleBtnPressed),\n                .nepTopMenu .sapMBtn:hover:not(.sapMBtnDisabled) > .sapMBtnHoverable.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed) > .sapMBtnIcon,\n                .nepTopMenu *.sapMBtn:hover:not(.sapMBtnDisabled) > span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed) > .sapMBtnIcon,\n                .nepTopMenu :not(.sapMBtnDisabled):not(.sapMSBActive) > span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed):hover > .sapMBtnIcon,\n                .nepTopMenu .sapMBtn:hover > .sapMBtnHoverable {\n                    color: ${layout.TOP_HOV_COLOR};\n                }\n            `;\n        }\n\n        if (layout.TOP_HOV_BACK) {\n            css += `\n                .nepTopMenu span.sapMBtnInner:hover,\n                .nepTopMenu .sapMBtnCustomIcon:hover,\n                .nepTopMenu .nepTopMenuActive span.sapMBtnInner:hover,\n                .nepTopMenu .sapMBtn:hover > .sapMBtnHoverable,\n                .nepTopMenu :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n                .nepTopMenu .nepTopMenuActive span.sapMBtnInner:hover,\n                .nepPopover .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n                .nepPopover .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n                .nepTopMenu .sapMBtn:hover > .sapMBtnHoverable,\n                .nepTopMenu :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive,\n                .nepTopMenu :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n                .nepTopMenu .sapMBtn:hover > .sapMBtnTransparent.sapMBtnHoverable:not(.sapMBtnActive):not(.sapMToggleBtnPressed),\n                .nepTopMenu .sapMIBar-CTX .sapMBtn:hover > .sapMBtnTransparent.sapMBtnHoverable:not(.sapMBtnActive):not(.sapMToggleBtnPressed),\n                .nepTopMenu .sapMBtn:hover:not(.sapMBtnDisabled) > .sapMBtnHoverable.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed) > .sapMBtnIcon,\n                .nepTopMenu *.sapMBtn:hover:not(.sapMBtnDisabled) > span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed) > .sapMBtnIcon,\n                .nepTopMenu :not(.sapMBtnDisabled):not(.sapMSBActive) > span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed):hover > .sapMBtnIcon,\n                .nepTopMenu .nepTopMenuActiveHover span.sapMBtnInner {\n                    background-color: ${layout.TOP_HOV_BACK};\n                    border-color: ${layout.TOP_HOV_BACK};\n                }\n            `;\n        }\n        \n        if (layout.TOP_NOTIF_BACK) {\n            css += `\n                .nepTopMenu .nepNotificationButton span.sapMBtnInner,\n                .nepTopMenu .nepNotificationButton.sapMBtn:hover > .sapMBtnHoverable {\n                    background-color: ${layout.TOP_NOTIF_BACK};\n                    border-color: ${layout.TOP_NOTIF_BACK};\n                }\n            `;\n        }\n\n        if (layout.TOP_NOTIF_COLOR) {\n            css += `\n                .nepTopMenu .nepNotificationButton span.sapMBtnInner {\n                    color: ${layout.TOP_NOTIF_COLOR};\n                }\n                .nepTopMenu .nepNotificationButton span.sapMBtnInner:hover {\n                    color: ${layout.TOP_NOTIF_COLOR};\n                }\n                .nepTopMenu .nepNotificationButton.sapMBtn:hover > .sapMBtnHoverable,\n                .nepTopMenu :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive {\n                    color: ${layout.TOP_NOTIF_COLOR};\n                }\n            `;\n        } else {\n            css += `\n                .nepTopMenu .nepNotificationButton span.sapMBtnInner {\n                    color: ${layout.TOP_TXT_COLOR};\n                }\n                .nepTopMenu .nepNotificationButton.sapMBtn:hover > .sapMBtnHoverable,\n                .nepTopMenu :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive {\n                    color: ${layout.TOP_TXT_COLOR};\n                }\n            `;\n        }\n\n        // Left Sidebar\n        if (layout.SIDE_BACK_COLOR) css += `.nepNavBar { background: ${layout.SIDE_BACK_COLOR}; }`;\n        if (layout.SIDE_BOR_COLOR) css += `.nepNavBarContent { border-right: 1px solid ${layout.SIDE_BOR_COLOR}; }`;\n        if (layout.SIDE_ACT_COLOR) css += `.nepIconActive { border-left: 4px solid ${layout.SIDE_ACT_COLOR} !important; }`;\n        if (layout.SIDE_ACT_COLOR) css += `\n            html[dir=\"rtl\"] .nepIconActive {\n                border-left: none !important;\n                border-right: 4px solid ${layout.SIDE_ACT_COLOR} !important;\n            }\n        `;\n\n        // Shell\n        if (layout.SHELL_BACK_COLOR) css += `.nepShell { background: ${layout.SHELL_BACK_COLOR} !important; }`;\n\n        // Page\n        if (layout.PAGE_BACK_COLOR) css += `.nepPage { background: ${layout.PAGE_BACK_COLOR}; }`;\n        else css += '.nepPage { background: #fff; }';\n\n        if (layout.PAGE_BACK_IMAGE) {\n            let imageUrl = mediaUrl + layout.PAGE_BACK_IMAGE;\n            if (isMobile || isHCP) imageUrl = imageData[layout.PAGE_BACK_IMAGE] || imageUrl;\n\n            css += `\n                nepShell .sapMShellBG.sapUiGlobalBackgroundImage {\n                    background: inherit;\n                    background-image: url('${imageUrl}');\n                    background-repeat: no-repeat;\n                    background-size: cover;\n                }\n            `;\n        } else {\n            css += '.nepShell .sapMShellBG.sapUiGlobalBackgroundImage { background: inherit; background-image: none; }';\n        }\n\n        // Tile Group\n        if (layout.HEAD_COLOR) css += `.nepCatPanel { background-color: ${layout.HEAD_COLOR}; }`;\n\n        let borderWidth = layout.HEAD_BORDER_WDT || '3px';\n        if (layout.HEAD_BORDER_CLR) css += `.nepCatPanel { border-bottom: ${borderWidth} solid ${layout.HEAD_BORDER_CLR}; }`;\n\n        if (layout.TITLE_COLOR) {\n            css += `\n                .nepCatTitle.sapMTitle {\n                    color: ${layout.TITLE_COLOR};\n                }\n                .nepCatFavBtn:not(.sapMBtnDisabled) .sapMBtnTransparent > .sapMBtnIcon,\n                .nepCatFavBtn:not(.sapMBtnDisabled) .sapMBtnGhost > .sapMBtnIcon {\n                    color: ${layout.TITLE_COLOR};\n                    text-shadow: none;\n                }\n            `;\n        }\n        \n        if (layout.SUBTITLE_COLOR) css += `.nepCatSubTitle.sapMTitle { color: ${layout.SUBTITLE_COLOR}; }`;\n\n        // Tiles\n        if (layout.TILE_BACK_COLOR) css += `.nepTile { background-color: ${layout.TILE_BACK_COLOR}; }`;\n\n        // Sub Menu Background Color\n        if (layout.NAV_BACK_COLOR) {\n            css += `\n                .nepOverflowMenu.sapMPopover .sapMPopoverCont {\n                    background-color: ${layout.NAV_BACK_COLOR};\n                }\n                .nepOverflowMenu .sapMLIB {\n                    background: transparent;\n                }\n            `;\n        }\n\n        // Sub Menu Text Color\n        if (layout.NAV_TXT_COLOR) {\n            css += `\n                .nepPopover .nepOpenAppsBtn .sapMBtnIcon,\n                .nepOpenAppsBtn .sapMBtnInner,\n                .nepOverflowMenu .nepOpenAppsBtn .sapMBtnInner,\n                .nepOpenAppsClose.sapUiIcon,\n                .nepOverflowMenu .sapMBtnInner,\n                .nepOverflowMenu .sapMSTIIcon,\n                .nepOverflowMenu .nepTreeCategory .sapMTreeItemBaseExpander,\n                .nepOverflowMenu .sapMTreeItemBase {\n                    color: ${layout.NAV_TXT_COLOR};\n                    text-shadow: none;\n                }\n            `;\n        }\n\n        // Sub Menu Text Hover Color\n        if (layout.NAV_HOV_COLOR) css += `.nepOverflowMenu .sapMBtn:hover > .sapMBtnHoverable { color: ${layout.NAV_HOV_COLOR}; }`;\n\n        // Tile Button\n        css += sap.nep.Style.getTileButtonCss({ layout });\n\n        // Scrollbar\n        if (layout.SCROLL_COLOR) css += `\n            html.sap-desktop ::-webkit-scrollbar-thumb {\n                background-color: ${layout.SCROLL_COLOR};\n            }\n            html.sap-desktop ::-webkit-scrollbar-thumb:hover {\n                background-color: ${layout.SCROLL_COLOR};\n            }\n\n        `;\n\n        if (layout.SCROLL_WIDTH) css += `\n            html.sap-desktop ::-webkit-scrollbar {\n                width: ${layout.SCROLL_WIDTH} !important;\n                height: ${layout.SCROLL_WIDTH} !important;\n            }\n        `;\n\n        // Mobile\n        if (layout.MOB_TITLE_COL) css += `.nepMobileTitle.sapMTitle { color: ${layout.MOB_TITLE_COL}; text-shadow: none; }`;\n        if (layout.MOB_LABEL_COL) css += `.nepMobileLabel { color: ${layout.MOB_LABEL_COL}; text-shadow: none; }`;\n        if (layout.MOB_BUT_COL) css += `.nepMobileButton .sapMBtnInner { color: ${layout.MOB_BUT_COL} !important; text-shadow: none !important; }`;\n        if (layout.MOB_BUT_BACK) {\n            css += `\n                .nepMobileButton .sapMBtnInner {\n                    background: ${layout.MOB_BUT_BACK} !important;\n                    border-color: ${layout.MOB_BUT_BACK} !important;\n                }\n                .numPad .sapMBtnInner {\n                    background: ${layout.MOB_BUT_BACK};\n                }\n                #boxNumpadPanel .sapMCbBg {\n                    background: ${layout.MOB_BUT_BACK};\n                    opacity: 0.325;\n                }\n                #boxNumpadPanel .sapMCbBg.sapMCbMarkChecked {\n                    background: ${layout.MOB_BUT_BACK};\n                    opacity: 1;\n                }\n            `;\n        }\n\n        // Custom CSS\n        if (layout.CUSTOM_CSS) css += layout.CUSTOM_CSS.replace(/\\n|\\r\\n|\\r/g, '');\n        css += '</style>';\n\n        return { css };\n    },\n\n    getTileButtonCss: function (config) {\n        return '';\n    }\n};","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":583},{"fieldNo":"2b08c61a-a00f-4ce4-dec2-8cb0c7a169e3","fieldName":"sap.n.Utils","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"sap.n.Utils = {\n    message: function (config) {\n        let title = config.title || 'Message';\n        let intro = config.intro || '';\n        let text1 = config.text1 || '';\n        let text2 = config.text2 || '';\n        let text3 = config.text3 || '';\n        let icon = config.icon || '';\n\n        objHeaderMessage.setTitle(title);\n        objHeaderMessage.setIntro(intro);\n        txtMessage1.setText(text1);\n        txtMessage2.setText(text2);\n        txtMessage3.setText(text3);\n        acceptMessage.setText(config.acceptText);\n        declineMessage.setText(config.declineText);\n\n        txtMessage1.setVisible(!!text1);\n        txtMessage2.setVisible(!!text2);\n        txtMessage3.setVisible(!!text3);\n\n        if (config.acceptText) {\n            diaMessage.setBeginButton(acceptMessage);\n        }\n        \n        if (config.declineText) {\n            diaMessage.setEndButton(declineMessage);\n        }\n\n        switch (config.state) {\n            case 'Error':\n                objHeaderMessage.setIcon('sap-icon://fa-solid/exclamation-circle');\n                objHeaderMessage.addStyleClass('nepStateError');\n                break;\n\n            case 'Warning':\n                objHeaderMessage.setIcon('sap-icon://fa-solid/exclamation-circle');\n                objHeaderMessage.addStyleClass('nepStateWarning');\n                break;\n\n            case 'Success':\n                objHeaderMessage.setIcon('sap-icon://fa-solid/info-circle');\n                objHeaderMessage.addStyleClass('nepStateSuccess');\n                break;\n\n            default:\n                objHeaderMessage.setIcon('sap-icon://fa-solid/info-circle');\n                break;\n        }\n\n        if (icon) {\n            objHeaderMessage.setIcon(icon);\n        }\n\n        diaMessage.onClose = config.onClose || function () { };\n        diaMessage.onAccept = config.onAccept || function () { };\n        diaMessage.onDecline = config.onDecline || function () { };\n        diaMessage.open();\n    },\n\n    setLogonScreen: function () {\n        AppCache_butLogon.setVisible(true);\n        AppCache_inUsername.setVisible(false);\n        AppCache_inPassword.setVisible(false);\n        AppCache_inRememberMe.setVisible(false);\n        AppCache_inShowPass.setVisible(false);\n\n        AppCache_inUsername.setValueState();\n        AppCache_inPassword.setValueState();\n\n        let logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\n        switch (logonData.type) {\n            case 'azure-bearer':\n            case 'openid-connect':\n            case 'saml':\n                AppCache_inUsername.setVisible(false);\n                AppCache_inPassword.setVisible(false);\n                break;\n\n            case 'ldap':\n                AppCache_inUsername.setVisible(true);\n                AppCache_inPassword.setVisible(true);\n                AppCache_inShowPass.setVisible(true);\n                break;\n\n            // Local \n            case 'local':\n            case 'sap':\n                if (!AppCache.enablePasscode) AppCache_inRememberMe.setVisible(true);\n                AppCache_inUsername.setVisible(true);\n                AppCache_inPassword.setVisible(true);\n                AppCache_inShowPass.setVisible(true);\n                break;\n        }\n    }\n}","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":584},{"fieldNo":"089c81af-0a55-4a1b-c874-bac012ced5a9","fieldName":"sap.n.Webauthn","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"sap.n.Webauthn = {\r\n    register: function (userinfo) {\r\n        return new Promise(function (resolve) {\r\n            let challenge = new Uint8Array(16);\r\n            let userid = new Uint8Array(16);\r\n            let publicKeyCredentialOptions = {\r\n                challenge: window.crypto.getRandomValues(challenge),\r\n                rp: {\r\n                    name: 'Neptune DX Platform',\r\n                    id: location.hostname\r\n                },\r\n                user: {\r\n                    id: window.crypto.getRandomValues(userid),\r\n                    name: userinfo.username,\r\n                    displayName: userinfo.name,\r\n                },\r\n                pubKeyCredParams: [\r\n                    { 'type': 'public-key', 'alg': -7 },\r\n                    { 'type': 'public-key', 'alg': -35 },\r\n                    { 'type': 'public-key', 'alg': -36 },\r\n                    { 'type': 'public-key', 'alg': -257 },\r\n                    { 'type': 'public-key', 'alg': -258 },\r\n                    { 'type': 'public-key', 'alg': -259 },\r\n                    { 'type': 'public-key', 'alg': -37 },\r\n                    { 'type': 'public-key', 'alg': -38 },\r\n                    { 'type': 'public-key', 'alg': -39 },\r\n                    { 'type': 'public-key', 'alg': -8 }],\r\n                authenticatorSelection: {\r\n                    requireResidentKey: false,\r\n                    userVerification: 'discouraged',\r\n                },\r\n                transports: ['usb', 'ble', 'nfc'],\r\n                timeout: 60000,\r\n                attestation: 'none',\r\n                extensions: {\r\n                    auth: userinfo.auth\r\n                }\r\n            };\r\n\r\n            // Create User\r\n            navigator.credentials.create({\r\n                publicKey: publicKeyCredentialOptions\r\n            }).then(function (credential) {\r\n                let decodedAttestationObject = CBOR.decode(credential.response.attestationObject);\r\n                let { authData } = decodedAttestationObject;\r\n                let dataView = new DataView(new ArrayBuffer(2));\r\n                let idLenBytes = authData.slice(53, 55);\r\n\r\n                idLenBytes.forEach((value, index) => dataView.setUint8(index, value));\r\n                let credentialIdLength = dataView.getUint16();\r\n                let credentialId = authData.slice(55, 55 + credentialIdLength);\r\n\r\n                resolve(sap.n.Webauthn.bufferEncode(credentialId));\r\n\r\n            }).catch(function (e) {\r\n                appCacheLog(e);\r\n                resolve('ERROR');\r\n            });\r\n        });\r\n    },\r\n\r\n    login: function (userId) {\r\n        return new Promise(function (resolve) {\r\n            const challenge = new Uint8Array(16);\r\n            const publicKeyCredentialOptions = {\r\n                challenge: window.crypto.getRandomValues(challenge),\r\n                allowCredentials: [{\r\n                    id: sap.n.Webauthn.bufferDecode(userId),\r\n                    type: 'public-key',\r\n                }],\r\n                userVerification: 'discouraged',\r\n                rpId: location.hostname,\r\n                timeout: 60000\r\n            };\r\n\r\n            // Get User\r\n            navigator.credentials.get({\r\n                publicKey: publicKeyCredentialOptions\r\n            })\r\n            .then(resolve)\r\n            .catch(function (e) {\r\n                appCacheLog(e);\r\n                resolve(e);\r\n            });\r\n        });\r\n    },\r\n\r\n    string2buffer: function (str) {\r\n        return (new Uint8Array(str.length)).map(function (x, i) {\r\n            return str.charCodeAt(i)\r\n        });\r\n    },\r\n\r\n    bufferEncode: function (value) {\r\n        return sap.n.Webauthn.fromByteArray(value);\r\n    },\r\n\r\n    bufferDecode: function (value) {\r\n        return Uint8Array.from(atob(value), c => c.charCodeAt(0));\r\n    },\r\n\r\n    buffer2string: function (buf) {\r\n        let str = '';\r\n        if (!(buf.constructor === Uint8Array)) buf = new Uint8Array(buf);\r\n        buf.map(function (x) {\r\n            return str += String.fromCharCode(x)\r\n        });\r\n        return str;\r\n    },\r\n\r\n    fromByteArray: function (uint8) {\r\n        let lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/-';\r\n        let i;\r\n        let extraBytes = uint8.length % 3;\r\n        let output = '';\r\n        let temp, length;\r\n\r\n        function encode(num) {\r\n            return lookup.charAt(num);\r\n        }\r\n\r\n        function tripletToBase64(num) {\r\n            return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\r\n        }\r\n\r\n        for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\r\n            temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\r\n            output += tripletToBase64(temp)\r\n        }\r\n\r\n        switch (extraBytes) {\r\n            case 1:\r\n                temp = uint8[uint8.length - 1];\r\n                output += encode(temp >> 2);\r\n                output += encode((temp << 4) & 0x3F);\r\n                output += '==';\r\n                break;\r\n            case 2:\r\n                temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1]);\r\n                output += encode(temp >> 10);\r\n                output += encode((temp >> 4) & 0x3F);\r\n                output += encode((temp << 2) & 0x3F);\r\n                output += '=';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return output;\r\n    }\r\n}","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":585},{"fieldNo":"555f5a27-476c-4fcb-c778-0922751cf7a2","fieldName":"AppCache","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"// AppCache Variables\nlet AppCache = {\n    // Common  \n    Initialized: false,\n    userInfo: '',\n    CurrentUser: '',\n    CurrentApp: '',\n    CurrentConfig: '',\n    SystemConfig: {\n        role: '',\n        disableLaunchpadChpass: false,\n    },\n    DelayOnRefreshingToken: {\n        AppInTile: 50,\n        AdaptiveApps: 50,\n        SetUserInfo: 5,\n    },\n    View: [],\n    ViewChild: [],\n    Dialogs: [],\n    isOffline: false,\n    isHCP: false,\n    isRestricted: true,\n    hcpDestination: '',\n    StartApp: '',\n    useMenu: true,\n    Url: '',\n    CustomLogo: '',\n    LoadOptions: {},\n    diaView: '',\n    loadQueue: new Array(),\n    loadRunning: false,\n    enablePush: false,\n    enableTrace: false,\n    enableLogging: false,\n    enableAutoLogin: false,\n    showTFAError: false,\n    hideSidemenu: false,\n    logoutUrl: '',\n    defaultTheme: 'sap_fiori_3',\n    launchpadTitle: '',\n    launchpadID: '',\n    timerLock: 0,\n    isPublic: false,\n    limitWidth: false,\n    pushSenderId: '',\n    hideTopHeader: false,\n    hideGlobalAjaxError: false,\n    setupResetHandler: false,\n    sapCAICustomData: {},\n    cssGridBreakpoints: {\n        xxxlarge: 2360,\n        xxlarge: 1880,\n        xlarge: 1580,\n        large: 1280,\n        medium: 980,\n        small: 680,\n        xsmall: 380\n    },\n\n    // Mobile \n    mobileClient: '',\n    isMobile: false,\n    enablePasscode: false,\n    biometricAuthentication: false,\n    passcodeLength: 4,\n    numPasscode: 5,\n    Encrypted: '',\n    loginApp: '',\n    samlData: false,\n    inBackground: false,\n\n    loadLibrary: function (url) {\n        return new Promise(function (resolve) {\n            request({\n                type: 'GET',\n                url: url,\n                success: function (data) {\n                    resolve('OK');\n                },\n                error: function (jqXHR, textStatus, errorThrown) {\n                    resolve('ERROR');\n                },\n                dataType: 'script',\n                cache: true\n            });\n        });\n    },\n\n    _loadQueue: function () {\n        if (refreshingAuth) {\n            setTimeout(() => {\n                this._loadQueue();\n            }, 10);\n            return;\n        }\n\n        this.loadRunning = false;\n\n        let appData = this.loadQueue[0];\n        if (appData) {\n            this.loadQueue.splice(0, 1);\n            this.Load(appData.APPLID, appData.OPTIONS);\n        }\n    },\n\n    //  AppCache Methods\n    Load: function (value, options) {\n        appCacheLog(`AppCache.load: APPLID=${value}`);\n\n        // Check Queue - Put in queue of working\n        if (this.loadRunning) {\n            let appData = {\n                'APPLID': value,\n                'OPTIONS': options || {}\n            };\n            this.loadQueue.push(appData);\n            return;\n        }\n\n        this.loadRunning = true;\n\n        // Format ID\n        let applid = value.replace(/\\//g, '');\n\n        // Set Current App\n        AppCache.CurrentApp = value;\n\n        // Load Defaults\n        options = options || {};\n\n        AppCache.LoadOptions = {\n            dialogShow: options.dialogShow || false,\n            dialogHeight: options.dialogHeight || '90%',\n            dialogWidth: options.dialogWidth || '1200px',\n            dialogTitle: options.dialogTitle || '',\n            dialogIcon: options.dialogIcon || '',\n            dialogModal: options.dialogModal || false,\n            dialogHideMinimize: options.dialogHideMinimize || false,\n            dialogHideMosaic: options.dialogHideMosaic || false,\n            dialogHideMaximize: options.dialogHideMaximize || false,\n            onDialogClose: options.onDialogClose || function () { },\n            load: options.load || '',\n            parentObject: options.parentObject || '',\n            appGUID: options.appGUID || '',\n            appPath: options.appPath || '',\n            appAuth: options.appAuth || '',\n            appType: options.appType || '',\n            startParams: options.startParams || '',\n            openFullscreen: options.openFullscreen || false,\n            rootDir: options.rootDir || '',\n            sapICFNode: options.sapICFNode || '',\n            defaultLanguage: options.defaultLanguage || \"en\",\n        }\n\n        // Check for AppCache.Load when Remote System\n        if (!AppCache.LoadOptions.appPath && (sap.n.Launchpad.currentTile && sap.n.Launchpad.currentTile.urlApplication)) {\n            AppCache.LoadOptions.appPath = sap.n.Launchpad.currentTile.urlApplication;\n            AppCache.LoadOptions.appType = sap.n.Launchpad.currentTile.urlType;\n            AppCache.LoadOptions.appAuth = sap.n.Launchpad.currentTile.urlAuth;\n        }\n\n        // Busyindicator Handling\n        if (AppCache.LoadOptions.parentObject) {\n            if (typeof AppCache.LoadOptions.parentObject.setBusy === 'function') {\n                AppCache.LoadOptions.parentObject.setBusy(true);\n            }\n        }\n\n        // Get App from Memory\n        if (!AppCache.LoadOptions.dialogShow) {\n            if (AppCache.LoadOptions.appGUID) {\n                if (AppCache.View[AppCache.LoadOptions.appGUID]) {\n                    AppCache.buildView(value);\n                    return;\n                }\n            } else {\n                if (AppCache.View[applid]) {\n                    AppCache.buildView(value);\n                    return;\n                }\n            }\n        }\n\n        if (AppCache.userInfo.language && AppCache.userInfo.language !== 'en') {\n            AppCache.LoadOptions.defaultLanguage = AppCache.userInfo.language;\n        }\n\n        // Get App from DB/LS if exist in repository\n        let app = ModelData.FindFirst(AppCacheData, ['application', 'language', 'appPath'], [value.toUpperCase(), AppCache.userInfo.language, AppCache.LoadOptions.appPath]);\n        if (app) {\n            if (AppCache.isOffline || !app.invalid) {\n                let viewName = 'app:' + value + ':' + AppCache.userInfo.language + ':' + AppCache.LoadOptions.appPath;\n                if (typeof p9Database !== 'undefined' && p9Database !== null) {\n                    p9GetView(viewName.toUpperCase()).then(function (viewData) {\n                        if (viewData.length > 2) {\n                            AppCache.initView(value, viewData);\n                        } else {\n                            AppCache.getView(value);\n                        }\n                    });\n                } else {\n                    let data = sapStorageGet(viewName.toUpperCase());\n                    if (data) {\n                        AppCache.initView(value, data);\n                    } else {\n                        AppCache.getView(value);\n                    }\n                }\n            } else {\n                AppCache.getView(value);\n            }\n        } else {\n            AppCache.getView(value);\n        }\n\n    },\n\n    LoadAdaptive: function (id, options) {\n        if (!refreshingAuth) {\n            AppCache.LoadAdaptiveApp(id, options);\n            return;\n        }\n\n        setTimeout(() => {\n            AppCache.LoadAdaptive(id, options);\n        }, AppCache.DelayOnRefreshingToken.AdaptiveApps);\n    },\n\n    LoadAdaptiveApp: function (id, options) {\n        if (!options) options = {};\n\n        sap.n.Adaptive.getConfig(id).then(function (config) {\n            // Exists ? \n            if (!config) {\n                sap.m.MessageToast.show(AppCache_tAdaptiveNotFound.getText());\n                return;\n            }\n\n            // Merge from Options\n            if (options && options.startParams) {\n                if (options.startParams.data) config.settings.data = options.startParams.data;\n                if (options.startParams.navigation) config.settings.navigation = options.startParams.navigation;\n                if (options.startParams.events) config.settings.events = options.startParams.events;\n            }\n\n            AppCache.Load(config.application, {\n                appGUID: ModelData.genID(),\n                startParams: config,\n                dialogShow: options.dialogShow || false,\n                dialogHeight: options.dialogHeight || '90%',\n                dialogWidth: options.dialogWidth || '1200px',\n                dialogTitle: options.dialogTitle || '',\n                dialogIcon: options.dialogIcon || '',\n                dialogModal: options.dialogModal || false,\n                dialogHideMinimize: options.dialogHideMinimize || false,\n                dialogHideMosaic: options.dialogHideMosaic || false,\n                dialogHideMaximize: options.dialogHideMaximize || false,\n                load: options.load || '',\n                parentObject: options.parentObject || '',\n                appPath: options.appPath || '',\n                appAuth: options.appAuth || '',\n                appType: options.appType || '',\n                openFullscreen: options.openFullscreen || false,\n                rootDir: options.rootDir || '',\n                sapICFNode: options.sapICFNode || ''\n            });\n        });\n    },\n\n    LoadAdaptiveSidepanel: function (id, title, options) {\n        if (!options) options = {};\n        sap.n.Adaptive.getConfig(id).then(function (config) {\n            // Exists ? \n            if (!config) {\n                sap.m.MessageToast.show(AppCache_tAdaptiveNotFound.getText());\n                return;\n            }\n\n            // Merge from Options\n            if (options && options.startParams) {\n                if (options.startParams.data) config.settings.data = options.startParams.data;\n                if (options.startParams.navigation) config.settings.navigation = options.startParams.navigation;\n                if (options.startParams.events) config.settings.events = options.startParams.events;\n            }\n\n            sap.n.Shell.loadSidepanel(config.application, title, {\n                appGUID: ModelData.genID(),\n                icon: options.icon || '',\n                additionaltext: options.additionaltext || '',\n                startParams: config,\n            });\n        });\n    },\n\n    LoadWebApp: function (value, options) {\n        let dataTile = {\n            actionWebApp: value,\n            openFullscreen: true,\n        };\n\n        let dataCat = {};\n        let viewName = 'webapp:' + value + ':' + dataTile.urlApplication;\n        let webApp = ModelData.FindFirst(AppCacheData, ['application', 'appPath'], [dataTile.actionWebApp, dataTile.urlApplication]);\n\n        if (webApp) {\n            // Get App from Memory\n            if (AppCache.View[viewName]) {\n                AppCache.buildWebApp(dataTile, null, dataCat);\n                return;\n            }\n\n            // Get App from Cache\n            if (typeof p9Database !== 'undefined' && p9Database !== null) {\n                p9GetView(viewName).then(function (viewData) {\n                    if (viewData.length > 10 && !webApp.invalid) {\n                        AppCache.buildWebApp(dataTile, viewData, dataCat);\n                    } else {\n                        AppCache.getWebApp(dataTile, dataCat);\n                    }\n                });\n            } else {\n                let data = sapStorageGet(viewName);\n                if (data && !webApp.invalid) {\n                    AppCache.buildWebApp(dataTile, data, dataCat);\n                } else {\n                    AppCache.getWebApp(dataTile, dataCat);\n                }\n            }\n        } else {\n            AppCache.getWebApp(dataTile, dataCat);\n        }\n    },\n\n    // AppCache Methods\n    restrictedEnable: function () {\n        // Objects\n        AppCacheShellUser.setText();\n        AppCacheShellBack.setVisible(false);\n        AppCacheUserActionSettings.setVisible(false);\n        AppCacheShellMenu.setVisible(false);\n        AppCacheShellHelp.setVisible(false);\n        AppCacheUserActionPassword.setVisible(false);\n        launchpadContentMenu.setWidth('0px');\n        sap.n.Shell.closeSidepanel();\n        sap.n.Shell.closeAllSidepanelTabs();\n        sap.n.Launchpad.setLaunchpadContentWidth();\n\n        sap.n.Shell.closeAllSidepanelTabs();\n        sap.n.Shell.openSidePanelApps = {};\n\n        // Turn off\n        blockRunningRow.destroyContent();\n        sap.n.Layout.clearAppCacheAppButtonItems();\n\n        // Close all Tiles - Clear memory\n        for (let key in AppCache.View) {\n            let tile = ModelData.FindFirst(AppCacheTiles, 'GUID', key);\n            if (tile && tile.GUID) sap.n.Shell.closeTile(tile);\n        }\n\n        // Close AppCache.Load Apps\n        for (let key in sap.n.Apps) {\n            if (AppCache.View[key]) {\n                AppCache.View[key].destroy();\n                AppCache.View[key] = null;\n                delete sap.n.Apps[key];\n            }\n        }\n\n        // Data\n        modelAppCacheTiles.setData([]);\n        modelAppCacheDiaSettings.setData([]);\n        modelAppCacheTilesRun.setData([]);\n        modelAppCacheTilesRun.setData([]);\n\n        AppCache.userInfo = {};\n\n        // Clear Pages\n        AppCacheNav.getPages().forEach(function (data) {\n            if (\n                ![\n                    'AppCachePageMenu', 'AppCachePageStore', 'AppCache_boxURL',\n                    'AppCache_boxLogon', 'AppCache_boxLogonCustom', 'AppCache_boxPassword',\n                    'AppCache_boxPasscode', 'AppCache_boxPasscodeEntry', 'AppCache_boxUsers'\n                ].includes(data.sId)\n            ) {\n                AppCacheNav.removePage(data.sId);\n                data.destroy();\n                data = null;\n            }\n        });\n\n        // Clear external URL\n        let elem = document.getElementById('AppCache_URLDiv');\n        if (elem) elem.innerHTML = '';\n\n        // Clear Views\n        AppCache.View = [];\n\n        // Clear timers\n        for (let key in sap.n.Launchpad.Timers) {\n            clearInterval(sap.n.Launchpad.Timers[key].timer);\n        }\n\n        if (AppCacheLogonAzure.autoRelog) {\n            clearInterval(AppCacheLogonAzure.autoRelog);\n            AppCacheLogonAzure.autoRelog = null;\n        }\n\n        sap.n.Launchpad.Timers = [];\n        sap.n.Launchpad.currentTile = {};\n        sap.n.currentView = '';\n\n        AppCache.isRestricted = true;\n        location.hash = '';\n\n        // Standard Theme\n        if (AppCache.layout) sap.n.Launchpad.applyLayout(AppCache.layout[0]);\n\n        topMenu.setHeight('48px');\n\n        // Close all Dialogs \n        sap.m.InstanceManager.closeAllDialogs();\n\n        // Extra memory cleanup\n        sap.n.Shell.clearAllObjects();\n\n        // Close Objects Loaded into the App\n        AppCache.ViewChild['undefined'] && AppCache.ViewChild['undefined'].forEach(function (data) {\n            sap.n.Shell.clearObjects(data.sId);\n        });\n\n        delete AppCache.ViewChild['undefined'];\n\n        // External Tools\n        AppCache.disableExternalTools();\n\n        // Adaptive\n        sap.n.Adaptive.configurations = {};\n        sap.n.Adaptive.pages = {};\n        sap.n.Adaptive.dialogs = {};\n\n        // Enhancement\n        if (sap.n.Enhancement.RestrictedEnable) {\n            try {\n                sap.n.Enhancement.RestrictedEnable();\n            } catch (e) {\n                appCacheError('Enhancement RestrictedEnable ' + e);\n            }\n        }\n\n    },\n\n    saveChildView: function (view) {\n        if (!sap.n.Launchpad.currentTile) return;\n        if (!AppCache.ViewChild[sap.n.Launchpad.currentTile.id]) AppCache.ViewChild[sap.n.Launchpad.currentTile.id] = [];\n        AppCache.ViewChild[sap.n.Launchpad.currentTile.id].push(view);\n    },\n\n    translate: function (language) {\n        // Language set in query string always takes precedence\n        const urlLang = new URLSearchParams(location.search).get('lang');\n        if (urlLang) {\n            language = urlLang;\n        }\n        // Handle Languages        \n        if (language === 'NB') language = 'NO';\n\n        AppCache.objects && AppCache.objects.forEach(function (object) {\n            let obj = sap.ui.getCore().byId(object.fieldName);\n            if (obj) {\n                object.attributes.forEach(function (attribute) {\n                    const translation = ModelData.FindFirst(attribute.translation, 'language', language);\n\n                    const firstLetter = attribute.attribute.charAt(0).toUpperCase();\n                    const restOfAttrStr = attribute.attribute.slice(1);\n                    const arg = translation ? translation.value : attribute.value;\n                    const jsFn = `obj.set${firstLetter}${restOfAttrStr}('${arg}')`;\n\n                    try {\n                        eval(jsFn);\n                    } catch (e) {\n                        console.log(e);\n                    }\n                });\n            }\n        });\n\n        AppCache.coreLanguageHandler.updateResourceBundlesNewLang(language);\n    },\n\n    waitForAppCacheLoadOnRestrictedDisable: function (onLoad) {\n        appCacheLog('AppCache.restrictedDisable: Before get data from database');\n        getCacheAppCacheDiaSettings(true);\n        \n        cacheLoaded = 0;\n        getCacheAppCacheTiles(true);\n        getCacheAppCacheCategory(true);\n        getCacheAppCacheCategoryChild(true);\n        getCacheAppCacheTilesRun(true);\n        getCacheAppCacheTilesFav(true);\n        getCacheAppCacheCustomization(true);\n\n        function waiting() {\n            if (cacheLoaded >= 6) {\n                onLoad();\n            } else {\n                setTimeout(waiting, 50);\n            }\n        }\n        waiting();\n    },\n\n    initIDPProvider: function () {\n        if (AppCache.userInfo.logonData && AppCache.userInfo.logonData.type) {\n            switch (AppCache.userInfo.logonData.type) {\n                case 'local':\n                    if (!isChpassDisabled()) {\n                        AppCacheUserActionPassword.setVisible(true);\n                    }\n                    AppCacheLogonLocal.Init();\n                    break;\n\n                case 'azure-bearer':\n                    AppCacheLogonAzure.Init();\n                    break;\n\n                case 'openid-connect':\n                    AppCacheLogonOIDC.Init();\n                    break;\n\n                case 'ldap':\n                    AppCacheLogonLdap.Init();\n                    break;\n            }\n        }\n    },\n\n    updateUserLoginTime: function () {\n        let user = ModelData.FindFirst(AppCacheUsers, 'username', AppCache.userInfo.username);\n        if (user) {\n            user.lastLogin = Date.now();\n            ModelData.Update(AppCacheUsers, 'username', AppCache.userInfo.username, user);\n            setCacheAppCacheUsers();\n        }\n    },\n\n    restrictedDisable: function () {\n        AppCache_boxLogon.setVisible(false);\n        AppCacheUserActionSettings.setVisible(true);\n        AppCache_boxPasscodeEntry.setVisible(false);\n        AppCacheShellTitle.setVisible(false);\n        AppCacheShellTitle.setText();\n\n        if (!AppCache.StartApp && !AppCache.StartWebApp) AppCacheShellMenu.setVisible(true);\n\n        // Config\n        if (AppCache.config) {\n            if (AppCache.config.hideTopHeader) topMenu.setHeight('0px');\n            if (AppCache.config.verticalMenu && sap.ui.Device.resize.width >= sap.n.Launchpad.verticalMenuLimit) sap.n.Launchpad.overflowMenuOpen();\n        }\n\n        this.initIDPProvider();\n\n        if (AppCache.enablePasscode) {\n            AppCacheUserActionLock.setVisible(true);\n            AppCacheUserActionSwitch.setVisible(false);\n        } else {\n            AppCacheUserActionLogoff.setVisible(true);\n        }\n\n        function onAppCacheLoad() {\n            AppCache.isRestricted = false;\n            AppCache.Encrypted = '';\n\n            appCacheLog('AppCache.restrictedDisable: All data fetched from database');\n\n            // In offline mode, when BuildMenu is first called, cache is not loaded, causing an empty launchpad screen\n            if (AppCache.isOffline) {\n                sap.n.Launchpad.BuildMenu();\n            }\n            \n            sap.n.Launchpad.RebuildTiles();\n\n            // Enhancement\n            if (sap.n.Enhancement.RestrictedDisable) {\n                try {\n                    sap.n.Enhancement.RestrictedDisable();\n                } catch (e) {\n                    appCacheError('Enhancement RestrictedDisable ' + e);\n                }\n            }\n        }\n\n        if (AppCache.enablePasscode && !AppCache.isOffline) {\n            AppCache.updateUserInfo().then((status) => {\n                // TODO - Consider to move on even if updateUserInfo fails ? \n                if (status === 'Ok') {\n                    AppCache.UpdateGetData().then(() => {\n                        this.waitForAppCacheLoadOnRestrictedDisable(onAppCacheLoad);\n                    });\n                } else {\n                    appCacheError('User logoff due to error in updateUserInfo');\n                    AppCache.Lock();\n                }\n            });\n        } else {\n            AppCache.UpdateGetData().then(() => {\n                this.waitForAppCacheLoadOnRestrictedDisable(onAppCacheLoad);\n            });\n        }\n\n        this.updateUserLoginTime();\n    },\n\n    AutoUpdateMobileApp: function () {\n        // Update App - device check\n        const deviceName = sap.ui.Device.os.name;\n        if (!['win', 'Android', 'iOS'].includes(deviceName)) return;\n\n        if (!isCordova()) return;\n        if (AppCache.isOffline) return;\n\n        // Version check\n        const currentVersion = AppCache.AppVersion.replace(/\\D/g, '')\n        const activeVersion = AppCache.AppVersionActive.replace(/\\D/g, '')\n\n        if (currentVersion < activeVersion) {\n            let n = `${AppCache.Url}/mobileClients/${AppCache.mobileClient}/build/${AppCache.AppVersionActiveID}/`;\n\n            if (deviceName === 'win') n += 'Windows';\n            else if (deviceName === 'Android') n += 'Android';\n            else if (deviceName === 'iOS') {\n                n = 'itms-services://?action=download-manifest&url=' + encodeURIComponent(`${n}Ios.plist`);\n                console.log(n);\n            }\n\n            AppCache.UpdateMobileApp(n, AppCache.AppVersionActive);\n        }\n    },\n\n    fileWriter: {\n        // Save the file to OS in blocks of 5MB recursively. Saving all in one block can result in out of memory errors on some devices\n        writeBlock: function (fileWriter, bytesWritten, callback) {\n            let blockSize = Math.min(5 * 1024 * 1024, AppCache.fileWriter.blob.size - bytesWritten);\n            let block = this.blob.slice(bytesWritten, bytesWritten + blockSize, AppCache.fileWriter.blob.type);\n\n            fileWriter.write(block);\n\n            bytesWritten += blockSize;\n            fileWriter.onwrite = function () {\n                if (bytesWritten < AppCache.fileWriter.blob.size) {\n                    AppCache.fileWriter.writeBlock(fileWriter, bytesWritten, callback);\n                } else {\n                    callback(fileWriter);\n                }\n            };\n        }\n    },\n\n    GetInstallationDir: async function () {\n        return new Promise((resolve, reject) => {\n            window.requestFileSystem(LocalFileSystem.TEMPORARY, 0, function(fs) {\n                resolve(fs.root.nativeURL);\n            }, reject);\n        });\n    },\n\n    DownloadFile: async function(url, filePath) {\n        return new Promise((resolve, reject) => {\n            const requestId = cordova.plugin.http.downloadFile(url, undefined, undefined, filePath, resolve, reject);\n            AppCache.abortDownload = function() {\n                cordova.plugin.http.abort(requestId, () => {}, () => {});\n            }\n        });\n    },\n\n    OpenFile: async function(filePath, contentType) {\n        return new Promise((resolve, reject) => {\n            cordova.plugins.fileOpener2.open(filePath, contentType, {\n                success: resolve,\n                error: reject,\n            });\n        });\n    },\n\n    UpdateMobileApp: async function (fileUrl, version) {\n        // Update App - device check\n        if (sap.ui.Device.os.name !== 'iOS' && sap.ui.Device.os.name !== 'Android' && sap.ui.Device.os.name !== 'win') return;\n\n        sap.ui.core.BusyIndicator.hide();\n\n        // iOS\n        if (sap.ui.Device.os.name === 'iOS') {\n            window.open(fileUrl, '_system');\n            return;\n        }\n\n        let fileDirectory = cordova.file.cacheDirectory;\n        let localFile = AppCache.CurrentConfig;\n        let remoteFile = fileUrl;\n        let contentType;\n\n        if (sap.ui.Device.os.name === 'Android') {\n            localFile += '.apk';\n            contentType = 'application/vnd.android.package-archive';\n        } else {\n            localFile += '.appx';\n            contentType = 'application/vns.ms-appx';\n        }\n\n        // Open Dialog\n        AppCache_diaDownload.open();\n        AppCache_diaDownload.setText(AppCache_tDownloading.getText() + ' (v.' + version + ')...');\n\n        try {\n            const filePath = await AppCache.GetInstallationDir() + localFile;            \n            await AppCache.DownloadFile(remoteFile, filePath);\n            await AppCache.OpenFile(filePath, contentType);\n            AppCache_diaDownload.close();\n        } catch (error) {\n            const message = error?.message || 'Error installing new version';\n            AppCache_diaDownload.setText(message);\n            console.error(error);\n        }\n\n        /*\n        // Delete Old File\n        window.resolveLocalFileSystemURL(localFile, function (fileEntry) {\n            fileEntry.remove();\n        }, function (error) { });\n\n        // Download File \n        AppCache.downloadXhr = new XMLHttpRequest();\n        AppCache.downloadXhr.responseType = 'blob'; // force blob\n        AppCache.downloadXhr.open('GET', remoteFile);\n        AppCache.downloadXhr.send();\n\n        AppCache.downloadXhr.onload = function () {\n            if (AppCache.downloadXhr.status != 200) {\n                AppCache_diaDownload.close();\n                sap.m.MessageToast.show(AppCache.downloadXhr.statusText);\n                AppCache.downloadXhr = null;\n            } else {\n\n                let loDownloadedData = {\n                    response: AppCache.downloadXhr.response,\n                    responseType: AppCache.downloadXhr.responseType\n                };\n\n                // Save File\n                window.requestFileSystem(LocalFileSystem.TEMPORARY, 0, function (fs) {\n                    fs.root.getFile(localFile, { create: true, exclusive: false }, function (fileEntry) {\n                        fileEntry.createWriter(function (fileWriter) {\n                            //\n                            // Helper functions - Begin\n                            let lfFormatMessage = function (poObject, pvMessage) {\n                                //\n                                // Replaces the parameter with the object's property with the same name\n                                // E.g.: Person = { Name1: 'Jørgen' }; Text = 'My name is ${Name1}'\n                                //       lfFormatMessage( Person, Text ) => 'My name is Jørgen'\n                                let lvMessage = pvMessage.replace(\n                                    /\\$\\{(\\w*)\\}/gi,\n                                    function (match, contents, offset, input_string) {\n                                        return poObject[contents];\n                                    }\n                                );\n                                return lvMessage;\n                            };\n                            let lfOpenInstaller = function (pvFullFile) {\n                                //\n                                // Opens the file for installation (requires full path in file:// or cdvfile://)\n                                cordova.plugins.fileOpener2.open(\n                                    pvFullFile,\n                                    contentType, {\n                                    success: function () {\n                                        //\n                                        // Upon success, it makes sure that it closes the dialog before the update starts\n                                        AppCache_diaDownload.close();\n                                    },\n                                    error: function (e) {\n                                        //\n                                        // It's an error, so close the dialog anyway before displaying the error messages\n                                        AppCache_diaDownload.close();\n                                        let lvErrorMessage = lfFormatMessage(e, 'Error opening file. Status: ${status} - Error message: ${message}');\n                                        console.error(lvErrorMessage);\n                                    }\n                                });\n                            };\n                            // Helper functions - End\n                            //\n\n                            //\n                            // File saving error handling\n                            fileWriter.onerror = function (e) {\n                                let lvErrorMessage = lfFormatMessage(e, 'Error saving file. Status: ${status} - Error message: ${message}');\n                                console.error(lvErrorMessage);\n                            }\n\n                            //\n                            // Prepares blob data\n                            AppCache.fileWriter.blob = (loDownloadedData.responseType === 'blob')\n                                ? loDownloadedData.response\n                                : new Blob([loDownloadedData.response], contentType);\n                            //\n                            // Save the file to OS in blocks of 5MB recursively (check function AppCache.fileWriter.writeBlock). \n                            // Saving all in one block can result in out of memory errors on some devices\n                            AppCache.fileWriter.writeBlock(fileWriter, 0, function (fileWriter) {\n                                lfOpenInstaller(fileWriter.localURL);\n                                AppCache.downloadXhr = null;\n                                loDownloadedData = null;\n                            });\n                        });\n                    });\n                });\n            }\n        };\n\n        AppCache.downloadXhr.onprogress = function (evt) {\n            const t = AppCache_tDownloading.getText();\n            if (evt.lengthComputable) {\n                AppCache_diaDownload.setText(`${t} (v.${version})...${evt.loaded} of ${evt.total} ${bytes}`);\n            } else {\n                AppCache_diaDownload.setText(`${t} (v.${version})...${evt.loaded} bytes`);\n            }\n        };\n\n        AppCache.downloadXhr.onerror = function () {\n            AppCache_diaDownload.close();\n            sap.m.MessageToast.show(AppCache_tErrorDownloading.getText());\n            AppCache.downloadXhr = null;\n        };\n        */\n    },\n\n    clearCookies: function () {\n\n        // Cookie Clearing - Android/iOS\n        if (typeof cookieMaster !== 'undefined') {\n            cookieMaster.clearCookies(\n                function () { },\n                function () { });\n        }\n\n        // Cookie Clearing - Windows 10\n        try {\n            document.execCommand('ClearAuthenticationCache', 'false');\n        } catch (e) { }\n\n        // Enhancement\n        if (sap.n.Enhancement.ClearCookies) {\n            try {\n                sap.n.Enhancement.ClearCookies();\n            } catch (e) {\n                appCacheError('Enhancement ClearCookies ' + e);\n            }\n        }\n\n    },\n\n    initView: function (value, data) {\n        // Load Option: Download\n        if (AppCache.LoadOptions.load === 'download') {\n            sap.ui.core.BusyIndicator.hide();\n            this._loadQueue();\n            return;\n        }\n\n        // Format ID\n        let applid = value.replace(/\\//g, '').toUpperCase();\n\n        try {\n            eval(data);\n        } catch (error) {\n            if (error.message) {\n                sap.m.MessageToast.show(error.message);\n            }\n            return;\n        }\n\n        // Creating UI5 view \n        let versionParts = sap.ui.version.split(\".\");\n\n        // BlockLayout vs Cards\n        if (versionParts[0] >= 1 && versionParts[1] < 56) {\n\n            let oJSView;\n\n            if (!AppCache.LoadOptions.dialogShow && !AppCache.LoadOptions.parentObject) {\n\n                try {\n                    oJSView = sap.ui.view({\n                        viewName: value.toUpperCase(),\n                        type: sap.ui.core.mvc.ViewType.JS\n                    });\n                } catch (err) {\n                    AppCache.handleTileError(err);\n                    AppCache.showTileErrorMessage(`Init view error in: ${value.toUpperCase()}`)\n                }\n\n                if (AppCache.LoadOptions.appGUID) {\n                    AppCache.View[AppCache.LoadOptions.appGUID] = oJSView;\n                } else {\n                    AppCache.View[applid] = oJSView;\n                }\n            } else {\n\n                try {\n                    AppCache.diaView = sap.ui.view({\n                        viewName: value.toUpperCase(),\n                        type: sap.ui.core.mvc.ViewType.JS\n                    });\n                } catch (err) {\n                    AppCache.handleTileError(err);\n                    AppCache.showTileErrorMessage(`Init view error in: ${value.toUpperCase()}`);\n                }\n            }\n\n            AppCache.buildView(applid);\n\n        } else {\n\n            sap.ui.core.mvc.JSView.create({\n                viewName: value.toUpperCase()\n            }).then(function (oView) {\n\n                if (!AppCache.LoadOptions.dialogShow && !AppCache.LoadOptions.parentObject) {\n                    if (AppCache.LoadOptions.appGUID) {\n                        AppCache.View[AppCache.LoadOptions.appGUID] = oView;\n                    } else {\n                        AppCache.View[applid] = oView;\n                    }\n                } else {\n                    AppCache.diaView = oView;\n                }\n\n                AppCache.buildView(applid);\n            }).catch(function (err) {\n                AppCache.handleTileError(err);\n                AppCache.showTileErrorMessage(err);\n            });\n        }\n    },\n\n    buildView: function (value) {\n        // Format ID\n        let applid = value.replace(/\\//g, '');\n        let tempView = sap.n.currentView;\n        let eventId;\n\n        if (!AppCache.LoadOptions.parentObject && !AppCache.LoadOptions.dialogShow) {\n            if (AppCache.LoadOptions.appGUID) {\n                sap.n.currentView = AppCache.View[AppCache.LoadOptions.appGUID];\n            } else {\n                sap.n.currentView = AppCache.View[applid];\n            }\n        }\n\n        // Turn off debug\n        AppCacheShellDebug.setVisible(false);\n\n        if (AppCache.LoadOptions.appGUID) {\n            eventId = AppCache.LoadOptions.appGUID;\n        } else {\n            eventId = applid;\n        }\n\n        // Custom init\n        if (sap.n.Apps[eventId]) {\n\n            if (sap.n.Apps[eventId].init) {\n                sap.n.Apps[eventId].init.forEach(function (data) {\n                    if (AppCache.LoadOptions.startParams) {\n                        try {\n                            AppCache.LoadOptions.startParams = JSON.parse(AppCache.LoadOptions.startParams);\n                        } catch (error) { }\n                    }\n\n                    data(AppCache.LoadOptions.startParams);\n                });\n                sap.n.Apps[eventId].init = null;\n            }\n\n            // Custom beforeDisplay\n            if (sap.n.Apps[eventId] && sap.n.Apps[eventId].beforeDisplay) {\n                sap.n.Apps[eventId].beforeDisplay.forEach(function (data) {\n                    if (AppCache.LoadOptions.startParams) {\n                        try {\n                            AppCache.LoadOptions.startParams = JSON.parse(AppCache.LoadOptions.startParams);\n                        } catch (error) { }\n                    }\n\n                    data(AppCache.LoadOptions.startParams);\n                });\n            }\n\n            // Custom onNavigation\n            if (sap.n.Apps[eventId] && sap.n.Apps[eventId].onNavigation) {\n                sap.n.Apps[eventId].onNavigation.forEach(function (data) {\n                    if (sap.n.HashNavigation.data) sap.n.HashNavigation.data = JSON.parse(sap.n.HashNavigation.data);\n                    data(sap.n.HashNavigation.data);\n                    sap.n.HashNavigation.data = '';\n                });\n            }\n\n        }\n\n        // Load Option: Not full load\n        if (AppCache.LoadOptions.load !== '') {\n            sap.n.currentView = tempView;\n            sap.ui.core.BusyIndicator.hide();\n            AppCache.saveChildView(tempView);\n            AppCache.diaView = null;\n            this._loadQueue();\n            return;\n        }\n\n        // Dialog\n        if (AppCache.LoadOptions.dialogShow) {\n            let contHeight = AppCache.LoadOptions.dialogHeight;\n            let contWidth = AppCache.LoadOptions.dialogWidth;\n\n            // On Mobile\n            if (!sap.n.Launchpad.isDesktop()) {\n                contWidth = '100%';\n                contHeight = '100%';\n            }\n\n            // Create Dialog\n            let dia = new sap.n.Dialog({\n                contentWidth: contWidth,\n                contentHeight: contHeight,\n                type: 'Message',\n                resizable: true,\n                draggable: true,\n                stretchOnPhone: true,\n                icon: AppCache.LoadOptions.dialogIcon,\n                title: AppCache.LoadOptions.dialogTitle,\n                hideMinimize: AppCache.LoadOptions.dialogHideMinimize,\n                hideMosaic: AppCache.LoadOptions.dialogHideMosaic,\n                hideMaximize: AppCache.LoadOptions.dialogHideMaximize,\n                afterClose: function (oEvent) {\n\n                    // Delete From Array\n                    for (let i = 0; i < AppCache.Dialogs.length; i++) {\n                        if (AppCache.Dialogs[i] === dia.getId()) {\n                            AppCache.Dialogs.splice(i, 1);\n                            break;\n                        }\n                    }\n\n                    dia.destroyContent();\n                    dia = null;\n\n                    if (AppCache.Dialogs.length === 0) AppCacheShellDialog.setVisible(false);\n\n                },\n                beforeClose: AppCache.LoadOptions.onDialogClose\n            });\n\n            // Add Dialog to Array\n            AppCache.Dialogs.push(dia.getId());\n            dia.addContent(AppCache.diaView);\n\n            dia.open();\n            sap.ui.core.BusyIndicator.hide();\n            AppCache.saveChildView(AppCache.diaView);\n            this._loadQueue();\n            return;\n        }\n\n        // ParentObject\n        if (AppCache.LoadOptions.parentObject) {\n            let view = AppCache.diaView || AppCache.View[applid];\n\n            if (AppCache.LoadOptions.parentObject.addContent) {\n                AppCache.LoadOptions.parentObject.removeAllContent();\n                AppCache.LoadOptions.parentObject.addContent(view);\n                AppCache.LoadOptions.parentObject.rerender();\n            }\n\n            if (typeof AppCache.LoadOptions.parentObject.setBusy === 'function') AppCache.LoadOptions.parentObject.setBusy(false);\n\n            AppCache.diaView = null;\n            AppCache.saveChildView(view);\n            this._loadQueue();\n            return;\n        }\n\n        // Add page to navigation\n        if (!AppCacheNav.getPage(sap.n.currentView.sId)) AppCacheNav.addPage(sap.n.currentView);\n\n        // Navigate\n        AppCacheNav.to(sap.n.currentView, modelAppCacheDiaSettings.oData.TRANSITION || 'show');\n\n        // Set Shell Title\n        if (sap.n.Launchpad.SetHeader) sap.n.Launchpad.SetHeader();\n\n        // Set Shell Settings - Tiles\n        let dataTile = ModelData.FindFirst(AppCacheTiles, 'id', AppCache.LoadOptions.appGUID);\n\n        if (dataTile) {\n            let hideHeader = false;\n            if (sap.n.Launchpad.isDesktop() && dataTile.hideHeaderL) hideHeader = true;\n            if (sap.n.Launchpad.isTablet() && dataTile.hideHeaderM) hideHeader = true;\n            if (sap.n.Launchpad.isPhone() && dataTile.hideHeaderS) hideHeader = true;\n            sap.n.Launchpad.setHideHeader(hideHeader);\n\n            if (dataTile.openFullscreen) {\n                AppCacheShellUI.setAppWidthLimited(false);\n            } else {\n                AppCacheShellUI.setAppWidthLimited(true);\n            }\n\n        }\n        sap.ui.core.BusyIndicator.hide();\n        this._loadQueue();\n\n    },\n\n    getView: function (value) {\n        if (status === 'NOT_LOGGED_IN') {\n            AppCache.handleTileError('getView: NOT_LOGGED_IN');\n            AppCache.showTileErrorMessage(AppCache_tSessionTimeout.getText());\n            return;\n        }\n\n        let url = '';\n        const params = new URLSearchParams();\n\n        // Get View from Server\n        if (AppCache.LoadOptions.rootDir) {\n            const { rootDir } = AppCache.LoadOptions;\n            url = `${rootDir}${value}`\n            url += rootDir === '/views/' ? '' : '.js';\n        } else {\n            url = AppCache.isPublic ? `/public/app/${value}.js` : `/app/${value}.js`;\n        }\n\n        // Detect Mobile \n        if (AppCache.isMobile) params.append('isMobile', 'true');\n\n        const headers = { 'X-Requested-With': 'XMLHttpRequest' };\n\n        // Remote System\n        if (AppCache.LoadOptions.appPath) {\n            // Remote System\n            if (AppCache.LoadOptions.appType === 'SAP') {\n                url = '/proxy/remote/';\n                headers['NeptuneServer'] = AppCache.LoadOptions.appPath;\n\n                const prefix = `${AppCache.LoadOptions.appPath}/neptune/`;\n                if (AppCache.LoadOptions.sapICFNode) {\n                    url += encodeURIComponent(prefix + AppCache.LoadOptions.sapICFNode + `/${value}.view.js`);\n                } else {\n                    url += encodeURIComponent(prefix + `${value}.view.js`);\n                }\n                url += `/${AppCache.LoadOptions.appAuth}`\n\n                AppCache.hideGlobalAjaxError = true;\n            } else {\n                params.append('p9Server', AppCache.LoadOptions.appPath);\n\n                const p = encodeURIComponent(AppCache.LoadOptions.appPath + url);\n                if (AppCache.LoadOptions.appAuth) url = `/proxy/remote/${p}/${AppCache.LoadOptions.appAuth}`;\n                else url = `/proxy/${p}`;\n            }\n\n            // Remote System ID for adding  proxy authentication\n            if (AppCache.LoadOptions.appAuth) headers['X-Auth-In-P9'] = AppCache.LoadOptions.appAuth;\n        }\n\n        url = AppCache.Url + url;\n\n        let lang = AppCache.LoadOptions.defaultLanguage;\n        if (AppCache.userInfo.language && AppCache.userInfo.language !== 'en') {\n            lang = AppCache.userInfo.language;\n        }\n\n        if (lang) params.append('lang', lang);\n\n        const winParams = new URLSearchParams(window.location.search);\n        if (winParams.has('debug')) params.append('debug', true);\n\n        // Enhancement\n        if (sap.n.Enhancement.RemoteSystemAuth) {\n            try {\n                sap.n.Enhancement.RemoteSystemAuth(headers);\n            } catch (e) {\n                appCacheError('Enhancement RemoteSystemAuth ' + e);\n            }\n        }\n\n        if (params.size > 0) url += `?${params.toString()}`;\n\n        request({\n            datatype: 'HTML',\n            type: 'GET',\n            url,\n            headers,\n            success: function (data, status, request) {\n                AppCache.hideGlobalAjaxError = true;\n\n                // Save in DB/LocalStorage\n                const viewName = `app:${value}:${lang}:${AppCache.LoadOptions.appPath}`;\n                if (typeof p9Database !== 'undefined' && p9Database !== null) {\n                    p9SaveView(viewName.toUpperCase(), data);\n                } else {\n                    sapStoragePut(viewName.toUpperCase(), data)\n                }\n\n                // Set App Initialized\n                AppCache.Initialized = true;\n                AppCache.isOffline = isOffline();\n\n                // Update Application Data \n                if (value !== 'cockpit_doc_reader') {\n\n                    // App Timestamp in Header\n                    let updatedAt = request.getResponseHeader('X-Updated-At');\n                    if (AppCache.LoadOptions.appType !== 'SAP') updatedAt = parseFloat(updatedAt);\n\n                    // Get TimeStamp from App \n                    if (updatedAt) {\n                        ModelData.Update(AppCacheData, ['application', 'language', 'appPath'], [value.toUpperCase(), AppCache.userInfo.language, AppCache.LoadOptions.appPath], {\n                            appType: 'app',\n                            application: value.toUpperCase(),\n                            updatedAt: updatedAt,\n                            invalid: false,\n                            language: AppCache.userInfo.language,\n                            appPath: AppCache.LoadOptions.appPath\n                        });\n\n                        setCacheAppCacheData();\n                    } else {\n                        let url = '/api/functions/Launchpad/GetAppTimestamp';\n                        let headers = {};\n\n                        // Remote System\n                        if (AppCache.LoadOptions.appPath) {\n                            url = '/proxy/remote/' + encodeURIComponent(AppCache.LoadOptions.appPath + url) + '/' + AppCache.LoadOptions.appAuth;\n                        }\n\n                        url = AppCache.Url + url;\n\n                        // Enhancement\n                        if (sap.n.Enhancement.RemoteSystemAuth) {\n                            try {\n                                sap.n.Enhancement.RemoteSystemAuth(headers);\n                            } catch (e) {\n                                appCacheError('Enhancement RemoteSystemAuth ' + e);\n                            }\n                        }\n\n                        // Get App Timestamp\n                        jsonRequest({\n                            url,\n                            headers,\n                            data: JSON.stringify({ application: value }),\n                            success: function (data) {\n                                ModelData.Update(AppCacheData, ['application', 'language', 'appPath'], [value.toUpperCase(), AppCache.userInfo.language, AppCache.LoadOptions.appPath], {\n                                    appType: 'app',\n                                    application: value.toUpperCase(),\n                                    updatedAt: data.updatedAt,\n                                    invalid: false,\n                                    language: AppCache.userInfo.language,\n                                    appPath: AppCache.LoadOptions.appPath\n                                });\n                                setCacheAppCacheData();\n                            },\n                            error: function (result, status) {\n\n                            }\n                        });\n\n                    }\n                }\n\n                // Start View\n                AppCache.initView(value, data);\n\n            },\n            error: function (error) {\n                if (error.status === 404) {\n                    Array.isArray(modelAppCacheTiles.oData) && modelAppCacheTiles.oData.forEach(function (tile) {\n                        if (tile && (tile.actionApplication === value || tile.tileApplication === value)) {\n                            let b = sap.ui.getCore().byId(`but${tile.id}`);\n                            if (b) b.destroy();\n                        }\n                    });\n                    AppCache.showTileErrorMessage(AppCache_tAppNotFound.getText());\n                }\n\n                AppCache.handleTileError(error.statusText);\n                setTimeout(function () {\n                    AppCache.hideGlobalAjaxError = false;\n                }, 100);\n            }\n        });\n\n    },\n\n    handleTileError: function (err) {\n        AppCache.loadRunning = false;\n        sap.n.currentView = '';\n        sap.n.Shell.closeTile({ id: AppCache.LoadOptions.appGUID });\n        sap.n.Shell.closeSidepanel();\n        \n        if (AppCacheNav.getCurrentPage().getContent().length === 0) {\n            sap.n.Launchpad.reCreateCurrentPage();\n        }\n\n        if (err) console.log(err);\n    },\n\n    showTileErrorMessage: function (err) {\n        const oDialog = new sap.m.Dialog({\n            type: sap.m.DialogType.Message,\n            title: 'Tile Error',\n            state: 'Error',\n            content: new sap.m.Text({ text: err.toString() }),\n            beginButton: new sap.m.Button({\n                text: 'OK',\n                press: function () {\n                    oDialog.close();\n                }\n            }),\n            afterClose: function() {\n                oDialog.destroy();\n            },\n        });\n\n        oDialog.open();\n    },\n\n    getWebApp: function (dataTile, dataCat) {\n        if (AppCache.isPublic) url = '/public/webapp/' + dataTile.actionWebApp;\n        else url = '/webapp/' + dataTile.actionWebApp;\n\n        // Detect Mobile \n        if (AppCache.isMobile) url += '?isMobile=true';\n\n        let headers = { 'X-Requested-With': 'XMLHttpRequest' }\n\n        if (dataTile.urlApplication) {\n            if (AppCache.userInfo.azureToken) headers.Authorization = 'Bearer ' + AppCache.userInfo.azureToken.id_token;\n            url = AppCache.Url + '/proxy/remote/' + encodeURIComponent(dataTile.urlApplication + url) + '/' + dataTile.urlAuth;\n        } else {\n            url = AppCache.Url + url;\n        }\n\n        // Enhancement\n        if (sap.n.Enhancement.RemoteSystemAuth) {\n            try {\n                sap.n.Enhancement.RemoteSystemAuth(headers);\n            } catch (e) {\n                appCacheError('Enhancement RemoteSystemAuth ' + e);\n            }\n        }\n\n        request({\n            datatype: 'HTML',\n            type: 'GET',\n            url: url,\n            headers: headers,\n            success: function (data) {\n                // Save in DB/LocalStorage\n                let viewName = 'webapp:' + dataTile.actionWebApp + ':' + dataTile.urlApplication;\n\n                if (typeof p9Database !== 'undefined' && p9Database !== null) {\n                    p9SaveView(viewName, data);\n                } else {\n                    sapStoragePut(viewName, data);\n                }\n\n                let url = '/api/functions/Launchpad/GetAppTimestamp';\n                let headers = {};\n\n                // Remote System\n                if (dataTile.urlApplication) {\n                    if (AppCache.userInfo.azureToken) headers.Authorization = 'Bearer ' + AppCache.userInfo.azureToken.id_token;\n                    url = '/proxy/remote/' + encodeURIComponent(dataTile.urlApplication + url) + '/' + dataTile.urlAuth;\n                }\n\n                url = AppCache.Url + url;\n\n                // Enhancement\n                if (sap.n.Enhancement.RemoteSystemAuth) {\n                    try {\n                        sap.n.Enhancement.RemoteSystemAuth(headers);\n                    } catch (e) {\n                        appCacheError('Enhancement RemoteSystemAuth ' + e);\n                    }\n                }\n\n                // Get App Timestamp\n                jsonRequest({\n                    type: 'POST',\n                    contentType: 'application/json',\n                    url: url,\n                    headers: headers,\n                    data: JSON.stringify({ webapp: dataTile.actionWebApp }),\n                    success: function (data) {\n                        ModelData.Update(AppCacheData, ['application', 'appPath'], [data.application, dataTile.urlApplication], {\n                            appType: 'webapp',\n                            application: data.application,\n                            appPath: dataTile.urlApplication,\n                            updatedAt: data.updatedAt,\n                            invalid: false,\n                            language: AppCache.userInfo.language\n                        });\n                        setCacheAppCacheData();\n                    },\n                    error: function (result, status) { }\n                });\n\n                // Set Flag to InMemory\n                AppCache.View[viewName] = true;\n\n                // Start View\n                AppCache.buildWebApp(dataTile, data, dataCat);\n\n            },\n            error: function (error) {\n                if (error.status === 404) {\n                    Array.isArray(modelAppCacheTiles.oData) && modelAppCacheTiles.oData.forEach(function (tile) {\n                        if (tile && tile.actionWebApp === dataTile.actionWebApp) {\n                            let b = sap.ui.getCore().byId(`but${tile.id}`);\n                            if (b) b.destroy();\n                        }\n                    });\n                    AppCache.showTileErrorMessage(AppCache_tAppNotFound.getText());\n                }\n\n                AppCache.handleTileError(error.statusText);\n            }\n        });\n    },\n\n    buildWebApp: function (dataTile, viewData, dataCat) {\n        // As Dialog \n        if (dataTile.openDialog) {\n            sap.n.Launchpad.contextType = 'Tile';\n            sap.n.Launchpad.contextTile = dataTile;\n\n            sap.n.Shell.openUrl(dataTile.actionWebApp, {\n                webAppData: viewData,\n                dialogTitle: dataTile.title,\n                dialogWidth: dataTile.dialogWidth || '1200px',\n                dialogHeight: dataTile.dialogHeight || '90%',\n            });\n\n            location.hash = '';\n            AppCacheShellBack.setVisible(false);\n            return;\n        }\n\n        if (dataTile.actionWebApp !== AppCache.StartWebApp) sap.n.Launchpad.handleNavButton(dataTile, dataCat);\n        AppCacheNav.to(AppCache_boxURL, modelAppCacheDiaSettings.oData.TRANSITION || 'show');\n\n        // As Embedded\n        AppCacheShellUI.setAppWidthLimited(!dataTile.openFullscreen);\n\n        // Hide All\n        hideChildren('#AppCache_URLDiv');\n\n        // Check If element exist > Display or Create\n        const el = elById(`iFrame${dataTile.id}`);\n        if (el) {\n            el.style.display = 'block';\n            return;\n        }\n\n        appendIFrame(\n            querySelector('#AppCache_URLDiv'),\n            {\n                'id': `iFrame${dataTile.id}`,\n                'frameborder': '0',\n                'style': 'border: 0;',\n                'width': '100%',\n                'height': '100%',\n                'srcdoc': viewData\n            }\n        );\n    },\n\n    Lock: function () {\n        AppCache_boxLogon.setVisible(true);\n\n        // Enhancement\n        if (sap.n.Enhancement.BeforeLock) {\n            try {\n                sap.n.Enhancement.BeforeLock();\n            } catch (e) {\n                appCacheError(`Enhancement BeforeLock ${e}`);\n            }\n        }\n\n        AutoLockTimer.stop();\n        setTimeout(() => {\n            sap.n.Layout.setHeaderPadding();\n        }, 100);\n\n        // Logoff \n        if (AppCache.userInfo.logonData && AppCache.userInfo.logonData.type) {\n            switch (AppCache.userInfo.logonData.type) {\n                case 'local':\n                    AppCacheLogonLocal.Logoff();\n                    break;\n\n                case 'azure-bearer':\n                    AppCacheLogonAzure.Logoff();\n                    break;\n\n                case 'openid-connect':\n                    AppCacheLogonOIDC.Logoff();\n                    break;\n\n                case 'ldap':\n                    AppCacheLogonLdap.Logoff();\n                    break;\n            }\n        } else {\n            AppCacheLogonLocal.Logoff();\n        }\n\n        AppCache.restrictedEnable();\n\n        // Check PIN Code\n        if (!AppCache.enablePasscode) {\n            AppCache.Logout();\n            return;\n        }\n\n        AppCache.translate(navigator.language.slice(0, 2).toUpperCase());\n\n        // Clear NumPad\n        NumPad.attempts = 0;\n        NumPad.numValue = '';\n        NumPad.Verify = false;\n\n        AppCache.setEnableUsersScreen();\n        AppCacheNav.rerender();\n\n        sap.ui.core.BusyIndicator.hide();\n    },\n\n    Logout: function () {\n        AppCache_boxLogon.setVisible(true);\n        clearSelectedLoginType();\n        \n        // Enhancement\n        if (sap.n.Enhancement.BeforeLogout) {\n            try {\n                sap.n.Enhancement.BeforeLogout();\n            } catch (e) {\n                appCacheError('Enhancement BeforeLogout ' + e);\n            }\n        }\n\n        AutoLockTimer.stop();\n        removeLaunchpadFromCache();\n\n        if (AppCache.isMobile) {\n            // Restricted Area\n            AppCache.restrictedEnable();\n\n            // Show Logon Screen\n            AppCache.setEnableLogonScreen();\n            AppCache.Initialized = false;\n            NumPad.attempts = 0;\n            NumPad.numValue = '';\n            AppCache.Encrypted = '';\n            AppCache_inUsername.setValue();\n            AppCache_inPassword.setValue();\n            AppCacheShellUser.setText();\n\n            if (AppCache.enableAutoLogin) AppCacheLogonLocal.AutoLoginRemove();\n\n            // Logoff \n            if (AppCache.userInfo && AppCache.userInfo.logonData) {\n                switch (AppCache.userInfo.logonData.type) {\n                    case 'azure-bearer':\n                        AppCacheLogonAzure.Logoff();\n                        break;\n\n                    case 'openid-connect':\n                        AppCacheLogonOIDC.Logoff();\n                        break;\n\n                    case 'ldap':\n                        AppCacheLogonLdap.Logoff();\n                        break;\n\n                    default:\n                        AppCacheLogonLocal.Logoff();\n                        break;\n                }\n            } else {\n                AppCacheLogonLocal.Logoff();\n            }\n        } else {\n            // Logoff \n            if (AppCache.userInfo && AppCache.userInfo.logonData) {\n                switch (AppCache.userInfo.logonData.type) {\n                    case 'azure-bearer':\n                        AppCacheLogonAzure.Signout();\n                        break;\n\n                    case 'openid-connect':\n                        AppCacheLogonOIDC.Signout();\n                        break;\n\n                    default:\n                        break;\n                }\n            }\n            // Enhancement\n            if (sap.n.Enhancement.AfterLogout) {\n                try {\n                    sap.n.Enhancement.AfterLogout();\n                } catch (e) {\n                    appCacheError('Enhancement AfterLogout ' + e);\n                }\n            }\n\n            jsonRequest({\n                url: AppCache.Url + '/user/logout',\n                success: function (data) {\n                    location.hash = '';\n                    location.reload();\n                },\n                error: function (result, status) { }\n            });\n        }\n\n        AppCache.translate(navigator.language.slice(0, 2).toUpperCase());\n        sap.ui.core.BusyIndicator.hide();\n    },\n\n    LogonCustom: function (options) {\n        AppCache_loginTypes.setSelectedKey(options.logonid);\n        AppCache_inUsername.setValue(options.username);\n        AppCache_inPassword.setValue(options.password);\n        AppCache.Logon();\n    },\n\n    Logon: function () {\n        let logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\n\n        // Logon \n        switch (logonData.type) {\n            case 'local':\n                AppCacheLogonLocal.Logon();\n                break;\n\n            case 'sap':\n                AppCacheLogonLocal.AutoLoginRemove();\n                AppCacheLogonSap.Logon();\n                break;\n\n            case 'azure-bearer':\n                AppCacheLogonLocal.AutoLoginRemove();\n                AppCacheLogonAzure.Logon();\n                break;\n\n            case 'openid-connect':\n                AppCacheLogonLocal.AutoLoginRemove();\n                AppCacheLogonOIDC.Logon();\n                break;\n\n            case 'saml':\n                AppCacheLogonLocal.AutoLoginRemove();\n                if (AppCache.isMobile) {\n                    AppCacheLogonSaml.Logon(logonData);\n                } else {\n                    window.open(logonData.entryPoint);\n                }\n                break;\n\n            case 'ldap':\n                AppCacheLogonLocal.AutoLoginRemove();\n                AppCacheLogonLdap.Logon();\n                break;\n        }\n    },\n\n    getLogonTypeInfo: function (id) {\n        let info = { type: 'local' };\n        const { logonTypes } = modelDataSettings.oData;\n        if (!Array.isArray(logonTypes)) {\n            return info;\n        }\n\n        logonTypes.forEach(function (data) {\n            if (data.id === id) info = data;\n        });\n\n        delete info.bindCredentials;\n        delete info.bindDn;\n        delete info.filterGroup;\n        delete info.filterUser;\n        delete info.findGroupsForUserFilter;\n        delete info.groupKeyField;\n        delete info.mapGroup;\n        delete info.mapUser;\n        delete info.searchBase;\n        delete info.searchFilter;\n        delete info.searchGroupFilter;\n        delete info.searchUserFilter;\n\n        return info;\n    },\n\n    setUserInfo: function () {\n        AppCacheUserActionText.setText(AppCache.userInfo.name || AppCache.userInfo.username);\n        inAppCacheFormSettingsLang.setSelectedKey(AppCache.userInfo.language);\n\n        sap.n.Launchpad.validateActiveLanguageOrRevert();\n\n        // Enhancement\n        if (sap.n.Enhancement.setUserInfo) {\n            try {\n                sap.n.Enhancement.setUserInfo();\n            } catch (e) {\n                appCacheError('Enhancement setUserInfo ' + e);\n            }\n        }\n\n        if (AppCache.isMobile) return;\n\n        // logonData \n        let logonData = localStorage.getItem('p9logonData');\n\n        if (logonData) {\n            try {\n                AppCache.userInfo.logonData = JSON.parse(logonData);\n                delete AppCache.userInfo.logonData.bindCredentials;\n                delete AppCache.userInfo.logonData.bindDn;\n                delete AppCache.userInfo.logonData.filterGroup;\n                delete AppCache.userInfo.logonData.filterUser;\n                delete AppCache.userInfo.logonData.findGroupsForUserFilter;\n                delete AppCache.userInfo.logonData.groupKeyField;\n                delete AppCache.userInfo.logonData.mapGroup;\n                delete AppCache.userInfo.logonData.mapUser;\n                delete AppCache.userInfo.logonData.searchBase;\n                delete AppCache.userInfo.logonData.searchFilter;\n                delete AppCache.userInfo.logonData.searchGroupFilter;\n                delete AppCache.userInfo.logonData.searchUserFilter;\n            } catch (e) { }\n        }\n\n        // Azure Bearer \n        if (AppCache.userInfo.logonData && AppCache.userInfo.logonData.type === 'azure-bearer') {\n            let tokenData = localStorage.getItem('p9azuretoken');\n            let tokenDatav2 = localStorage.getItem('p9azuretokenv2');\n\n            if (tokenData || tokenDatav2) {\n                try {\n                    if (tokenDatav2) {\n                        AppCacheLogonAzure.Relog(null);\n                    } else {\n\n                        AppCache.userInfo.azureToken = JSON.parse(tokenData);\n                        AppCache.userInfo.azureUser = AppCacheLogonAzure._parseJwt(AppCache.userInfo.azureToken.id_token);\n                        AppCache.userInfo.authDecrypted = AppCache.userInfo.azureToken.refresh_token;\n\n                        if (AppCache.userInfo.azureToken.refresh_token) {\n                            AppCacheLogonAzure.Relog(AppCache.userInfo.azureToken.refresh_token);\n                        }\n                    }\n                } catch (e) { }\n            }\n        }\n\n        // OIDC Bearer \n        if (AppCache.userInfo.logonData && AppCache.userInfo.logonData.type === 'openid-connect') {\n            let tokenDataOIDC = localStorage.getItem('p9oidctoken');\n            if (tokenDataOIDC) {\n                try {\n                    AppCache.userInfo.oidcToken = JSON.parse(tokenData);\n                    AppCache.userInfo.oidcUser = AppCacheLogonOIDC._parseJwt(AppCache.userInfo.azureToken.id_token);\n                    AppCache.userInfo.authDecrypted = AppCache.userInfo.oidcToken.refresh_token;\n                } catch (e) { }\n            }\n        }\n\n        // localStorage.removeItem('p9azuretoken');\n        // localStorage.removeItem('p9azuretokenv2');\n        // localStorage.removeItem('p9oidctoken');\n        // localStorage.removeItem('p9logonData');\n    },\n\n    getUserInfo: function () {\n        fetchUserInfo(\n            function (data) {\n                appCacheLog('Successfully received User Info from P9');\n                appCacheLog(data);\n                AppCache.afterUserInfo(false, data);\n                AppCache_boxLogon.setVisible(false);\n            },\n            function (result, error) {\n                appCacheError('Error getting User Info (getUserInfo)');\n\n                // Cookie Disabled ? \n                if (result.status === 401) {\n                    console.error('getUserInfo: 401 Not authenticated. Please check system settings and security for cookie settings')\n                }\n\n                AppCache.afterUserInfo(true);\n            }\n        );\n    },\n\n    updateUserInfo: function () {\n        return new Promise(function (resolve) {\n            appCacheLog('AppCache.updateUserInfo: Starting');\n\n            fetchUserInfo(\n                function (userInfo) {\n                    appCacheLog('AppCache.updateUserInfo: Successfully received User Info from P9');\n                    appCacheLog(userInfo);\n\n                    if (userInfo && userInfo.length) {\n                        let u = userInfo[0];\n                        let user = ModelData.FindFirst(AppCacheUsers, 'username', u.username);\n\n                        if (user) {\n                            user = Object.assign({}, user, {\n                                group: u.group || [],\n                                roles: u.roles || [],\n                                language: u.language,\n                                mobile: u.mobile,\n                                phone: u.phone,\n                                email: u.email,\n                                name: u.name,\n                            });\n\n                            AppCacheUserActionText.setText(user.name || user.username);\n                            ModelData.Update(AppCacheUsers, 'username', user.username, user);\n                            setCacheAppCacheUsers();\n                        }\n                    }\n                    resolve('Ok');\n                },\n                function (result, _err) {\n                    appCacheError('Error getting User Info from (updateUserInfo)');\n                    appCacheError(result);\n                    resolve('Error');\n                }\n            );\n        });\n    },\n\n    afterSetUserInfo: function () {\n        if (refreshingAuth) {\n            setTimeout(() => {\n                this.afterSetUserInfo();\n            }, AppCache.DelayOnRefreshingToken.SetUserInfo);\n            return;\n        }\n\n        const userData = AppCache.userInfo;\n\n        // Azure/OIDC - No PIN Code\n        if (!AppCache.enablePasscode) {\n            if (AppCache.userInfo && AppCache.userInfo.azureToken) userData.azureToken = AppCache.userInfo.azureToken;\n            if (AppCache.userInfo && AppCache.userInfo.azureUser) userData.azureUser = AppCache.userInfo.azureUser;\n            if (AppCache.userInfo && AppCache.userInfo.oidcToken) userData.oidcToken = AppCache.userInfo.oidcToken;\n            if (AppCache.userInfo && AppCache.userInfo.oidcUser) userData.oidcUser = AppCache.userInfo.oidcUser;\n\n            const selectedKey = AppCache_loginTypes.getSelectedKey();\n            AppCache.userInfo.logonData = AppCache.getLogonTypeInfo(selectedKey);\n\n            // if modelDataSettings.oData.logonTypes fail to load\n            // by default logonData.type will be set to local, which might be incorrect\n            if (selectedKey === '') {\n                if (userData.azureToken || userData.azureUser) AppCache.userInfo.logonData.type = 'azure-bearer';\n                if (userData.oidcToken || userData.oidcUser) AppCache.userInfo.logonData.type = 'openid-connect';\n            }\n\n            if (isPWAEnabled()) {\n                if (AppCache.userInfo.logonData.type === 'azure-bearer') AppCacheLogonAzure.Signout();\n                if (AppCache.userInfo.logonData.type === 'openid-connect') AppCacheLogonOIDC.Signout();\n            }\n        }\n\n        // Set Layout\n        getCacheAppCacheDiaSettings(true);\n        if (AppCache.layout) {\n            if (modelAppCacheDiaSettings.oData && modelAppCacheDiaSettings.oData.userTheme) {\n                sap.n.Launchpad.applyUserTheme();\n            }\n        }\n\n        // Desktop \n        if (!AppCache.isMobile) {\n            AppCache.translate(AppCache.userInfo.language);\n\n            cacheLoaded = 0;\n            getCacheAppCacheTiles(true);\n            getCacheAppCacheCategory(true);\n            getCacheAppCacheCategoryChild(true);\n            getCacheAppCacheTilesRun(true);\n            getCacheAppCacheTilesFav(true);\n            getCacheAppCacheCustomization(true);\n\n            (function () {\n                function waitForCache() {\n                    if (cacheLoaded >= 6) {\n                        AppCache.Update();\n                    } else {\n                        setTimeout(waitForCache, 50);\n                    }\n                }\n                waitForCache();\n            })();\n        } else {\n            // Translate if Mobile and not PIN Code\n            if (!AppCache.enablePasscode) {\n                AppCache.translate(AppCache.userInfo.language);\n            }\n\n            if (AppCache.enablePasscode) {\n                NumPad.Verify = true;\n                AppCache.setEnablePasscodeScreen();\n            } else {\n                NumPad.Verify = true;\n                AppCacheShellUser.setEnabled(true);\n                AppCacheUserActionLogoff.setVisible(true);\n                if (AppCache.biometricAuthentication) sap.n.Fingerprint.saveBasicAuth();\n                AppCache.Update();\n            }\n        }\n\n        // if pincode is disabled but Autolock is enabled\n        if (!AppCache.enablePasscode) {\n            AutoLockTimer.start();\n        }\n    },\n\n    afterUserInfo: function (offline, data) {\n        let userData = '';\n\n        if (offline && !AppCache.isMobile) {\n            getCacheAppCacheUsers();\n            userData = modelAppCacheUsers.oData[0];\n        } else {\n            if (data) {\n                userData = data[0];\n                ModelData.Update(AppCacheUsers, 'username', data[0].username, userData);\n                setCacheAppCacheUsers();\n            }\n        }\n\n        sap.ui.core.BusyIndicator.hide();\n        AppCache_inPassword.setValue();\n\n        if (AppCache.loginApp) AppCacheShellUI.setAppWidthLimited(true);\n\n        // User Information\n        if (userData) AppCache.userInfo = userData;\n        AppCache.setUserInfo();\n\n        this.afterSetUserInfo();\n    },\n\n    clearPasscodeInputs: function () {\n        const p1 = AppCache_inPasscode1;\n        const p2 = AppCache_inPasscode2;\n\n        p1.setValue().setValueState('None');\n        p2.setValue().setValueState('None');\n    },\n\n    SetPasscode: function () {\n        const p1 = AppCache_inPasscode1;\n        const p2 = AppCache_inPasscode2;\n\n        const v1 = p1.getValue().trim();\n        const v2 = p2.getValue().trim();\n\n        const v1Valid = isPincodeValid(v1);\n        const v2Valid = isPincodeValid(v2);\n\n        if (!v1Valid.isValid && v1Valid.errorMessage) {\n            showPincodeError(v1Valid.errorMessage);\n            AppCache.clearPasscodeInputs();\n            return p1.focus();\n        }\n\n        if (!v2Valid.isValid && v2Valid.errorMessage) {\n            showPincodeError(v2Valid.errorMessage);\n            AppCache.clearPasscodeInputs();\n            return p2.focus();\n        }\n\n        if (!v1) {\n            showPincodeError(pincodeEntryErrs().newPasscode, p1);\n            return p1.focus();\n        }\n\n        if (!v2) {\n            showPincodeError(pincodeEntryErrs().repeatPasscode, p2);\n            return p2.focus();\n        }\n\n        if (v2.length !== AppCache.passcodeLength) {\n            showPincodeError(pincodeEntryErrs().passcodeTooShort);\n            AppCache.clearPasscodeInputs();\n            return p1.focus();\n        }\n\n        if (v1 !== v2) {\n            showPincodeError(pincodeEntryErrs().passcodeNoMatch);\n            AppCache.clearPasscodeInputs();\n            return p1.focus();\n        }\n\n        // Clear Values\n        AppCache.Passcode = p1.getValue();\n        setTimeout(AppCache.clearPasscodeInputs, 1000);\n\n        // Store Authentication\n        const key = generatePBKDF2Key(AppCache.Passcode, AppCache.deviceID)\n        const encrypted = encryptAES(AppCache.Auth, key.toString());\n        AppCache.Encrypted = encrypted.toString();\n\n        // User Data \n        if (isCordova() && typeof cordova.plugins !== 'undefined' && typeof cordova.plugins.SecureKeyStore !== 'undefined') {\n            let sksKey = AppCache.AppID + '-' + AppCache.userInfo.username;\n            cordova.plugins.SecureKeyStore.set(function (res) { }, function (error) {\n                AppCache.userInfo.auth = encrypted.toString();\n            }, sksKey, encrypted.toString());\n        } else {\n            AppCache.userInfo.auth = encrypted.toString();\n        }\n\n        // Store data to user \n        if (isCordova() && !window.navigator.simulator && AppCache.biometricAuthentication) AppCache.userInfo.biometric = true;\n\n        // Logon Type \n        if (AppCache.samlData) {\n            AppCache.userInfo.logonData = AppCache.samlData;\n            AppCache.userInfo.logonData.type = 'saml';\n        } else {\n            AppCache.userInfo.logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\n        }\n\n        // Only Biometric for 1. User\n        if (modelAppCacheUsers.oData.length > 1) AppCache.userInfo.biometric = false;\n        if (modelAppCacheUsers.oData.length === 1 && modelAppCacheUsers.oData[0].username !== AppCache.userInfo.username) AppCache.userInfo.biometric = false;\n\n        // Save User Data  \n        setCacheAppCacheUsers();\n        modelAppCacheUsers.refresh();\n\n        // PWA - Azure \n        if (isPWAEnabled() && AppCache.userInfo.logonData.type === 'azure-bearer') {\n            AppCacheLogonAzure.Signout();\n        }\n\n        // PWA - OIDC \n        if (isPWAEnabled() && AppCache.userInfo.logonData.type === 'openid-connect') {\n            AppCacheLogonOIDC.Signout();\n        }\n\n        // Store passcode to OS SAMKeychain library or Android SecureStorage\n        if (isCordova() && !window.navigator.simulator && AppCache.biometricAuthentication) {\n\n            // Set OS SAMKeychain library and Android SecureStorage key\n            let serviceKey = AppCache.userInfo.username;\n            let dialogText = AppCache_tEnableFingerprint.getText();\n\n            if (sap.ui.Device.os.ios && sap.ui.Device.os.version >= 11 && device && device.model && device.model.indexOf('iPhone10') > 0) {\n                dialogText = AppCache_tEnableFaceId.getText();\n            }\n\n            if (sap.ui.Device.os.android && FingerprintAuth) {\n\n                try {\n                    FingerprintAuth.isAvailable(function (result) {\n\n                        if (result.isAvailable && result.hasEnrolledFingerprints) {\n\n                            // Prevent soft keyboard\n                            p1.setEnabled(false);\n                            p2.setEnabled(false);\n\n                            // Get user language\n                            let pluginLanguage = sap.n.Fingerprint.android.getLanguage(AppCache.userInfo.language);\n\n                            // Biometric authentication config\n                            let encryptConfig = {\n                                clientId: AppCache.AppID,\n                                username: serviceKey,\n                                password: AppCache.Passcode,\n                                disableBackup: true,\n                                maxAttempts: 5,\n                                locale: pluginLanguage,\n                                userAuthRequired: true,\n                                dialogMessage: dialogText\n                            };\n\n                            // Encrypt\n                            FingerprintAuth.encrypt(encryptConfig, function (result) {\n                                // Encryption success\n                                if (result.withFingerprint || result.withBackup) {\n                                    AppCache.userInfo.token = result.token;\n                                    setCacheAppCacheUsers();\n                                    AppCache.setEnablePasscodeEntry();\n                                } else {\n                                    AppCache.biometricAuthentication = false;\n                                    AppCache.userInfo.biometric = false;\n                                    setCacheAppCacheUsers();\n                                    AppCache.setEnablePasscodeEntry();\n                                }\n                            }, function (error) {\n                                AppCache.biometricAuthentication = false;\n                                AppCache.userInfo.biometric = false;\n                                setCacheAppCacheUsers();\n                                AppCache.setEnablePasscodeEntry();\n                            });\n                        } else {\n                            AppCache.biometricAuthentication = false;\n                            AppCache.userInfo.biometric = false;\n                            setCacheAppCacheUsers();\n                            AppCache.setEnablePasscodeEntry();\n                        }\n                    }, function (error) {\n                        AppCache.biometricAuthentication = false;\n                        AppCache.userInfo.biometric = false;\n                        setCacheAppCacheUsers();\n                        AppCache.setEnablePasscodeEntry();\n                    });\n                } catch (error) {\n                    AppCache.biometricAuthentication = false;\n                    AppCache.userInfo.biometric = false;\n                    setCacheAppCacheUsers();\n                    AppCache.setEnablePasscodeEntry();\n                }\n\n            } else if (sap.ui.Device.os.ios && typeof cordova.plugins !== 'undefined' && cordova.plugins.SecureKeyStore && typeof CID !== 'undefined') {\n\n                // Prevent soft keyboard\n                p1.setEnabled(false);\n                p2.setEnabled(false);\n\n                CID.checkAuth(dialogText, function (res) {\n\n                    if (res == 'success') {\n                        cordova.plugins.SecureKeyStore.set(function (res) {\n                            AppCache.setEnablePasscodeEntry();\n                        }, function (error) {\n                            console.log(error);\n                            AppCache.biometricAuthentication = false;\n                            AppCache.userInfo.biometric = false;\n                            setCacheAppCacheUsers();\n                            AppCache.setEnablePasscodeEntry();\n                        }, serviceKey, AppCache.Passcode);\n                    } else {\n                        console.log(res);\n                        AppCache.biometricAuthentication = false;\n                        AppCache.userInfo.biometric = false;\n                        setCacheAppCacheUsers();\n                        AppCache.setEnablePasscodeEntry();\n                    }\n\n                }, function (error) {\n                    console.log(error);\n                    AppCache.biometricAuthentication = false;\n                    AppCache.userInfo.biometric = false;\n                    setCacheAppCacheUsers();\n                    AppCache.setEnablePasscodeEntry();\n                });\n\n            } else {\n                AppCache.biometricAuthentication = false;\n                AppCache.userInfo.biometric = false;\n                setCacheAppCacheUsers();\n                AppCache.setEnablePasscodeEntry();\n            }\n\n        } else {\n            AppCache.setEnablePasscodeEntry();\n        }\n    },\n\n    RemoveAllCache: function () {\n\n        appCacheLog('AppCache.RemoveAllCache triggered');\n\n        // Remove iOS SAMKeychain library and Android SecureStorage keys\n        if (isCordova() && !window.navigator.simulator) {\n\n            if (sap.ui.Device.os.ios || sap.ui.Device.os.android) {\n\n                // KeyChain & SecureStorage\n                if (typeof cordova !== 'undefined' && typeof cordova.plugins !== 'undefined' && cordova.plugins.SecureKeyStore && modelAppCacheUsers.oData) {\n\n                    for (i = 0; i < modelAppCacheUsers.oData.length; i++) {\n\n                        let sksKey = AppCache.AppID + '-' + modelAppCacheUsers.oData[i].username;\n\n                        cordova.plugins.SecureKeyStore.remove(function (res) {\n                        }, function (error) {\n                            console.error(error);\n                        }, sksKey);\n                    }\n                }\n\n                let serviceKey;\n\n                // FingerprintAuth.delete\n                if (window.FingerprintAuth) {\n                    modelAppCacheUsers.oData.forEach(function (data) {\n                        if (!data.biometric) return true;\n                        serviceKey = data.username;\n                        try {\n                            FingerprintAuth.delete({\n                                clientId: AppCache.AppID,\n                                username: serviceKey\n                            }, function (result) {\n\n                            }, function (error) {\n                                console.error(error);\n                            });\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    });\n                }\n\n            }\n\n        }\n\n        // LocalStorage\n        localStorage.clear();\n\n        // IndexedDB\n        if (typeof p9Database !== 'undefined' && p9Database !== null) {\n            let db, tx, store;\n\n            db = p9Models.result;\n\n            tx = db.transaction('model', 'readwrite');\n            store = tx.objectStore('model');\n            store.clear();\n\n            db = p9Views.result;\n            tx = db.transaction('view', 'readwrite');\n            store = tx.objectStore('view');\n            store.clear();\n        }\n\n        // Old implementation\n        if (typeof p9ModelsDB !== 'undefined') p9ModelsDB.p9Models.clear();\n        if (typeof p9ViewsDB !== 'undefined') p9ViewsDB.p9Views.clear();\n\n        modelAppCacheUsers.setData([]);\n        modelAppCacheData.setData([]);\n        modelAppCacheTiles.setData([]);\n        modelAppCacheTilesRun.setData([]);\n        modelAppCacheCategory.setData([]);\n        modelAppCacheCategoryChild.setData([]);\n\n    },\n\n    Update: function () {\n        setiOSPWAIcons();\n        appCacheLog('AppCache.Update: Starting');\n        \n        let afterPromise = function () {\n            if (AppCache.isMobile) {\n                appCacheLog('AppCache.Update: Starting mobile');\n                AppCache.restrictedDisable();\n            } else {\n                appCacheLog('AppCache.Update: Starting desktop');\n                AppCache.UpdateGetData();\n            }\n\n            // PushNotification\n            try {\n                // Mobile \n                if (AppCache.enablePush && isCordova()) {\n                    setTimeout(function () {\n                        if (AppCache.isRestricted) return;\n                        appCacheLog('PushNotifications: Starting setup mobile');\n                        sap.n.Push.setupPush();\n                    }, 1000 * 3);\n                }\n\n                // Desktop\n                if (typeof setupNotifications === 'function') {\n                    setTimeout(function () {\n                        if (AppCache.isRestricted) return;\n                        appCacheLog('PushNotifications: Starting setup desktop');\n                        setupNotifications();\n                    }, 1000 * 3);\n                }\n\n            } catch (e) {\n                console.log(e);\n            }\n\n            // Auto Update \n            if (AppCache.enableAutoUpdate) AppCache.AutoUpdateMobileApp();\n\n            // Enhancement\n            if (sap.n.Enhancement.AfterUpdate) {\n                try {\n                    sap.n.Enhancement.AfterUpdate();\n                } catch (e) {\n                    appCacheError('Enhancement AfterUpdate ' + e);\n                }\n            }\n\n        }\n\n        // Enhancement\n        if (sap.n.Enhancement.BeforeUpdate) {\n            try {\n                let actions = [];\n                actions.push(sap.n.Enhancement.BeforeUpdate());\n                Promise.all(actions).then(function (values) {\n                    afterPromise();\n                });\n            } catch (e) {\n                appCacheError('Enhancement BeforeUpdate ' + e);\n            }\n        } else {\n            afterPromise();\n        }\n\n    },\n\n    UpdateGetData: function () {\n        // Wrapped this in a promise so apps that use UpdateGetData can determine when it has completed.\n        return new Promise(function (resolve) {\n            appCacheLog('AppCache.UpdateGetData: Starting');\n\n            if (AppCache.StartApp) {\n                // Start App\n                sap.n.Launchpad.currentTile = {\n                    id: AppCache.StartApp.toUpperCase(),\n                };\n\n                AppCacheShellUI.setAppWidthLimited(false);\n                sap.ui.core.BusyIndicator.hide();\n            } else if (AppCache.StartWebApp) {\n                // Start WebApp\n                AppCacheShellUI.setAppWidthLimited(false);\n                sap.ui.core.BusyIndicator.hide();\n            }\n\n            // Payload\n            let dataRequest = {\n                deviceType: sap.n.Launchpad.deviceType(),\n                launchpad: AppCache.launchpadID,\n                apps: []\n            }\n\n            // Save Current Tiles/Category\n            currCategory = JSON.parse(JSON.stringify(modelAppCacheCategory.oData));\n            currCategoryChild = JSON.parse(JSON.stringify(modelAppCacheCategoryChild.oData));\n            currTiles = JSON.parse(JSON.stringify(modelAppCacheTiles.oData));\n            currFav = JSON.parse(JSON.stringify(modelAppCacheTilesFav.oData));\n\n            // Hide BusyIndicator of already cached data \n            if (currTiles.length) sap.ui.core.BusyIndicator.hide();\n\n            // Duplicate Check & System Split\n            let uniqueApps = {};\n            let appSystems = {};\n\n            Array.isArray(modelAppCacheData.oData) && modelAppCacheData.oData.forEach(function (data) {\n                if (!data.appPath || data.appPath === 'null') data.appPath = '';\n                if (!uniqueApps[data.application + '|' + data.appPath]) uniqueApps[data.application + '|' + data.appPath] = data;\n            });\n\n            for (let key in uniqueApps) {\n                let keyData = key.split('|');\n                let appPath = keyData[1];\n\n                if (appPath) {\n                    if (!appSystems[appPath]) appSystems[appPath] = [];\n                    appSystems[appPath].push(uniqueApps[key]);\n                } else {\n                    dataRequest.apps.push(uniqueApps[key]);\n                }\n            }\n\n            appCacheLog('AppCache.UpdateGetData: Apps to check update before getTiles');\n            appCacheLog(dataRequest);\n\n            if (AppCache.isOffline) {\n                sap.n.Customization.initOffline().then(() => {\n                    if (!AppCache.StartApp && !AppCache.StartWebApp) {\n                        sap.n.Launchpad.BuildMenu();\n                    }\n\n                    sap.n.Customization.Popover.init();\n                });\n                sap.ui.core.BusyIndicator.hide();\n                return resolve();\n            }\n\n            let tilesInCache = [];\n            fakePromise(getCacheAppCacheTiles(false), modelAppCacheTiles, (model) => Array.isArray(model.getData()), []).then(tiles => {\n                tilesInCache = !Array.isArray(tiles) ? [] : tiles; // un-initialized modelAppCacheTiles is an object\n            }).then(() => {\n                sap.n.Planet9.function({\n                    id: dataSet,\n                    method: 'GetTiles',\n                    data: dataRequest,\n                    success: function (data) {\n                        if (data.status && isLaunchpadNotFound(data.status)) {\n                            showLaunchpadNotFoundError(data.status);\n                            return resolve();\n                        }\n\n                        if (\n                            !AppCache.isPublic // for non-public launchpads\n                            && typeof AppCache.userInfo === 'object' && Object.values(AppCache.userInfo).length > 0 // user must be logged in\n                            && tilesInCache.length === 0 && data.tiles.length > 0 // no local tile getting loaded from server for the first time\n                        ) {\n                            busyDialogStartup.open();\n                        }\n\n                        // Blackout\n                        if (data.blackout) {\n                            sap.m.MessageBox.show(data.blackout.message, {\n                                title: data.blackout.title || 'System Status',\n                                onClose: function (oAction) {\n                                    if (AppCache.isMobile) {\n                                        if (AppCache.enablePasscode) {\n                                            AppCache.Lock();\n                                        } else {\n                                            AppCache.Logout();\n                                        }\n                                    } else {\n                                        topShell.setBlocked(true);\n                                    }\n                                }\n                            });\n                            return resolve();\n                        }\n\n                        if (!data.categoryChilds) data.categoryChilds = [];\n\n                        modelAppCacheData.setData(data.apps);\n                        modelAppCacheTiles.setData(data.tiles);\n                        modelAppCacheCategory.setData(data.category);\n                        modelAppCacheCategoryChild.setData(data.categoryChilds);\n\n                        if (data.fav && data.fav.tiles) {\n                            modelAppCacheTilesFav.setData(data.fav.tiles);\n                        } else {\n                            modelAppCacheTilesFav.setData([]);\n                        }\n\n                        // Check if UI5 Version Changed \n                        let ui5Version = localStorage.getItem('p9ui5version');\n                        if (ui5Version !== sap.ui.version) {\n                            data.apps.forEach(function (app) {\n                                app.invalid = true;\n                            });\n                            localStorage.setItem('p9ui5version', sap.ui.version);\n                        }\n\n                        // Get App Update from Other Systems\n                        let action = [];\n                        for (let key in appSystems) { action.push(AppCache.UpdateGetDataRemote(appSystems[key])); }\n                        AppCache.hideGlobalAjaxError = true;\n                        Promise.all(action).then(function (values) {\n                            AppCache.hideGlobalAjaxError = false;\n\n                            // Merge App Check Data from Remote Systems \n                            values.forEach(function (value) {\n                                // SAP \n                                if (value && value.result && value.result.apps) {\n                                    value.result.apps.forEach(function (app) {\n                                        modelAppCacheData.oData.push({\n                                            appType: app.apptype,\n                                            application: app.application,\n                                            updatedAt: app.updatedat,\n                                            invalid: app.invalid,\n                                            language: app.language,\n                                            appPath: app.apppath\n                                        });\n                                    });\n                                } else {\n                                    if (value && value.length) ModelData.AddArray(AppCacheData, value);\n                                }\n                            });\n\n                            // Save Cache\n                            setCacheAppCacheData();\n                            setCacheAppCacheTiles();\n                            setCacheAppCacheCategory();\n                            setCacheAppCacheCategoryChild();\n                            setCacheAppCacheTilesFav();\n\n                            appCacheLog('AppCache.UpdateGetData: after getTiles and saved to database');\n\n                            sap.n.Ajax.SuccessGetMenu();\n                            sap.ui.core.BusyIndicator.hide();\n\n                            // Check Update of StartApp \n                            data.apps.forEach(function (app) {\n                                if (sap.n.Launchpad.currentTile &&\n                                    sap.n.Launchpad.currentTile.actionApplication &&\n                                    app.application.toLowerCase() === sap.n.Launchpad.currentTile.actionApplication.toLowerCase() &&\n                                    app.invalid) AppCache.Load(sap.n.Launchpad.currentTile.actionApplication);\n                            });\n\n                            // Fetch all Apps if on Mobile \n                            if (AppCache.isMobile && !isPWAEnabled()) {\n                                data.tiles.forEach(function (tile) {\n                                    if (tile.actionApplication || tile.tileApplication) sap.n.Ajax.loadApps(tile);\n                                });\n                            }\n\n                            if (AppCache.StartApp) {\n                                AppCache.Load(AppCache.StartApp);\n                                // Start WebApp\n                            } else if (AppCache.StartWebApp) {\n                                AppCache.LoadWebApp(AppCache.StartWebApp);\n                            }\n\n                            resolve();\n                        });\n\n                        sap.n.Customization.init(data).then(() => {\n                            if (!AppCache.StartApp && !AppCache.StartWebApp) {\n                                sap.n.Launchpad.BuildMenu();\n                            }\n\n                            busyDialogStartup.close();\n                            sap.n.Customization.Popover.init();\n                        });\n                    },\n                    error: function (result, status) {\n                        sap.ui.core.BusyIndicator.hide();\n                        busyDialogStartup.close();\n\n                        // We must load existing versions of the start app if we failed to fetch new ones\n                        if (AppCache.StartApp) {\n                            AppCache.Load(AppCache.StartApp);\n                            // Start WebApp\n                        } else if (AppCache.StartWebApp) {\n                            AppCache.LoadWebApp(AppCache.StartWebApp);\n                        }\n\n                        if (result.responseJSON && result.responseJSON.status && isLaunchpadNotFound(result.responseJSON.status)) {\n                            showLaunchpadNotFoundError(result.responseJSON.status);\n                            return resolve();\n                        }\n\n                        resolve();\n                    }\n                });\n            });\n        });\n    },\n\n    UpdateGetDataRemote: function (apps) {\n        return new Promise(function (resolve, reject) {\n            let url = '';\n            let headers = {};\n            let dataRequest = apps;\n            let app = apps[0];\n            let dataTile = ModelData.FindFirst(AppCacheTiles, 'urlApplication', app.appPath);\n\n            if (!dataTile) resolve();\n            if (!apps.length) resolve();\n\n            // URL\n            if (dataTile.urlType === 'SAP') {\n                headers.NeptuneServer = dataTile.urlApplication;\n                url = '/proxy/remote/' + encodeURIComponent(dataTile.urlApplication + '/neptune/api/server/app_check_update') + '/' + dataTile.urlAuth;\n            } else {\n                url = '/api/functions/Launchpad/CheckUpdate?p9Server=' + dataTile.urlApplication;\n                url = '/proxy/remote/' + encodeURIComponent(dataTile.urlApplication + url) + '/' + dataTile.urlAuth;\n            }\n\n            // Authentication ID\n            headers['X-Auth-In-P9'] = dataTile.urlAuth;\n\n            // Enhancement\n            if (sap.n.Enhancement.RemoteSystemAuth) {\n                try {\n                    sap.n.Enhancement.RemoteSystemAuth(headers);\n                } catch (e) {\n                    appCacheError('Enhancement RemoteSystemAuth ' + e);\n                }\n            }\n\n            jsonRequest({\n                url: url,\n                data: JSON.stringify(dataRequest),\n                headers: headers,\n                success: function (data) {\n                    resolve(data);\n                },\n                error: function (result, status) {\n                    resolve([]);\n                }\n            });\n        });\n    },\n\n    enableExternalTools: function () {\n\n        // SAP Conversational AI\n        if (AppCache.config.sapcai_enabled && AppCache.config.sapcai_channelid && AppCache.config.sapcai_token && !sap.n.Launchpad.isPhone()) {\n\n            window.webchatMethods = {\n                getMemory: function (conversationId) {\n                    let userName = AppCache.userInfo.name || 'anonymous';\n                    let userId = AppCache.userInfo.username || 'anonymous';\n                    let userLanguage = AppCache.userInfo.language || 'na';\n                    let customData = AppCache.sapCAICustomData || {};\n\n                    const memory = {\n                        userName: userName,\n                        userId: userId,\n                        userLanguage: userLanguage,\n                        customData: customData\n                    }\n\n                    return { memory: memory, merge: true }\n                }\n            }\n\n            if (!document.getElementById('cai-webchat')) {\n                let s = document.createElement('script');\n                s.setAttribute('id', 'cai-webchat');\n                s.setAttribute('src', 'https://cdn.cai.tools.sap/webchat/webchat.js');\n                s.setAttribute('channelId', AppCache.config.sapcai_channelid);\n                s.setAttribute('token', AppCache.config.sapcai_token);\n                document.body.appendChild(s);\n            } else {\n                let s = document.getElementById('cai-webchat');\n                s.setAttribute('channelId', AppCache.config.sapcai_channelid);\n                s.setAttribute('token', AppCache.config.sapcai_token);\n            }\n        } else {\n            if (document.getElementById('cai-webchat')) document.getElementById('cai-webchat').style.visibility = 'hidden';\n        }\n\n        // IBM Watson Assistant\n        if (AppCache.config.watson_enabled && AppCache.config.watson_integrationid && AppCache.config.watson_region && AppCache.config.watson_instanceid && !sap.n.Launchpad.isPhone()) {\n            window.watsonAssistantChatOptions = {\n                integrationID: AppCache.config.watson_integrationid,\n                region: AppCache.config.watson_region,\n                serviceInstanceID: AppCache.config.watson_instanceid,\n                onLoad: function (instance) { instance.render(); }\n            };\n\n            setTimeout(function () {\n                const t = document.createElement('script');\n                t.src = 'https://web-chat.global.assistant.watson.appdomain.cloud/loadWatsonAssistantChat.js';\n                document.head.appendChild(t);\n            });\n        }\n\n    },\n\n    disableExternalTools: function () {\n        // SAP Conversational AI\n        if (AppCache.config.sapcai_enabled) {\n            if (document.getElementById('cai-webchat')) {\n                let caiChat = document.getElementsByClassName('CaiAppChat')[0];\n                let caiExpander = document.getElementsByClassName('CaiAppExpander')[0];\n\n                if (caiChat && caiExpander) {\n                    caiChat.classList.remove('open');\n                    caiChat.classList.add('close');\n                    caiExpander.classList.remove('close');\n                    caiExpander.classList.add('open');\n                }\n            }\n        }\n\n        // IBM Watson Assistant\n        if (AppCache.config.watson_enabled) {\n            if (document.getElementById('WACWidget')) {\n                let watsonChat = document.getElementById('WACWidget');\n                let watsonExpander = document.getElementsByClassName('WACLauncher__ButtonContainer')[0];\n                // let watsonSvg = document.getElementsByClassName('WACLauncher__svg')[0];\n\n                if (watsonChat && watsonExpander) {\n                    watsonChat.classList.add('WACWidget--closed');\n                    watsonExpander.classList.remove('WACLauncher__ButtonContainer--open');\n                    // watsonSvg.classList.remove('ACLauncher__svg--open');\n                }\n            }\n        }\n    },\n\n    Home: function () {\n        location.hash = 'Home';\n    },\n\n    _Home: function () {\n        // Clear HashNavigation\n        location.hash = '';\n\n        let eventId;\n        let preventDefault = false;\n\n        if (sap.n.Launchpad.currentTile && sap.n.Launchpad.currentTile.id) {\n            eventId = sap.n.Launchpad.currentTile.id;\n        } else {\n            eventId = AppCache.CurrentApp.toUpperCase();\n        }\n\n        if (sap.n.Apps[eventId] && sap.n.Apps[eventId].beforeHome) {\n            sap.n.Apps[eventId].beforeHome.forEach(function (data) {\n                let oEvent = new sap.ui.base.Event('beforeHome', new sap.ui.base.EventProvider());\n                data(oEvent);\n                if (oEvent.bPreventDefault) preventDefault = true;\n                oEvent = null;\n            });\n        }\n\n        // Default behaviour was avoided\n        if (preventDefault) return;\n\n        if (AppCache.StartApp) {\n            return;\n        }\n\n        sap.n.Launchpad.SelectHomeMenu();\n        sap.n.Launchpad.setHideHeader(false);\n        sap.n.currentView = '';\n\n        // Title\n        sap.n.Launchpad.SetHeader();\n        sap.n.Layout.setHeaderPadding();\n        sap.n.Launchpad.handleAppTitle(AppCache.launchpadTitle);\n    },\n\n    Back: function () {\n        if (AppCacheNav.getCurrentPage().sId === 'AppCachePageStore') {\n            AppCache.Home();\n            return;\n        }\n\n        location.hash = 'Back';\n    },\n\n    _Back: function () {\n        // Clear HashNavigation\n        location.hash = '';\n\n        let eventId;\n        let preventDefault = false;\n\n        if (sap.n.Launchpad.currentTile && sap.n.Launchpad.currentTile.id) {\n            eventId = sap.n.Launchpad.currentTile.id;\n        } else {\n            eventId = AppCache.CurrentApp.toUpperCase();\n        }\n\n        if (sap.n.Apps[eventId] && sap.n.Apps[eventId].beforeBack) {\n            sap.n.Apps[eventId].beforeBack.forEach(function (data) {\n                let oEvent = new sap.ui.base.Event('beforeBack', new sap.ui.base.EventProvider());\n                data(oEvent);\n                if (oEvent.bPreventDefault) preventDefault = true;\n                oEvent = null;\n            });\n        }\n\n        // Default behaviour was avoided\n        if (preventDefault) return;\n\n        // Close Objects \n        AppCacheShellHelp.setVisible(false);\n        AppCacheShellDebug.setVisible(false);\n        sap.n.Shell.closeSidepanel();\n\n        // Navigate \n        if (AppCacheNav.getCurrentPage().sId.indexOf('page') > -1) {\n            AppCacheNav.back();\n        } else {\n            if (!sap.n.Launchpad.backApp) {\n                AppCache.Home();\n            } else if (sap.n.Launchpad.backApp && sap.n.currentView && sap.n.currentView.sViewName === sap.n.Launchpad.backApp.sViewName) {\n                AppCache.Home();\n            } else {\n                AppCacheNav.backToPage(sap.n.Launchpad.backApp);\n            }\n        }\n\n        //  Back Button - Only hide when top menu. \n        let cat = AppCacheNav.getCurrentPage().sId;\n        cat = cat.split('page')[1];\n\n        let top = ModelData.FindFirst(AppCacheCategory, 'id', cat);\n\n        if (top) {\n            if (!sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(false);\n            sap.n.Launchpad.setShellWidth();\n            sap.n.Launchpad.MarkTopMenu(top.id);\n            sap.n.Launchpad.handleAppTitle(AppCache.launchpadTitle);\n        } else {\n            if (!sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(true);\n            let sub = ModelData.FindFirst(AppCacheCategoryChild, 'id', cat);\n            sap.n.Launchpad.setShellWidth();\n            sap.n.Launchpad.handleAppTitle(sub.title);\n        }\n\n        sap.n.Launchpad.backApp = AppCacheNav.getCurrentPage();\n        sap.n.Launchpad.setHideHeader(false);\n\n        // Clear currentTile\n        sap.n.Launchpad.currentTile = {};\n        sap.n.currentView = '';\n\n        // Title\n        sap.n.Launchpad.SetHeader();\n        sap.n.Layout.setHeaderPadding();\n    },\n\n    setEnablePasscodeEntry: function () {\n        closeContentNavigator();\n        sap.n.Launchpad.setHideTopButtons(true);\n\n        // Handle userInfo \n        if (modelAppCacheUsers.oData.length === 1) AppCache.userInfo = modelAppCacheUsers.oData[0];\n        AppCache.setUserInfo();\n\n        delete AppCache.userInfo.azureToken;\n        AppCache.translate(AppCache.userInfo.language);\n\n        AppCache_boxPasscodeEntry.setVisible(true);\n        AppCacheNav.to('AppCache_boxPasscodeEntry', 'show');\n        AppCache.handleUserMenu();\n\n        // biometricAuthentication supported ? \n        appCacheLog('setEnablePasscodeEntry: Before biometric, enabled: ' + AppCache.biometricAuthentication);\n\n        if (!window.navigator.simulator && window.cordova !== undefined && AppCache.biometricAuthentication) {\n            const { os } = sap.ui.Device;\n            const fp = sap.n.Fingerprint;\n            if (os.ios && CID !== undefined) {\n                fp.ios.checkSupport();\n            } else if (os.android && window.FingerprintAuth) {\n                FingerprintAuth.isAvailable(fp.android.onSupported, fp.android.notSupported);\n            }\n        }\n\n        // Fetch Encrypted String\n        const { userInfo } = AppCache;\n\n        if (typeof cordova !== 'undefined') {\n            const c = cordova;\n            if (c !== undefined && c.plugins !== undefined && c.plugins.SecureKeyStore !== undefined) {\n                const sksKey = `${AppCache.AppID}-${userInfo.username}`;\n                c.plugins.SecureKeyStore.get(function (res) {\n                    AppCache.Encrypted = res;\n                    appCacheLog('setEnablePasscodeEntry: Got data from SecureKeyStorage');\n                }, function (err) {\n                    AppCache.Encrypted = userInfo.auth;\n                    appCacheLog(`setEnablePasscodeEntry: Error ${err}`);\n                }, sksKey);\n            }\n        } else {\n            AppCache.Encrypted = userInfo.auth;\n            appCacheLog('setEnablePasscodeEntry: Fallback solution');\n        }\n    },\n\n    setEnablePasscodeScreen: function () {\n        if (!NumPad.Verify) return;\n\n        closeContentNavigator();\n        sap.n.Launchpad.setHideTopButtons(true);\n        AppCache_inPasscode1.setEnabled(true);\n        AppCache_inPasscode2.setEnabled(true);\n        AppCache_inPasscode1.setMaxLength(AppCache.passcodeLength);\n        AppCache_inPasscode2.setMaxLength(AppCache.passcodeLength);\n\n        // use numeric keyboard for pincode and repeat pincode entry\n        function pincodeInputAfterRendering() {\n            let ref = this.getDomRef();\n            if (ref.nodeName.toUpperCase() !== 'INPUT') {\n                ref = ref.querySelector('input[type=\"password\"]');\n            }\n\n            if (typeof ref !== 'undefined') {\n                ref.setAttribute(\"inputmode\", \"numeric\");\n            }\n        }\n        AppCache_inPasscode1.onAfterRendering = pincodeInputAfterRendering;\n        AppCache_inPasscode2.onAfterRendering = pincodeInputAfterRendering;\n        \n        AppCache.handleUserMenu();\n\n        // PWA - Webauthn\n        if (isPWAEnabled() && AppCache.enablePasscode && AppCache.config.enableWebAuth && (window.PublicKeyCredential !== undefined || typeof window.PublicKeyCredential === 'function')) {\n\n            AppCache.userInfo.biometric = true;\n            if (modelAppCacheUsers.oData.length > 1) AppCache.userInfo.biometric = false;\n            if (modelAppCacheUsers.oData.length === 1 && modelAppCacheUsers.oData[0].username !== AppCache.userInfo.username) AppCache.userInfo.biometric = false;\n\n            if (AppCache.userInfo.biometric) {\n\n                sap.n.Webauthn.register(AppCache.userInfo).then(function (userid) {\n                    if (userid === 'ERROR') {\n                        AppCacheNav.to('AppCache_boxPasscode', 'show');\n                    } else {\n                        // Store Authentication\n                        const key = generatePBKDF2Key(userid, AppCache.deviceID)\n                        const encrypted = encryptAES(AppCache.Auth, key.toString());\n                        AppCache.Encrypted = encrypted.toString();\n                        AppCache.userInfo.auth = encrypted.toString();\n\n                        // Logon Type \n                        if (AppCache.samlData) {\n                            AppCache.userInfo.logonData = AppCache.samlData;\n                            AppCache.userInfo.logonData.type = 'saml';\n                        } else {\n                            AppCache.userInfo.logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\n                        }\n\n                        modelAppCacheUsers.oData[0].webauthid = userid;\n                        setCacheAppCacheUsers();\n                        AppCache.Update();\n                    }\n                })\n\n            } else {\n                AppCacheNav.to('AppCache_boxPasscode', 'show');\n            }\n\n        } else {\n            AppCacheNav.to('AppCache_boxPasscode', 'show');\n        }\n    },\n\n    setEnablePasswordScreen: function () {\n        closeContentNavigator();\n        sap.n.Launchpad.setHideTopButtons(true);\n        AppCacheNav.to('AppCache_boxPassword', 'show');\n        AppCache.handleUserMenu();\n    },\n\n    setEnableUsersScreen: function () {\n        closeContentNavigator();\n        sap.n.Launchpad.setHideTopButtons(true);\n        AppCacheShellUser.setIcon('sap-icon://fa-solid/user-circle');\n        AppCacheNav.to('AppCache_boxUsers', 'show');\n        AppCache.handleUserMenu();\n        AppCache.calculateUserScreen();\n    },\n\n    calculateUserScreen: function () {\n\n        if (modelAppCacheUsers.oData.length > 1) {\n            toolUsersSort.setVisible(true);\n            toolUsersFilter.setVisible(true);\n            setTimeout(function () {\n                toolUsersFilter.focus();\n            }, 250);\n        } else {\n            toolUsersSort.setVisible(false);\n            toolUsersFilter.setVisible(false);\n        }\n\n        // Calculate Heights \n        if (sap.n.Launchpad.isPhone()) {\n\n            if (modelAppCacheUsers.oData.length <= 1) {\n                AppCacheUserScroll.setHeight('100px');\n                return;\n            }\n\n            if (modelAppCacheUsers.oData.length <= 2) {\n                AppCacheUserScroll.setHeight('200px');\n                return;\n            }\n\n            if (modelAppCacheUsers.oData.length <= 3) {\n                AppCacheUserScroll.setHeight('300px');\n                return;\n            }\n\n            if (modelAppCacheUsers.oData.length > 4) {\n                AppCacheUserScroll.setHeight('400px');\n                return;\n            }\n\n        }\n\n        // Desktop\n        if (modelAppCacheUsers.oData.length <= 1) {\n            AppCache_boxLogonUsers.setHeight('75%');\n            AppCacheUserScroll.setHeight('100px');\n            return;\n        }\n\n        if (modelAppCacheUsers.oData.length <= 2) {\n            AppCache_boxLogonUsers.setHeight('75%');\n            AppCacheUserScroll.setHeight('200px');\n            return;\n        }\n\n        if (modelAppCacheUsers.oData.length <= 3) {\n            AppCache_boxLogonUsers.setHeight('75%');\n            AppCacheUserScroll.setHeight('300px');\n            return;\n        }\n\n        if (modelAppCacheUsers.oData.length <= 4) {\n            AppCache_boxLogonUsers.setHeight('75%');\n            AppCacheUserScroll.setHeight('400px');\n            return;\n        }\n\n        if (modelAppCacheUsers.oData.length <= 5) {\n            AppCache_boxLogonUsers.setHeight('100%');\n            AppCacheUserScroll.setHeight('500px');\n            return;\n        }\n\n        if (modelAppCacheUsers.oData.length > 5) {\n            AppCache_boxLogonUsers.setHeight('100%');\n            AppCacheUserScroll.setHeight('600px');\n        }\n    },\n\n    setEnableLogonScreen: function () {\n        AppCache.samlData = false;\n\n        closeContentNavigator();\n        sap.n.Launchpad.setHideTopButtons(true);\n\n        // Login App \n        if (AppCache.loginApp !== '' && AppCache.loginApp !== 'null') {\n            if (AppCache_boxLogonCustom.getContent().length === 0) {\n                AppCache.loginApp();\n                AppCache.setSettings(true);\n            }\n            AppCacheNav.to('AppCache_boxLogonCustom', 'show');\n            AppCacheShellUI.setAppWidthLimited(false);\n        } else {\n            AppCacheNav.to('AppCache_boxLogon', 'show');\n        }\n\n        AppCache.handleUserMenu();\n\n        // Biometric \n        if (AppCache.biometricAuthentication && !AppCache.enablePasscode) sap.n.Fingerprint.getBasicAuth();\n\n        AppCacheNav.rerender();\n\n    },\n\n\n    handleUserMenu: function () {\n        [\n            AppCacheUserActionSettings, AppCacheUserActionSwitch, AppCacheUserActionLock,\n            AppCacheUserActionPassword, AppCacheUserActionLogin, AppCacheUserActionLogoff,\n            AppCacheUserActionEditScreen,\n        ].forEach(function (ua) {\n            ua.setVisible(false);\n        });\n\n        AppCacheShellUser.setEnabled(true);\n        NumPad.KeypressHandlerRemove();\n\n        const pageId = AppCacheNav.getCurrentPage().sId;\n\n        function setAppWidth() {\n            if ([\n                'AppCache_boxLogon', 'AppCache_boxPassword', 'AppCache_boxPasscode',\n                'AppCache_boxPasscodeEntry', 'AppCache_boxUsers', 'AppCache_boxCaptcha'\n            ].includes(pageId)) {\n                AppCacheShellUI.setAppWidthLimited(true);\n            }\n        }\n\n        function setShellTitle() {\n            const titles = {\n                'AppCache_boxLogon': AppCache_Screen_Login.getText(),\n                'AppCache_boxPasscode': AppCache_Screen_PIN.getText(),\n                'AppCache_boxPasscodeEntry': AppCache_Screen_PINEntry.getText(),\n                'AppCache_boxUsers': AppCache_Screen_Users.getText(),\n            };\n            if (sap.n.Launchpad.isPhone() && titles[pageId] !== undefined) {\n                AppCacheShellTitle.setVisible(true);\n                AppCacheShellTitle.setText(titles[pageId]);\n            }\n        }\n\n        function setSwitchUserOption() {\n            if (['AppCache_boxPassword', 'AppCache_boxCaptcha', 'AppCache_boxPasscodeEntry'].includes(pageId)) {\n                AppCacheUserActionSwitch.setVisible(true);\n            }\n        }\n\n        function setShellUserIcon() {\n            if (['AppCache_boxPasscode', 'AppCache_boxUsers'].includes(pageId)) {\n                AppCacheShellUser.setEnabled(false);\n            }\n        }\n\n        function handleNumPadKeyEvents() {\n            if (pageId === 'AppCache_boxPasscodeEntry') {\n                NumPad.KeypressHandlerSet();\n                butNumpad1.focus();\n            }\n        }\n\n        setAppWidth();\n        setShellTitle();\n        setSwitchUserOption();\n        setShellUserIcon()\n\n        if (['AppCache_boxLogon', 'AppCache_boxLogonCustom'].includes(pageId)) {\n            if (AppCache.enablePasscode && modelAppCacheUsers.oData.length > 0) {\n                AppCacheUserActionSwitch.setVisible(true);\n            } else {\n                AppCacheShellUser.setEnabled(false);\n            }\n        }\n\n        handleNumPadKeyEvents();\n    },\n\n    getSettings: function () {\n        appCacheLog('Getting settings from P9 server');\n\n        let url = AppCache.Url + '/user/logon/types?launchpad=' + AppCache.launchpadID;\n        if (AppCache.mobileClient) url += '&mobileclient=' + AppCache.mobileClient;\n\n        request({\n            type: 'GET',\n            url: url,\n            success: function (data) {\n                appCacheLog('Successfully received settings from P9 server');\n\n                // Save Data \n                AppCache.currentSettings = modelDataSettings.oData;\n                modelDataSettings.setData(data);\n                setCacheDataSettings();\n\n                // Handle Startup Actions \n                AppCache.setSettings(true);\n            },\n            error: function (result, status) {\n                appCacheError('Error receiving settings from P9 server, using cached data');\n            }\n        });\n    },\n\n    setSettings: function (skipStartup) {\n        if (!modelDataSettings.oData.settings) {\n            if (!skipStartup) AppCache.Startup();\n            return;\n        }\n\n        let data = modelDataSettings.oData;\n        let forceRestart = false;\n\n        // Enhancement\n        if (sap.n.Enhancement.BeforeSetSettingsMobile) {\n            try {\n                sap.n.Enhancement.BeforeSetSettingsMobile(data);\n            } catch (e) {\n                appCacheError('Enhancement BeforeSetSettingsMobile ' + e);\n            }\n        }\n\n        if ('serviceWorker' in navigator) {\n            // TODO see if it works without timeout and on a public launchpad\n            setTimeout(() => {\n                setCachablePwaResources();\n                ensurePWACache();\n            }, 2000);\n        }\n\n        // Get System Name/Description \n        if (data.settings.name) txtFormLoginSubTitle1.setText(data.settings.name);\n        if (data.settings.description) txtFormLoginSubTitle2.setText(data.settings.description);\n\n        // Parse Logon Types\n        let idps = [];\n\n        data.logonTypes.sort(sort_by('description', false));\n\n        AppCache_loginTypes.removeAllItems();\n\n        if (!data.settingsLaunchpad.config.hideLoginLocal || !data.logonTypes.length) {\n            AppCache_loginTypes.addItem(new sap.ui.core.Item({\n                key: 'local',\n                text: 'Local'\n            }));\n        }\n\n        for (let i = 0, length = data.logonTypes.length; i < length; i++) {\n            if (data.logonTypes[i].show) {\n\n                if (data.logonTypes[i].type === 'saml') continue;\n                if (data.logonTypes[i].type === 'oauth2') continue;\n\n                AppCache_loginTypes.addItem(new sap.ui.core.Item({\n                    key: data.logonTypes[i].id,\n                    text: data.logonTypes[i].description\n                }));\n\n                if (!AppCache.config.hideLoginSelection) AppCache_loginTypes.setVisible(true);\n            }\n        }\n\n        if (AppCache.config && AppCache.config.hideLoginSelection) AppCache_loginTypes.setVisible(false);\n        if (AppCache.defaultLoginIDP) AppCache_loginTypes.setSelectedKey(AppCache.defaultLoginIDP);\n\n        // Texts \n        if (data.customizing.length) {\n\n            if (data.customizing[0].txtLogin1Enable || data.customizing[0].txtLogin2Enable || data.customizing[0].txtLogin3Enable) {\n                panLinksPin.setVisible(true);\n                panLinksUsers.setVisible(true);\n                panLinksPass.setVisible(true);\n                panLinks.setVisible(true);\n            }\n\n            if (data.customizing[0].txtLogin1Enable) {\n                linkText1.setText(data.customizing[0].txtLogin1Label);\n                linkText1.setVisible(true);\n                linkPassText1.setText(data.customizing[0].txtLogin1Label);\n                linkPassText1.setVisible(true);\n                linkPinText1.setText(data.customizing[0].txtLogin1Label);\n                linkPinText1.setVisible(true);\n                linkUsersText1.setText(data.customizing[0].txtLogin1Label);\n                linkUsersText1.setVisible(true);\n            }\n\n            if (data.customizing[0].txtLogin2Enable) {\n                linkText2.setText(data.customizing[0].txtLogin2Label);\n                linkText2.setVisible(true);\n                linkSep1.setVisible(true);\n                linkPassText2.setText(data.customizing[0].txtLogin2Label);\n                linkPassText2.setVisible(true);\n                linkPassSep1.setVisible(true);\n                linkPinText2.setText(data.customizing[0].txtLogin2Label);\n                linkPinText2.setVisible(true);\n                linkPinSep1.setVisible(true);\n                linkUsersText2.setText(data.customizing[0].txtLogin2Label);\n                linkUsersText2.setVisible(true);\n                linkUsersSep1.setVisible(true);\n            }\n\n            if (data.customizing[0].txtLogin3Enable) {\n                linkText3.setText(data.customizing[0].txtLogin3Label);\n                linkText3.setVisible(true);\n                linkSep2.setVisible(true);\n                linkPassText3.setText(data.customizing[0].txtLogin3Label);\n                linkPassText3.setVisible(true);\n                linkPassSep2.setVisible(true);\n                linkPinText3.setText(data.customizing[0].txtLogin3Label);\n                linkPinText3.setVisible(true);\n                linkPinSep2.setVisible(true);\n                linkUsersText3.setText(data.customizing[0].txtLogin3Label);\n                linkUsersText3.setVisible(true);\n                linkUsersSep2.setVisible(true);\n            }\n\n        }\n\n        // AppCache - Launchpad\n        if (data.settingsLaunchpad) {\n\n            if (typeof data.settingsLaunchpad.enableNotifications !== 'undefined' && data.settingsLaunchpad.enableNotifications) AppCache.enablePush = data.settingsLaunchpad.enableNotifications;\n            if (typeof data.settingsLaunchpad.limitWidth !== 'undefined' && data.settingsLaunchpad.limitWidth) AppCache.limitWidth = data.settingsLaunchpad.limitWidth;\n            if (typeof data.settingsLaunchpad.startApp !== 'undefined') AppCache.StartApp = data.settingsLaunchpad.startApp;\n\n            // Config\n            if (data.settingsLaunchpad.config) {\n                if (data.settingsLaunchpad.config.hideLoginSelection) AppCache_loginTypes.setVisible(false);\n                if (data.settingsLaunchpad.config.hideTopHeader) AppCache.hideTopHeader = true;\n                if (data.settingsLaunchpad.config.languages) sap.n.Launchpad.applyLanguages(data.settingsLaunchpad.config.languages);\n                if (data.settingsLaunchpad.config.loginTitle) txtFormLoginSubTitle1.setText(data.settingsLaunchpad.config.loginTitle);\n                if (data.settingsLaunchpad.config.loginSubTitle) txtFormLoginSubTitle2.setText(data.settingsLaunchpad.config.loginSubTitle);\n\n                // Enhancement\n                if (data.settingsLaunchpad.config.enhancement) {\n                    try {\n                        eval(data.settingsLaunchpad.config.enhancement);\n                    } catch (e) {\n                        console.log(e);\n                    }\n                }\n\n            }\n\n            if (data.settingsLaunchpad.layout) {\n                AppCache.layout = data.settingsLaunchpad.layout;\n                sap.n.Launchpad.applyLayout(AppCache.layout[0]);\n            }\n\n        }\n\n        // AppCache - Mobile \n        if (data.settingsMobile) {\n\n            // Changes no restart \n            if (typeof data.settingsMobile.pincodeTries !== 'undefined') AppCache.numPasscode = data.settingsMobile.pincodeTries;\n            if (typeof data.settingsMobile.autolock !== 'undefined') AppCache.timerLock = data.settingsMobile.autolock;\n\n            if (typeof data.settingsMobile.resetPasswordUrl !== 'undefined' && data.settingsMobile.resetPasswordUrl) {\n                AppCache.passUrlReset = data.settingsMobile.resetPasswordUrl;\n                AppCache_resetPassword.setVisible(true);\n            } else {\n                AppCache_resetPassword.setVisible(false);\n            }\n\n            // Changes requires restart\n            if (typeof data.settingsMobile.pincode !== 'undefined') {\n                AppCache.enablePasscode = data.settingsMobile.pincode;\n                if (skipStartup && AppCache.currentSettings && AppCache.currentSettings.settingsMobile && AppCache.currentSettings.settingsMobile.pincode !== data.settingsMobile.pincode) forceRestart = true;\n            }\n\n            if (typeof data.settingsMobile.fingerprint !== 'undefined') {\n                AppCache.biometricAuthentication = data.settingsMobile.fingerprint;\n                if (skipStartup && AppCache.currentSettings && AppCache.currentSettings.settingsMobile && AppCache.currentSettings.settingsMobile.fingerprint !== data.settingsMobile.fingerprint) forceRestart = true;\n            }\n\n            // PIN Code\n            if (typeof data.settingsMobile.pincodeLength !== 'undefined' && AppCache.passcodeLength !== data.settingsMobile.pincodeLength) {\n                AppCache.passcodeLength = data.settingsMobile.pincodeLength;\n                modelAppCacheUsers.setData([]);\n                if (skipStartup && AppCache.currentSettings && AppCache.currentSettings.settingsMobile) forceRestart = true;\n            }\n\n            // Auto Update \n            if (data.settingsMobile.enableAutoUpdate) {\n                AppCache.enableAutoUpdate = data.settingsMobile.enableAutoUpdate;\n            } else {\n                AppCache.enableAutoUpdate = false;\n            }\n\n            // MobileActive Version\n            if (data.settingsMobile.activeVersion) {\n                AppCache.AppVersionActive = data.settingsMobile.activeVersion;\n                if (data.settingsMobile.builds && data.settingsMobile.builds.length) AppCache.AppVersionActiveID = data.settingsMobile.builds[0].id;\n            }\n\n        }\n\n        // Custom Login App - Mobile Client\n        if (AppCache.loginApp && AppCache_boxLogonCustom.getContent().length) {\n            if (AppCache.loginAppSetSettings) AppCache.loginAppSetSettings(modelDataSettings.oData);\n        }\n\n        // Set Logon Screen\n        sap.n.Utils.setLogonScreen();\n\n        // Startup\n        if (!skipStartup) {\n            AppCache.Startup();\n        } else {\n            if (forceRestart) {\n                sap.m.MessageToast.show(AppCache_tRestartForced.getText());\n                AppCache.Startup();\n            }\n        }\n\n        // Clear \n        AppCache.currentSettings = null;\n    },\n\n    Startup: function () {\n        // Check if CurrentConfig\n        if (!AppCache.CurrentConfig) {\n            sap.m.MessageToast.show(AppCache_tNoCurrentConfig.getText());\n            return;\n        }\n\n        // Enhancement\n        if (sap.n.Enhancement.global) {\n            try {\n                sap.n.Enhancement.global();\n            } catch (e) {\n                console.error('Enhancement global ' + e);\n            }\n        }\n\n        if (sap.n.Enhancement.BeforeStartup) {\n            try {\n                sap.n.Enhancement.BeforeStartup();\n            } catch (e) {\n                console.error('Enhancement BeforeStartup ' + e);\n            }\n        }\n\n        // Device ID\n        AppCache.deviceID = localStorage.getItem('AppCacheID');\n\n        if (!AppCache.deviceID) {\n            AppCache.deviceID = ModelData.genID();\n            localStorage.setItem('AppCacheID', AppCache.deviceID);\n        }\n\n        // Reset Password Link\n        if (AppCache.passUrlReset && AppCache.passUrlReset !== 'null') AppCache_resetPassword.setVisible(true);\n\n        // Set Launchpad Icons\n        setLaunchpadIcons();\n\n        // Get Cache\n        appCacheLog('AppCache.Startup: Loading Apps');\n        getCacheAppCacheData();\n\n        // Mobile or Desktop \n        if (AppCache.isMobile) {\n\n            if (isPWAEnabled()) {\n                AppCache.Url = location.origin;\n            }\n\n            appCacheLog('AppCache.Startup: Mobile Client');\n\n            AppCache.translate(navigator.language.slice(0, 2).toUpperCase());\n\n            // Status Bar - Fullscreen\n            if (typeof StatusBar !== 'undefined') {\n                if (AppCache.isFullscreen) StatusBar.hide();\n                StatusBar.overlaysWebView(false);\n            }\n\n            // Set URL for resources from Server \n            imgWindows.setSrc(AppCache.Url + imgWindows.getSrc());\n            imgAndroid.setSrc(AppCache.Url + imgAndroid.getSrc());\n            imgIos.setSrc(AppCache.Url + imgIos.getSrc());\n\n            if (AppCache.isPublic) {\n                AppCacheShellUser.destroy();\n                AppCache.Update();\n\n                setTimeout(function () {\n                    if (typeof navigator.splashscreen !== 'undefined') navigator.splashscreen.hide();\n                }, 300);\n\n            } else {\n\n                appCacheLog('AppCache.Startup: Clear cookies');\n                AppCache.clearCookies();\n\n                appCacheLog('AppCache.Startup: Fetching users from database');\n                cacheLoaded = 0;\n\n                getCacheAppCacheUsers(true);\n\n                // incase of decryption error or for some other reason we fail to cacheLoaded++\n                //  we can continue forward using an attempt counter\n                \n                let waitingForCacheCounter = 0;\n                (function () {\n                    function waitForCache() {\n                        waitingForCacheCounter++;\n                        if (waitingForCacheCounter > 20 || cacheLoaded >= 1) {\n                            appCacheLog('AppCache.Startup: Got users from database');\n\n                            // If localStorage fails to decrypt\n                            if (!modelAppCacheUsers || !modelAppCacheUsers.oData) modelAppCacheUsers.oData = [];\n\n                            // Remove Users from Desktop, if used in browser\n                            for (i = 0; i < modelAppCacheUsers.oData.length; i++) {\n                                let data = modelAppCacheUsers.oData[i];\n                                if (!data.logonData || !data.logonData.type) data.delete = true;\n                            }\n\n                            ModelData.Delete(AppCacheUsers, 'delete', true);\n                            appCacheLog(modelAppCacheUsers.oData);\n\n                            // Passcode or Logon\n                            if (AppCache.enablePasscode) {\n                                // Set Visible Markers\n                                switch (AppCache.passcodeLength) {\n                                    case 6:\n                                        Passcode5.setVisible(true);\n                                        Passcode6.setVisible(true);\n                                        break;\n\n                                    case 8:\n                                        Passcode5.setVisible(true);\n                                        Passcode6.setVisible(true);\n                                        Passcode7.setVisible(true);\n                                        Passcode8.setVisible(true);\n                                        break;\n\n                                    default:\n                                        break;\n                                }\n\n                                if (!modelAppCacheUsers.oData.length) {\n                                    AppCache.setEnableLogonScreen();\n                                } else {\n                                    AppCache.setEnableUsersScreen();\n                                }\n                            } else {\n                                // Check for AutoLogin\n                                AppCacheLogonLocal.AutoLoginGet().then(function (auth) {\n\n                                    appCacheLog('AppCache.Startup: Autologin starting');\n\n                                    if (auth) {\n                                        let action = [];\n                                        AppCache.enableAutoLogin = true;\n                                        AppCacheLogonLocal.Init();\n                                        action.push(AppCacheLogonLocal.Relog(auth));\n                                        Promise.all(action).then(function (values) {\n                                            if (values[0] === 'OK') {\n                                                AppCache.getUserInfo(auth);\n                                                appCacheLog('AppCache.Startup: Autologin found user in database');\n                                            } else {\n                                                sap.m.MessageToast.show(AppCache_tWrongUserNamePass.getText());\n                                                AppCache.Logout();\n                                            }\n                                        });\n                                    } else {\n                                        AppCache.setEnableLogonScreen();\n                                        appCacheLog('AppCache.Startup: Autologin no user found in database');\n                                    }\n\n                                });\n\n                            }\n\n                            setTimeout(function () {\n                                if (typeof navigator.splashscreen !== 'undefined') navigator.splashscreen.hide();\n                            }, 300);\n                        } else {\n                            setTimeout(waitForCache, 50);\n                        }\n                    }\n                    waitForCache();\n                })()\n\n            }\n\n        } else {\n\n            appCacheLog('AppCache.Startup: Desktop Client');\n\n            AppCacheUserActionSettings.setVisible(true);\n            AppCache.isRestricted = false;\n\n            // Build URL\n            AppCache.Url = location.origin;\n\n            // Get User Data\n            if (AppCache.isPublic) {\n                AppCacheShellUser.destroy();\n                AppCache.Update();\n            } else {\n                AppCache.getUserInfo();\n            }\n\n        }\n\n        // App Title\n        sap.n.Launchpad.handleAppTitle(AppCache.launchpadTitle);\n\n        // Custom Logo\n        if (AppCache.CustomLogo && AppCache.CustomLogo !== 'null') {\n            setCustomLogo();\n        } else {\n            setDefaultLogo();\n        }\n\n        // Check for OffLine \n        if (!navigator.onLine) onOffline();\n\n        topShell.setVisible(true);\n\n        // PWA Install\n        setTimeout(function () {\n            if (_pwaInstall) {\n                AppCacheInstallPWASettings.setVisible(true);\n\n                if (modeldiaPWAInstall && modeldiaPWAInstall.oData) {\n                    const { visible } = modeldiaPWAInstall.getData()\n                    if (visible !== false) {\n                        diaPWAInstall.open();\n                    }\n                } else {\n                    diaPWAInstall.open();\n                }\n            }\n        }, 500);\n    },\n\n    _getLoginQuery() {\n        if (AppCache.mobileClient && AppCache.isMobile) {\n            return '?mobileClientID=' + AppCache.mobileClient;\n        }\n        return '';\n    }\n};\n\nwindow.AppCache = AppCache;","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":586},{"fieldNo":"8d26476f-0e36-47c8-b875-847c9b52c75b","fieldName":"coreLanguageHandler","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"AppCache.coreLanguageHandler = {\r\n    excludedLibraries: ['sap.n', 'sap.ui.unified.internal', 'nep.bootstrap'],\r\n    cldrBundle: {},\r\n\r\n    updateResourceBundlesNewLang: function (bundleLanguage) {\r\n        let loadedLibraries = sap.ui.getCore().getLoadedLibraries();\r\n        Object.entries(loadedLibraries).forEach(function ([_, library]) {\r\n            if (this.excludedLibraries.includes(library.name)) return true;\r\n\r\n            let currrentResourceBundle = sap.ui.getCore().getLibraryResourceBundle(library.name);\r\n            if (currrentResourceBundle && currrentResourceBundle.sLocale !== bundleLanguage) {\r\n                this.getResourceBundle(library.name, bundleLanguage)\r\n                    .then(function (newResourceBundle) {\r\n                        if (newResourceBundle && newResourceBundle.aPropertyFiles.length) {\r\n                            currrentResourceBundle.aPropertyFiles = newResourceBundle.aPropertyFiles;\r\n                        }\r\n                    });\r\n            }\r\n        }.bind(this));\r\n    },\r\n\r\n    getResourceBundle: function (ui5Lib, bundleLanguage) {\r\n        return new Promise(function (resolve, reject) {\r\n            sap.ui.require(['sap/base/i18n/ResourceBundle'], function (ResourceBundle) {\r\n                ResourceBundle.create({\r\n                    url: getResourceBundlePath(ui5Lib),\r\n                    async: true,\r\n                    locale: bundleLanguage\r\n                }).then(function (resourceBundle) {\r\n                    resolve(resourceBundle);\r\n                });\r\n            }.bind(this));\r\n        }.bind(this));\r\n    },\r\n\r\n    getUI5version: function () {\r\n        let sMajor = sap.ui.getCore().getConfiguration().getVersion().getMajor();\r\n        let sMinor = sap.ui.getCore().getConfiguration().getVersion().getMinor();\r\n        return `${sMajor}.${sMinor}`;\r\n    },\r\n\r\n    setNewCLDRbundle: function (bundleLang) {\r\n        const l = bundleLang.toLocaleLowerCase();\r\n        sapLoadLanguage(l === 'no' ? 'nb' : l).then(function (bundle) {\r\n            this.cldrBundle = bundle;\r\n            sap.ui.core.LocaleData.prototype._get = function () {\r\n                return this._getDeep(AppCache.coreLanguageHandler.cldrBundle, arguments);\r\n            };\r\n        }.bind(this));\r\n    }\r\n};","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":587},{"fieldNo":"731248db-c2b6-4e42-9442-3a2cd916c19c","fieldName":"AppCacheLogonOIDC","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"const AppCacheLogonOIDC = {\r\n    state: null,\r\n    options: {},\r\n    \r\n    Logon: function () {\r\n        this.options = getLogonData();\r\n\r\n        if (!isCordova()) {\r\n            if (location.protocol === 'file:') {\r\n                sap.m.MessageToast.show('Testing OIDC from file is not allowed due to CSRF issues. Please test in mobile app');\r\n                return;\r\n            }\r\n\r\n            refreshingAuth = true;\r\n            this._showLogonPopupAndWaitForCallbackUrl(`${AppCache.Url}/user/logon/openid-connect/${this.options.path}`)\r\n                .then((callbackUrl) => {\r\n                    refreshingAuth = false;\r\n                    if (callbackUrl) {\r\n                        setSelectedLoginType('openid-connect');\r\n                        const authResponse = this._getHashParamsFromUrl(callbackUrl);\r\n\r\n                        appCacheLog('OIDC: Got code');\r\n                        appCacheLog(authResponse);\r\n\r\n                        return this.P9LoginWithCode(authResponse);\r\n                    }\r\n                })\r\n                .catch(() => {\r\n                    refreshingAuth = false;\r\n                })\r\n        } else {\r\n            const logonWin = this._showLogonPopup(`${AppCache.Url}/user/logon/openid-connect/${this.options.path}`);\r\n\r\n            // Mobile InAppBrowser\r\n            logonWin.addEventListener('loadstop', () => {\r\n                logonWin.executeScript({ code: 'location.search' }, (url) => {\r\n                    const authResponse = this._getHashParamsFromUrl(url[0]);\r\n\r\n                    // Got response\r\n                    if (authResponse) {\r\n                        appCacheLog('LoadStop: Got search response');\r\n                        appCacheLog(authResponse);\r\n\r\n                        // Error \r\n                        if (authResponse.error) {\r\n                            logonWin.close();\r\n                            sap.m.MessageToast.show(authResponse.error);\r\n                            sap.ui.core.BusyIndicator.hide();\r\n                            return;\r\n                        }\r\n\r\n                        if (authResponse.code) {\r\n                            logonWin.close();\r\n                            this.P9LoginWithCode(authResponse);\r\n\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    },\r\n\r\n    Logoff: function () {\r\n        if (isOffline()) {\r\n            AppCache.clearCookies();\r\n            return;\r\n        }\r\n\r\n        this.Signout();\r\n        \r\n        jsonRequest({\r\n            url: `${AppCache.Url}/user/logout`,\r\n            success: (data) => {\r\n                AppCache.clearCookies();\r\n                appCacheLog('OIDC: Successfully logged out');\r\n            },\r\n            error: (result, status) => {\r\n                sap.ui.core.BusyIndicator.hide();\r\n                AppCache.clearCookies();\r\n                appCacheLog('OIDC: Successfully logged out, in offline mode');\r\n            }\r\n        });\r\n    },\r\n\r\n    Relog: function (refreshToken) {\r\n        this.options = getLogonData();\r\n        this.GetTokenWithRefreshToken(refreshToken, 'pin');\r\n    },\r\n\r\n    Init: function () {\r\n        this.options = getLogonData();\r\n    },\r\n\r\n    Signout: function () {\r\n        const logon = getLogonData();\r\n        const signOut = window.open(`${AppCache.Url}/user/logon/openid-connect/${logon.path}/logout`, '_blank', 'location=no,width=5,height=5,left=-1000,top=3000');\r\n\r\n        // if pop-ups are blocked signout window.open will return null\r\n        if (!signOut) return;\r\n\r\n        if (isCordova()) {\r\n            signOut.hide();\r\n            signOut.addEventListener('loadstop', () => {\r\n                signOut.close();\r\n            })\r\n        } else {\r\n            signOut.onload = () => {\r\n                signOut.close();\r\n            };\r\n\r\n            signOut.blur && signOut.blur();\r\n\r\n            setTimeout(() => {\r\n                signOut.close();\r\n            }, 5000);\r\n        }\r\n    },\r\n\r\n    GetTokenWithRefreshToken: function (refreshToken, process) {\r\n        this.options = getLogonData();\r\n        appCacheLog('OIDC: Starting method GetTokenWithRefreshToken');\r\n        \r\n        \r\n        return new Promise((resolve, reject) => {\r\n            refreshingAuth = true;\r\n            request({\r\n                type: 'POST',\r\n                url: `${AppCache.Url}/user/logon/openid-connect/${this.options.path}/token`,\r\n                contentType: 'application/x-www-form-urlencoded',\r\n                data: {\r\n                    grant_type: 'refresh_token',\r\n                    refresh_token: refreshToken,\r\n                },\r\n                success: (data) => {\r\n                    refreshingAuth = false;\r\n                    setSelectedLoginType('openid-connect');\r\n\r\n                    appCacheLog('OIDC: Got tokens from GetTokenWithRefreshToken');\r\n                    appCacheLog(data);\r\n\r\n                    this._onTokenReady(data);\r\n                    this.P9LoginWithToken(data, process);\r\n                    resolve(data);\r\n                },\r\n                error: (result) => {\r\n                    refreshingAuth = false;\r\n                    sap.ui.core.BusyIndicator.hide();\r\n\r\n                    let errorText = 'OIDC: Error getting token from GetTokenWithRefreshToken';\r\n\r\n                    if (result.responseJSON && result.responseJSON.error_description) {\r\n                        errorText = result.responseJSON.error_description;\r\n                    }\r\n\r\n                    sap.m.MessageToast.show(errorText);\r\n\r\n                    appCacheLog(errorText);\r\n                    AppCache.Logout();\r\n                    reject(result);\r\n                }\r\n            })\r\n        });\r\n\r\n    },\r\n\r\n    P9LoginWithCode: function (authResponse) {\r\n        this.options = getLogonData();\r\n        const url = `${AppCache.Url}/user/logon/openid-connect/${this.options.path}/callback?${serializeDataForQueryString(authResponse)}`;\r\n\r\n        sap.ui.core.BusyIndicator.show(0);\r\n        appCacheLog('OIDC: Starting method P9LoginWithCode');\r\n\r\n        return new Promise((resolve, reject) => {\r\n            refreshingAuth = true;\r\n            request({\r\n                type: 'GET',\r\n                url: url,\r\n                contentType: 'application/json',\r\n                headers: {\r\n                    'login-path': getLoginData(),\r\n                },\r\n                success: (data) => {\r\n                    refreshingAuth = false;\r\n                    appCacheLog('OIDC: Successfully logged on to P9. Starting process: Get User Info');\r\n                    appCacheLog(data);\r\n\r\n                    if (data.refresh_token) {\r\n                        AppCache.Auth = data.refresh_token;\r\n                    } else {\r\n                        console.error('OIDC: No refresh token is received');\r\n                        return;\r\n                    }\r\n\r\n                    this._onTokenReady(data);\r\n                    AppCache.getUserInfo();\r\n                },\r\n                error: (result) => {\r\n                    refreshingAuth = false;\r\n                    sap.ui.core.BusyIndicator.hide();\r\n\r\n                    if (result.responseJSON && result.responseJSON.status) {\r\n                        sap.m.MessageToast.show(result.responseJSON.status);\r\n                    }\r\n\r\n                    console.log('OIDC: Error login to P9.');\r\n                    console.log(result);\r\n                    reject(result);\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    P9LoginWithToken: function (token, process) {\r\n        this.options = getLogonData();\r\n        sap.ui.core.BusyIndicator.show(0);\r\n\r\n        appCacheLog('OIDC: Starting method P9LoginWithToken');\r\n        if (!token.id_token) {\r\n            console.error('OIDC: id_token is missing');\r\n            return;\r\n        }\r\n        appCacheLog(token.id_token)\r\n\r\n        refreshingAuth = true;\r\n        return new Promise((resolve, reject) => {\r\n            jsonRequest({\r\n                url: `${AppCache.Url}/user/logon/openid-connect/${this.options.path}/session${AppCache._getLoginQuery()}`,\r\n                headers: {\r\n                    'Authorization': `Bearer ${token.id_token}`,\r\n                },\r\n                success: (data) => {\r\n                    refreshingAuth = false;\r\n                    setSelectedLoginType('openid-connect');\r\n                    switch (process) {\r\n                        case 'pin':\r\n                            appCacheLog(`OIDC: Successfully logged on to P9. Starting process: ${process}`);\r\n\r\n                            // Start App\r\n                            NumPad.attempts = 0;\r\n                            NumPad.Clear();\r\n                            NumPad.Verify = true;\r\n                            AppCache.Encrypted = '';\r\n                            if (AppCache.isMobile) AppCache.Update();\r\n                            break;\r\n\r\n                        case 'refresh':\r\n                            appCacheLog('OIDC: Auto Refresh Session');\r\n                            break;\r\n\r\n                        default:\r\n                            break;\r\n\r\n                    }\r\n\r\n                },\r\n                error: (result) => {\r\n                    refreshingAuth = false;\r\n                    sap.ui.core.BusyIndicator.hide();\r\n                    let errorText = 'Error logging on P9, or P9 not online';\r\n                    if (result.responseJSON && result.responseJSON.status) errorText = result.responseJSON.status;\r\n                    appCacheLog(errorText);\r\n                    if (result.status === 0) onOffline();\r\n                    reject(result);\r\n                }\r\n            })\r\n        });\r\n\r\n    },\r\n\r\n    _onTokenReady: function (data, resourceToken) {\r\n        if (!AppCache.userInfo) {\r\n            AppCache.userInfo = {};\r\n        }\r\n\r\n        AppCache.userInfo.oidcToken = data;\r\n        AppCache.userInfo.oidcUser = AppCacheLogonAzure._parseJwt(AppCache.userInfo.oidcToken.id_token);\r\n\r\n        if (resourceToken) {\r\n            AppCache.userInfo.oidcResourceToken = resourceToken;\r\n        }\r\n\r\n        appCacheLog('OIDC: User Data');\r\n        appCacheLog(AppCache.userInfo);\r\n    },\r\n\r\n    _getHashParamsFromUrl: function (url) {\r\n\r\n        if (url.indexOf('?') < 0) return;\r\n\r\n        const queryString = url.split('?')[1];\r\n\r\n        let params = queryString.replace(/^(#|\\?)/, '');\r\n        let hashParams = {};\r\n        let e,\r\n            a = /\\+/g,\r\n            r = /([^&;=]+)=?([^&;]*)/g,\r\n            d = function (s) {\r\n                return decodeURIComponent(s.replace(a, ' '));\r\n            };\r\n        while (e = r.exec(params))\r\n            hashParams[d(e[1])] = d(e[2]);\r\n        return hashParams;\r\n    },\r\n\r\n    _showLogonPopupAndWaitForCallbackUrl: function (url) {\r\n        return new Promise((resolve, reject) => {\r\n            const popup = this._showLogonPopup(url);\r\n\r\n            (function check() {\r\n                if (popup.closed) {\r\n                    return resolve();\r\n                }\r\n\r\n                let callbackUrl = '';\r\n                try {\r\n                    callbackUrl = popup.location.href || '';\r\n                } catch (e) { }\r\n\r\n                if (callbackUrl) {\r\n                    if (callbackUrl.indexOf('code=') > -1) {\r\n                        console.log('Callbackurl: ', callbackUrl);\r\n                        popup.close();\r\n                        return resolve(callbackUrl);\r\n                    }\r\n                }\r\n                setTimeout(check, 100);\r\n            })();\r\n        });\r\n    },\r\n\r\n    _showLogonPopup: function (url) {\r\n        const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\r\n        const winTop = window.screenTop ? window.screenTop : window.screenY;\r\n\r\n        const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n        const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n\r\n        const popUpWidth = 500;\r\n        const popUpHeight = 650;\r\n        const left = ((width / 2) - (popUpWidth / 2)) + winLeft;\r\n        const top = ((height / 2) - (popUpHeight / 2)) + winTop;\r\n\r\n        const logonWin = window.open(url, '_blank', `location=no,width=${popUpWidth},height=${popUpHeight},left=${left},top=${top}`);\r\n        if (logonWin.focus) logonWin.focus();\r\n\r\n        return logonWin;\r\n    }\r\n}\r\n\r\nwindow.AppCacheLogonOIDC = AppCacheLogonOIDC;\r\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":588},{"fieldNo":"1e1100bd-e58d-4f16-94a4-6a4c81caa8e7","fieldName":"AppCacheLogonLocal","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"let AppCacheLogonLocal = {\n    autoLoginKey: '_p9_log',\n\n    Logon: function () {\n        sap.ui.core.BusyIndicator.show();\n\n        let rec = {\n            username: AppCache_inUsername.getValue().toLowerCase(),\n            password: AppCache_inPassword.getValue(),\n            loginid: AppCache_loginTypes.getSelectedKey()\n        };\n\n        AppCache.Auth = Base64.encode(JSON.stringify(rec));\n\n        jsonRequest({\n            url: AppCache.Url + '/user/logon/local' + AppCache._getLoginQuery(),\n            data: JSON.stringify(rec),\n            headers: {\n                'login-path': getLoginData(),\n            },\n            success: function (data) {\n                if (data.status && data.status === 'UpdatePassword') {\n                    const url = new URL(data.link, location.href);\n                    url.searchParams.append('reason', data.reason || 'other');\n                    location.replace(url.toString());\n                } else {\n                    setSelectedLoginType('local');\n                    AppCache.getUserInfo();\n                    AppCacheLogonLocal.AutoLoginSet();\n                }\n            },\n            error: function (result, status) {\n                if (result.status === 401) sap.m.MessageToast.show(AppCache_tWrongUserNamePass.getText());\n                if (result.status === 0) sap.m.MessageToast.show(AppCache_tNoConnection.getText());\n                AppCacheLogonLocal.AutoLoginRemove();\n                sap.ui.core.BusyIndicator.hide();\n            }\n        });\n    },\n\n    AutoLoginSet: function () {\n        if (AppCache_inRememberMe.getSelected()) {\n            if (typeof cordova !== 'undefined' && typeof cordova.plugins !== 'undefined' && typeof cordova.plugins.SecureKeyStore !== 'undefined') {\n                cordova.plugins.SecureKeyStore.set(\n                    function (res) { },\n                    function (error) {\n                        localStorage.setItem(AppCacheLogonLocal.autoLoginKey, AppCache.Auth);\n                    }, AppCacheLogonLocal.autoLoginKey, AppCache.Auth);\n            } else {\n                localStorage.setItem(AppCacheLogonLocal.autoLoginKey, AppCache.Auth);\n            }\n\n            AppCache.enableAutoLogin = true;\n        } else {\n            AppCacheLogonLocal.AutoLoginRemove();\n        }\n    },\n\n    AutoLoginRemove: function () {\n        AppCache.enableAutoLogin = false;\n        if (typeof cordova !== 'undefined' && typeof cordova.plugins !== 'undefined' && typeof cordova.plugins.SecureKeyStore !== 'undefined') {\n            cordova.plugins.SecureKeyStore.remove(\n                function (res) { },\n                function (error) {\n                    localStorage.removeItem(AppCacheLogonLocal.autoLoginKey);\n                }, AppCacheLogonLocal.autoLoginKey);\n        } else {\n            localStorage.removeItem(AppCacheLogonLocal.autoLoginKey);\n        }\n    },\n\n    AutoLoginGet: function () {\n        return new Promise(function (resolve, reject) {\n            if (typeof cordova !== 'undefined' && typeof cordova.plugins !== 'undefined' && typeof cordova.plugins.SecureKeyStore !== 'undefined') {\n                cordova.plugins.SecureKeyStore.get(\n                    function (res) {\n                        resolve(res);\n                    },\n                    function (error) {\n                        resolve(localStorage.getItem(AppCacheLogonLocal.autoLoginKey));\n                    }, AppCacheLogonLocal.autoLoginKey);\n            } else {\n                resolve(localStorage.getItem(AppCacheLogonLocal.autoLoginKey));\n            }\n        });\n    },\n\n    Relog: function (auth, process) {\n        refreshingAuth = true;\n        return new Promise(function (resolve, reject) {\n            let rec = Base64.decode(auth);\n\n            try {\n                rec = JSON.parse(rec);\n            } catch (e) {\n                console.log(e);\n                return resolve('ERROR');\n            }\n\n            jsonRequest({\n                url: AppCache.Url + '/user/logon/local' + AppCache._getLoginQuery(),\n                data: JSON.stringify(rec),\n                headers: {\n                    'login-path': getLoginData(),\n                },  \n                success: function (data) {\n                    refreshingAuth = false;\n                    if (data.status && data.status === 'UpdatePassword') {\n                        const url = new URL(data.link, location.href);\n                        url.searchParams.append('reason', data.reason || 'other');\n                        location.replace(url.toString());\n                        resolve('ERROR');\n                    } else {\n                        setSelectedLoginType('local');\n                        resolve('OK');\n                    }\n                },\n                error: function (result, status) {\n                    refreshingAuth = false;\n                    if (result.status === 0) {\n                        resolve('OK');\n                        onOffline();\n                    } else {\n                        resolve('ERROR');\n                    }\n                }\n            });\n        });\n    },\n\n    Logoff: function () {\n        if (navigator.onLine && AppCache.isOffline === false) {\n            jsonRequest({\n                url: AppCache.Url + '/user/logout',\n                success: function (data) {\n                    AppCache.clearCookies();\n                },\n                error: function (result, status) {\n                    AppCache.clearCookies();\n                }\n            });\n        }\n    },\n\n    Init: function () { }\n}\n\nwindow.AppCacheLogonLocal = AppCacheLogonLocal;","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":589},{"fieldNo":"8588f658-999e-45a2-85ff-633242d85e0f","fieldName":"AppCacheLogonSap","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"let AppCacheLogonSap = {\r\n\r\n    sapData: undefined,\r\n\r\n    Logon: function () {\r\n        sap.ui.core.BusyIndicator.show();\r\n\r\n        const rec = {\r\n            username: AppCache_inUsername.getValue(),\r\n            password: AppCache_inPassword.getValue()\r\n        };\r\n        AppCache.Auth = Base64.encode(JSON.stringify(rec));\r\n\r\n        let logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\r\n\r\n        if (!logonData.path && AppCache.userInfo && AppCache.userInfo.logonData) {\r\n            logonData = AppCache.getLogonTypeInfo(AppCache.userInfo.logonData.id);\r\n        }\r\n\r\n        jsonRequest({\r\n            url: AppCache.Url + '/user/logon/sap/' + logonData.path + AppCache._getLoginQuery(),\r\n            data: JSON.stringify(rec),\r\n            headers: {\r\n                'login-path': getLoginData(),\r\n            },\r\n            success: function (data) {\r\n                if (data.status === 'UpdatePassword') {\r\n                    sap.ui.core.BusyIndicator.hide();\r\n                    AppCache_formLogon.setVisible(false);      \r\n                    AppCache_formPasswordReset.setVisible(!isChpassDisabled());\r\n                    txtFormNewPassRequired.setVisible(true);\r\n                    AppCacheLogonSap.sapData = { detail: rec, path: logonData.path };\r\n                } else {\r\n                    setSelectedLoginType('sap');\r\n                    AppCache.getUserInfo();\r\n                }\r\n            },\r\n            error: function (result, status) {\r\n                if (result.status === 401) {\r\n                    sap.m.MessageToast.show(AppCache_tWrongUserNamePass.getText());\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    ResetPassword: function() {    \r\n        const { detail, path } = AppCacheLogonSap.sapData;\r\n        if (inNewPassword.getValue() !== inNewPassword2.getValue()) {\r\n            sap.m.MessageToast.show('Passwords doesn\\'t match!');\r\n        } else if (!inNewPassword.getValue()) {\r\n            sap.m.MessageToast.show('Please provide a password');\r\n        } else {\r\n            sap.ui.core.BusyIndicator.show();\r\n            jsonRequest({\r\n                url: AppCache.Url + '/user/logon/sap/' + path + AppCache._getLoginQuery(),\r\n                data: JSON.stringify({\r\n                    detail,\r\n                    password: inNewPassword.getValue()\r\n                }),\r\n                headers: {\r\n                    'login-path': getLoginData(),\r\n                },\r\n                success: function (data) {                    \r\n                    if (data.status === 'UpdatePassword') {                        \r\n                        sap.ui.core.BusyIndicator.hide();\r\n                        jQuery.sap.require('sap.m.MessageToast');\r\n                        sap.m.MessageToast.show(data.message);\r\n                        inNewPassword.setValueState('Error');\r\n                        inNewPassword2.setValueState('Error');\r\n                    } else {\r\n                        AppCache.Auth = Base64.encode(JSON.stringify({username: detail.username, password: inNewPassword.getValue()}));\r\n                        AppCache_formLogon.setVisible(!isChpassDisabled());      \r\n                        AppCache_formPasswordReset.setVisible(false);\r\n                        setSelectedLoginType('sap');\r\n                        AppCache.getUserInfo();\r\n                    }\r\n                },\r\n                error: function (result, status) {\r\n                    sap.ui.core.BusyIndicator.hide();\r\n\r\n                    jQuery.sap.require('sap.m.MessageBox');\r\n                    sap.m.MessageBox.show(result.responseJSON.status, {\r\n                        title: 'Error',\r\n                        icon: 'ERROR',\r\n                        actions: ['CLOSE'],\r\n                        onClose: function () { }\r\n                    });\r\n\r\n                    inNewPassword.setValueState('Error');\r\n                    inNewPassword2.setValueState('Error');\r\n                }\r\n            });\r\n        }\r\n    },\r\n\r\n    Relog: function (auth) {\r\n        refreshingAuth = true;\r\n        return new Promise(function (resolve, reject) {\r\n            let logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\r\n            if (!logonData.path && AppCache.userInfo && AppCache.userInfo.logonData) {\r\n                logonData = AppCache.getLogonTypeInfo(AppCache.userInfo.logonData.id);\r\n            }\r\n\r\n            let rec = Base64.decode(auth);\r\n            try {\r\n                rec = JSON.parse(rec);\r\n            } catch (e) { }\r\n\r\n            jsonRequest({\r\n                url: AppCache.Url + '/user/logon/sap/' + logonData.path + AppCache._getLoginQuery(),\r\n                data: JSON.stringify(rec),\r\n                headers: {\r\n                    'login-path': getLoginData(),\r\n                },\r\n                success: function (data) {\r\n                    refreshingAuth = false;\r\n                    setSelectedLoginType('sap');\r\n                    resolve(data);\r\n                },\r\n                error: function (result, status) {\r\n                    refreshingAuth = false;\r\n                    if (result.status === 0) {\r\n                        resolve('OK');\r\n                        onOffline();\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    Logoff: function () {\r\n        if (navigator.onLine && AppCache.isOffline === false) {\r\n            jsonRequest({\r\n                url: AppCache.Url + '/user/logout',\r\n                success: function (data) {\r\n                    AppCache.clearCookies();\r\n                },\r\n                error: function (result, status) {\r\n                    AppCache.clearCookies();\r\n                }\r\n            });\r\n        } else {\r\n            AppCache.clearCookies();\r\n        }\r\n    },\r\n\r\n    Init: function () { }\r\n}","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":590},{"fieldNo":"619eb084-d850-4549-d1ba-be94050ac8ea","fieldName":"AppCacheLogonLdap","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"let AppCacheLogonLdap = {\n    Logon: function () {\n        sap.ui.core.BusyIndicator.show();\n\n        let rec = {};\n        rec.username = AppCache_inUsername.getValue().toLowerCase();\n        rec.password = AppCache_inPassword.getValue();\n        rec.loginid = AppCache_loginTypes.getSelectedKey();\n        AppCache.Auth = Base64.encode(JSON.stringify(rec));\n\n        let logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\n\n        if (!logonData.path && AppCache.userInfo && AppCache.userInfo.logonData) {\n            logonData = AppCache.getLogonTypeInfo(AppCache.userInfo.logonData.id);\n        }\n\n        jsonRequest({\n            url: AppCache.Url + '/user/logon/ldap/' + logonData.path + AppCache._getLoginQuery(),\n            data: JSON.stringify(rec),\n            headers: {\n                'login-path': getLoginData(),\n            },\n            success: function (data) {\n                setSelectedLoginType('ldap');\n                AppCache.getUserInfo();\n            },\n            error: function (result, status) {\n                if (result.status === 401) {\n                    sap.m.MessageToast.show(AppCache_tWrongUserNamePass.getText());\n                }\n            }\n        });\n    },\n\n    Relog: function (auth) {\n        refreshingAuth = true;\n        return new Promise(function (resolve, reject) {\n            let logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\n            if (!logonData.path && AppCache.userInfo && AppCache.userInfo.logonData) {\n                logonData = AppCache.getLogonTypeInfo(AppCache.userInfo.logonData.id);\n            }\n\n            let rec = Base64.decode(auth);\n            try {\n                rec = JSON.parse(rec);\n            } catch (e) { }\n\n            jsonRequest({\n                url: AppCache.Url + '/user/logon/ldap/' + logonData.path + AppCache._getLoginQuery(),\n                data: JSON.stringify(rec),\n                headers: {\n                    'login-path': getLoginData(),\n                },\n                success: function (data) {\n                    refreshingAuth = false;\n                    setSelectedLoginType('ldap');\n                    resolve(data);\n                },\n                error: function (result, status) {\n                    refreshingAuth = false;\n                    if (result.status === 0) {\n                        resolve('OK');\n                        onOffline();\n                    } else {\n                        resolve();\n                    }\n                }\n            });\n        });\n    },\n\n    Logoff: function () {\n        if (navigator.onLine && AppCache.isOffline === false) {\n            jsonRequest({\n                url: AppCache.Url + '/user/logout',\n                success: function (data) {\n                    AppCache.clearCookies();\n                },\n                error: function (result, status) {\n                    AppCache.clearCookies();\n                }\n            });\n        } else {\n            AppCache.clearCookies();\n        }\n    },\n\n    Init: function () { }\n}","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":591},{"fieldNo":"374d0c99-e15b-4bcc-dbf1-7a8ca5d640e9","fieldName":"AppCacheLogonSaml","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"let AppCacheLogonSaml = {\n    Logon: function (data) {\n        refreshingAuth = true;\n        AppCache.Auth = JSON.stringify(data);\n        AppCache.samlData = data;\n\n        let loginWin = window.open(data.entryPoint, \"_blank\", \"location=yes\");\n\n        // Apply Event Hander for inAppBrowser\n        setTimeout(function () {\n            loginWin.addEventListener(\"loadstart\", function (event) {\n                // Check for login ok\n                fetchUserInfo(\n                    function (data) {\n                        refreshingAuth = false;\n                        AppCache.afterUserInfo(false, data);\n                        loginWin.close();\n                    },\n                    function (result, error) {\n                        // Not logged on\n                        refreshingAuth = false;\n                    }\n                );\n            });\n        }, 500);\n    },\n\n    Relog: function (data) {\n        refreshingAuth = true;\n        try {\n            data = JSON.parse(data);\n        } catch (e) {}\n        let loginWin = window.open(data.entryPoint, \"_blank\", \"location=yes\");\n\n        setTimeout(function () {\n            // apply event handler for inAppBrowser\n            loginWin.addEventListener(\"loadstart\", function (event) {\n                // check for login\n                fetchUserInfo(\n                    function (data) {\n                        refreshingAuth = false;\n\n                        // Clear\n                        NumPad.attempts = 0;\n                        NumPad.Clear();\n                        NumPad.Verify = true;\n\n                        // Start App\n                        AppCache.Encrypted = \"\";\n                        AppCache.Update();\n\n                        loginWin.close();\n                    },\n                    function (result, error) {\n                        // Not logged on\n                        refreshingAuth = false;\n                    }\n                );\n            });\n        }, 500);\n    },\n\n    Logoff: function () {\n        if (isOffline()) {\n            AppCache.clearCookies();\n            return;\n        }\n\n        // SAML Logout\n        const logon = getLogonData();\n        if (logon && logon.logoutUrl) {\n            request({\n                type: \"GET\",\n                contentType: \"application/json\",\n                url: logon.logoutUrl,\n            });\n        }\n\n        // P9 Logout\n        jsonRequest({\n            url: `${AppCache.Url}/user/logout`,\n            success: function (data) {\n                AppCache.clearCookies();\n            },\n            error: function (result, status) {\n                AppCache.clearCookies();\n            },\n        });\n    },\n\n    Init: function () {},\n};\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":592},{"fieldNo":"db664d5b-12d8-4fba-ea59-fe10784a4825","fieldName":"AppCacheLogonAzure","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"let AppCacheLogonAzure = {\n    state: null,\n    options: {},\n    fullUri: null,\n    redirectUri: '/public/azure_redirect.html',\n    msalObj: null,\n    loginScopes: ['user.read', 'profile', 'openid', 'offline_access'],\n\n    InitMsal: function () {\n        return new Promise((resolve) => {\n            if (this.msalObj) return resolve();\n\n            let msalUrl = '/public/ms/msal.js';\n            if (isCordova()) msalUrl = 'public/ms/msal.js';\n\n            AppCache.loadLibrary(msalUrl).then(() => {\n                this.msalObj = new msal.PublicClientApplication({\n                    auth: {\n                        clientId: this.options.clientID,\n                        authority: 'https://login.microsoftonline.com/' + this.options.tenantId,\n                        redirectUri: AppCache.Url ? `${AppCache.Url}${this.redirectUri}` : `${location.origin}${this.redirectUri}`,\n                    },\n                    cache: {\n                        cacheLocation: 'sessionStorage',\n                        storeAuthStateInCookie: false,\n                    }\n                });\n\n                resolve();\n            });\n        });\n    },\n\n    Logon: function (loginHint) {\n        this.options = this._getLogonData();\n\n        if (this.useMsal()) {\n            this._loginMsal();\n            return;\n        }\n\n        this.state = Date.now();\n        let logonWin = this._openPopup(this._loginUrl(loginHint));\n\n        if (!isCordova()) {\n            if (location.protocol === 'file:') {\n                sap.m.MessageToast.show('Testing Microsoft Entra ID from file is not allowed due to CSRF issues. Please test in mobile app');\n                return;\n            }\n\n            if (logonWin.focus) logonWin.focus();\n\n            // Browser\n            this._waitForPopupDesktop(logonWin, (url) => {\n                let authResponse = this._getHashParams(url);\n\n                // Get response\n                if (authResponse) {\n                    if (authResponse.error) {\n                        sap.m.MessageToast.show(authResponse.error);\n                        sap.ui.core.BusyIndicator.hide();\n                        return;\n                    }\n\n                    appCacheLog('Azure Logon: Got code');\n                    appCacheLog(authResponse);\n\n                    // Prevent cross-site request forgery attacks\n                    if (parseInt(authResponse.state) !== this.state) {\n                        sap.m.MessageToast.show('Cross-site request forgery detected');\n                        return;\n                    }\n\n                    // Request Access/Refresh Tokens \n                    this._getToken(authResponse);\n                } else {\n                    console.log('No token response, or window closed manually');\n                }\n            });\n        } else {\n            // Mobile InAppBrowser\n            logonWin.addEventListener('loadstop', () => {\n                logonWin.executeScript({ code: 'location.search' }, (url) => {\n                    let authResponse = this._getHashParams(url[0]);\n\n                    // Get response\n                    if (authResponse) {\n                        // Logging \n                        appCacheLog('LoadStop: Got search response');\n                        appCacheLog(authResponse);\n\n                        // Error \n                        if (authResponse.error) {\n                            logonWin.close();\n                            sap.m.MessageToast.show(authResponse.error);\n                            sap.ui.core.BusyIndicator.hide();\n                            return;\n                        }\n\n                        if (authResponse.state && authResponse.code) {\n                            logonWin.close();\n\n                            // Prevent cross-site request forgery attacks\n                            if (parseInt(authResponse.state) !== this.state) {\n                                sap.m.MessageToast.show('Cross-site request forgery detected');\n                                return;\n                            }\n\n                            // Request Access/Refresh Tokens \n                            this._getToken(authResponse);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    GetTokenPopup: function (request) {\n        return this.msalObj.acquireTokenSilent(request).catch((err) => {\n            if (err instanceof msal.InteractionRequiredAuthError) {\n                return this.msalObj.acquireTokenPopup(request).then(tokenResponse => {\n                    return tokenResponse;\n                }).catch(error => {\n                    appCacheError('Azure GetTokenPopup: ' + error);\n                });\n            } else {\n                appCacheError('Azure GetTokenPopup: ' + err);\n            }\n        });\n    },\n\n    Signout: function () {\n        localStorage.removeItem('p9azuretoken');\n        localStorage.removeItem('p9azuretokenv2');\n\n        if (this.options.azureSilentSignout) {\n            let signoutFrame = document.getElementById('azureSignout');\n            if (signoutFrame) signoutFrame.setAttribute('src', 'https://login.microsoftonline.com/common/oauth2/logout');\n        } else {\n            const signOut = window.open('https://login.microsoftonline.com/common/oauth2/logout', '_blank', 'location=no,width=5,height=5,left=-1000,top=3000');\n            \n            // if pop-ups are blocked signout window.open will return null\n            if (!signOut) return;\n            \n            signOut.blur && signOut.blur();\n\n            if (isCordova()) {\n                signOut.addEventListener('loadstop', () => {\n                    signOut.close();\n                });\n            } else {\n                signOut.onload = () => {\n                    signOut.close();\n                };\n\n                setTimeout(() => {\n                    signOut.close();\n                }, 1000);\n            }\n        }\n    },\n\n\n\n    Relog: function (refreshToken, process) {\n        this._setOptionsIfEmpty();\n        if (this.useMsal() && !this.msalObj) {\n            this.InitMsal().then(() => {\n                this._refreshToken(refreshToken, process);\n            });\n        } else {\n            this._refreshToken(refreshToken, process);\n        }\n    },\n\n    Logoff: function () {\n        // Logout Planet 9\n        if (navigator.onLine && AppCache.isOffline === false) {\n            this.Signout();\n\n            jsonRequest({\n                url: this.fullUri + '/user/logout',\n                success: (data) => {\n                    AppCache.clearCookies();\n                    appCacheLog('Azure Logon: Successfully logged out');\n                },\n                error: (result, status) => {\n                    sap.ui.core.BusyIndicator.hide();\n                    AppCache.clearCookies();\n                    appCacheLog('Azure Logon: Successfully logged out, in offline mode');\n                }\n            });\n        } else {\n            AppCache.clearCookies();\n        }\n    },\n\n    Init: function () {},\n\n    useMsal: function () {\n        if (this.options.azureMSALv2 && !isCordova()) return true;\n    },\n\n    _loginMsal: function () {\n        this.InitMsal().then(() => {\n            this.msalObj.loginPopup({ scopes: this.loginScopes, prompt: 'select_account' }).then((response) => {\n                AppCache.Auth = ModelData.genID();\n                this._loginP9(response.idToken);\n            }).catch((error) => {\n                if (error && error.toString().indexOf('Failed to fetch') > -1) {\n                    sap.m.MessageToast.show('Failed to fetch token. Redirect URI in azure must be set to Single Page Application');\n                } else {\n                    sap.m.MessageToast.show(error.toString());\n                }\n            });\n        });\n    },\n\n    _getHashParams: function (token) {\n        if (!token) return null;\n        if (token.indexOf('?') > -1) token = token.split('?')[1];\n\n        let params = token.replace(/^(#|\\?)/, '');\n        let hashParams = {};\n        let e,\n            a = /\\+/g,\n            r = /([^&;=]+)=?([^&;]*)/g,\n            d = function (s) {\n                return decodeURIComponent(s.replace(a, ' '));\n            };\n        while (e = r.exec(params)) {\n            hashParams[d(e[1])] = d(e[2]);\n        }\n        return hashParams;\n    },\n\n    _setOptionsIfEmpty: function() {\n        this._setFullUriIfEmpty();\n        if (Object.keys(this.options).length === 0) {\n            try {\n                this.options = JSON.parse(localStorage.getItem('p9logonData'));\n            } catch (err) {}\n        }\n    },\n\n    _setFullUriIfEmpty: function () {\n        if (!this.fullUri) {\n            this.fullUri = AppCache.Url || location.origin;\n        }\n    },\n\n    _getLogonData: function () {\n        this._setFullUriIfEmpty();\n\n        if (AppCache.userInfo && AppCache.userInfo.logonData) {\n            return AppCache.userInfo.logonData;\n        }\n\n        return AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\n    },\n\n    _authUrl: function (endPoint) {\n        return 'https://login.microsoftonline.com/' + this.options.tenantId + '/oauth2/v2.0/' + endPoint + '?';\n    },\n\n    _loginUrl: function (loginHint) {\n        let data = {\n            client_id: this.options.clientID,\n            redirect_uri: this.fullUri + this.redirectUri,\n            scope: this.loginScopes.join(' '),\n            // nonce: ModelData.genID(),\n            state: this.state,\n            prompt: 'select_account',\n            response_type: 'code'\n        };\n\n        if (loginHint) {\n            data.login_hint = loginHint;\n        }\n\n        return this._authUrl('authorize') + serializeDataForQueryString(data);\n    },\n\n    _logoutUrl: function () {\n        let data = {\n            post_logout_redirect_uri: this.fullUri + this.redirectUri\n        };\n\n        return this._authUrl('logout') + serializeDataForQueryString(data);\n    },\n\n    _onTokenReadyMsal: function (data, resourceToken) {\n        // Old token format.\n        AppCache.userInfo.azureToken = {\n            access_token: data.accessToken,\n            expires_in: (data.expiresOn - new Date()) / 1000,\n            ext_expires_in: ((data.extExpiresOn - new Date()) / 1000),\n            id_token: data.idToken,\n            refresh_token: 'N/A',\n            scope: data.scopes.join(' '),\n            token_type: 'Bearer',\n        };\n        //New token format\n        AppCache.userInfo.v2azureToken = data;\n        AppCache.userInfo.azureUser = this._parseJwt(AppCache.userInfo.azureToken.idToken);\n\n        if (resourceToken) {\n            AppCache.userInfo.v2azureResourceToken = resourceToken;\n        }\n\n        const nextRelog = (data.expiresOn - new Date()) - 120000;\n        setTimeout(() => {\n            this.Relog(null, 'refresh');\n        }, nextRelog);\n    },\n\n    _onTokenReady: function (data, resourceToken) {\n        if (!AppCache.userInfo) {\n            AppCache.userInfo = {};\n        }\n\n        if (!data.expires_on) {\n            data.expires_on = new Date();\n            data.expires_on.setSeconds(data.expires_on.getSeconds() + data.expires_in);\n            data.expires_on = data.expires_on.getTime();\n        }\n\n        // Autorelogin \n        let expire_in_ms = (data.expires_in * 1000) - 120000;\n\n        AppCache.userInfo.azureToken = data;\n        AppCache.userInfo.azureUser = this._parseJwt(AppCache.userInfo.azureToken.id_token);\n\n        if (resourceToken) {\n            AppCache.userInfo.azureResourceToken = resourceToken;\n        }\n\n        if (this.autoRelog) {\n            clearInterval(this.autoRelog);\n            this.autoRelog = null;\n        }\n\n        this.autoRelog = setInterval(() => {\n            if (AppCache.isRestricted && !AppCache.inBackground) return;\n            this.Relog(data.refresh_token, 'refresh');\n        }, expire_in_ms);\n\n        appCacheLog('Azure Logon: User Data');\n        appCacheLog(AppCache.userInfo);\n        return;\n    },\n\n    _getToken: function (response) {\n        const data = {\n            client_id: this.options.clientID,\n            redirect_uri: this.fullUri + this.redirectUri,\n            scope: this.loginScopes.join(' '),\n            code: response.code,\n            grant_type: 'authorization_code',\n        };\n        const { type, path } = this.options;\n        return request({\n            type: 'POST',\n            url: `${this.fullUri}/user/logon/${type}/${path}/${encodeURIComponent(this._authUrl('token'))}`,\n            contentType: 'application/x-www-form-urlencoded',\n            data: data,\n            success: (data) => {\n                if (data && !data.refresh_token) {\n                    sap.m.MessageToast.show('Error getting refresh_token from Azure. Add scope offline_access in authentication configuration');\n                    appCacheError('Azure Logon: Error getting refresh_token. Add scope offline_access in authentication configuration');\n                    return;\n                }\n\n                appCacheLog('Azure Logon: Got tokens');\n                appCacheLog(data);\n\n                AppCache.Auth = data.refresh_token;\n\n                this._onTokenReady(data);\n                this._loginP9(data.id_token);\n            },\n            error: (result, status) => {\n                sap.ui.core.BusyIndicator.hide();\n\n                let errorCode = '';\n                let errorText = 'Error getting token from Microsoft Entra ID';\n                if (result.responseJSON && result.responseJSON.error_description) {\n                    errorText = result.responseJSON.error_description;\n                    errorCode = errorText.substr(0, 12);\n                }\n\n                sap.m.MessageToast.show(errorText);\n                appCacheLog(`${errorCode}: ${errorText}`);\n                AppCache.Logout();\n            }\n        });\n    },\n\n    _refreshTokenMsal: function (process) {\n        refreshingAuth = true;\n        const account = this.msalObj.getAccountByUsername(AppCache.userInfo.username);\n        this.GetTokenPopup({ scopes: this.loginScopes, account }).then((azureToken) => {\n            refreshingAuth = false;\n            if (this.options.scope) {\n                this.GetTokenPopup({ scopes: this.options.scope.split(' '), account }).then((resourceToken) => {\n                    this._onTokenReadyMsal(azureToken, resourceToken);\n                    this._loginP9(azureToken.idToken, process);\n                });\n            } else {\n                this._onTokenReadyMsal(azureToken);\n                this._loginP9(azureToken.idToken, process);\n            }\n        }).catch((error) => {\n            refreshingAuth = false;\n            let errorText = 'Error getting refreshToken from Microsoft Entra ID';\n            let errorCode = '';\n\n            if (error && error.message && error.message.indexOf('AADSTS700082') > -1) {\n                NumPad.Clear();\n                AppCache.Logout();\n            }\n\n            if (process === 'pin') NumPad.Clear();\n\n            sap.m.MessageToast.show(errorText);\n            appCacheLog(`${errorCode}: ${errorText}`);\n        });\n    },\n\n    _getResourceToken: function (refreshToken, scope) {\n        const data = {\n            client_id: this.options.clientID,\n            scope: scope,\n            refresh_token: refreshToken,\n            grant_type: 'refresh_token',\n        };\n        refreshingAuth = true;\n        return new Promise((resolve, reject) => {\n            const { type, path } = this.options;\n            return request({\n                type: 'POST',\n                url: `${this.fullUri}/user/logon/${type}/${path}/${encodeURIComponent(this._authUrl('token'))}`,\n                contentType: 'application/x-www-form-urlencoded',\n                data: data,\n                success: (data) => {\n                    refreshingAuth = false;\n                    resolve(data);\n                },\n                error: (result, status) => {\n                    refreshingAuth = false;\n                    sap.ui.core.BusyIndicator.hide();\n\n                    if (result.responseJSON && result.responseJSON.error_description) {\n                        errorText = result.responseJSON.error_description;\n                        errorCode = errorText.substr(0, 12);\n                        appCacheLog('Could not get resource token. Error:', errorText);\n                    }\n                    resolve();\n                }\n            });\n        });\n    },\n\n    _refreshToken: function (refreshToken, process) {\n        if (!process) process = 'pin';\n\n        if (this.msalObj) {\n            this._refreshTokenMsal(process);\n            return;\n        }\n\n        // refresh token from Azure/EntraID\n        refreshingAuth = true;\n        const data = {\n            client_id: this.options.clientID,\n            scope: this.loginScopes.join(' '),\n            refresh_token: refreshToken,\n            grant_type: 'refresh_token',\n        };\n        const { type, path } = this.options;\n        return request({\n            data,\n            type: 'POST',\n            url: `${this.fullUri}/user/logon/${type}/${path}/${encodeURIComponent(this._authUrl('token'))}`,\n            contentType: 'application/x-www-form-urlencoded',\n            success: (data) => {\n                refreshingAuth = false;\n                appCacheLog(`Azure Logon: Got refresh_token: ${data.refresh_token}`);\n\n                if (this.options.scope) {\n                    this._getResourceToken(refreshToken, this.options.scope).then((resourceToken) => {\n                        this._onTokenReady(data, resourceToken);\n                        this._loginP9(data.id_token, process);\n                    });\n                } else {\n                    this._onTokenReady(data);\n                    this._loginP9(data.id_token, process);\n                }\n            },\n            error: (result, status) => {\n                refreshingAuth = false;\n                sap.ui.core.BusyIndicator.hide();\n\n                let errorCode = '';\n                let errorText = 'Error getting refreshToken from Microsoft Entra ID';\n                if (result.responseJSON && result.responseJSON.error_description) {\n                    errorCode = errorText.substring(0, 12);\n                    errorText = result.responseJSON.error_description;\n\n                    switch (errorCode) {\n                        case 'AADSTS700082':\n                            NumPad.Clear();\n                            AppCache.Logout();\n                            break;\n                    }\n                }\n\n                if (process === 'pin') NumPad.Clear();\n\n                sap.m.MessageToast.show(errorText);\n                appCacheLog(`${errorCode}: ${errorText}`);\n            }\n        });\n    },\n\n    _loginP9: function (idToken, process) {\n        const { type, path } = this.options;\n        refreshingAuth = true;\n        return request({\n            type: 'POST',\n            url: `${AppCache.Url}/user/logon/${type}/${path}${AppCache._getLoginQuery()}`,\n            headers: { 'Authorization': 'Bearer ' + idToken, 'login-path': getLoginData() },\n            success: (data) => {\n                refreshingAuth = false;\n                setSelectedLoginType(this.options.type);\n\n                switch (process) {\n                    case 'pin':\n                        appCacheLog(`Azure Logon: Successfully logged on to P9. Starting process: ${process}`);\n\n                        // Start App\n                        NumPad.attempts = 0;\n                        NumPad.Clear();\n                        NumPad.Verify = true;\n                        AppCache.Encrypted = '';\n                        AutoLockTimer.start();\n                        if (AppCache.isMobile) AppCache.Update();\n                        break;\n\n                    case 'refresh':\n                        appCacheLog(`Azure Logon: Successfully logged on to P9. Starting process: ${process}`);\n                        break;\n\n                    default:\n                        appCacheLog('Azure Logon: Successfully logged on to P9. Starting process: Get User Info');\n                        AppCache.getUserInfo();\n                        break;\n                }\n            },\n            error: (result, status) => {\n                refreshingAuth = false;\n                sap.ui.core.BusyIndicator.hide();\n                let errorText = 'Error logging on P9, or P9 not online';\n                if (result.responseJSON && result.responseJSON.status) errorText = result.responseJSON.status;\n                appCacheLog(errorText);\n                if (result.status === 0) onOffline();\n            }\n        });\n    },\n\n    _waitForPopupDesktop: function (popupWin, onClose) {\n        let url = '';\n        let winCheckTimer = setInterval(() => {\n            try {\n                url = popupWin.location.href ?? '';\n            } catch (err) {\n                // otherwise it would error out on accessing string functions\n                url = '';\n\n                if (err.name === 'SecurityError') {\n                    // we are unable to read location.href\n                } else {\n                    console.log('_waitForPopupDesktop popupWin', popupWin, 'error', err);\n                }\n            }\n\n            if (url.indexOf('state=') > -1 || url.indexOf('nonce=') > -1) console.log(url);\n\n            if (popupWin.closed || url.indexOf('error=') > -1) {\n                clearInterval(winCheckTimer);\n            }\n            \n            if (url.indexOf('code=') > -1) {\n                console.log(url);\n                clearInterval(winCheckTimer);\n                popupWin.close();\n                onClose(url);\n            }\n        }, 100);\n    },\n\n    _parseJwt: function (token) {\n        try {\n            return JSON.parse(atob(token.split('.')[1]));\n        } catch (e) {\n            return null;\n        }\n    },\n\n    _openPopup: function (url, popUpWidth, popUpHeight) {\n        popUpWidth = popUpWidth || 483;\n        popUpHeight = popUpHeight || 600;\n\n        const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n        const winTop = window.screenTop ? window.screenTop : window.screenY;\n\n        const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\n        const left = ((width / 2) - (popUpWidth / 2)) + winLeft;\n        const top = ((height / 2) - (popUpHeight / 2)) + winTop;\n\n        return window.open(url, '_blank', 'location=no,width=' + popUpWidth + ',height=' + popUpHeight + ',left=' + left + ',top=' + top);\n    }\n};","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":593},{"fieldNo":"1bb2a08c-3ea5-43ea-d54b-d2d3e45acdcc","fieldName":"NumPad","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"function isPincodeValid(v) {\n    const validity = {\n        isValid: true,\n        errorMessage: ''\n    };\n\n    // Enhancement\n    if (sap.n.Enhancement.PinCodeValidation) {\n        try {\n            sap.n.Enhancement.PinCodeValidation(v, validity);\n        } catch (e) {\n            appCacheError('Enhancement PinCodeValidation ' + e);\n        }\n    }\n\n    const { isValid, errorMessage } = validity;\n\n    return {\n        isValid: isValid && /^[0-9]+$/.test(v) && v.length === AppCache.passcodeLength,\n        errorMessage: isValid ? '' : errorMessage\n    };\n}\n\nfunction sanitizePincode(v) {\n    return v.replace(/[^0-9]/g, '');\n}\n\nfunction pincodeEntryErrs() {\n    const len = AppCache.passcodeLength;\n    const criteria = `Valid pin is numeric and consists of only ${len} digits.`;\n    return {\n        setPin: `Set Pin is invalid. ${criteria}`,\n        repeatPin: `Repeat Pin is invalid. ${criteria}`,\n        newPasscode: AppCache_tEnterNewPasscode.getText(),\n        repeatPasscode: AppCache_tEnterRepeatPasscode.getText(),\n        passcodeTooShort: `${AppCache_tPasscodeToShort.getText()} (${len})`,\n        passcodeNoMatch: AppCache_tNoPasscodeMatch.getText(),\n    };\n}\n\nfunction showPincodeError(msg, input = null) {\n    if (input) input.setValueState('Error');\n    sap.m.MessageToast.show(msg, {\n        onClose: function () {\n            if (input) input.setValueState('None');\n        }\n    });\n}\n\nfunction onPasscode1Submit() {\n    if (!isPincodeValid(AppCache_inPasscode1.getValue()).isValid) {\n        const customError = isPincodeValid(AppCache_inPasscode1.getValue()).errorMessage;\n        return showPincodeError(customError || pincodeEntryErrs().setPin, AppCache_inPasscode1);\n    }\n\n    AppCache_inPasscode1.setValueState('None');\n    AppCache_inPasscode2.focus();\n}\n\nfunction onPasscode2Submit() {\n    if (!isPincodeValid(AppCache_inPasscode2.getValue()).isValid) {\n        const customError = isPincodeValid(AppCache_inPasscode2.getValue()).errorMessage;\n        return showPincodeError(customError || pincodeEntryErrs().repeatPin, AppCache_inPasscode2);\n    }\n\n    AppCache_inPasscode2.setValueState('None');\n    return AppCache_butPasscode.firePress();\n}\n\nconst NumPad = {\n    numValue: '',\n    Verify: false,\n    attempts: 0,\n\n    ref: function () {\n        return document.getElementById('AppCache_boxPasscodeEntry');\n    },\n\n    addEvent: function (type, fn) {\n        const el = this.ref();\n        if (!el) return;\n\n        el.addEventListener(type, fn);\n    },\n\n    removeEvent: function (type, fn) {\n        const el = this.ref();\n        if (!el) return;\n\n        el.removeEventListener(type, fn);\n    },\n\n    keydown: function (evt) {\n        const { key } = evt;\n        if (['Delete', 'Backspace'].includes(key)) {\n            butNumpadClear.firePress();\n            return;\n        }\n\n        if (Number.isNaN(Number.parseInt(key))) {\n            return;\n        }\n\n        NumPad.enterKey(key);\n    },\n\n    KeypressHandlerSet: function () {\n        this.addEvent('keydown', NumPad.keydown);\n    },\n\n    KeypressHandlerRemove: function () {\n        this.removeEvent('keydown', NumPad.keydown);\n    },\n\n    enterKey: function (keyValue) {\n        // only purpose of these checkboxes is to keep count\n        // on how many characters have been entered\n        const checkboxes = [\n            Passcode1, Passcode2, Passcode3, Passcode4,\n            Passcode5, Passcode6, Passcode7, Passcode8,\n        ];\n\n        let checked = 0;\n        for (const cb of checkboxes) {\n            if (cb.getSelected() === true) {\n                checked += 1;\n                continue;\n            }\n\n            if (cb.getSelected() === false) {\n                cb.setSelected(true);\n                checked += 1;\n\n                NumPad.numValue += keyValue;\n\n                // possible keycode length can be 4, 6 or 8 characters\n                if (checked === AppCache.passcodeLength) {\n                    setTimeout(function () {\n                        NumPad.Logon();\n                    }, 50);\n                    NumPad.setPasscodeBusy(true);\n                }\n\n                return;\n            }\n        }\n    },\n\n    setPasscodeBusy: function (enabled) {\n        if (!enabled) {\n            sap.ui.core.BusyIndicator.hide();\n        } else {\n            sap.ui.core.BusyIndicator.show(0);\n        }\n    },\n\n    Clear: function () {\n        NumPad.numValue = '';\n\n        [\n            Passcode1, Passcode2, Passcode3, Passcode4,\n            Passcode5, Passcode6, Passcode7, Passcode8,\n        ].forEach(function (cb) {\n            cb.setSelected(false);\n        });\n\n        if (typeof window.cordova !== 'undefined' && !window.navigator.simulator && AppCache.biometricAuthentication) {\n            butNumpadLogin.setEnabled(AppCache.biometricAuthentication);\n        }\n    },\n\n    Logon: function () {\n        appCacheLog(`NumPad.Logon: Starting with auth ${AppCache.Encrypted}`);\n        \n        if (!AppCache.Encrypted) {\n            appCacheLog('NumPad.Logon: No auth found');\n            appCacheLog(AppCache.userInfo);\n\n            if (AppCache.userInfo.auth) {\n                AppCache.Encrypted = AppCache.userInfo.auth;\n            } else {\n                NumPad.Clear();\n                AppCache.Logout();\n                sap.m.MessageToast.show(AppCache_tNoUserInfo.getText());\n                sap.ui.core.BusyIndicator.hide();\n                return;\n            }\n        }\n\n        // Decrypt with Passcode\n        let auth = '';\n        try {\n            const key = generatePBKDF2Key(NumPad.numValue, AppCache.deviceID);\n            auth = decryptAES(AppCache.Encrypted, key.toString());\n        } catch (err) {\n            appCacheLog('NumPad.Logon: decryption error');\n        }\n\n        if (auth === '') {\n            // invalid pincode entry count\n            NumPad.attempts++;\n            NumPad.Clear();\n\n            const allowedAttempts = parseInt(AppCache.numPasscode)\n\n            if (NumPad.attempts >= allowedAttempts) {\n                NumPad.attempts = 0;\n                NumPad.setPasscodeBusy(false);\n                AppCache.Logout();\n                AppCache.RemoveAllCache();\n                return;\n            }\n\n            if (navigator.notification && navigator.notification.vibrate) navigator.notification.vibrate(250);\n            boxNumpad02.addStyleClass('animated shake');\n\n            sap.m.MessageBox.error(AppCache_tWrongPin.getText(), {\n                onClose: () => {\n                    butNumpad1.focus();\n                },\n            });\n\n            setTimeout(function () {\n                boxNumpad02.removeStyleClass('animated shake');\n            }, 500);\n\n            NumPad.setPasscodeBusy(false);\n            return;\n        }\n\n        appCacheLog('NumPad.Logon: PIN Code OK');\n\n        AppCache.userInfo.authDecrypted = auth;\n        sap.ui.core.BusyIndicator.show(0);\n\n        sap.n.Launchpad.handleAppTitle(AppCache.launchpadTitle);\n\n        // Re-Logon \n        if (AppCache.isOffline) {\n            appCacheLog('NumPad.Logon: Starting in offline mode');\n\n            // Clear\n            NumPad.attempts = 0;\n            NumPad.Clear();\n            NumPad.Verify = true;\n\n            // Start App\n            AppCache.Encrypted = '';\n            AppCache.Update();\n\n        } else {\n            appCacheLog('NumPad.Logon: Starting in online mode');\n\n            // SAML \n            if (AppCache.userInfo.logonData.type === 'saml') {\n                AppCacheLogonSaml.Relog(auth)\n                return;\n            }\n\n            // OIDC \n            if (AppCache.userInfo.logonData.type === 'openid-connect') {\n                AppCacheLogonOIDC.Relog(auth)\n                return;\n            }\n\n            // Azure\n            if (AppCache.userInfo.logonData.type === 'azure-bearer') {\n                AppCacheLogonAzure.Relog(auth)\n                return;\n            }\n\n            // LDAP/Local\n            const action = [];\n            switch (AppCache.userInfo.logonData.type) {\n                case 'local':\n                    action.push(AppCacheLogonLocal.Relog(auth));\n                    break;\n\n                case 'ldap':\n                    action.push(AppCacheLogonLdap.Relog(auth));\n                    break;\n\n                case 'sap':\n                    action.push(AppCacheLogonSap.Relog(auth));\n                    break;\n            }\n\n            // Build Data\n            Promise\n                .all(action)\n                .then(function (values) {\n                    // Check if OK \n                    if (values[0] === 'OK') {\n                        // Clear\n                        NumPad.attempts = 0;\n                        NumPad.Clear();\n                        NumPad.Verify = true;\n\n                        // Start App\n                        AppCache.Encrypted = '';\n                        AppCache.Update();\n\n                        // ensures non-usage of launchpad locks the screen\n                        AutoLockTimer.start();\n                    } else {\n                        NumPad.attempts = 0;\n                        NumPad.Clear();\n                        NumPad.Verify = false;\n\n                        sap.m.MessageToast.show(AppCache_tWrongUserNamePass.getText());\n                        AppCache.Logout();\n                    }\n                });\n        }\n    }\n};","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":594},{"fieldNo":"54700f86-7223-451a-c36a-8db02024123b","fieldName":"Init","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"// Globals\nlet dataSet = 'Launchpad';\nlet currFav = [];\nlet currTiles = [];\nlet currCategory = [];\nlet currCategoryChild = [];\nlet deviceType;\nlet parentObject;\nlet cacheLoaded = 0;\nlet searchCancelItemPress = false;\nlet navBarTimeout;\nlet screenSplit = 1300;\nlet enableFavDnD = false;\n\n// e.g. during Azure refresh token, cookie-session get's updated. If any\n//  app or api call is made during this timeframe, it will log user out.\n//  refreshingAuth is a generic flag set to indicate when some auth change\n//  is in process.\nlet refreshingAuth = false;\n\n// Get URL Parameters\nlet params = {};\nif (location.search) {\n    let parts = location.search.substring(1).split('&');\n    for (let i = 0; i < parts.length; i++) {\n        let nv = parts[i].split('=');\n        if (!nv[0]) continue;\n        params[nv[0]] = nv[1];\n    }\n}\n\n// TNT Icons\nsap.ui.core.IconPool.registerFont({\n    collectionName: 'tnt',\n    fontFamily: 'SAP-icons-TNT',\n    fontURI: sap.ui.require.toUrl('sap/tnt/themes/base/fonts'),\n    lazy: false\n});\n\n// Wrapper for OnInit Event\nsap.ui.getCore().attachInit(function () {\n    sap.ui.core.BusyIndicator.hide();\n\n    // Enhancement\n    if (params['getEnhancement'] === 'true') sap.n.Enhancement.getSpots();\n\n    // New IOS devices detected as Mac\n    if (isCordova() && sap.ui.Device.os.name === 'mac') sap.ui.Device.os.name === 'iOS';\n\n    // Load Library\n    try {\n        [\n            'sap.ui.core.format.DateFormat',\n            'sap.ui.core.format.NumberFormat',\n            'sap.ui.core.format.FileSizeFormat',\n            'sap.m.MessageBox',\n            'sap.ui.thirdparty.jqueryui.jquery-ui-core',\n            'sap.ui.thirdparty.jqueryui.jquery-ui-sortable',\n        ].forEach(function (name) {\n            jQuery.sap.require(name);\n        });\n    } catch (e) { }\n\n    // Hash Navigation - Clear topmenu/sections\n    if (isSection(location.hash)) location.hash = '';\n\n    // Detect URL Parameters \n    if (params['isMobile'] === 'true') AppCache.isMobile = true;\n    if (params['mobileClient']) AppCache.mobileClient = params['mobileClient'];\n\n    // Add Check for Opera \n    sap.ui.Device.browser.BROWSER.OPERA = \"op\";\n    if (navigator.userAgent.indexOf('Opera') > -1 || navigator.userAgent.indexOf('OPR') > -1) sap.ui.Device.browser.name = 'op';\n\n    // Check for Layout from localStorage\n    let newLayout = localStorage.getItem(AppCache.AppID + '.layout');\n\n    if (newLayout) {\n        try {\n            AppCache.layout = JSON.parse(newLayout);\n        } catch (e) {\n            console.error('Error parsing layout');\n        }\n    }\n\n    // UI Settings Mobile/Desktop\n    if (sap.n.Launchpad.isPhone()) {\n        AppCacheDiaSettings.setStretch(true);\n        diaText.setStretch(true);\n    }\n\n    // Event When changing Theme\n    sap.n.Launchpad.applyThemeMode();\n\n    sap.ui.getCore().attachThemeChanged(function () {\n        sap.n.Launchpad.applyThemeMode();\n    });\n\n    sap.ui.Device.resize.attachHandler(function (mParams) {\n        if (mParams.width < sap.n.Launchpad.verticalMenuLimit) launchpadContentMenu.setWidth('0px');\n        sap.n.Launchpad.setLaunchpadContentWidth();\n    });\n\n    launchpadOverflowClickArea.attachBrowserEvent('click', function (e) {\n        sap.n.Launchpad.overflowMenuClose();\n    });\n    launchpadSettingsClickArea.attachBrowserEvent('click', function (e) {\n        sap.n.Launchpad.settingsMenuClose();\n    });\n\n    toolVerticalMenuFilter.onAfterRendering = function () {\n        const input = toolVerticalMenuFilter.getInputElement();\n\n        if (input) {\n            const attr = input.getAttribute('placeholder');\n            const placeholder = toolVerticalMenuFilter.getPlaceholder() || attr;\n            input.setAttribute('title', placeholder);\n            input.setAttribute('label', placeholder);\n        }\n\n        this.__proto__.onAfterRendering.apply(this);\n    }\n\n    AppCachePageSideTab.onAfterRendering = function () {\n        const dom = this.getDomRef();\n\n        if (dom) {\n            const input = dom.getElementsByTagName('input')[0];\n            if (input) {\n                input.title = 'Side App Select';\n            }\n        }\n\n        this.__proto__.onAfterRendering.apply(this);\n    }\n\n    AppCacheUsers.addEventDelegate({\n        onAfterRendering: () => {\n            if (AppCacheUsers.getItems().length) {\n                AppCacheUsers.getItems()[0].focus();\n            }\n        }\n    });\n\n    applyWCAGFixes();\n    \n    setTimeout(function () {\n        // Browser Title \n        if (AppCache.launchpadTitle && AppCache.launchpadTitle !== 'null') document.title = AppCache.launchpadTitle;\n\n        // UI Settings w/StartApp\n        if (AppCache.StartApp) AppCacheShellMenu.setVisible(false);\n\n        // Sort Users\n        AppCacheUsers.getBinding('items').sort(new sap.ui.model.Sorter('username', false, false))\n\n        // Phone UI Handling\n        if (sap.n.Launchpad.isPhone()) {\n            [AppCache_boxLogonCenter, AppCache_boxLogonPasscode, AppCache_boxLogonUsers].forEach((box) => {\n                box.setHeight('100%');\n                box.addStyleClass('nepFlexPhone');\n            });\n\n            AppCache_boxLogonPasscodeEntry.setHeight('100%');\n\n            [panLogon, panLogonPasscode, panLogonUsers, boxNumpadPanel].forEach((elm) => {\n                elm.setWidth('100%');\n                elm.setHeight('100%');\n                elm.removeStyleClass('nepPanLogonBorder');\n            });\n\n            [panLinks, panLinksUsers, panLinksPass, panLinksPin].forEach((elm) => {\n                elm.addStyleClass('nepLinks');\n            });\n        }\n\n        // Models \n        modelContentMenu.setSizeLimit(5000);\n\n        // Config \n        if (AppCache.config) {\n            const { config } = AppCache;\n            if (sap.n.Layout.showActiveApps() && !config.verticalMenu && !config.enableTopMenu) {\n                AppCache.config.verticalMenu = false;\n                AppCache.config.enableTopMenu = true;\n            }\n\n            // Settings\n            if (config.languages) sap.n.Launchpad.applyLanguages(AppCache.config.languages);\n            if (config.hideTopHeader && !AppCache.isMobile) topMenu.setHeight('0px');\n            if (config.hideLoginSelection) AppCache_loginTypes.setVisible(false);\n            if (\n                config.verticalMenu &&\n                sap.ui.Device.resize.width >= sap.n.Launchpad.verticalMenuLimit &&\n                !AppCache.isMobile\n            ) {\n                sap.n.Launchpad.overflowMenuOpen();\n            }\n\n            // Enhancement\n            if (config.enhancement) {\n                try {\n                    eval(config.enhancement);\n                } catch (e) {\n                    console.log(e);\n                }\n            }\n\n            // Paths\n            if (AppCache.config.ui5ModulePath) {\n                [\n                    'sap.viz', 'sap.chart', 'sap.me', 'sap.ui.comp', 'sap.ushell', 'sap.ui.fl',\n                    'sap.ui.commons', 'sap.ui.ux3', 'sap.suite.ui.microchart', 'sap.suite.ui.commons',\n                ].forEach(function (name) {\n                    const path = AppCache.config.ui5ModulePath + '/' + name.replace(/\\./g, '/');\n                    jQuery.sap.registerModulePath(name, path);\n                });\n            }\n        }\n\n        // Get Setting or Startup\n        if (AppCache.isMobile) {\n            if (!isPWAEnabled()) location.hash = '';\n\n            inAppCacheFormSettingsBACK.setVisible(false);\n            AppCacheUserActionSettings.setVisible(false);\n\n            (function () {\n                function waitForCache() {\n                    if (sap.n.Phonegap.loaded) {\n                        getCacheDataSettings(true);\n                        AppCache.getSettings();\n                    } else {\n                        setTimeout(waitForCache, 50);\n                    }\n                }\n                waitForCache();\n            })();\n        } else {\n            // Get Users Settings\n            getCacheAppCacheDiaSettings(true);\n\n            // Layout\n            if (AppCache.layout) {\n                ModelData.Delete(AppCache.layout, 'active', false);\n\n                // Add to Settings\n                AppCache.layout.forEach(function (data) {\n                    inAppCacheFormSettingsTHEME.addItem(new sap.ui.core.Item({\n                        key: data.id,\n                        text: data.name\n                    }));\n                });\n\n                // Override theme from URL \n                if (params['nep-ui-layout']) modelAppCacheDiaSettings.oData.userTheme = params['nep-ui-layout'];\n\n                if (modelAppCacheDiaSettings.oData && modelAppCacheDiaSettings.oData.userTheme) {\n                    sap.n.Launchpad.applyUserTheme();\n                } else {\n                    sap.n.Launchpad.applyLayout(AppCache.layout[0]);\n                }\n            }\n\n            let logonType = localStorage.getItem('selectedLoginType');\n            if (logonType === 'local' && !isChpassDisabled()) {\n                AppCacheUserActionPassword.setVisible(true);\n            }\n\n            // Startup\n            AppCache.Startup();\n        }\n\n        // UI Settings\n        topShell.setAppWidthLimited(AppCache.limitWidth);\n\n        // Connect external Tools\n        setTimeout(function () {\n            AppCache.enableExternalTools();\n        }, 500);\n\n        // Assign tab indices to pinned left menu\n        setTimeout(() => {\n            if (AppCache.config.verticalMenu) {\n                setTabIndicesForContentMenu();\n            }\n        }, 1000);\n\n        if (sap.n.Layout.isVerticalMenuPinned()) {\n            AppCacheShellMenu.setVisible(false);\n        }\n        \n        // Blackout tile message\n        sap.n.Adaptive.editor(descBlackout, { editable: false, buttonList: [] });\n    }, 100);\n\n    setTimeout(disableChpass, 2000);\n    setTimeout(setiOSPWAIcons, 2000);\n});\n\n// Sorter Function\nlet sort_by = function (field, reverse, primer) {\n    let key = primer ?\n        function (x) {\n            return primer(x[field])\n        } :\n        function (x) {\n            return x[field]\n        };\n    reverse = !reverse ? 1 : -1;\n    return function (a, b) {\n        return a = key(a), b = key(b), reverse * ((a > b) - (b > a));\n    }\n}\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":595},{"fieldNo":"484846cb-0160-4dbf-e545-78367e13b2f2","fieldName":"GlobalAjaxError","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"let _reloginInProgress = false;\n\n// jQuery's global ajax error event handler - https://api.jquery.com/Ajax_Events/\njQuery(document).ajaxError(function (_event, request, _settings) {\n    sap.ui.core.BusyIndicator.hide();\n    if (AppCache.hideGlobalAjaxError) return;\n\n    const code = request.status;\n    if (code === 401) {\n        // to prevent infinite or multiple attempts are relogin\n        if (_reloginInProgress) return;\n\n        // Not logged in -> Exit\n        if (AppCache.isRestricted) return;\n\n        // handling based on authentication method\n        const process = 'refresh';\n        const user = AppCache.userInfo;\n        if (user && user.logonData && user.logonData.type) {\n            const type = user.logonData.type;\n            const decrypted = user.authDecrypted;\n\n            // if decryption fails we have nothing for relogin\n            if (typeof decrypted === 'undefined') return;\n\n            _reloginInProgress = true;\n            if (type === 'saml') AppCacheLogonSaml.Relog(decrypted, process);\n            else if (type === 'azure-bearer') AppCacheLogonAzure.Relog(decrypted, process);\n            else if (type === 'openid-connect') AppCacheLogonOIDC.Relog(decrypted, process);\n            else if (type === 'local') AppCacheLogonLocal.Relog(decrypted, process);\n            else if (type === 'ldap') AppCacheLogonLdap.Relog(decrypted, process);\n            else if (type === 'sap') AppCacheLogonSap.Relog(decrypted, process);\n            \n            setTimeout(()=> {\n                _reloginInProgress = false;\n            }, 1000)\n        }\n\n        // AutoLogin\n        if (AppCache.enableAutoLogin) AppCacheLogonLocal.Relog(decrypted, process);\n    } else if ([0, 400, 404, 500].includes(code)) {\n        appCacheError(`global ajaxError, with status code: ${code}`, _settings.url);\n    } else {\n        if (!AppCache.isOffline) {\n            appCacheLog(`${request.status} - ${request.statusText}`);\n            // sap.m.MessageToast.show(`${request.status} - ${request.statusText}`);\n        } \n    }\n});","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":596},{"fieldNo":"5d8d3b28-67d9-4a51-cdda-16ddc3a989bd","fieldName":"CBOR","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2014-2016 Patrick Gansterer <paroga@paroga.com>\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n(function (global, undefined) {\r\n    \"use strict\";\r\n    var POW_2_24 = 5.960464477539063e-8,\r\n        POW_2_32 = 4294967296,\r\n        POW_2_53 = 9007199254740992;\r\n\r\n    function encode(value) {\r\n        var data = new ArrayBuffer(256);\r\n        var dataView = new DataView(data);\r\n        var lastLength;\r\n        var offset = 0;\r\n\r\n        function prepareWrite(length) {\r\n            var newByteLength = data.byteLength;\r\n            var requiredLength = offset + length;\r\n            while (newByteLength < requiredLength)\r\n                newByteLength <<= 1;\r\n            if (newByteLength !== data.byteLength) {\r\n                var oldDataView = dataView;\r\n                data = new ArrayBuffer(newByteLength);\r\n                dataView = new DataView(data);\r\n                var uint32count = (offset + 3) >> 2;\r\n                for (var i = 0; i < uint32count; ++i)\r\n                    dataView.setUint32(i << 2, oldDataView.getUint32(i << 2));\r\n            }\r\n\r\n            lastLength = length;\r\n            return dataView;\r\n        }\r\n        function commitWrite() {\r\n            offset += lastLength;\r\n        }\r\n        function writeFloat64(value) {\r\n            commitWrite(prepareWrite(8).setFloat64(offset, value));\r\n        }\r\n        function writeUint8(value) {\r\n            commitWrite(prepareWrite(1).setUint8(offset, value));\r\n        }\r\n        function writeUint8Array(value) {\r\n            var dataView = prepareWrite(value.length);\r\n            for (var i = 0; i < value.length; ++i)\r\n                dataView.setUint8(offset + i, value[i]);\r\n            commitWrite();\r\n        }\r\n        function writeUint16(value) {\r\n            commitWrite(prepareWrite(2).setUint16(offset, value));\r\n        }\r\n        function writeUint32(value) {\r\n            commitWrite(prepareWrite(4).setUint32(offset, value));\r\n        }\r\n        function writeUint64(value) {\r\n            var low = value % POW_2_32;\r\n            var high = (value - low) / POW_2_32;\r\n            var dataView = prepareWrite(8);\r\n            dataView.setUint32(offset, high);\r\n            dataView.setUint32(offset + 4, low);\r\n            commitWrite();\r\n        }\r\n        function writeTypeAndLength(type, length) {\r\n            if (length < 24) {\r\n                writeUint8(type << 5 | length);\r\n            } else if (length < 0x100) {\r\n                writeUint8(type << 5 | 24);\r\n                writeUint8(length);\r\n            } else if (length < 0x10000) {\r\n                writeUint8(type << 5 | 25);\r\n                writeUint16(length);\r\n            } else if (length < 0x100000000) {\r\n                writeUint8(type << 5 | 26);\r\n                writeUint32(length);\r\n            } else {\r\n                writeUint8(type << 5 | 27);\r\n                writeUint64(length);\r\n            }\r\n        }\r\n\r\n        function encodeItem(value) {\r\n            var i;\r\n\r\n            if (value === false)\r\n                return writeUint8(0xf4);\r\n            if (value === true)\r\n                return writeUint8(0xf5);\r\n            if (value === null)\r\n                return writeUint8(0xf6);\r\n            if (value === undefined)\r\n                return writeUint8(0xf7);\r\n\r\n            switch (typeof value) {\r\n                case \"number\":\r\n                    if (Math.floor(value) === value) {\r\n                        if (0 <= value && value <= POW_2_53)\r\n                            return writeTypeAndLength(0, value);\r\n                        if (-POW_2_53 <= value && value < 0)\r\n                            return writeTypeAndLength(1, -(value + 1));\r\n                    }\r\n                    writeUint8(0xfb);\r\n                    return writeFloat64(value);\r\n\r\n                case \"string\":\r\n                    var utf8data = [];\r\n                    for (i = 0; i < value.length; ++i) {\r\n                        var charCode = value.charCodeAt(i);\r\n                        if (charCode < 0x80) {\r\n                            utf8data.push(charCode);\r\n                        } else if (charCode < 0x800) {\r\n                            utf8data.push(0xc0 | charCode >> 6);\r\n                            utf8data.push(0x80 | charCode & 0x3f);\r\n                        } else if (charCode < 0xd800) {\r\n                            utf8data.push(0xe0 | charCode >> 12);\r\n                            utf8data.push(0x80 | (charCode >> 6) & 0x3f);\r\n                            utf8data.push(0x80 | charCode & 0x3f);\r\n                        } else {\r\n                            charCode = (charCode & 0x3ff) << 10;\r\n                            charCode |= value.charCodeAt(++i) & 0x3ff;\r\n                            charCode += 0x10000;\r\n\r\n                            utf8data.push(0xf0 | charCode >> 18);\r\n                            utf8data.push(0x80 | (charCode >> 12) & 0x3f);\r\n                            utf8data.push(0x80 | (charCode >> 6) & 0x3f);\r\n                            utf8data.push(0x80 | charCode & 0x3f);\r\n                        }\r\n                    }\r\n\r\n                    writeTypeAndLength(3, utf8data.length);\r\n                    return writeUint8Array(utf8data);\r\n\r\n                default:\r\n                    var length;\r\n                    if (Array.isArray(value)) {\r\n                        length = value.length;\r\n                        writeTypeAndLength(4, length);\r\n                        for (i = 0; i < length; ++i)\r\n                            encodeItem(value[i]);\r\n                    } else if (value instanceof Uint8Array) {\r\n                        writeTypeAndLength(2, value.length);\r\n                        writeUint8Array(value);\r\n                    } else {\r\n                        var keys = Object.keys(value);\r\n                        length = keys.length;\r\n                        writeTypeAndLength(5, length);\r\n                        for (i = 0; i < length; ++i) {\r\n                            var key = keys[i];\r\n                            encodeItem(key);\r\n                            encodeItem(value[key]);\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n\r\n        encodeItem(value);\r\n\r\n        if (\"slice\" in data)\r\n            return data.slice(0, offset);\r\n\r\n        var ret = new ArrayBuffer(offset);\r\n        var retView = new DataView(ret);\r\n        for (var i = 0; i < offset; ++i)\r\n            retView.setUint8(i, dataView.getUint8(i));\r\n        return ret;\r\n    }\r\n\r\n    function decode(data, tagger, simpleValue) {\r\n        var dataView = new DataView(data);\r\n        var offset = 0;\r\n\r\n        if (typeof tagger !== \"function\")\r\n            tagger = function (value) { return value; };\r\n        if (typeof simpleValue !== \"function\")\r\n            simpleValue = function () { return undefined; };\r\n\r\n        function commitRead(length, value) {\r\n            offset += length;\r\n            return value;\r\n        }\r\n        function readArrayBuffer(length) {\r\n            return commitRead(length, new Uint8Array(data, offset, length));\r\n        }\r\n        function readFloat16() {\r\n            var tempArrayBuffer = new ArrayBuffer(4);\r\n            var tempDataView = new DataView(tempArrayBuffer);\r\n            var value = readUint16();\r\n\r\n            var sign = value & 0x8000;\r\n            var exponent = value & 0x7c00;\r\n            var fraction = value & 0x03ff;\r\n\r\n            if (exponent === 0x7c00)\r\n                exponent = 0xff << 10;\r\n            else if (exponent !== 0)\r\n                exponent += (127 - 15) << 10;\r\n            else if (fraction !== 0)\r\n                return (sign ? -1 : 1) * fraction * POW_2_24;\r\n\r\n            tempDataView.setUint32(0, sign << 16 | exponent << 13 | fraction << 13);\r\n            return tempDataView.getFloat32(0);\r\n        }\r\n        function readFloat32() {\r\n            return commitRead(4, dataView.getFloat32(offset));\r\n        }\r\n        function readFloat64() {\r\n            return commitRead(8, dataView.getFloat64(offset));\r\n        }\r\n        function readUint8() {\r\n            return commitRead(1, dataView.getUint8(offset));\r\n        }\r\n        function readUint16() {\r\n            return commitRead(2, dataView.getUint16(offset));\r\n        }\r\n        function readUint32() {\r\n            return commitRead(4, dataView.getUint32(offset));\r\n        }\r\n        function readUint64() {\r\n            return readUint32() * POW_2_32 + readUint32();\r\n        }\r\n        function readBreak() {\r\n            if (dataView.getUint8(offset) !== 0xff) return false;\r\n            offset += 1;\r\n            return true;\r\n        }\r\n        function readLength(additionalInformation) {\r\n            if (additionalInformation < 24) return additionalInformation;\r\n            if (additionalInformation === 24) return readUint8();\r\n            if (additionalInformation === 25) return readUint16();\r\n            if (additionalInformation === 26) return readUint32();\r\n            if (additionalInformation === 27) return readUint64();\r\n            if (additionalInformation === 31) return -1;\r\n            throw \"Invalid length encoding\";\r\n        }\r\n        function readIndefiniteStringLength(majorType) {\r\n            var initialByte = readUint8();\r\n            if (initialByte === 0xff)\r\n                return -1;\r\n            var length = readLength(initialByte & 0x1f);\r\n            if (length < 0 || (initialByte >> 5) !== majorType)\r\n                throw \"Invalid indefinite length element\";\r\n            return length;\r\n        }\r\n\r\n        function appendUtf16Data(utf16data, length) {\r\n            for (var i = 0; i < length; ++i) {\r\n                var value = readUint8();\r\n                if (value & 0x80) {\r\n                    if (value < 0xe0) {\r\n                        value = (value & 0x1f) << 6\r\n                            | (readUint8() & 0x3f);\r\n                        length -= 1;\r\n                    } else if (value < 0xf0) {\r\n                        value = (value & 0x0f) << 12\r\n                            | (readUint8() & 0x3f) << 6\r\n                            | (readUint8() & 0x3f);\r\n                        length -= 2;\r\n                    } else {\r\n                        value = (value & 0x0f) << 18\r\n                            | (readUint8() & 0x3f) << 12\r\n                            | (readUint8() & 0x3f) << 6\r\n                            | (readUint8() & 0x3f);\r\n                        length -= 3;\r\n                    }\r\n                }\r\n\r\n                if (value < 0x10000) {\r\n                    utf16data.push(value);\r\n                } else {\r\n                    value -= 0x10000;\r\n                    utf16data.push(0xd800 | (value >> 10));\r\n                    utf16data.push(0xdc00 | (value & 0x3ff));\r\n                }\r\n            }\r\n        }\r\n\r\n        function decodeItem() {\r\n            var initialByte = readUint8();\r\n            var majorType = initialByte >> 5;\r\n            var additionalInformation = initialByte & 0x1f;\r\n            var i;\r\n            var length;\r\n\r\n            if (majorType === 7) {\r\n                switch (additionalInformation) {\r\n                    case 25:\r\n                        return readFloat16();\r\n                    case 26:\r\n                        return readFloat32();\r\n                    case 27:\r\n                        return readFloat64();\r\n                }\r\n            }\r\n\r\n            length = readLength(additionalInformation);\r\n            if (length < 0 && (majorType < 2 || 6 < majorType)) throw \"Invalid length\";\r\n\r\n            switch (majorType) {\r\n                case 0:\r\n                    return length;\r\n                case 1:\r\n                    return -1 - length;\r\n                case 2:\r\n                    if (length < 0) {\r\n                        var elements = [];\r\n                        var fullArrayLength = 0;\r\n                        while ((length = readIndefiniteStringLength(majorType)) >= 0) {\r\n                            fullArrayLength += length;\r\n                            elements.push(readArrayBuffer(length));\r\n                        }\r\n                        var fullArray = new Uint8Array(fullArrayLength);\r\n                        var fullArrayOffset = 0;\r\n                        for (i = 0; i < elements.length; ++i) {\r\n                            fullArray.set(elements[i], fullArrayOffset);\r\n                            fullArrayOffset += elements[i].length;\r\n                        }\r\n                        return fullArray;\r\n                    }\r\n                    return readArrayBuffer(length);\r\n                case 3:\r\n                    var utf16data = [];\r\n                    if (length < 0) {\r\n                        while ((length = readIndefiniteStringLength(majorType)) >= 0)\r\n                            appendUtf16Data(utf16data, length);\r\n                    } else\r\n                        appendUtf16Data(utf16data, length);\r\n                    return String.fromCharCode.apply(null, utf16data);\r\n                case 4:\r\n                    var retArray;\r\n                    if (length < 0) {\r\n                        retArray = [];\r\n                        while (!readBreak())\r\n                            retArray.push(decodeItem());\r\n                    } else {\r\n                        retArray = new Array(length);\r\n                        for (i = 0; i < length; ++i)\r\n                            retArray[i] = decodeItem();\r\n                    }\r\n                    return retArray;\r\n                case 5:\r\n                    var retObject = {};\r\n                    for (i = 0; i < length || length < 0 && !readBreak(); ++i) {\r\n                        var key = decodeItem();\r\n                        retObject[key] = decodeItem();\r\n                    }\r\n                    return retObject;\r\n                case 6:\r\n                    return tagger(decodeItem(), length);\r\n                case 7:\r\n                    switch (length) {\r\n                        case 20:\r\n                            return false;\r\n                        case 21:\r\n                            return true;\r\n                        case 22:\r\n                            return null;\r\n                        case 23:\r\n                            return undefined;\r\n                        default:\r\n                            return simpleValue(length);\r\n                    }\r\n            }\r\n        }\r\n\r\n        var ret = decodeItem();\r\n        if (offset !== data.byteLength)\r\n            throw \"Remaining bytes\";\r\n        return ret;\r\n    }\r\n\r\n    var obj = { encode: encode, decode: decode };\r\n    window.CBOR = obj;\r\n\r\n})(this);\r\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":597},{"fieldNo":"7dde1e17-3273-4811-de56-7767ae8a36a3","fieldName":"WCAG","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"// Based upon code from https://github.com/LordOfTheStack/UI5-WCAG-HELPER\n// Removed jQuery usage\n\n// MIT License\n\n// Copyright (c) 2020 Lord Phillip Smith\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nfunction applyWCAGFixes() {\n    const panelAfterRender = sap.m.Panel.prototype.onAfterRendering;\n    sap.m.Panel.prototype.onAfterRendering = function () {\n        const dom = this.getDomRef();\n        if (dom && !this.getHeaderText()) {\n            dom.removeAttribute(\"aria-labelledby\");\n        }\n\n        panelAfterRender.apply(this);\n    };\n\n    const buttonAfterRender = sap.m.Button.prototype.onAfterRendering;\n    sap.m.Button.prototype.onAfterRendering = function () {\n        const dom = this.getDomRef();\n        if (!this.getText() && dom) {\n            const tooltip = dom.getAttribute(\"title\");\n\n            if (tooltip) {\n                dom.setAttribute(\"aria-label\", tooltip);\n            }\n        }\n\n        buttonAfterRender.apply(this);\n    };\n\n    const checkboxAfterRender = sap.m.CheckBox.prototype.onAfterRendering;\n    sap.m.CheckBox.prototype.onAfterRendering = function () {\n        const dom = this.getDomRef();\n\n        if (dom) {\n            const input = dom.getElementsByTagName(\"input\")[0];\n            const ariaLabel = dom.getAttribute(\"aria-labelledby\");\n\n            if (ariaLabel) {\n                const splitLabel = ariaLabel.split(\" \");\n\n                if (splitLabel && splitLabel.length) {\n                    const formLabel = document.getElementById(splitLabel[0]);\n\n                    if (formLabel) {\n                        formLabel.setAttribute(\"for\", input.id);\n                    }\n                }\n            }\n\n            if (input && ariaLabel) {\n                input.setAttribute(\"aria-labelledby\", ariaLabel);\n            }\n\n            const text = this.getText();\n            if (input && !ariaLabel) {\n                input.setAttribute(\"aria-label\", text);\n            }\n        }\n\n        checkboxAfterRender.apply(this);\n    };\n\n    const selectAfterRender = sap.m.Select.prototype.onAfterRendering;\n    sap.m.Select.prototype.onAfterRendering = function () {\n        const dom = this.getDomRef();\n\n        if (dom) {\n            const labels = dom.getElementsByTagName(\"label\");\n\n            if (labels && labels.length) {\n                for (const label of labels) {\n                    label.outerHTML = label.outerHTML.replace(/label/g, \"span\");\n                }\n            }\n        }\n\n        selectAfterRender.apply(this);\n    };\n\n    navBar.addEventDelegate({\n        onAfterRendering: function () {\n            const dom = navBar.getDomRef();\n\n            if (dom) {\n                const current = dom.getAttribute(\"aria-label\");\n\n                if (!current) {\n                    dom.setAttribute(\"aria-label\", \"Launchpad NavBar\");\n                }\n            }\n        },\n    });\n\n    function setAriaLabel(obj, label) {\n        obj.addEventDelegate({\n            onAfterRendering: function () {\n                const dom = obj.getDomRef();\n\n                if (!dom) {\n                    return;\n                }\n\n                const current = dom.getAttribute(\"aria-label\");\n\n                if (!current) {\n                    dom.setAttribute(\"aria-label\", label);\n                }\n            },\n        });\n    }\n\n    setAriaLabel(topMenu, \"Launchpad Top Menu\");\n    setAriaLabel(navBar, \"Launchpad NavBar\");\n    setAriaLabel(launchpadSettingsHeader, \"Launchpad Settings Header\");\n    setAriaLabel(launchpadOverflowHeader, \"Launchpad Overflow Header\");\n\n    function setAriaRole(item, role) {\n        item.addEventDelegate({\n            onAfterRendering: function () {\n                const dom = item.getDomRef();\n\n                if (!dom) {\n                    return;\n                }\n\n                dom.setAttribute(\"role\", role);\n            },\n        });\n    }\n\n    AppCacheListMenu.addEventDelegate({\n        onAfterRendering: function () {\n            const dom = AppCacheListMenu.getDomRef();\n\n            if (!dom) {\n                return;\n            }\n\n            const listItem = dom.querySelector(\".sapMListItems\");\n            listItem.setAttribute(\"aria-label\", \"Launchpad Settings Menu\");\n\n            if (listItem?.children) {\n                const children = Array.from(listItem.children);\n                children.forEach(child => child.setAttribute(\"role\", \"listitem\"));\n            }\n        },\n    });\n}","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":598},{"fieldNo":"03812a79-55d1-4e00-eae8-5d8e9e89c995","fieldName":"TabIndexing","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldType":"neptune.Script","script":"function setTabIndexOnElm(elm, index) {\n    elm && elm.setAttribute(\"tabindex\", index);\n}\n\nfunction setTabIndex(obj, index) {\n    if (!obj.getVisible()) return;\n    setTabIndexOnElm(obj.getDomRef(), index);\n}\n\nfunction setTabIndexOnItemsRecursively(obj) {\n    obj.getItems &&\n        obj\n            .getItems()\n            .filter((item) => item.getVisible())\n            .forEach((item) => {\n                globalTabIndex += 1;\n                setTabIndex(item, globalTabIndex);\n                if (item.getItems && item.getItems().length > 0) {\n                    setTabIndexOnItemsRecursively(item);\n                }\n            });\n}\n\nfunction unsetTabIndexOnItemsRecursively(obj) {\n    obj.getItems &&\n        obj.getItems().forEach((item) => {\n            setTabIndex(item, -1);\n            if (item.getItems && item.getItems().length > 0) {\n                unsetTabIndexOnItemsRecursively(item);\n            }\n        });\n}\n\nfunction onKeyPressFocusOnInput(obj) {\n    obj.addEventDelegate({\n        onkeydown: function (evt) {\n            if (evt.key === \"Enter\") {\n                obj.focus();\n            }\n        },\n    });\n}\n\nfunction setTabIndicesForContentMenu() {\n    if (!launchpadContentMenu.getVisible()) return;\n\n    if (!sap.n.Layout.isVerticalMenuPinned()) {\n        launchpadOverflowClickArea.setVisible(true);\n    }\n    \n    disableTabIndicesLessThan0();\n\n    let index = sap.n.Layout.isVerticalMenuPinned() ? 4000 : 0;\n\n    index += 4;\n    setTabIndex(launchpadOverflowBtn, index);\n\n    index += 1;\n    setTabIndex(toolVerticalMenuFilter, index);\n\n    index += 1;\n    setTabIndexOnElm(toolVerticalMenuFilter.getDomRef().querySelector('[type=\"search\"]'), index);\n\n    index += 1;\n    setTabIndex(toolVerticalMenuExpand, index);\n\n    index += 1;\n    setTabIndex(toolVerticalMenuCollapse, index);\n\n    index += 10;\n    globalTabIndex = index;\n    setTabIndicesForOpenApps();\n\n    index += 25;\n    globalTabIndex = index;\n    setTabIndexOnItemsRecursively(ContentMenu);\n\n    const refCollapse = toolVerticalMenuCollapse.getDomRef();\n    function onFocusReset() {\n        refCollapse.removeEventListener(\"focus\", onFocusReset);\n        setTabIndicesForContentMenu();\n    }\n    refCollapse.removeEventListener(\"focus\", onFocusReset);\n    refCollapse.addEventListener(\"focus\", onFocusReset);\n\n    const refList = ContentMenu.getDomRef();\n    function onTabReset(evt) {\n        if (evt.key === \"Tab\") {\n            refList.removeEventListener(\"keyup\", onTabReset);\n            setTabIndicesForContentMenu();\n        }\n    }\n    refList.removeEventListener(\"keyup\", onTabReset);\n    refList.addEventListener(\"keyup\", onTabReset);\n}\n\nfunction unsetTabIndicesForOpenApps() {\n    openApps.getItems().forEach((app) => {\n        app.getItems().forEach((item) => {\n            setTabIndex(item, -1);\n        });\n    });\n}\n\nfunction setTabIndicesForOpenApps() {\n    openApps.getItems().forEach((app) => {\n        // outer opened app\n        app.getItems().forEach((item) => {\n            // [app icon, close app button]\n            setTabIndex(item, globalTabIndex);\n            globalTabIndex += 1;\n        });\n    });\n}\n\nfunction unsetTabIndicesForContentMenu() {\n    launchpadOverflowClickArea.setVisible(false);\n    launchpadOverflowContainer.setVisible(false);\n\n    [\n        launchpadOverflowBtn,\n        toolVerticalMenuFilter,\n        toolVerticalMenuExpand,\n        toolVerticalMenuCollapse,\n    ].forEach((obj) => setTabIndex(obj, -1));\n\n    unsetTabIndicesForOpenApps();\n    unsetTabIndexOnItemsRecursively(ContentMenu);\n\n    if (sap.n.Layout.isVerticalMenuPinned()) {\n        if (sap.n.Launchpad.isPhone()) {\n            AppCacheShellLogoMobile.focus()\n        } else {\n            AppCacheShellLogoDesktop.focus();\n        }\n    } else {\n        AppCacheShellMenu.focus();\n    }\n}\n\nfunction setTabIndicesForAppCacheListMenu() {\n    setTabIndex(AppCacheShellUser, -1);\n\n    launchpadSettings.addStyleClass(\"nepLaunchpadMenuSettingsOpen\");\n    launchpadSettingsContainer.setVisible(true);\n    launchpadSettingsClickArea.setVisible(true);\n\n    setTimeout(() => {\n        disableTabIndicesLessThan0();\n        setTabIndex(launchpadSettingsBtn, 10000);\n        launchpadSettingsBtn.focus();\n\n        globalTabIndex = 10010;\n        setTabIndexOnItemsRecursively(AppCacheListMenu);\n    }, 100);\n}\n\nfunction unsetTabIndicesForAppCacheListMenu() {\n    setTabIndex(AppCacheShellUser, 4000);\n\n    launchpadSettingsContainer.setVisible(false);\n    launchpadSettingsClickArea.setVisible(false);\n    launchpadSettings.removeStyleClass(\"nepLaunchpadMenuSettingsOpen\");\n\n    unsetTabIndexOnItemsRecursively(AppCacheListMenu);\n}\n\nfunction setTabIndexesOnApps() {\n    const content = AppCacheNav.getCurrentPage().getContent();\n    if (content.length > 0) {\n        globalTabIndex = 5000;\n        for (const section of content) {\n            if (!section.getItems) continue;\n\n            for (const grid of section.getItems()) {\n                if (!grid.getItems) continue;\n\n                for (const card of grid.getItems()) {\n                    if (card.hasStyleClass(\"nepFCardContainer\")) {\n                        globalTabIndex += 1;\n                        setTabIndex(card, globalTabIndex);\n\n                        if (!card.getItems()) continue;\n\n                        for (const cardItem of card.getItems()) {\n                            // customizations related buttons\n                            if (!sap.n.Customization.isActive) {\n                                if (cardItem.hasStyleClass(\"nepDeleteCard\")) continue;\n                                if (cardItem.hasStyleClass(\"nepAddCard\")) continue;\n                            }\n\n                            if (cardItem.getContent) {\n                                const content = cardItem.getContent();\n                                if (!content.getItems) continue;\n\n                                for (const contentItem of content.getItems()) {\n                                    if (!contentItem.getItems) continue;\n\n                                    const items = contentItem.getItems();\n                                    for (const actionContainer of items) {\n                                        if (!actionContainer.hasStyleClass(\"nepActionContainer\"))\n                                            continue;\n                                        if (!actionContainer.getItems) continue;\n\n                                        for (const actionItem of actionContainer.getItems()) {\n                                            if (\n                                                !actionItem.getVisible() ||\n                                                !actionItem.hasStyleClass(\"nepTileAction\")\n                                            )\n                                                continue;\n                                            setTabIndex(actionItem, globalTabIndex);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction disableTabIndicesLessThan0() {\n    Array.from(document.querySelectorAll(\"[tabindex]\"))\n        .map((e) => [e, parseInt(e.getAttribute(\"tabindex\"))])\n        .filter(([_, tabindex]) => tabindex === 0)\n        .forEach(([e]) => e.setAttribute(\"tabindex\", -1));\n}\n\nfunction onKeyDownInContentMenu(evt) {\n    if (evt.which === 9) {\n        setTimeout(() => {\n            if (!launchpadContentMenu.getDomRef().contains(document.activeElement)) {\n                Array.from(ContentMenu.getDomRef().querySelectorAll('[tabindex]'))\n                    .map((e) => [e, parseInt(e.getAttribute(\"tabindex\"))])\n                    .filter(([_, tabindex]) => tabindex === 0)\n                    .forEach(([e]) => e.setAttribute(\"tabindex\", -1));\n                \n                const elm = launchpadContentMenu.getDomRef();\n                if (elm) {\n                    elm.removeEventListener('keydown', onKeyDownInContentMenu);\n                }\n            }\n        }, 250);\n    }\n}\n\n// ui5 sets tabindex for some elements from -1 to 0\n// which interrupts tab flow\nfunction detectContentMenuBlurForTabIndexReset() {\n    const elm = launchpadContentMenu.getDomRef();\n    if (elm) {\n        elm.removeEventListener('keydown', onKeyDownInContentMenu);\n        elm.addEventListener('keydown', onKeyDownInContentMenu);\n    }\n}\n\nfunction setTabIndices() {\n    // App Navigation\n    if (sap.n.Layout.isVerticalMenuPinned()) {\n        setTabIndex(AppCacheShellMenu, -1);\n    } else {\n        setTabIndex(AppCacheShellMenu, 1);\n    }\n\n    unsetTabIndicesForContentMenu();\n    if (sap.n.Layout.isVerticalMenuPinned()) {\n        setTabIndicesForContentMenu();\n    }\n\n    // Logo\n    setTabIndex(AppCacheShellLogoDesktop, 2000);\n    setTabIndex(AppCacheShellLogoMobile, 2000);\n\n    // App Back Button\n    setTabIndex(AppCacheShellBack, 2001);\n\n    // Top Menu\n    globalTabIndex = 2005;\n    setTabIndexOnItemsRecursively(AppCacheAppButton);\n\n    // User Menu\n    setTabIndex(AppCacheShellUser, 4000);\n    // TODO, disable tabbing into right sidebar menu, unless you open the right sidebar menu\n    unsetTabIndicesForAppCacheListMenu();\n\n    // Apps\n    setTabIndexesOnApps();\n    setTabIndex(AppCachePageSideTab, -1);\n\n    disableTabIndicesLessThan0();\n\n    // Content Menu\n    detectContentMenuBlurForTabIndexReset();\n}\n\nAppCacheNav.onAfterRendering = () => {\n    setTabIndices();\n};\n\nAppCacheNav.attachAfterNavigate(() => {\n    setTabIndices();\n});\n\nwindow.addEventListener(\"keyup\", (evt) => {\n    if (evt.key === \"Escape\") {\n        // left-side bar menu\"\n        if (launchpadOverflowContainer.getVisible()) {\n            launchpadOverflowBtn.firePress();\n        }\n\n        // right-side settings menu\n        if (launchpadSettingsContainer.getVisible()) {\n            launchpadSettingsBtn.firePress();\n        }\n    }\n});\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":599}],"componentInterface":[],"ver":"24.1.26.1617","application":"planet9_launchpad_standard","title":"","description":"Planet 9 Launchpad ","enableFileStorage":true,"enableManifest":false,"enableStylesheet":true,"enableObfuscate":false,"onlyRunLaunchpad":false,"disabled":false,"loadLaunchpadCode":null,"loadApplicationCode":null,"appType":"L","ui5_m":true,"ui5_f":true,"ui5_table":false,"ui5_tnt":false,"ui5_uxap":false,"ui5_chart":false,"ui5_theme":"sap_fiori_3","ui5_version":"customCDN","ui5_language":"","ui5_url":"https://openui5.hana.ondemand.com/1.71.59/resources/sap-ui-core.js","cus_theme":"","css":".sapUiLoSplitter.sapUiLoSplitterH>.sapUiLoSplitterBar.sapUiLoSplitterNoResize,\n.sapUiLoSplitter.sapUiLoSplitterV>.sapUiLoSplitterBar.sapUiLoSplitterNoResize {\n    height: 0 !important;\n    width: 0 !important;\n}\n\n.sapMBarPH {\n    display: inline-block !important;\n}\n\n.sapMShellBrandingBar {\n    background-color: transparent\n}\n\n.nepMobileTitle {\n    line-height: 48px;\n}\n\n.nepFormInput {\n    max-width: 800px;\n    margin-left: auto;\n    margin-right: auto;\n}\n\n/* HELP LABLE */\n\n.sapUiFormLblColon .sapUiFormElementLbl>.sapMLabel.nepLabelHelp:after {\n    font-family: 'SAP-icons';\n    content: \"\\e1c4\";\n    vertical-align: inherit;\n    margin-left: .325rem;\n}\n\n.sapMLabel.nepLabelHelp {\n    pointer-events: none;\n    cursor: pointer;\n}\n\n.sapMLabel.nepLabelHelp::after {\n    pointer-events: all;\n}\n\n.sapUiFormResGridCont>.sapUiFormElementLbl>.nepLabelHelp.sapMLabel {\n    width: auto;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanS12)>.sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanM12)>.sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanL12)>.sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanXL12)>.sapMLabel.nepLabelHelp {\n    width: 100%;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanS12)>.sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanM12)>.sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanL12)>.sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanXL12)>.sapMLabel.nepLabelHelp:after {\n    content: \":\";\n    pointer-events: none;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanS12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanM12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanL12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanXL12)>.sapMLabel.nepLabelHelp:before {\n    font-family: 'SAP-icons';\n    content: \"\\e1c4\";\n    margin-right: .325rem;\n    vertical-align: inherit;\n    pointer-events: all;\n}\n\n/* HELP OBJECT HEADER */\n\n.sapMOHROuter.nepLabelHelp {\n    pointer-events: none;\n}\n\n.sapMOHROuter.nepLabelHelp .sapMOHRTitleText {\n    pointer-events: none;\n    cursor: pointer;\n}\n\n.sapMOHROuter.nepLabelHelp .sapMOHRTitleText:after {\n    font-family: 'SAP-icons';\n    content: \"\\e1c4\";\n    margin-left: .325rem;\n    font-size: .875rem;\n    pointer-events: all;\n}\n\n/* DIALOG WITH OBJECTHEADER*/\n\n.nepDialogWithObjHeader .sapMOHR {\n    margin-top: -.5rem;\n    padding-top: 0 !important;\n}\n\n.nepDialogWithObjHeader .sapMSwt {\n    border-radius: 0;\n}\n\n.nepDialogWithObjHeader.nepDocPop .sapMOHR {\n    margin-top: 0;\n    padding-top: 1.1rem !important;\n    border: 1px solid #dedede;\n    border-bottom: none;\n    border-radius: .25rem;\n}\n\n.nepDialogWithObjHeader .sapContrastPlus.sapMOHR.sapMOHRBgTranslucent,\n.sapContrastPlus .nepDialogWithObjHeader .sapMOHR.sapMOHRBgTranslucent {\n    background: #2f3c48;\n    box-shadow: none;\n}\n\n.nepDialogWithObjHeader.sapUiSizeCompact .sapMBar {\n    height: 2.5rem;\n    border-radius: 4px 4px 0px 0px;\n}\n\n.nepDialogWithObjHeader.sapUiSizeCompact.sapMDialog>.sapMDialogTitle,\n.nepDialogWithObjHeader.sapUiSizeCompact .sapMDialog>.sapMDialogTitle {\n    height: 2.5rem;\n}\n\n.nepDialogWithObjHeader .nepCloseBtn {\n    z-index: 9999;\n}\n\n.nepDialogWithObjHeader .sapMOHRTitle h1,\n.nepDialogWithObjHeader .sapMOHRIntro .sapMText,\n.nepDialogWithObjHeader .sapMOHRIcon .sapUiIcon {\n    color: #cae4fb;\n}\n\n.nepDialogWithObjHeader .nepStateSuccess .sapMOHRIcon .sapUiIcon,\n.nepDialogWithObjHeader .nepStateSuccess .sapContrastPlus .sapMOHRIcon .sapUiIcon {\n    color: #abe2ab;\n}\n\n.nepDialogWithObjHeader .nepStateWarning .sapMOHRIcon .sapUiIcon,\n.nepDialogWithObjHeader .nepStateWarning .sapContrastPlus .sapMOHRIcon .sapUiIcon {\n    color: #e78c07;\n}\n\n.nepDialogWithObjHeader .nepStateError .sapMOHRIcon .sapUiIcon,\n.nepDialogWithObjHeader .nepStateError .sapContrastPlus .sapMOHRIcon .sapUiIcon {\n    color: #ff8888;\n}\n\n.nepDialogWithObjHeader .sapMOHRIcon {\n    top: .675rem;\n}\n\n.nepDialogWithObjHeader .sapMBtnIcon {\n    color: #cae4fb;\n}\n\n.nepDialogWithObjHeader .nepStackedToolBar.sapMTB {\n    border-left: 1px solid #ddd;\n    background: #fff;\n}\n\n.nepDialogWithObjHeader .sapUiLocalBusyIndicatorSizeMedium {\n    border-radius: .25rem;\n}\n\n.nepDialogWithObjHeader .sapMITH {\n    border-bottom: none;\n}\n\n.nepDialogSubObjHeader {\n    background: #2f3c48;\n    margin-top: -1rem;\n}\n\n.nepDialogSubObjHeader .sapMText {\n    color: #cae4fb;\n    padding: 0 1rem 1rem 7rem;\n}\n\n.nepDialogSubObjHeader .sapMDialog>.sapMDialogSection {\n    margin-top: -1rem;\n    height: calc(100% + 1rem);\n}\n\n.nepSubMenu.sapMPopover .sapMPopoverCont {\n    border-radius: 0 !important;\n}\n\n.nepSubMenu.sapMPopover {\n    border-radius: 0 !important;\n    box-shadow: rgba(0, 0, 0, 0.5) 5px 5px 10px 0px;\n    min-width: 200px;\n}\n\n.nepSubMenu .sapMSLITitleOnly {\n    font-size: 0.875rem;\n}\n\n.nepSubMenu .sapMLIB {\n    border-bottom: none;\n}\n\n.nepFCard.sapFCard:not(.nepICCard) .sapFCardHeader:not(.nepFCardFooter) {\n    border-bottom: none;\n}\n\n.nepTileApplicationPanel .sapMPanelContent {\n    overflow: hidden\n}\n\nhtml.sap-desktop .nepDialogSubObjHeader .sapContrastPlus .sapMIBar.sapMFooter-CTX,\nhtml.sap-desktop .nepDialogSubObjHeader .sapContrastPlus.sapMIBar.sapMFooter-CTX {\n    border-top-color: #2f3c48;\n}\n\n.nepDialogSubObjHeader .sapContrastPlus.sapMOHR:not(.sapMOHRNoBorder),\n.nepDialogSubObjHeader .sapContrastPlus .sapMOHR:not(.sapMOHRNoBorder) {\n    box-shadow: 0 0.125rem 0 0 #3f5161, inset 0 -0.125rem 0 0 #2F3C45;\n}\n\n.nepDialogWithObjHeader.sapMDialog:not(.sapMDialogWithSubHeader)>header>.sapMIBar,\n.nepDialogWithObjHeader.sapMDialog>header:last-of-type .sapMIBar {\n    box-shadow: none;\n    background-color: #2f3c48;\n    border-top: none;\n}\n\n/*NEPTUNE*/\n\n.nepSideCollapsed {\n    padding-left: 68px;\n}\n\n.nepSideExpanded {\n    padding-left: 300px;\n}\n\n.nepSideMenu {\n    padding-left: 300px;\n}\n\n.nepSideMenuCollapsed {\n    padding-left: 368px;\n}\n\n.nepSideMenuExpanded {\n    padding-left: 600px;\n}\n\n.nepSmallFont {\n    font-size: 12px !important;\n}\n\n.nepLinks {\n    position: absolute;\n    bottom: 20px;\n}\n\n.nepPanLinks .sapMTB {\n    border-bottom: none;\n    margin-top: 20px;\n}\n\n@media (max-height: 550px) {\n    .nepPanLinks {\n        display: none;\n    }\n}\n\n.nepPanLogon {\n    border-bottom: none;\n    background-color: rgba(255, 255, 255, 0.6);\n    box-shadow: 0 0 1rem 0 rgb(250 250 250 / 30%);\n}\n\n.nepPanLogon .sapMTB-Transparent-CTX.sapMTB {\n    background: transparent;\n}\n\n.sapUiTheme-sap_fiori_3_dark .nepPanLogon,\n.sapUiTheme-sap_horizon_dark .nepPanLogon {\n    background-color: rgba(0, 0, 0, 0.3);\n}\n\n.nepPanLogonBorder {\n    border-radius: 15px;\n}\n\n.nepFlexPhone .sapMFlexItem {\n    width: 100%;\n    height: 100%;\n}\n\n.nepLinkNoBorder.sapMTBStandard {\n    border-bottom: none;\n}\n\n.nepDocPage .sapMTabStrip {\n    padding-top: 0;\n    height: 44px;\n}\n\n.nepDocPage .sapMTabContainer {\n    padding-top: 0;\n}\n\n.nepDocPage {\n    overflow: hidden;\n}\n\n.nepTopMenu {\n    min-height: auto;\n    border-radius: 0;\n}\n\n.nepTopMenu .iconNetwork .sapMBtnCustomIcon {\n    color: red !important;\n}\n\n#AppCacheDiaSettings .sapMITBContent {\n    border-bottom: none !important;\n}\n\n.sapMFT {\n    white-space: normal;\n}\n\n.nepUserList .sapMLIB.sapMObjLItem {\n    margin-bottom: 10px;\n    border-radius: 10px;\n}\n\n.nepUserList .sapMObjLIntro {\n    color: orange !important;\n}\n\n.nepNavBarBoxTitle {\n    padding-left: 15px;\n}\n\n.nepNavBarAction {\n    position: absolute;\n    top: -6px;\n}\n\n.nepNavBarAction .sapMBtnInner {\n    color: white;\n    border-radius: 6px !important;\n}\n\n.nepNavBarActionInverse .sapMBtnCustomIcon {\n    color: white !important;\n}\n\n.nepNavBarActionInverse .sapMBtnInner {\n    color: white !important;\n}\n\n.nepNavBarBoxIcon {\n    text-align: center;\n    min-width: 45px;\n}\n\n.nepTopMenu .sapMPanelContent {\n    overflow: hidden;\n}\n\n.nepTopMenu.sapMTBStandard {\n    height: 60px;\n}\n\n.nepTopMenu .sapMTB-Transparent-CTX.sapMTB {\n    padding-left: 0;\n    /* height: 48px; */\n}\n\n.nepTopMenu .sapMTBNewFlex>* {\n    -webkit-flex-shrink: unset;\n    flex-shrink: unset;\n    overflow: hidden;\n}\n\n.nepTopMenu .sapMBtnIcon {\n    font-size: 1.375rem;\n}\n\n.nepTopMenu .sapMBtnInner {\n    background-color: transparent;\n}\n\n.nepTopMenu :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n    background-color: transparent !important;\n    border-color: transparent !important;\n}\n\n.nepTopMenuActive {\n    border-bottom: 4px solid orange;\n}\n\n.nepIconActive {\n    border-left: 4px solid orange;\n}\n\n.nepNavBarTile {\n    cursor: pointer;\n}\n\n.nepShell .sapUiGlobalBackgroundColor,\n.nepShell .sapMShellGlobalInnerBackground {\n    background: transparent;\n}\n\n.nepShell .sapMShellBG.sapUiGlobalBackgroundImage {\n    background: transparent;\n}\n\n.nepListSetting .sapMLIB {\n    padding: 0 1rem 0 0.1rem;\n}\n\n/*OPENUI5*/\n\n.sapMDialogScroll {\n    height: 100%;\n}\n\n/*TILES*/\n\n.nepTile .sapUiBlockCellTitle {\n    margin-bottom: 6px;\n}\n\n.nepPopCards.sapMPopover {\n    background: transparent;\n}\n\n.nepPopCards.sapMPopover .sapMPopoverCont {\n    background: transparent;\n}\n\n.nepTileCardsPop {\n    margin: 0;\n    box-shadow: none;\n    border-radius: 0 6px 6px 0;\n    border-left: none;\n}\n\n.nepTileCardsPop .sapUiBlockCellContent {\n    padding: 10px 10px 10px 4px;\n}\n\n.nepTileCardsRunning {\n    margin: 4px 4px 4px 4px;\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n    border-radius: 6px;\n    border-left: 4px solid transparent;\n}\n\n.nepTileCardsRunning .sapUiBlockCellContent {\n    padding: 10px 10px 10px 4px;\n}\n\n.nepTileCards {\n    margin: 8px 8px 8px 8px;\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n    border-radius: 4px;\n}\n\n.nepTileCards:hover {\n    box-shadow: 0 10px 24px 0 rgba(0, 0, 0, 0.2);\n}\n\n\n.nepChartTile {\n    padding: 0 !important;\n}\n\n.nepCatPanel .sapMTBStandard {\n    border-bottom: none;\n}\n\n.nepCatPanel .sapMPanelContent {\n    padding-bottom: 10px;\n    padding-top: 0px;\n}\n\n.nepCatPanel .sapMTB {\n    border-bottom: none;\n}\n\n.nepCatPaddingImage {\n    padding-left: 8px;\n    padding-right: 8px;\n    padding-top: 8px;\n    margin-bottom: -4px;\n}\n\n.nepCatNoPaddingImage {\n    margin-bottom: -4px;\n}\n\n.nepTileCardsFixed10 {\n    flex: unset !important;\n    width: calc(10% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed20 {\n    flex: unset !important;\n    width: calc(20% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed25 {\n    flex: unset !important;\n    width: calc(25% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed30 {\n    flex: unset !important;\n    width: calc(30% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed40 {\n    flex: unset !important;\n    width: calc(40% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed50 {\n    flex: unset !important;\n    width: calc(50% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed60 {\n    flex: unset !important;\n    width: calc(60% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed70 {\n    flex: unset !important;\n    width: calc(70% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed75 {\n    flex: unset !important;\n    width: calc(75% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed80 {\n    flex: unset !important;\n    width: calc(80% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed90 {\n    flex: unset !important;\n    width: calc(90% - 1rem);\n    min-width: 250px;\n}\n\n/* SCROLLBAR */\n\nhtml.sap-desktop .sapContrast ::-webkit-scrollbar-thumb,\nhtml.sap-desktop .sapContrast ::-webkit-scrollbar-thumb:hover {\n    background-color: #346187;\n}\n\nhtml.sap-desktop ::-webkit-scrollbar {\n    width: 10px !important;\n    height: 10px !important;\n    background-color: transparent !important;\n}\n\nhtml.sap-desktop ::-webkit-scrollbar-corner {\n    background-color: transparent !important;\n}\n\nhtml.sap-desktop ::-webkit-scrollbar-thumb {\n    background-color: #6b7d8e !important;\n}\n\nhtml.sap-desktop ::-webkit-scrollbar-thumb:hover {\n    background-color: #6b7d8e !important;\n}\n\nhtml.sap-desktop:not(.sap-tablet) .sapUiTableVSb::-webkit-scrollbar-thumb,\nhtml.sap-desktop.sap-tablet .sapUiTableVSb::-webkit-scrollbar-thumb {\n    border-left: unset !important;\n    border-right: unset !important;\n}\n\nhtml.sap-desktop:not(.sap-tablet) .sapUiTableHSb::-webkit-scrollbar-thumb,\nhtml.sap-desktop.sap-tablet .sapUiTableHSb::-webkit-scrollbar-thumb {\n    border-top: unset !important;\n    border-bottom: unset !important;\n}\n\n/*PASSCODE APP*/\n\n#boxNumpadPanel .sapMBtn {\n    height: 4.6rem;\n    margin: 5px;\n}\n\n#butNumpadClear-inner {\n    padding-left: 0;\n    padding-right: 0;\n}\n\n#boxNumpadPanel .sapMPanelContent {\n    border-bottom: none;\n    background: transparent;\n    overflow: hidden;\n}\n\n#boxNumpad02 {\n    margin: auto;\n}\n\n.numPad .sapMBtnInner {\n    border-top-left-radius: 3rem;\n    border-top-right-radius: 3rem;\n    border-bottom-right-radius: 3rem;\n    border-bottom-left-radius: 3rem;\n    height: 3.9rem;\n    min-width: 4rem;\n    border: none;\n    padding-top: .8rem;\n    font-size: 1.875rem;\n    background: rgba(0, 0, 0, 0.5);\n    color: #fff;\n    text-shadow: none;\n}\n\n#boxNumpadPanel .sapMBtnIcon {\n    color: #ffffff;\n    font-size: 1.875rem;\n}\n\n#boxNumpadPanel .sapMBtn:hover>.sapMBtnHoverable {\n    background-color: rgba(0, 0, 0, 0.5);\n}\n\n#boxNumpadPanel :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n    background-color: rgba(0, 0, 0, 0.5);\n}\n\n#boxNumpadPanel .sapMCbBg.sapMCbMarkChecked {\n    background: rgba(0, 0, 0, 0.5);\n}\n\n#boxNumpadPanel .sapMCbBg.sapMCbMarkChecked:before {\n    content: \"\";\n}\n\n#boxNumpadPanel .sapMCbBg {\n    background: #fff;\n    border: none;\n    border-top-left-radius: 1rem;\n    border-top-right-radius: 1rem;\n    border-bottom-right-radius: 1rem;\n    border-bottom-left-radius: 1rem;\n    -webkit-focus-ring-color: none;\n}\n\n#boxNumpadPanel .sapMCb {\n    padding: 0 0 0 2rem;\n}\n\n#boxNumpadPanel .sapMCbBgDis {\n    opacity: 1;\n}\n\n.sapUiTheme-sap_fiori_3_dark .numPad .sapMBtnInner {\n    background: #29313a;\n}\n\n.sapUiTheme-sap_fiori_3_dark #boxNumpadPanel .sapMCbBg.sapMCbMarkChecked {\n    background: #29313a;\n}\n\n.animated {\n    -webkit-animation-duration: .9s;\n    -moz-animation-duration: .9s;\n    -o-animation-duration: .9s;\n    -ms-animation-duration: .9s;\n    animation-duration: .9s;\n    -webkit-animation-fill-mode: both;\n    -moz-animation-fill-mode: both;\n    -o-animation-fill-mode: both;\n    -ms-animation-fill-mode: both;\n    animation-fill-mode: both;\n}\n\n.shake {\n    -webkit-animation-name: shake;\n    -moz-animation-name: shake;\n    -o-animation-name: shake;\n    -ms-animation-name: shake;\n    animation-name: shake;\n}\n\n@-webkit-keyframes shake {\n    0%,\n    100% {\n        -webkit-transform: translateX(0);\n        -moz-transform: translateX(0);\n        -o-transform: translateX(0);\n        -ms-transform: translateX(0);\n    }\n    10%,\n    30%,\n    50%,\n    70%,\n    90% {\n        -webkit-transform: translateX(-20px);\n        -moz-transform: translateX(-20px);\n        -o-transform: translateX(-20px);\n        -ms-transofmr: translateX(-20px);\n    }\n    20%,\n    40%,\n    60%,\n    80% {\n        -webkit-transform: translateX(20px);\n        -moz-transform: translateX(20px);\n        -o-transform: translateX(20px);\n        -ms-transform: translateX(20px);\n    }\n}\n\n@keyframes shake {\n    0%,\n    100% {\n        transform: translateX(0);\n    }\n    10%,\n    30%,\n    50%,\n    70%,\n    90% {\n        transform: translateX(-20px);\n    }\n    20%,\n    40%,\n    60%,\n    80% {\n        transform: translateX(20px);\n    }\n}\n\n/*NAVIGATION SIDEBAR*/\n\n@media only screen and (max-width:1600px) {\n    .nepNavPanel {\n        display: none\n    }\n}\n\n.navHidden {\n    visibility: hidden;\n}\n\n.nepNavPanel {\n    position: fixed;\n    height: 100%;\n    z-index: 11;\n    width: 200px;\n    right: 0px;\n    top: 48px;\n    transition-duration: 200ms;\n    transition-timing-function: linear\n}\n\n.nepNavPanel.minified {\n    pointer-events: none\n}\n\n.nepNavPanel.minified .nav-container {\n    pointer-events: auto;\n    width: 100px\n}\n\n.nepNavPanel.minified .nav-in-page {\n    pointer-events: none\n}\n\n.nepNavPanel.minified .nav-in-page .nav-link {\n    height: 4px;\n    opacity: 1\n}\n\n.nepNavPanel.minified .nav-in-page .nav-link.active {\n    height: 4px\n}\n\n.nepNavPanel.minified .nav-in-page .nav-link.active a {\n    transition-duration: 200ms;\n    transition-timing-function: linear;\n    font-weight: normal;\n    line-height: 1.1em;\n    font-size: 14px\n}\n\n.nepNavPanel.minified .nav-in-page .nav-link.active a.show {\n    opacity: 1;\n    transition-duration: 200ms;\n    transition-timing-function: linear\n}\n\n.nepNavPanel.minified .nav-in-page .nav-link a {\n    opacity: 0;\n    transition-duration: 200ms;\n    transition-timing-function: linear\n}\n\n.nepNavPanel .nav-container {\n    height: 100%\n}\n\n.nepNavPanel .nav-links {\n    display: inline-block;\n    width: 190px;\n    padding-left: 0px;\n}\n\n.nepNavPanel.full-state {\n    background: linear-gradient(to left, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.3));\n    transition-duration: 200ms;\n    transition-timing-function: linear\n}\n\n.nepNavPanel.full-state .nav-in-page .nav-link {\n    height: 26px;\n    opacity: 1\n}\n\n.nepNavPanel.full-state .nav-in-page .nav-link.active {\n    height: 42px\n}\n\n.nepNavPanel.full-state .nav-in-page .nav-link.active a {\n    font-weight: normal;\n    line-height: 1.1em;\n    font-size: 16px\n}\n\n.nepNavPanel.full-state .nav-in-page .nav-link a {\n    display: block;\n    opacity: 1\n}\n\n.nepNavPanel .nav-in-page {\n    width: 200px;\n    transform: translateY(50%);\n    position: absolute;\n    bottom: 50%\n}\n\n.nepNavPanel .nav-in-page .nav-link {\n    padding: 0 0 0 10px;\n    cursor: pointer;\n    border-right: 4px solid orange;\n    height: 26px;\n    display: flex;\n    align-items: center;\n    margin-top: 8px;\n    margin-bottom: 8px;\n    transition-duration: 200ms;\n    transition-timing-function: linear;\n    opacity: 0\n}\n\n.nepNavPanel .nav-in-page .nav-link.active a,\n.nepNavPanel .nav-in-page .nav-link:hover a {\n    color: #fff;\n    line-height: 1.1em\n}\n\n.nepNavPanel .nav-in-page .nav-link.active {\n    height: 42px\n}\n\n.nepNavPanel .nav-in-page .nav-link.active a {\n    font-weight: normal;\n    line-height: 1.1em;\n    font-size: 16px\n}\n\n.nepNavPanel .nav-in-page .nav-link.initial {\n    opacity: 1;\n    transition-duration: 1000ms;\n    transition-timing-function: linear\n}\n\n.nepNavPanel .nav-in-page .nav-link a {\n    display: block;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 1.1em;\n    color: rgba(255, 255, 255, 0.7);\n    text-decoration: none;\n}\n\n/* P8 */\n\nhtml[data-sap-ui-animation='on'] .nepCatPanel .sapMPanelContent {\n    transform: none;\n}\n\n.nepCatPanel.nepCatTitleLayoutTitle.sapMPanel {\n    min-height: 60px;\n}\n\n.nepCatPanel.nepCatTitleLayoutTitle.nepCatTitleLayoutSubTitle.sapMPanel {\n    min-height: 82px;\n}\n\n.nepCatPanel .sapMPanelContent {\n    padding-bottom: 0;\n    padding-top: 0;\n}\n\n.nepCatPanel .sapMTB {\n    border-bottom: none;\n}\n\n.nepCatTitleLayout {\n    /* padding-left: 10px; */\n    /* padding-right: 10px; */\n    position: absolute;\n    top: 0;\n    left: 1rem;\n}\n\n.nepCatTitle.sapMTitle {\n    font-size: 1.125rem;\n    color: #346187;\n    text-shadow: none;\n    font-weight: bold;\n    padding-top: 1.25rem;\n}\n\n.nepCatSubTitle.sapMTitle {\n    color: #346187;\n    text-shadow: none;\n}\n\nhtml[dir=\"rtl\"] .nepCatTitleLayout {\n    right: 1rem;\n}\n\nhtml[dir=\"rtl\"] .nepCatPanel .sapMPanelContent {\n    background-position: left;\n}\n\n/* P8 COPY */\n\n:root {\n    --xsmall: 380px;\n    --small: 680px;\n    --medium: 980px;\n    --large: 1280px;\n    --xlarge: 1580px;\n    --xxlarge: 1880px;\n    --xxxlarge: 2360px;\n    --gridGap: 0px;\n    --gridHeight: 170px;\n    --grid1: 100%;\n    --grid2: 50%;\n    --grid3: 33.3333%;\n    --grid4: 25%;\n    --grid5: 20%;\n    --grid6: 16.6666%;\n    --grid8: 12.5%;\n    --grid10: 10%;\n    --grid12: 8.3333%;\n    --grid14: 7.1428%;\n    --cardMargin: .25rem;\n    --white: #fff;\n    --lightGreyPrimary: #dedede;\n    --lightGreySecondary: #ccc;\n    --darkGreyPrimary: #666;\n    --darkGreySecondary: #888;\n    --lightPrimaryColor: #fafafa;\n    --lightSecondaryColor: #d3d7d9;\n    --darkPrimaryColor: #333;\n    --darkSecondaryColor: #444;\n    --darkThemePrimaryBackground: #1C2228;\n    --darkThemeSecondaryBackground: #29313a;\n    --lightThemeNotification: #dd0000;\n    --darkThemeNotification: #dd0000;\n    --lightThemeRequired: #c14646;\n    --darkThemeRequired: #c14646;\n    --lightActiveMenuColor: var(--lightSecondaryColor);\n    --darkActiveMenuColor: var(--darkSecondaryColor);\n    --quartzDarkPrimary: #91c8f6;\n}\n\n.nepDialogWithObjHeader.sapMDialog {\n    transform: none;\n}\n\n.nepBtnIcon .sapMBtnContent {\n    margin-left: .5rem;\n}\n\n.nepLayout .nepFCard.sapFCard .nepFCardBody.sapFCardHeader {\n    padding: 0;\n    /*clip-path: initial !important;*/\n    box-shadow: none;\n}\n\n.nepFCardBody.sapFCardHeader .sapFCardIcon.sapFAvatar {\n    justify-content: flex-end;\n}\n\n.nepFCard.sapFCard:focus {\n    border: .125rem solid #4db1ff;\n}\n\n.nepSubMenu .sapMBtn .sapMBtnInner {\n    justify-content: flex-start;\n}\n\nhtml[dir=\"rtl\"] .nepTreeItemAction .sapMSTIIcon {\n    margin: 0.5rem 0 0.5rem 0.75rem;\n}\n\n.nepNavBarContent,\n.nepMainBar {\n    position: relative;\n    z-index: 89;\n}\n\n.nepTreeCategory .sapMTreeItemBaseExpander.sapUiIcon:before {\n    content: \"\\f0da\";\n}\n\n.nepTreeCategory li[aria-expanded=\"true\"] .sapMTreeItemBaseExpander.sapUiIcon:before {\n    content: \"\\f0d7\";\n}\n\n.nepSideAppTab.sapMTabContainer {\n    padding-top: 0;\n}\n\n.nepLogonContainer {\n    height: 75%;\n}\n\n.nepLogonLayout {\n    padding: 1rem;\n    border-radius: .5rem;\n    margin: auto;\n}\n\n@media (max-width: 420px) {\n    .nepLogonContainer {\n        height: auto;\n    }\n    .nepLogonLayout {\n        padding: 0;\n        border-radius: 0;\n        margin: auto;\n    }\n}\n\n.nepLaunchpadOverflowContainer {\n    position: absolute;\n    top: 0;\n    width: 0;\n    background-color: rgba(0, 0, 0, 0.4);\n    z-index: 97;\n}\n\n.nepLaunchpadOverflowClickArea {\n    position: fixed;\n    top: 0;\n    z-index: 98;\n    bottom: 0;\n    background-color: rgba(0, 0, 0, 0.4);\n}\n\nhtml[dir=\"ltr\"] .nepLaunchpadOverflowClickArea {\n    right: 0;\n    left: 300px;\n}\n\nhtml[dir=\"rtl\"] .nepLaunchpadOverflowClickArea {\n    right: 300px;\n    left: 0;\n}\n\n.nepLaunchpadMenuOverflow {\n    position: absolute;\n    top: 0;\n    width: 300px;\n    height: 100%;\n    z-index: 99;\n}\n\nhtml[dir=\"ltr\"] .nepLaunchpadMenuOverflow {\n    left: -300px;\n}\n\nhtml[dir=\"rtl\"] .nepLaunchpadMenuOverflow {\n    right: -300px;\n}\n\nhtml[dir=\"ltr\"] .nepLaunchpadMenuOverflowOpen {\n    left: 0;\n}\n\nhtml[dir=\"rtl\"] .nepLaunchpadMenuOverflowOpen {\n    right: 0;\n}\n\n.nepLaunchpadSettingsContainer {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 0;\n    background-color: rgba(0, 0, 0, 0.4);\n    z-index: 97;\n}\n\n.nepLaunchpadSettingsClickArea {\n    position: absolute;\n    top: 0;\n    z-index: 98;\n    bottom: 0;\n}\n\nhtml[dir=\"ltr\"] .nepLaunchpadSettingsClickArea {\n    right: 300px;\n    left: 0;\n}\n\nhtml[dir=\"rtl\"] .nepLaunchpadSettingsClickArea {\n    right: 0;\n    left: 300px;\n}\n\n.nepLaunchpadMenuSettings {\n    position: absolute;\n    top: 0;\n    /*right: -300px;*/\n    width: 300px;\n    height: 100%;\n    z-index: 99;\n    /*-webkit-transition: all .3s ease-out;*/\n    /*-moz-transition: all .3s ease-out;*/\n    /*-o-transition: all .3s ease-out;*/\n    /*transition: all .3s ease-out;*/\n}\n\nhtml[dir=\"ltr\"] .nepLaunchpadMenuSettings {\n    right: -300px;\n}\n\nhtml[dir=\"rtl\"] .nepLaunchpadMenuSettings {\n    left: -300px;\n    display: none;\n}\n\nhtml[dir=\"ltr\"] .nepLaunchpadMenuSettingsOpen {\n    right: 0;\n}\n\nhtml[dir=\"rtl\"] .nepLaunchpadMenuSettingsOpen {\n    left: 0;\n}\n\n.nepLaunchpadContentSideApp {\n    position: absolute;\n    top: 0;\n    right: 0;\n    height: 100%;\n    border-left: 1px solid #d9d9d9;\n    border-top: 1px solid #d9d9d9;\n}\n\n.nepThemeDark .nepLaunchpadContentSideApp {\n    border-left: 1px solid #4b596a;\n    border-top: 1px solid #4b596a;\n}\n\n.nepHeaderSearch .sapMInput {\n    padding-right: .5rem;\n}\n\n.nepFCard .sapMListBGTranslucent .sapMListTblHeader,\n.nepFCard .sapMListBGTranslucent .sapMListTblFooter,\n.nepFCard .sapMListTblHeader>.sapMTableTH {\n    background-color: transparent;\n}\n\n.nepGridMany .nepTileSmall .sapFCardHeaderSideIndicators .sapFCardHeaderSideIndicator:last-child {\n    display: none;\n}\n\n.nepFCard.sapFCard.nepICCard {\n    height: 100%;\n}\n\n.nepFCard.sapFCard.nepICCardActionBottom {\n    min-height: calc(3rem - 2px);\n    height: calc(3rem - 2px);\n    clip-path: inset(0 -5px -5px -5px);\n    clip-path: inset(0 -5px -5px -5px);\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n}\n\n.nepFCard.sapFCard.nepICCardActionTop {\n    clip-path: inset(-5px -5px 0 -5px);\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n    height: 100%;\n}\n\n.nepFCardContainer,\n.nepTileContainer {\n    padding: .25rem;\n    padding: var(--cardMargin);\n    min-height: var(--gridHeight);\n}\n\n.nepFCardContainer.nepFCardPlain,\n.nepTileContainer.nepTilePlain {\n    padding: 0;\n}\n\n.nepFCardContainer>.sapMFlexItem,\n.nepFCardBody>.sapMFlexItem {\n    width: 100%;\n}\n\n.nepICCardContainer>.sapMFlexItem {\n    height: 100%;\n}\n\n.nepLaunchpadContent {\n    height: 100%;\n}\n\n.nepLaunchpadContentMain {\n    position: absolute;\n    left: 0;\n    right: 0;\n    width: 100%;\n    height: 100%;\n}\n\n.nepLaunchpadShell {\n    position: relative;\n}\n\n.nepLaunchpadContentMenu {\n    z-index: 100;\n}\n\n.nepLaunchpadMenuOverflow>.sapMFlexItem:last-child,\n.nepLaunchpadContentMenu>.sapMFlexItem,\n.nepLaunchpadContentNavigator>.sapMFlexItem,\n.nepLaunchpadContentMain>.sapMFlexItem,\n.nepLaunchpadContentSideApp>.sapMFlexItem {\n    height: 100% !important;\n}\n\n.nepFCard.sapFCard .sapFCardHeader {\n    box-shadow: none;\n}\n\n.nepFCard.sapFCard .sapFCardHeader.nepFCardFooter {\n    padding: 0;\n    width: 100%;\n    border-bottom: none;\n}\n\n.nepFCard.sapFCard.nepTileClickable .sapFCardHeader.nepFCardFooter {\n    border-bottom: none;\n}\n\n.nepFCard.sapFCard .sapFCardHeader.nepFCardFooter .sapFCardStatus {\n    padding: .25rem 1rem .25rem 0;\n    margin: 0;\n}\n\nhtml[dir=\"rtl\"] .nepFCard.sapFCard .sapFCardHeader.nepFCardFooter .sapFCardStatus {\n    padding: .25rem 0 .25rem 1rem;\n}\n\n.nepFCard.sapFCard .sapFCardHeader {\n    background-color: transparent;\n}\n\n.nepFCard.sapFCard .sapFCardContent {\n    flex: 1;\n}\n\n.nepFCard.sapFCard {\n    height: 100%;\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n}\n\n.nepFCard.sapFCard.sapFCardFitContent {\n    height: auto;\n}\n\n.nepFCardInlineImage {\n    margin-bottom: .5rem;\n}\n\n.nepFCard.sapFCard .sapFCardHeader.nepFCardFooter {\n    clip-path: inset(1px 0 -5px);\n}\n\n.nepFCard.sapFCard .sapFCardHeader.nepFCardFooter,\n.nepFCard.sapFCard .sapFCardHeader.nepFCardFooter.sapFCardNumericHeader .sapFCardHeaderIndicators {\n    flex-direction: row-reverse;\n}\n\n.nepFCard.sapFCard .nepCardAction {\n    padding: .25rem 0.85rem;\n    min-height: 2.5rem;\n}\n\n.nepFCard .sapSuiteRMCCircleBackground,\n.nepTile .sapSuiteRMCCircleBackground {\n    stroke: transparent;\n    fill: transparent;\n}\n\n.nepFCard .sapSuiteUiMicroChartNoData {\n    border-radius: .5rem;\n}\n\nhtml.sapUiMedia-Std-Phone .nepFCard .sapSuiteCpMCChartContent.sapSuiteCpMCSizeAuto,\n.nepFCard .sapSuiteCpMCChartContent.sapSuiteCpMCSizeS {\n    height: auto;\n}\n\n.nepTileClickable .sapFCardHeaderTitle,\n.nepTileClickable .sapFCardSubtitle {\n    pointer-events: none;\n}\n\n.nepTileClickable {\n    cursor: pointer;\n}\n\n.nepICCard .sapMLIB {\n    background: transparent;\n}\n\n.nepFCard .sapFCardHeaderSINumber span:first-child {\n    margin-right: .125rem;\n}\n\nhtml.sap-desktop .sapMDialog .sapMShellAppWidthLimited .sapMShellCentralBox {\n    width: 100%;\n    margin-left: auto;\n    left: auto;\n}\n\n@media (min-width: 1280px) {\n    html.sap-desktop .nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n        width: 100%;\n        left: auto;\n        right: auto;\n        /* max-width: var(--large); */\n        margin: 0 auto 0 auto;\n    }\n}\n\n/* DIALOG WITH OBJECTHEADER */\n\n.nepDialogWithObjHeader .sapMOHR {\n    padding-top: 0 !important;\n}\n\n.nepDialogWithObjHeader.sapUiSizeCompact .sapMBar {\n    height: 2.5rem;\n    border-radius: 4px 4px 0px 0px;\n}\n\n.nepDialogWithObjHeader.sapUiSizeCompact.sapMDialog>.sapMDialogTitle,\n.nepDialogWithObjHeader.sapUiSizeCompact .sapMDialog>.sapMDialogTitle {\n    height: 2.5rem;\n}\n\n.nepDialogWithObjHeader .nepCloseBtn {\n    z-index: 9999;\n}\n\n.nepDialogWithObjHeader .sapMOHRIcon {\n    top: .675rem;\n}\n\n.nepDialogWithObjHeader .sapUiLocalBusyIndicatorSizeMedium {\n    border-radius: .25rem;\n}\n\n.nepDialogSubObjHeader {\n    margin-top: -1rem;\n}\n\n.nepDialogSubObjHeader .sapMText {\n    padding: 0 1rem 1rem 7rem;\n}\n\n.nepDialogSubObjHeader .sapMDialog>.sapMDialogSection {\n    margin-top: -1rem;\n    height: calc(100% + 1rem);\n}\n\n.nepDialogWithObjHeader.sapMDialog:not(.sapMDialogWithSubHeader)>header>.sapMIBar,\n.nepDialogWithObjHeader.sapMDialog>header:last-of-type .sapMIBar,\n.nepPopover.sapMDialog:not(.sapMDialogWithSubHeader)>header>.sapMIBar,\n.nepPopover.sapMDialog>header:last-of-type .sapMIBar {\n    box-shadow: none;\n}\n\n.nepNotificationImage {\n    max-width: 2.25rem;\n    max-height: 2.25rem;\n}\n\n@media (max-width: 680px) {\n    .nepClientInstall {\n        flex-direction: column;\n    }\n}\n\n.nepClientInstallContainer {\n    padding: .5rem;\n}\n\n.nepClientInstallLayout {\n    padding: 1rem;\n    border-radius: .5rem;\n    width: 100%;\n}\n\n.nepAppIcon {\n    border-radius: 2rem;\n}\n\n.nepOverflowMenu .sapMLIB,\n.nepMainBar .sapMLIB {\n    border: none;\n}\n\n.nepOverflowMenu .sapMBtn:hover>.sapMBtnHoverable,\n.nepMainBar .sapMBtn:hover>.sapMBtnHoverable {\n    background-color: transparent;\n    border-color: transparent;\n}\n\n.nepOverflowLogo {\n    margin-top: -.5rem;\n}\n\n.nepOverflowMenu .sapMBarLeft,\n.nepMainBar .sapMBarLeft {\n    padding: 0;\n    height: 2.75rem !important;\n}\n\n.nepOverflowMenu.sapMDialog>header.sapMDialogTitle .sapMImg {\n    margin-right: 0;\n    width: auto;\n}\n\n.nepMenuBtnHidden {\n    position: relative;\n    top: 48px;\n}\n\n.nepOpenAppsBtn {\n    margin-left: .3125rem;\n}\n\n.sapMBtn.nepOpenAppsBtn.nepOpenAppsBtnItem .sapMBtnContent {\n    max-width: 200px;\n}\n\n.sapUiSizeCompact .nepOpenAppsBtn {\n    margin-left: 0;\n}\n\n.nepOpenAppsBtnItem {\n    margin-left: 2.4375rem;\n}\n\n.sapUiSizeCompact .nepOpenAppsBtnItem {\n    margin-left: 1.675rem;\n}\n\n.nepOpenAppsAlone .nepOpenAppsBtn {\n    margin-left: 0;\n}\n\n.nepOpenAppsBtn .sapMBtnInner {\n    border: none;\n    background-color: transparent;\n}\n\n.nepOpenAppsBtn .sapMBtnContent {\n    padding-left: .5rem;\n}\n\n.sapUiSizeCompact .nepOpenAppsBtn .sapMBtnContent {\n    padding-left: .325rem;\n}\n\n.nepOpenAppsClose.sapUiIcon {\n    margin-right: 1rem;\n    font-size: 1rem !important;\n}\n\n.nepOverflowMenu .sapMBtnInner,\n.nepMainBar .sapMBtnInner {\n    border: none;\n    background-color: transparent;\n}\n\n.nepOverflowMenu .headerMobileMenu .sapMBtnIcon,\n.nepMainBar .headerMobileMenu .sapMBtnIcon {\n    font-size: 1.375rem;\n}\n\n.nepOverflowMenu .sapUiSizeCompact .nepOpenAppsBtn .sapMBtnIcon,\n.nepMainBar .sapUiSizeCompact .nepOpenAppsBtn .sapMBtnIcon {\n    font-size: 1.125rem;\n    padding-left: .5rem;\n}\n\n.nepOverflowMenu .sapUiSizeCompact .nepOpenAppsBtn.nepOpenAppsBtnItem .sapMBtnIcon,\n.nepMainBar .sapUiSizeCompact .nepOpenAppsBtn.nepOpenAppsBtnItem .sapMBtnIcon {\n    font-size: 1rem;\n}\n\n.nepOverflowMenu.sapUiPopupWithPadding .sapMDialogScrollCont {\n    padding: 0;\n}\n\n.nepTopMenuIconContainerDesktop,\n.nepTopMenuIconContainerMobile {\n    min-width: 48px;\n}\n\n.nepTopMenuIconContainerMobile {\n    max-width: 48px;\n}\n\n.nepTopMenuIconDesktop,\n.nepTopMenuIconMobile {\n    max-height: 36px;\n}\n\n.nepUserActionText.sapMText {\n    text-align: left;\n    margin: .5rem 0 .5rem 1rem;\n    font-weight: bold;\n    font-size: 1rem;\n}\n\n.nepTopMenuIcon.sapMImg.sapMNoImg {\n    visibility: visible;\n}\n\n@media (max-width: 800px) {\n    .nepUserButton .sapMBtnContent {\n        display: none;\n    }\n}\n\n.nepTile .sapMNCIconImage {\n    margin-top: .75rem;\n}\n\n.nepFeed,\n.nepFeed .sapMText {\n    cursor: grab;\n}\n\n.nepTileContentContainer {\n    width: 100%;\n}\n\n.nepAppCacheUser .sapMLIB.sapMObjLItem {\n    margin-bottom: 5px;\n    border-radius: 10px;\n}\n\n.nepSelectUser {\n    padding: 0 .5rem;\n    border-radius: 0.25rem;\n    border-width: 1px;\n    border-style: solid;\n}\n\n.nepSelectUserBtn.sapMBtn,\n.nepSelectUserBtn .sapMBtnInner.sapMBtnText {\n    padding: 0;\n}\n\n.nepSelectUserBtn .sapMBtnInner {\n    height: 3rem;\n}\n\n.nepSelectUserBtn .sapMBtnContent {\n    line-height: 2.875rem;\n}\n\n/* CHART FIX */\n\n.sapSuiteRMC.sapSuiteRMCSizeResponsive {\n    max-height: 4.75rem;\n    max-width: 4.75rem;\n}\n\n.nepMinimized .sapMTextLineClamp,\n.nepMinimized .sapMOHRTitleTextWrappable {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    display: block;\n}\n\n.sapMNC {\n    width: 100%;\n}\n\n.nepHiddenItem {\n    opacity: .25;\n    pointer-events: none;\n}\n\n.nepHiddenItem .sapMLIBIconDel {\n    opacity: 0;\n    pointer-events: none;\n}\n\n/* HELP LABLE */\n\n.sapUiFormLblColon .sapUiFormElementLbl>.sapMLabel.nepLabelHelp:after {\n    font-family: 'SAP-icons';\n    content: \"\\e1c4\";\n    vertical-align: inherit;\n    margin-left: .325rem;\n}\n\n.sapMLabel.nepLabelHelp {\n    pointer-events: none;\n    cursor: pointer;\n}\n\n.sapMLabel.nepLabelHelp::after {\n    pointer-events: all;\n}\n\n.sapUiFormResGridCont>.sapUiFormElementLbl>.nepLabelHelp.sapMLabel {\n    width: auto;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanS12)>.sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanM12)>.sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanL12)>.sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanXL12)>.sapMLabel.nepLabelHelp {\n    width: 100%;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanS12)>.sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanM12)>.sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanL12)>.sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanXL12)>.sapMLabel.nepLabelHelp:after {\n    content: \":\";\n    pointer-events: none;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanS12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanM12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanL12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanXL12)>.sapMLabel.nepLabelHelp:before {\n    font-family: 'SAP-icons';\n    content: \"\\e1c4\";\n    margin-right: .325rem;\n    vertical-align: inherit;\n    pointer-events: all;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanS12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanM12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanL12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanXL12)>.sapMLabel.nepLabelHelp:before {\n    font-family: 'SAP-icons';\n    content: \"\\e1c4\";\n    margin-right: .325rem;\n    vertical-align: inherit;\n    pointer-events: all;\n}\n\n.sapMLabelRequired.nepLabelHelp:before {\n    content: inherit;\n    font-size: inherit;\n    font-weight: inherit;\n    position: inherit;\n    vertical-align: inherit;\n    line-height: inherit;\n}\n\n/* SCROLLBAR COLOR */\n\nhtml.sap-desktop.nepThemeLight ::-webkit-scrollbar-thumb,\nhtml.sap-desktop.nepThemeLight ::-webkit-scrollbar-thumb:hover {\n    background-color: var(--lightGreySecondary);\n}\n\nhtml.sap-desktop.nepThemeDark ::-webkit-scrollbar-thumb,\nhtml.sap-desktop.nepThemeDark ::-webkit-scrollbar-thumb:hover {\n    background-color: var(--darkThemeSecondaryBackground);\n}\n\n/* BACKGROUND COLOR */\n\n.nepThemeLight .nepTopMenu {\n    background: var(--white);\n}\n\n.nepThemeDark .nepTopMenu {\n    background: var(--darkThemePrimaryBackground);\n    border-radius: 0;\n}\n\n.nepThemeLight .nepNavBarContent {\n    background: var(--white);\n}\n\n.nepThemeDark .nepNavBarContent {\n    background: var(--darkThemeSecondaryBackground);\n}\n\n.nepThemeLight .nepMainBar {\n    background: var(--white);\n}\n\n.nepThemeDark .nepMainBar {\n    background: var(--darkThemeSecondaryBackground);\n}\n\n.nepThemeLight .nepLayoutOpenApps {\n    background-color: var(--white);\n}\n\n.nepThemeDark .nepLayoutOpenApps {\n    background-color: var(--darkThemeSecondaryBackground);\n}\n\n.nepThemeLight .nepTopMenu .nepNotificationButton span.sapMBtnInner:hover {\n    background-color: var(--lightThemeNotification);\n}\n\n.nepThemeDark .nepTopMenu .nepNotificationButton span.sapMBtnInner:hover {\n    background-color: var(--darkThemeNotification);\n}\n\n.nepThemeLight .nepSelectUser {\n    background-color: var(--white);\n}\n\n.nepThemeDark .nepSelectUser {\n    background-color: var(--darkThemeSecondaryBackground);\n}\n\n.nepThemeLight .nepLaunchpadMenuSettings {\n    background: var(--white);\n}\n\n.nepThemeDark .nepLaunchpadMenuSettings {\n    background: var(--darkThemeSecondaryBackground);\n}\n\n.nepThemeLight .numPad .sapMBtnInner,\n.nepThemeLight .nepNumpadPanel .sapMCbBg.sapMCbMarkChecked,\n.nepThemeLight .nepNumpadPanel .sapMBtn:hover>.sapMBtnHoverable,\n.nepThemeLight .numPad:not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n    background-color: rgba(0, 0, 0, 0.2);\n}\n\n.nepThemeDark .numPad .sapMBtnInner,\n.nepThemeDark .nepNumpadPanel .sapMCbBg.sapMCbMarkChecked,\n.nepThemeDark .nepNumpadPanel .sapMBtn:hover>.sapMBtnHoverable,\n.nepThemeDark .numPad:not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n    background-color: rgba(255, 255, 255, 0.2);\n}\n\n.nepThemeLight .nepNumpadPanel .sapMCbBg {\n    background: rgba(0, 0, 0, 0.1);\n}\n\n.nepThemeDark .nepNumpadPanel .sapMCbBg {\n    background: rgba(255, 255, 255, 0.1);\n}\n\n.nepThemeLight .nepLogonLayout {\n    background: rgba(0, 0, 0, 0.2);\n}\n\n.nepThemeDark .nepLogonLayout {\n    background-color: rgb(255, 255, 255, 0.2);\n}\n\n@media (max-width: 420px) {\n    .nepThemeLight .nepLogonLayout,\n    .nepThemeDark .nepLogonLayout {\n        background-color: transparent;\n    }\n}\n\n.nepThemeLight .nepLogonLayoutBtn .sapMBtn:not(.numPad):hover>.sapMBtnHoverable {\n    background-color: var(--white);\n}\n\n.nepThemeDark .nepLogonLayoutBtn .sapMBtn:not(.numPad):hover>.sapMBtnHoverable {\n    background-color: var(--darkThemeSecondaryBackground);\n}\n\n/* TEXT COLOR */\n\n.nepNavBarActionInverse .sapMBtnCustomIcon {\n    color: white !important;\n}\n\n.nepNavBarActionInverse .sapMBtnInner {\n    color: white !important;\n}\n\n.nepThemeLight .nepMainBar .sapMBtnIcon,\n.nepThemeLight .nepTopMenuContent .sapMBtn,\n.nepThemeLight .nepTopMenuContent .sapMBtnInner,\n.nepThemeLight .nepTopMenuContent .sapMBtnIcon {\n    color: var(--darkSecondaryColor);\n}\n\n.nepThemeDark .nepMainBar .sapMBtnIcon,\n.nepThemeDark .nepTopMenuContent .sapMBtn,\n.nepThemeDark .nepTopMenuContent .sapMBtnInner,\n.nepThemeDark .nepTopMenuContent .sapMBtnIcon {\n    color: var(--lightSecondaryColor);\n}\n\n.nepThemeLight .nepTopMenuContent .sapMBtn:hover>.sapMBtnHoverable,\n.nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive,\n.nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeLight .nepTopMenuContent span.sapMBtnInner.sapMBtnEmphasized,\n.nepThemeLight .nepTopMenuContent .sapMBtn:hover:not(.sapMBtnDisabled)>.sapMBtnHoverable.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed)>.sapMBtnIcon,\n.nepThemeLight .nepTopMenuContent *.sapMBtn:hover:not(.sapMBtnDisabled)>span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed)>.sapMBtnIcon,\n.nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled):not(.sapMSBActive)>span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed):hover>.sapMBtnIcon {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepTopMenuContent .sapMBtn:hover>.sapMBtnHoverable,\n.nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive,\n.nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeDark .nepTopMenuContent span.sapMBtnInner.sapMBtnEmphasized,\n.nepThemeDark .nepTopMenuContent .sapMBtn:hover:not(.sapMBtnDisabled)>.sapMBtnHoverable.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed)>.sapMBtnIcon,\n.nepThemeDark .nepTopMenuContent *.sapMBtn:hover:not(.sapMBtnDisabled)>span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed)>.sapMBtnIcon,\n.nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled):not(.sapMSBActive)>span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed):hover>.sapMBtnIcon {\n    color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .sapMNCIconImage {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .sapMNCIconImage {\n    color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepSubMenu .sapMBtnInner {\n    color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepSubMenu .sapMBtnInner {\n    color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeLight .nepTreeCategory .sapMTreeItemBaseExpander {\n    color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeDark .nepTreeCategory .sapMTreeItemBaseExpander {\n    color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .nepOpenAppsBtn .sapMBtnIcon,\n.nepThemeLight .nepMainBar .sapMSFF,\n.nepThemeLight .nepMainBar .sapMSFB,\n.nepThemeLight .nepPopover .sapMSFF,\n.nepThemeLight .nepPopover .sapMSFB {\n    color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .nepOpenAppsBtn .sapMBtnIcon,\n.nepThemeDark .nepMainBar .sapMSFF,\n.nepThemeDark .nepMainBar .sapMSFB,\n.nepThemeDark .nepPopover .sapMSFF,\n.nepThemeDark .nepPopover .sapMSFB {\n    color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .sapMDialogStretched.nepPopover .nepOpenAppsBtn .sapMBtnIcon,\n.nepThemeLight .sapMDialogStretched .nepOpenAppsClose.sapUiIcon,\n.nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMSTIIcon,\n.nepThemeLight .sapMDialogStretched.nepOverflowMenu .nepTreeCategory .sapMTreeItemBaseExpander {\n    color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .sapMDialogStretched.nepPopover .nepOpenAppsBtn .sapMBtnIcon,\n.nepThemeDark .sapMDialogStretched .nepOpenAppsClose.sapUiIcon,\n.nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMSTIIcon,\n.nepThemeDark .sapMDialogStretched.nepOverflowMenu .nepTreeCategory .sapMTreeItemBaseExpander {\n    color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .sapMDialogStretched .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeLight .sapMDialogStretched.nepOverflowMenu .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMBtnInner,\n.nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMTreeItemBase {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .sapMDialogStretched .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeDark .sapMDialogStretched.nepOverflowMenu .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMBtnInner,\n.nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMTreeItemBase {\n    color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepOpenAppsClose.sapUiIcon {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepOpenAppsClose.sapUiIcon {\n    color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepPopover .sapMBtnIcon,\n.nepThemeLight .nepMainBar .sapMBtnIcon {\n    color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .nepPopover .sapMBtnIcon,\n.nepThemeDark .nepMainBar .sapMBtnIcon {\n    color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .nepOpenAppsBtn .sapMBtnIcon {\n    color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepOpenAppsBtn .sapMBtnIcon {\n    color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .nepPopover .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n.nepThemeLight .nepPopover .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n.nepThemeLight .nepMainBar .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n.nepThemeLight .nepMainBar .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled)>.sapMBtnActive {\n    color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .nepPopover .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n.nepThemeDark .nepPopover .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n.nepThemeDark .nepMainBar .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n.nepThemeDark .nepMainBar .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled)>.sapMBtnActive {\n    color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .nepPopover :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeLight .nepPopover .sapMIBar-CTX .sapMLabel,\n.nepThemeLight .nepMainBar :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeLight .nepMainBar .sapMIBar-CTX .sapMLabel {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepPopover :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeDark .nepPopover .sapMIBar-CTX .sapMLabel,\n.nepThemeDark .nepMainBar :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeDark .nepMainBar .sapMIBar-CTX .sapMLabel {\n    color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepListSetting .sapMLIB.sapMLIBActive {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepListSetting .sapMLIB.sapMLIBActive {\n    color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepUserActionText.sapMText {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepUserActionText.sapMText {\n    color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepNotificationItem .sapMLIBIconDel:not(.sapMBtnDisabled) .sapMBtnTransparent>.sapMBtnIcon {\n    color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepNotificationItem .sapMLIBIconDel:not(.sapMBtnDisabled) .sapMBtnTransparent>.sapMBtnIcon {\n    color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .nepPopSimpleTitle.sapMText {\n    color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepPopSimpleTitle.sapMText {\n    color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .sapMLabelRequired.nepLabelHelp:before {\n    color: var(--lightThemeRequired);\n}\n\n.nepThemeDark .sapMLabelRequired.nepLabelHelp:before {\n    color: var(--lightThemeRequired);\n}\n\n.nepThemeLight .nepNotifHeader.sapMText {\n    color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepNotifHeader.sapMText {\n    color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .nepFeed .sapMText {\n    color: var(--darkSecondaryColor);\n}\n\n.nepThemeDark .nepFeed .sapMText {\n    color: var(--lightSecondaryColor);\n}\n\n.nepThemeLight .nepFCard .sapSuiteUiMicroChartNoData {\n    color: var(--lightGreySecondary);\n}\n\n.nepThemeDark .nepFCard .sapSuiteUiMicroChartNoData {\n    color: var(--darkGreySecondary);\n}\n\n.nepThemeLight .nepNumpadPanel .sapMBtnIcon,\n.nepThemeLight .numPad .sapMBtnInner {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepNumpadPanel .sapMBtnIcon,\n.nepThemeDark .numPad .sapMBtnInner {\n    color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepLogonLayout .sapMBtnInner,\n.nepThemeLight .nepAppCacheUser .sapMLIB.sapMLIBActive,\n.nepThemeLight .nepAppCacheUser .sapMLIBActive div,\n.nepThemeLight .nepAppCacheUser .sapMLIBActive .sapMText {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepLogonLayout .sapMBtnInner,\n.nepThemeDark .nepAppCacheUser .sapMLIB.sapMLIBActive,\n.nepThemeDark .nepAppCacheUser .sapMLIBActive div,\n.nepThemeDark .nepAppCacheUser .sapMLIBActive .sapMText {\n    color: var(--lightPrimaryColor);\n}\n\n/* BORDER COLOR */\n\n.nepThemeLight .nepMainBar .sapMSFF,\n.nepThemeLight .nepPopover .sapMSFF,\n.nepThemeLight .nepMainBar .sapMSFF:hover,\n.nepThemeLight .nepPopover .sapMSFF:hover,\n.nepThemeLight .nepLaunchpadMenuSettings {\n    border-color: var(--lightGreyPrimary);\n}\n\n.nepThemeDark .nepMainBar .sapMSFF,\n.nepThemeDark .nepPopover .sapMSFF,\n.nepThemeDark .nepMainBar .sapMSFF:hover,\n.nepThemeDark .nepPopover .sapMSFF:hover,\n.nepThemeDark .nepLaunchpadMenuSettings {\n    border-color: var(--darkGreyPrimary);\n}\n\n.nepThemeLight .nepTopMenu,\n.nepThemeLight .nepMainBar,\n.nepThemeLight .nepNavBarContent,\n.nepThemeLight .nepNavBarContent .sapMTBStandard,\n.nepThemeLight .nepDocPage {\n    border-color: var(--lightGreySecondary);\n}\n\n.nepThemeDark .nepTopMenu,\n.nepThemeDark .nepMainBar,\n.nepThemeDark .nepNavBarContent,\n.nepThemeDark .nepNavBarContent .sapMTBStandard,\n.nepThemeDark .nepDocPage {\n    border-color: var(--darkGreySecondary);\n}\n\n.nepThemeLight .nepCatTitle.sapMTitle,\n.nepThemeLight .nepCatSubTitle.sapMTitle {\n    border-color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepCatTitle.sapMTitle,\n.nepThemeDark .nepCatSubTitle.sapMTitle {\n    border-color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepTopMenuActive,\n.nepThemeLight .nepTopMenuBtn.sapMBtn:hover,\n.nepThemeLight .nepLayoutOpenApps.nepIconActive {\n    border-color: var(--darkActiveMenuColor);\n}\n\n.nepThemeDark .nepTopMenuActive,\n.nepThemeDark .nepTopMenuBtn.sapMBtn:hover,\n.nepThemeDark .nepLayoutOpenApps.nepIconActive {\n    border-color: var(--lightActiveMenuColor);\n}\n\n.nepThemeLight .nepOverflowMenu.nepPopover.sapMPopover {\n    border-top-color: var(--darkActiveMenuColor);\n}\n\n.nepThemeDark .nepOverflowMenu.nepPopover.sapMPopover {\n    border-top-color: var(--lightActiveMenuColor);\n}\n\n.nepThemeLight .nepOverflowMenu.sapMPopover {\n    border-top-color: var(--darkActiveMenuColor);\n}\n\n.nepThemeDark .nepOverflowMenu.sapMPopover {\n    border-top-color: var(--lightActiveMenuColor);\n}\n\n.nepThemeLight .nepSelectUser {\n    border-color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .nepSelectUser {\n    border-color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .nepLogonLayout .sapMBtnInner {\n    border-color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .nepLogonLayout .sapMBtnInner {\n    border-color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .numPad:not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n    border-color: rgba(0, 0, 0, 0.5);\n}\n\n.nepThemeDark .numPad:not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n    border-color: rgba(255, 255, 255, 0.5);\n}\n\n/* BOX SHADOW */\n\n.nepThemeLight .nepLayoutOpenApps,\n.nepThemeLight .nepPinOpenApps,\n.nepThemeLight .nepOverflowMenu.sapMPopover,\n.nepThemeLight .nepPopover.sapMPopover,\n.nepThemeLight .nepTileCards,\n.nepThemeLight .nepFioriStyle .nepTile,\n.nepThemeLight .nepClientInstallLayout {\n    box-shadow: 0 8px 18px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n}\n\n.nepThemeDark .nepLayoutOpenApps,\n.nepThemeDark .nepPinOpenApps,\n.nepThemeDark .nepOverflowMenu.sapMPopover,\n.nepThemeDark .nepPopover.sapMPopover,\n.nepThemeDark .nepTileCards,\n.nepThemeDark .nepFioriStyle .nepTile,\n.nepThemeDark .nepClientInstallLayout {\n    box-shadow: 0 8px 18px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n}\n\n.nepThemeLight .nepFCard:hover,\n.nepThemeLight .nepLayoutOpenApps:hover,\n.nepThemeLight .nepPinOpenApps:hover,\n.nepThemeLight .nepOverflowMenu.sapMPopover:hover,\n.nepThemeLight .nepTileCards:hover,\n.nepThemeLight .nepFioriStyle .nepTile:hover,\n.nepThemeLight .nepICCardActionHover {\n    box-shadow: 0 8px 18px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n}\n\n.nepThemeDark .nepFCard:hover,\n.nepThemeDark .nepLayoutOpenApps:hover,\n.nepThemeDark .nepPinOpenApps:hover,\n.nepThemeDark .nepOverflowMenu.sapMPopover:hover,\n.nepThemeDark .nepTileCards:hover,\n.nepThemeDark .nepFioriStyle .nepTile:hover,\n.nepThemeDark .nepICCardActionHover {\n    box-shadow: 0 8px 18px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n}\n\n/* SAP QUARTZ LIGHT */\n\n.nepThemeLight .nepActionContainer .sapMBtnInner,\n.nepThemeLight .nepActionContainer .sapMBtn:hover>.sapMBtnHoverable {\n    background-color: transparent;\n    border-color: var(--darkPrimaryColor);\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeLight .nepActionContainer .sapMBtnIcon {\n    color: var(--darkPrimaryColor);\n}\n\n/* SAP QUARTZ DARK */\n\n.nepThemeDark .nepActionContainer .sapMBtnInner,\n.nepThemeDark .nepActionContainer .sapMBtn:hover>.sapMBtnHoverable {\n    background-color: transparent;\n    border-color: var(--lightSecondaryColor);\n    color: var(--lightSecondaryColor);\n}\n\n.nepThemeDark .nepActionContainer .sapMBtnIcon,\n.nepThemeDark .nepFCard.sapFCard .sapFCardHeader .sapFCardIcon.sapFAvatar .sapUiIcon {\n    color: var(--lightSecondaryColor);\n}\n\n/* NEPTUNE TREE CATEGORY (TILE GROUPS)*/\n\n.nepTreeCategory li[aria-level=\"2\"] {\n    padding-left: 1rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"3\"] {\n    padding-left: 2.5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"4\"] {\n    padding-left: 4rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"5\"] {\n    padding-left: 5.5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"2\"].nepTreeItemAction {\n    padding-left: 1.5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"3\"].nepTreeItemAction {\n    padding-left: 3.5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"4\"].nepTreeItemAction {\n    padding-left: 5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"5\"].nepTreeItemAction {\n    padding-left: 6.5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"6\"].nepTreeItemAction {\n    padding-left: 7rem !important;\n}\n\nhtml[dir=\"rtl\"] .nepTreeCategory li[aria-level=\"2\"] {\n    padding-left: 0 !important;\n    padding-right: 2rem !important;\n}\n\nhtml[dir=\"rtl\"] .nepTreeCategory li[aria-level=\"3\"] {\n    padding-left: 0 !important;\n    padding-right: 4rem !important;\n}\n\nhtml[dir=\"rtl\"] .nepTreeCategory li[aria-level=\"4\"] {\n    padding-left: 0 !important;\n    padding-right: 6rem !important;\n}\n\nhtml[dir=\"rtl\"] .nepTreeCategory li[aria-level=\"2\"] {\n    padding-left: 0 !important;\n    padding-right: 1.5rem !important;\n}\n\nhtml[dir=\"rtl\"] .nepTreeCategory li[aria-level=\"3\"] {\n    padding-left: 0 !important;\n    padding-right: 3rem !important;\n}\n\nhtml[dir=\"rtl\"] .nepTreeCategory li[aria-level=\"4\"] {\n    padding-left: 0 !important;\n    padding-right: 4.5rem !important;\n}\n\n.nepTreeCategory .sapMTreeItemBaseChildren {\n    background-color: transparent;\n}\n\n.nepTreeCategory .sapMTreeItemBaseExpander {\n    font-family: 'fa-solid' !important;\n}\n\n.nepTreeCategory .sapMTreeItemBaseLeaf>.sapMTreeItemBaseExpander {\n    opacity: 1;\n}\n\n.nepTreeCategory .nepTreeItemAction.sapMTreeItemBaseLeaf>.sapMTreeItemBaseExpander.sapUiIcon {\n    display: none;\n}\n\n.nepTreeCategory .sapMTreeItemBaseExpander.sapUiIcon {\n    font-family: 'fa-solid' !important;\n    font-size: 1.5rem;\n    margin-right: .125rem;\n}\n\n.nepTreeCategory .sapMTreeItemBaseExpander.sapUiIcon {\n    font-size: 1.125rem;\n}\n\n.nepOpenAppsBtn:not(.nepOpenAppsBtnItem) .sapMBtnIcon {\n    font-size: 1.5rem;\n}\n\n.nepOpenAppsBtn .sapMBtnIcon {\n    font-size: 1rem;\n}\n\n.nepOpenAppsBtnMaster .sapMBtnIcon {\n    font-size: 1.125rem;\n    padding-left: .5rem;\n}\n\n.nepTreeCategory .sapMBtnInner.sapMBtnText .sapMBtnIcon {\n    font-size: 1rem;\n}\n\n@-webkit-keyframes fadein {\n    0% {\n        opacity: 0;\n    }\n    100% {\n        opacity: 1;\n    }\n}\n\n@-moz-keyframes fadein {\n    0% {\n        opacity: 0;\n    }\n    100% {\n        opacity: 1;\n    }\n}\n\n@keyframes fadein {\n    0% {\n        opacity: 0;\n    }\n    100% {\n        opacity: 1;\n    }\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* MENU*/\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepTopMenuContent {\n    overflow: hidden;\n}\n\n.nepTopMenuContent .sapMBtnIcon {\n    font-size: 1.375rem;\n    line-height: 2.375rem;\n    width: 2.375rem;\n}\n\n.nepTopMenuContent .sapMBtn {\n    height: 3rem;\n}\n\n.nepTopMenuContent .sapMBtnInner {\n    height: 2.5rem;\n    min-width: 2.5rem;\n    border-radius: 0.2rem;\n}\n\n.nepTopMenuContent .sapMBtnContent {\n    line-height: 2.375rem;\n}\n\n.nepTopMenuContent .nepNotificationButton .sapMBtnInner {\n    height: 1.5rem;\n    min-width: 1.5rem;\n}\n\n.nepTopMenuContent .nepNotificationButton .sapMBtnInner.sapMBtnText,\n.nepTopMenuContent .nepNotificationButton .sapMBtnIconLeft+.sapMBtnIconRight,\n.nepTopMenuContent .nepNotificationButton .sapMBtnIconLeft+.sapMBtnIconLeft {\n    padding-left: .25rem;\n    padding-right: .25rem;\n}\n\n.nepTopMenuContent .nepNotificationButton .sapMBtnContent {\n    line-height: 1.5rem;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* CANVAS */\n\n/*--------------------------------------------------------------------------------------------------*/\n\nhtml.sap-desktop .nepShell.sapMShellAppWidthLimited .sapMShellCentralBox:before {\n    box-shadow: -15px 0 15px -15px rgba(0, 0, 0, 0.15) inset;\n    content: \" \";\n    height: 100%;\n    left: -15px;\n    position: absolute;\n    top: 0;\n    width: 15px;\n}\n\nhtml.sap-desktop .nepShell.sapMShellAppWidthLimited .sapMShellCentralBox:after {\n    box-shadow: 15px 0 15px -15px rgba(0, 0, 0, 0.15) inset;\n    content: \" \";\n    height: 100%;\n    position: absolute;\n    top: 0;\n    right: -15px;\n    width: 15px;\n}\n\nhtml.sap-desktop .nepShellXXXLarge.nepShell.sapMShellAppWidthLimited>.sapMShellCentralBox {\n    max-width: var(--xxxlarge);\n}\n\nhtml.sap-desktop .nepShellXXLarge.nepShell.sapMShellAppWidthLimited>.sapMShellCentralBox {\n    max-width: var(--xxlarge);\n}\n\nhtml.sap-desktop .nepShellXLarge.nepShell.sapMShellAppWidthLimited>.sapMShellCentralBox {\n    max-width: var(--xlarge);\n}\n\nhtml.sap-desktop .nepShellLarge.nepShell.sapMShellAppWidthLimited>.sapMShellCentralBox {\n    max-width: var(--large);\n}\n\nhtml.sap-desktop .nepShellMedium.nepShell.sapMShellAppWidthLimited>.sapMShellCentralBox {\n    max-width: var(--medium);\n}\n\nhtml.sap-desktop .nepShellSmall.nepShell.sapMShellAppWidthLimited>.sapMShellCentralBox {\n    max-width: var(--small);\n}\n\nhtml.sap-desktop .nepShellXSmall.nepShell.sapMShellAppWidthLimited>.sapMShellCentralBox {\n    max-width: var(--xsmall);\n}\n\n.nepShellWidthApp .sapMShellCentralBox {\n    max-width: var(--large);\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* NORMAL GRID */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepGrid {\n    display: grid;\n    grid-gap: var(--gridGap);\n    grid-template-columns: repeat(12, var(--grid12));\n    width: 100%;\n    margin-bottom: 8px;\n    margin-bottom: var(--gridGap);\n}\n\n.nepGrid.nepGridXXXLarge,\n.nepGrid.nepGroupXXXLarge {\n    grid-template-columns: repeat(10, var(--grid10));\n    width: 100%;\n}\n\n.nepGrid.nepGridXXLarge,\n.nepGrid.nepGroupXXLarge {\n    grid-template-columns: repeat(8, var(--grid8));\n    width: 100%;\n}\n\n.nepGrid.nepGridXLarge,\n.nepGrid.nepGroupXLarge {\n    grid-template-columns: repeat(6, var(--grid6));\n    width: 100%;\n}\n\n.nepGrid.nepGridLarge,\n.nepGrid.nepGroupLarge {\n    grid-template-columns: repeat(4, var(--grid4));\n    width: 100%;\n}\n\n.nepGrid.nepGridMedium,\n.nepGrid.nepGroupMedium {\n    grid-template-columns: repeat(3, var(--grid3));\n    width: 100%;\n}\n\n.nepGrid.nepGridSmall,\n.nepGrid.nepGroupSmall {\n    grid-template-columns: repeat(2, var(--grid2));\n    width: 100%;\n}\n\n.nepGrid.nepGridXSmall,\n.nepGrid.nepGroupXSmall {\n    grid-template-columns: var(--grid1);\n    width: 100%;\n}\n\n.nepHeaderXXXLarge,\n.nepGrid.nepGroupXXXLarge {\n    max-width: var(--xxxlarge);\n    margin: 0 auto 0 auto;\n}\n\n.nepHeaderXXLarge,\n.nepGrid.nepGroupXXLarge {\n    max-width: var(--xxlarge);\n    margin: 0 auto 0 auto;\n}\n\n.nepHeaderXLarge,\n.nepGrid.nepGroupXLarge {\n    max-width: var(--xlarge);\n    margin: 0 auto 0 auto;\n}\n\n.nepHeaderLarge,\n.nepGrid.nepGroupLarge {\n    max-width: var(--large);\n    margin: 0 auto 0 auto;\n}\n\n.nepHeaderMedium,\n.nepGrid.nepGroupMedium {\n    max-width: var(--medium);\n    margin: 0 auto 0 auto;\n}\n\n.nepHeaderSmall,\n.nepGrid.nepGroupSmall {\n    max-width: var(--small);\n    margin: 0 auto 0 auto;\n}\n\n.nepHeaderXSmall,\n.nepGrid.nepGroupXSmall {\n    max-width: var(--xsmall);\n    margin: 0 auto 0 auto;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* MANY GRID */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepGrid.nepGridMany {\n    grid-template-columns: repeat(14, var(--grid14));\n    width: 100%;\n    margin-bottom: var(--gridGap);\n}\n\n.nepGrid.nepGridXXXLarge.nepGridMany,\n.nepGrid.nepGroupXXXLarge.nepGridMany {\n    grid-template-columns: repeat(12, var(--grid12));\n    width: 100%;\n}\n\n.nepGrid.nepGridXXLarge.nepGridMany,\n.nepGrid.nepGroupXXLarge.nepGridMany {\n    grid-template-columns: repeat(10, var(--grid10));\n    width: 100%;\n}\n\n.nepGrid.nepGridXLarge.nepGridMany,\n.nepGrid.nepGroupXLarge.nepGridMany {\n    grid-template-columns: repeat(8, var(--grid8));\n    width: 100%;\n}\n\n.nepGrid.nepGridLarge.nepGridMany,\n.nepGrid.nepGroupLarge.nepGridMany {\n    grid-template-columns: repeat(6, var(--grid6));\n    width: 100%;\n}\n\n.nepGrid.nepGridMedium.nepGridMany,\n.nepGrid.nepGroupMedium.nepGridMany {\n    grid-template-columns: repeat(3, var(--grid3));\n    width: 100%;\n}\n\n.nepGrid.nepGridSmall.nepGridMany,\n.nepGrid.nepGroupSmall.nepGridMany {\n    grid-template-columns: repeat(2, var(--grid2));\n    width: 100%;\n}\n\n.nepGrid.nepGridXSmall.nepGridMany,\n.nepGrid.nepGroupXSmall.nepGridMany {\n    grid-template-columns: var(--grid1);\n    width: 100%;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* FEW GRID */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepGrid.nepGridFew {\n    grid-template-columns: repeat(8, var(--grid8));\n    width: 100%;\n    margin-bottom: var(--gridGap);\n}\n\n.nepGrid.nepGridXXXLarge.nepGridFew,\n.nepGrid.nepGroupXXXLarge.nepGridFew {\n    grid-template-columns: repeat(8, var(--grid8));\n    width: 100%;\n}\n\n.nepGrid.nepGridXXLarge.nepGridFew,\n.nepGrid.nepGroupXXLarge.nepGridFew {\n    grid-template-columns: repeat(6, var(--grid6));\n    width: 100%;\n}\n\n.nepGrid.nepGridXLarge.nepGridFew,\n.nepGrid.nepGroupXLarge.nepGridFew {\n    grid-template-columns: repeat(4, var(--grid4));\n    width: 100%;\n}\n\n.nepGrid.nepGridLarge.nepGridFew,\n.nepGrid.nepGroupLarge.nepGridFew {\n    grid-template-columns: repeat(2, var(--grid2));\n    width: 100%;\n}\n\n.nepGrid.nepGridMedium.nepGridFew,\n.nepGrid.nepGroupMedium.nepGridFew,\n.nepGrid.nepGridSmall.nepGridFew,\n.nepGrid.nepGroupSmall.nepGridFew,\n.nepGrid.nepGridXSmall.nepGridFew,\n.nepGrid.nepGroupXSmall.nepGridFew {\n    grid-template-columns: var(--grid1);\n    width: 100%;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* ONE GRID */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepGrid.nepGridOne {\n    grid-template-columns: var(--grid1);\n    width: 100%;\n    margin-bottom: var(--gridGap);\n}\n\n.nepGrid.nepGridXXXLarge.nepGridOne,\n.nepGrid.nepGroupXXXLarge.nepGridOne,\n.nepGrid.nepGridXXLarge.nepGridOne,\n.nepGrid.nepGroupXXLarge.nepGridOne,\n.nepGrid.nepGridXLarge.nepGridOne,\n.nepGrid.nepGroupXLarge.nepGridOne,\n.nepGrid.nepGridLarge.nepGridOne,\n.nepGrid.nepGroupLarge.nepGridOne,\n.nepGrid.nepGridMedium.nepGridOne,\n.nepGrid.nepGroupMedium.nepGridOne,\n.nepGrid.nepGridSmall.nepGridOne,\n.nepGrid.nepGroupSmall.nepGridOne,\n.nepGrid.nepGridXSmall.nepGridOne,\n.nepGrid.nepGroupXSmall.nepGridOne {\n    grid-template-columns: var(--grid1);\n    width: 100%;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* TILE */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepTile,\n.nepTileContentContainer {\n    height: calc(100% - 2 * var(--cardMargin));\n    min-height: var(--gridHeight);\n}\n\n.nepTile.nepTileCards>.sapMFlexItem {\n    height: 100%;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* TILE HEIGHT */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepTileTall {\n    grid-row: auto / span 2;\n    min-height: calc(2 * var(--gridHeight));\n}\n\n.nepTileTower {\n    grid-row: auto / span 3;\n    min-height: calc(3 * var(--gridHeight));\n}\n\n.nepTileSkyscraper {\n    grid-row: auto / span 4;\n    min-height: calc(4 * var(--gridHeight));\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* TILE WIDTH */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepTileMedium {\n    grid-column: auto / span 2;\n}\n\n.nepTileWide {\n    grid-column: auto / span 3;\n}\n\n.nepTileWider {\n    grid-column: auto / span 4;\n}\n\n.nepTileMax {\n    grid-column: auto / span 12;\n}\n\n.nepGroupXXXLarge .nepTileMax,\n.nepGridXXXLarge .nepTileMax {\n    grid-column: auto / span 10;\n}\n\n.nepGroupXXLarge .nepTileMax,\n.nepGridXXLarge .nepTileMax {\n    grid-column: auto / span 8;\n}\n\n.nepGroupXLarge .nepTileMax,\n.nepGridXLarge .nepTileMax {\n    grid-column: auto / span 6;\n}\n\n.nepGroupLarge .nepTileMax,\n.nepGridLarge .nepTileMax {\n    grid-column: auto / span 4;\n}\n\n.nepGroupMedium .nepTileWider,\n.nepGroupMedium .nepTileMax,\n.nepGridMedium .nepTileWider,\n.nepGridMedium .nepTileMax {\n    grid-column: auto / span 3;\n}\n\n.nepGroupSmall .nepTileWide,\n.nepGroupSmall .nepTileWider,\n.nepGroupSmall .nepTileMax,\n.nepGridSmall .nepTileWide,\n.nepGridSmall .nepTileWider,\n.nepGridSmall .nepTileMax {\n    grid-column: auto / span 2;\n}\n\n.nepGroupXSmall .nepTileMedium,\n.nepGroupXSmall .nepTileWide,\n.nepGroupXSmall .nepTileWider,\n.nepGroupXSmall .nepTileMax,\n.nepGridXSmall .nepTileMedium,\n.nepGridXSmall .nepTileWide,\n.nepGridXSmall .nepTileWider,\n.nepGridXSmall .nepTileMax {\n    grid-column: auto / span 1;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* TILE WIDTH MANY */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepGridMany .nepTileMax {\n    grid-column: auto / span 14;\n}\n\n.nepGridMany.nepGroupXXXLarge .nepTileMax,\n.nepGridMany.nepGridXXXLarge .nepTileMax {\n    grid-column: auto / span 12;\n}\n\n.nepGridMany.nepGroupXXLarge .nepTileMax,\n.nepGridMany.nepGridXXLarge .nepTileMax {\n    grid-column: auto / span 10;\n}\n\n.nepGridMany.nepGroupXLarge .nepTileMax,\n.nepGridMany.nepGridXLarge .nepTileMax {\n    grid-column: auto / span 8;\n}\n\n.nepGridMany.nepGroupLarge .nepTileMax,\n.nepGridMany.nepGridLarge .nepTileMax {\n    grid-column: auto / span 6;\n}\n\n.nepGridMany.nepGroupMedium .nepTileWider,\n.nepGridMany.nepGroupMedium .nepTileMax,\n.nepGridMany.nepGridMedium .nepTileWider,\n.nepGridMany.nepGridMedium .nepTileMax {\n    grid-column: auto / span 3;\n}\n\n.nepGridMany.nepGroupSmall .nepTileWide,\n.nepGridMany.nepGroupSmall .nepTileWider,\n.nepGridMany.nepGroupSmall .nepTileMax,\n.nepGridMany.nepGridSmall .nepTileWide,\n.nepGridMany.nepGridSmall .nepTileWider,\n.nepGridMany.nepGridSmall .nepTileMax {\n    grid-column: auto / span 2;\n}\n\n.nepGridMany.nepGroupXSmall .nepTileMedium,\n.nepGridMany.nepGroupXSmall .nepTileWide,\n.nepGridMany.nepGroupXSmall .nepTileWider,\n.nepGridMany.nepGroupXSmall .nepTileMax,\n.nepGridMany.nepGridXSmall .nepTileMedium,\n.nepGridMany.nepGridXSmall .nepTileWide,\n.nepGridMany.nepGridXSmall .nepTileWider,\n.nepGridMany.nepGridXSmall .nepTileMax {\n    grid-column: auto / span 1;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* TILE WIDTH FEW */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepGridFew .nepTileMax {\n    grid-column: auto / span 8;\n}\n\n.nepGridFew.nepGroupXXXLarge .nepTileMax,\n.nepGridFew.nepGridXXXLarge .nepTileMax {\n    grid-column: auto / span 8;\n}\n\n.nepGridFew.nepGroupXXLarge .nepTileMax,\n.nepGridFew.nepGridXXLarge .nepTileMax {\n    grid-column: auto / span 6;\n}\n\n.nepGridFew.nepGroupXLarge .nepTileMax,\n.nepGridFew.nepGridXLarge .nepTileMax {\n    grid-column: auto / span 4;\n}\n\n.nepGridFew.nepGroupLarge .nepTileWide,\n.nepGridFew.nepGroupLarge .nepTileWider,\n.nepGridFew.nepGroupLarge .nepTileMax,\n.nepGridFew.nepGridLarge .nepTileWide,\n.nepGridFew.nepGridLarge .nepTileWider,\n.nepGridFew.nepGridLarge .nepTileMax {\n    grid-column: auto / span 2;\n}\n\n.nepGridFew.nepGroupMedium .nepTileMedium,\n.nepGridFew.nepGroupMedium .nepTileWide,\n.nepGridFew.nepGroupMedium .nepTileWider,\n.nepGridFew.nepGroupMedium .nepTileMax,\n.nepGridFew.nepGridMedium .nepTileMedium,\n.nepGridFew.nepGridMedium .nepTileWide,\n.nepGridFew.nepGridMedium .nepTileWider,\n.nepGridFew.nepGridMedium .nepTileMax {\n    grid-column: auto / span 1;\n}\n\n.nepGridFew.nepGroupSmall .nepTileMedium,\n.nepGridFew.nepGroupSmall .nepTileWide,\n.nepGridFew.nepGroupSmall .nepTileWider,\n.nepGridFew.nepGroupSmall .nepTileMax,\n.nepGridFew.nepGridSmall .nepTileMedium,\n.nepGridFew.nepGridSmall .nepTileWide,\n.nepGridFew.nepGridSmall .nepTileWider,\n.nepGridFew.nepGridSmall .nepTileMax {\n    grid-column: auto / span 1;\n}\n\n.nepGridFew.nepGroupXSmall .nepTileMedium,\n.nepGridFew.nepGroupXSmall .nepTileWide,\n.nepGridFew.nepGroupXSmall .nepTileWider,\n.nepGridFew.nepGroupXSmall .nepTileMax,\n.nepGridFew.nepGridXSmall .nepTileMedium,\n.nepGridFew.nepGridXSmall .nepTileWide,\n.nepGridFew.nepGridXSmall .nepTileWider,\n.nepGridFew.nepGridXSmall .nepTileMax {\n    grid-column: auto / span 1;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* TILE WIDTH ONE */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepGrid.nepGridOne .nepTileMedium,\n.nepGrid.nepGridOne .nepTileWide,\n.nepGrid.nepGridOne .nepTileWider,\n.nepGrid.nepGridOne .nepTileMax {\n    grid-column: auto / span 1;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* TILE ALIGNMENT \n/*--------------------------------------------------------------------------------------------------*/\n\n.nepHeaderAlignLeft,\n.nepGrid.nepGridAlignLeft {\n    margin: 0 auto 0 0;\n}\n\n.nepHeaderAlignRight,\n.nepGrid.nepGridAlignRight {\n    margin: 0 0 0 auto;\n}\n\n/* --------------------------------------------------------------------------------------------------\n/* FIORI TILES \n/*--------------------------------------------------------------------------------------------------*/\n\n.nepGrid.nepGridFiori {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.nepGridFiori .nepTileMax {\n    width: 100%;\n}\n\n.nepGridFiori .nepTile {\n    width: 11rem;\n    height: 11rem;\n}\n\n.nepGridFiori .nepTile.nepFioriStyleTwoByOne {\n    width: 22.5rem;\n}\n\n.nepTileCards {\n    height: 100%;\n}\n\n.nepTileCards,\n.nepFioriStyle .nepTile {\n    border-radius: 4px;\n}\n\n.nepFitTileContent .nepTileContentContainer {\n    min-height: auto;\n}\n\n.nepFitTileContent.nepTileCards {\n    height: auto;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* INTERNET EXPLORER */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n@media all and (-ms-high-contrast: none),\n(-ms-high-contrast: active) {\n    .sapFCard .sapFCardHeader {\n        box-shadow: none !important;\n    }\n    .nepFCardContainer>.sapMFlexItem,\n    .nepFCardBody>.sapMFlexItem {\n        width: 100% !important;\n    }\n    .nepGrid {\n        display: flex;\n        flex-wrap: wrap;\n    }\n    html.sap-desktop .nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n        max-width: 1280px;\n    }\n    html.sap-desktop .nepShellXXXLarge.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n        max-width: 2360px;\n    }\n    html.sap-desktop .nepShellXXLarge.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n        max-width: 1880px;\n    }\n    html.sap-desktop .nepShellXLarge.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n        max-width: 1580px;\n    }\n    html.sap-desktop .nepShellLarge.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n        max-width: 1280px;\n    }\n    html.sap-desktop .nepShellMedium.nepShell.sapMShellAppWidthLimited>.sapMShellCentralBox {\n        max-width: 980px;\n    }\n    html.sap-desktop .nepShellSmall.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n        max-width: 680px;\n    }\n    html.sap-desktop .nepShellXSmall.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n        max-width: 380px;\n    }\n    .nepShellWidthApp .sapMShellCentralBox {\n        max-width: 1280px;\n    }\n    .nepHeaderXXXLarge,\n    .nepGrid.nepGroupXXXLarge {\n        max-width: 2360px;\n    }\n    .nepHeaderXXLarge,\n    .nepGrid.nepGroupXXLarge {\n        max-width: 1880px;\n    }\n    .nepHeaderXLarge,\n    .nepGrid.nepGroupXLarge {\n        max-width: 1580px;\n    }\n    .nepHeaderLarge,\n    .nepGrid.nepGroupLarge {\n        max-width: 1280px;\n    }\n    .nepHeaderMedium,\n    .nepGrid.nepGroupMedium {\n        max-width: 980px;\n    }\n    .nepHeaderSmall,\n    .nepGrid.nepGroupSmall {\n        max-width: 680px;\n    }\n    .nepHeaderXSmall,\n    .nepGrid.nepGroupXSmall {\n        max-width: 380px;\n    }\n    /*--------------------------------------------------------------------------------------------------*/\n    /* TILE HEIGHT */\n    /*--------------------------------------------------------------------------------------------------*/\n    .nepTile,\n    .nepTileContentContainer,\n    .nepFCardContainer,\n    .nepTileContainer {\n        min-height: 270px;\n    }\n    .nepTileTall {\n        min-height: 540px;\n    }\n    .nepTileTower {\n        min-height: 710px;\n    }\n    .nepTileSkyscraper {\n        min-height: 880px;\n    }\n    /*--------------------------------------------------------------------------------------------------*/\n    /* TILE WIDTH */\n    /*--------------------------------------------------------------------------------------------------*/\n    .nepGrid .nepTileSmall {\n        width: 8.3333% !important;\n    }\n    .nepPageXXXLarge .nepGrid .nepTileSmall,\n    .nepGridXXXLarge.nepGrid .nepTileSmall {\n        width: 10% !important;\n    }\n    .nepPageXXLarge .nepGrid .nepTileSmall,\n    .nepGridXXLarge.nepGrid .nepTileSmall {\n        width: 12.5% !important;\n    }\n    .nepPageXLarge .nepGrid .nepTileSmall,\n    .nepGridXLarge.nepGrid .nepTileSmall {\n        width: 16.6666% !important;\n    }\n    .nepPageLarge .nepGrid .nepTileSmall,\n    .nepGridLarge.nepGrid .nepTileSmall {\n        width: 25% !important;\n    }\n    .nepPageMedium .nepGrid .nepTileSmall,\n    .nepGridMedium.nepGrid .nepTileSmall {\n        width: 50% !important;\n    }\n    .nepPageSmall .nepGrid .nepTileSmall,\n    .nepGridSmall.nepGrid .nepTileSmall,\n    .nepPageXSmall .nepGrid .nepTileSmall,\n    .nepGridXSmall.nepGrid .nepTileSmall {\n        width: 100% !important;\n    }\n    .nepGrid .nepTileMedium {\n        width: 25% !important;\n    }\n    .nepPageXLarge .nepGrid .nepTileMedium,\n    .nepGridXLarge.nepGrid .nepTileMedium,\n    .nepPageLarge .nepGrid .nepTileMedium,\n    .nepGridLarge.nepGrid .nepTileMedium {\n        width: 50% !important;\n    }\n    .nepPageMedium .nepGrid .nepTileMedium,\n    .nepGridMedium.nepGrid .nepTileMedium,\n    .nepPageSmall .nepGrid .nepTileMedium,\n    .nepGridSmall.nepGrid .nepTileMedium,\n    .nepPageXSmall .nepGrid .nepTileMedium,\n    .nepGridXSmall.nepGrid .nepTileMedium {\n        width: 100% !important;\n    }\n    .nepGrid .nepTileWide {\n        width: 25% !important;\n    }\n    .nepPageXLarge .nepGrid .nepTileWide,\n    .nepGridXLarge.nepGrid .nepTileWide {\n        width: 50% !important;\n    }\n    .nepPageLarge .nepGrid .nepTileWide,\n    .nepGridLarge.nepGrid .nepTileWide,\n    .nepPageMedium .nepGrid .nepTileWide,\n    .nepGridMedium.nepGrid .nepTileWide,\n    .nepPageSmall .nepGrid .nepTileWide,\n    .nepGridSmall.nepGrid .nepTileWide,\n    .nepPageXSmall .nepGrid .nepTileWide,\n    .nepGridXSmall.nepGrid .nepTileWide {\n        width: 100% !important;\n    }\n    .nepGrid .nepTileWider {\n        width: 50% !important;\n    }\n    .nepPageXLarge .nepGrid .nepTileWider,\n    .nepGridXLarge.nepGrid .nepTileWider,\n    .nepPageLarge .nepGrid .nepTileWider,\n    .nepGridLarge.nepGrid .nepTileWider,\n    .nepPageMedium .nepGrid .nepTileWider,\n    .nepGridMedium.nepGrid .nepTileWider,\n    .nepPageSmall .nepGrid .nepTileWider,\n    .nepGridSmall.nepGrid .nepTileWider,\n    .nepPageXSmall .nepGrid .nepTileWide,\n    .nepGridXSmall.nepGrid .nepTileWider {\n        width: 100% !important;\n    }\n    .nepGrid .nepTileMax {\n        width: 100% !important;\n    }\n    /*--------------------------------------------------------------------------------------------------*/\n    /* TILE WIDTH FEW */\n    /*--------------------------------------------------------------------------------------------------*/\n    .nepGridFew .nepTileSmall {\n        width: 10% !important;\n    }\n    .nepPageXXXLarge .nepGridFew .nepTileSmall,\n    .nepGridXXXLarge.nepGridFew .nepTileSmall {\n        width: 12.5% !important;\n    }\n    .nepPageXXLarge .nepGridFew .nepTileSmall,\n    .nepGridXXLarge.nepGridFew .nepTileSmall {\n        width: 16.6666% !important;\n    }\n    .nepPageXLarge .nepGridFew .nepTileSmall,\n    .nepGridXLarge.nepGridFew .nepTileSmall {\n        width: 25% !important;\n    }\n    .nepPageLarge .nepGridFew .nepTileSmall,\n    .nepGridLarge.nepGridFew .nepTileSmall {\n        width: 50% !important;\n    }\n    .nepPageMedium .nepGridFew .nepTileSmall,\n    .nepGridMedium.nepGridFew .nepTileSmall {\n        width: 100% !important;\n    }\n    .nepPageSmall .nepGridFew .nepTileSmall,\n    .nepGridSmall.nepGridFew .nepTileSmall,\n    .nepPageXSmall .nepGridFew .nepTileSmall,\n    .nepGridXSmall.nepGridFew .nepTileSmall {\n        width: 100% !important;\n    }\n    .nepGridFew .nepTileMedium {\n        width: 50% !important;\n    }\n    .nepPageXLarge .nepGridFew .nepTileMedium,\n    .nepGridXLarge.nepGridFew .nepTileMedium,\n    .nepPageLarge .nepGridFew .nepTileMedium,\n    .nepGridLarge.nepGridFew .nepTileMedium,\n    .nepPageMedium .nepGridFew .nepTileMedium,\n    .nepGridMedium.nepGridFew .nepTileMedium,\n    .nepPageSmall .nepGridFew .nepTileMedium,\n    .nepGridSmall.nepGridFew .nepTileMedium,\n    .nepPageXSmall .nepGridFew .nepTileMedium,\n    .nepGridXSmall.nepGridFew .nepTileMedium {\n        width: 100% !important;\n    }\n    .nepGridFew .nepTileWide {\n        width: 50% !important;\n    }\n    .nepPageXLarge .nepGridFew .nepTileWide,\n    .nepGridXLarge.nepGridFew .nepTileWide,\n    .nepPageLarge .nepGridFew .nepTileWide,\n    .nepGridLarge.nepGridFew .nepTileWide,\n    .nepPageMedium .nepGridFew .nepTileWide,\n    .nepGridMedium.nepGridFew .nepTileWide,\n    .nepPageSmall .nepGridFew .nepTileWide,\n    .nepGridSmall.nepGridFew .nepTileWide,\n    .nepPageXSmall .nepGridFew .nepTileWide,\n    .nepGridXSmall.nepGridFew .nepTileWide {\n        width: 100% !important;\n    }\n    .nepGridFew .nepTileWider,\n    .nepPageXLarge .nepGridFew .nepTileWider,\n    .nepGridXLarge.nepGridFew .nepTileWider,\n    .nepPageLarge .nepGridFew .nepTileWider,\n    .nepGridLarge.nepGridFew .nepTileWider,\n    .nepPageMedium .nepGridFew .nepTileWider,\n    .nepGridMedium.nepGridFew .nepTileWider,\n    .nepPageSmall .nepGridFew .nepTileWider,\n    .nepGridSmall.nepGridFew .nepTileWider,\n    .nepPageXSmall .nepGridFew .nepTileWide,\n    .nepGridXSmall.nepGridFew .nepTileWider {\n        width: 100% !important;\n    }\n    .nepGridFew .nepTileMax {\n        width: 100% !important;\n    }\n    /*--------------------------------------------------------------------------------------------------*/\n    /* TILE WIDTH ONE */\n    /*--------------------------------------------------------------------------------------------------*/\n    .nepGridOne .nepTileSmall,\n    .nepPageXXXLarge .nepGridOne .nepTileSmall,\n    .nepGridXXXLarge.nepGridOne .nepTileSmall,\n    .nepPageXXLarge .nepGridOne .nepTileSmall,\n    .nepGridXXLarge.nepGridOne .nepTileSmall,\n    .nepPageXLarge .nepGridOne .nepTileSmall,\n    .nepGridXLarge.nepGridOne .nepTileSmall,\n    .nepPageLarge .nepGridOne .nepTileSmall,\n    .nepGridLarge.nepGridOne .nepTileSmall,\n    .nepPageMedium .nepGridOne .nepTileSmall,\n    .nepGridMedium.nepGridOne .nepTileSmall,\n    .nepPageSmall .nepGridOne .nepTileSmall,\n    .nepGridSmall.nepGridOne .nepTileSmall,\n    .nepPageXSmall .nepGridOne .nepTileSmall,\n    .nepGridXSmall.nepGridOne .nepTileSmall,\n    .nepGridOne .nepTileMedium,\n    .nepPageXLarge .nepGridOne .nepTileMedium,\n    .nepGridXLarge.nepGridOne .nepTileMedium,\n    .nepPageLarge .nepGridOne .nepTileMedium,\n    .nepGridLarge.nepGridOne .nepTileMedium,\n    .nepPageMedium .nepGridOne .nepTileMedium,\n    .nepGridMedium.nepGridOne .nepTileMedium,\n    .nepPageSmall .nepGridOne .nepTileMedium,\n    .nepGridSmall.nepGridOne .nepTileMedium,\n    .nepPageXSmall .nepGridOne .nepTileMedium,\n    .nepGridXSmall.nepGridOne .nepTileMedium,\n    .nepGridOne .nepTileWide,\n    .nepPageXLarge .nepGridOne .nepTileWide,\n    .nepGridXLarge.nepGridOne .nepTileWide,\n    .nepPageLarge .nepGridOne .nepTileWide,\n    .nepGridLarge.nepGridOne .nepTileWide,\n    .nepPageMedium .nepGridOne .nepTileWide,\n    .nepGridMedium.nepGridOne .nepTileWide,\n    .nepPageSmall .nepGridOne .nepTileWide,\n    .nepGridSmall.nepGridOne .nepTileWide,\n    .nepPageXSmall .nepGridOne .nepTileWide,\n    .nepGridXSmall.nepGridOne .nepTileWide,\n    .nepGridOne .nepTileWider,\n    .nepPageXLarge .nepGridOne .nepTileWider,\n    .nepGridXLarge.nepGridOne .nepTileWider,\n    .nepPageLarge .nepGridOne .nepTileWider,\n    .nepGridLarge.nepGridOne .nepTileWider,\n    .nepPageMedium .nepGridOne .nepTileWider,\n    .nepGridMedium.nepGridOne .nepTileWider,\n    .nepPageSmall .nepGridOne .nepTileWider,\n    .nepGridSmall.nepGridOne .nepTileWider,\n    .nepPageXSmall .nepGridOne .nepTileWide,\n    .nepGridXSmall.nepGridOne .nepTileWider,\n    .nepGridOne .nepTileMax {\n        width: 100% !important;\n    }\n    .nepGrid.nepGridFiori .nepTileContainer {\n        width: 11.5rem !important;\n    }\n    .nepGrid.nepGridFiori .nepTileContainer.nepFioriStyleTwoByOne {\n        width: 23rem !important;\n    }\n    /* BACKGROUND COLOR */\n    .nepThemeLight .nepTopMenu {\n        background: white;\n    }\n    .nepThemeDark .nepTopMenu {\n        background: #1C2228;\n    }\n    .nepThemeLight .nepNavBarContent {\n        background: white;\n    }\n    .nepThemeDark .nepNavBarContent {\n        background: #29313a;\n    }\n    .nepThemeLight .nepMainBar {\n        background: white;\n    }\n    .nepThemeDark .nepMainBar {\n        background: #29313a;\n    }\n    .nepThemeLight .nepLayoutOpenApps {\n        background-color: white;\n    }\n    .nepThemeDark .nepLayoutOpenApps {\n        background-color: #29313a;\n    }\n    .nepThemeLight .nepTopMenu .nepNotificationButton span.sapMBtnInner:hover {\n        background-color: #dd0000;\n    }\n    .nepThemeDark .nepTopMenu .nepNotificationButton span.sapMBtnInner:hover {\n        background-color: #dd0000;\n    }\n    .nepThemeLight .nepSelectUser {\n        background-color: white;\n    }\n    .nepThemeDark .nepSelectUser {\n        background-color: #29313a;\n    }\n    .nepThemeLight .nepLaunchpadMenuSettings {\n        background: white;\n    }\n    .nepThemeDark .nepLaunchpadMenuSettings {\n        background: #29313a;\n    }\n    .nepThemeLight .numPad .sapMBtnInner,\n    .nepThemeLight .nepNumpadPanel .sapMCbBg.sapMCbMarkChecked,\n    .nepThemeLight .nepNumpadPanel .sapMBtn:hover>.sapMBtnHoverable,\n    .nepThemeLight .numPad:not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n        background-color: rgba(0, 0, 0, 0.2);\n    }\n    .nepThemeDark .numPad .sapMBtnInner,\n    .nepThemeDark .nepNumpadPanel .sapMCbBg.sapMCbMarkChecked,\n    .nepThemeDark .nepNumpadPanel .sapMBtn:hover>.sapMBtnHoverable,\n    .nepThemeDark .numPad:not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n        background-color: rgba(255, 255, 255, 0.2);\n    }\n    .nepThemeLight .nepNumpadPanel .sapMCbBg {\n        background: rgba(0, 0, 0, 0.1);\n    }\n    .nepThemeDark .nepNumpadPanel .sapMCbBg {\n        background: rgba(255, 255, 255, 0.1);\n    }\n    .nepThemeLight .nepLogonLayout {\n        background: rgba(0, 0, 0, 0.1);\n    }\n    .nepThemeDark .nepLogonLayout {\n        background-color: rgb(255, 255, 255, 0.1);\n    }\n    .nepThemeLight .nepLogonLayoutBtn .sapMBtn:not(.numPad):hover>.sapMBtnHoverable {\n        background-color: white;\n    }\n    .nepThemeDark .nepLogonLayoutBtn .sapMBtn:not(.numPad):hover>.sapMBtnHoverable {\n        background-color: #29313a;\n    }\n    /* TEXT COLOR */\n    .nepNavBarActionInverse .sapMBtnCustomIcon {\n        color: white !important;\n    }\n    .nepNavBarActionInverse .sapMBtnInner {\n        color: white !important;\n    }\n    .nepThemeLight .nepMainBar .sapMBtnIcon,\n    .nepThemeLight .nepTopMenuContent .sapMBtn,\n    .nepThemeLight .nepTopMenuContent .sapMBtnInner,\n    .nepThemeLight .nepTopMenuContent .sapMBtnIcon {\n        color: #444;\n    }\n    .nepThemeDark .nepMainBar .sapMBtnIcon,\n    .nepThemeDark .nepTopMenuContent .sapMBtn,\n    .nepThemeDark .nepTopMenuContent .sapMBtnInner,\n    .nepThemeDark .nepTopMenuContent .sapMBtnIcon {\n        color: #d3d7d9;\n    }\n    .nepThemeLight .nepTopMenuContent .sapMBtn:hover>.sapMBtnHoverable,\n    .nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive,\n    .nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n    .nepThemeLight .nepTopMenuContent span.sapMBtnInner.sapMBtnEmphasized,\n    .nepThemeLight .nepTopMenuContent .sapMBtn:hover:not(.sapMBtnDisabled)>.sapMBtnHoverable.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed)>.sapMBtnIcon,\n    .nepThemeLight .nepTopMenuContent *.sapMBtn:hover:not(.sapMBtnDisabled)>span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed)>.sapMBtnIcon,\n    .nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled):not(.sapMSBActive)>span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed):hover>.sapMBtnIcon {\n        color: #333;\n    }\n    .nepThemeDark .nepTopMenuContent .sapMBtn:hover>.sapMBtnHoverable,\n    .nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive,\n    .nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n    .nepThemeDark .nepTopMenuContent span.sapMBtnInner.sapMBtnEmphasized,\n    .nepThemeDark .nepTopMenuContent .sapMBtn:hover:not(.sapMBtnDisabled)>.sapMBtnHoverable.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed)>.sapMBtnIcon,\n    .nepThemeDark .nepTopMenuContent *.sapMBtn:hover:not(.sapMBtnDisabled)>span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed)>.sapMBtnIcon,\n    .nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled):not(.sapMSBActive)>span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed):hover>.sapMBtnIcon {\n        color: #fafafa;\n    }\n    .nepThemeLight .sapMNCIconImage {\n        color: #333;\n    }\n    .nepThemeDark .sapMNCIconImage {\n        color: #fafafa;\n    }\n    .nepThemeLight .nepSubMenu .sapMBtnInner {\n        color: #666;\n    }\n    .nepThemeDark .nepSubMenu .sapMBtnInner {\n        color: #dedede;\n    }\n    .nepThemeLight .nepOpenAppsBtn .sapMBtnInner,\n    .nepThemeLight .nepTreeCategory .sapMTreeItemBaseExpander {\n        color: #666;\n    }\n    .nepThemeDark .nepOpenAppsBtn .sapMBtnInner,\n    .nepThemeDark .nepTreeCategory .sapMTreeItemBaseExpander {\n        color: #dedede;\n    }\n    .nepThemeLight .nepOpenAppsBtn .sapMBtnIcon,\n    .nepThemeLight .nepMainBar .sapMSFF,\n    .nepThemeLight .nepMainBar .sapMSFB,\n    .nepThemeLight .nepPopover .sapMSFF,\n    .nepThemeLight .nepPopover .sapMSFB {\n        color: #888;\n    }\n    .nepThemeDark .nepOpenAppsBtn .sapMBtnIcon,\n    .nepThemeDark .nepMainBar .sapMSFF,\n    .nepThemeDark .nepMainBar .sapMSFB,\n    .nepThemeDark .nepPopover .sapMSFF,\n    .nepThemeDark .nepPopover .sapMSFB {\n        color: #ccc;\n    }\n    .nepThemeLight .sapMDialogStretched.nepPopover .nepOpenAppsBtn .sapMBtnIcon,\n    .nepThemeLight .sapMDialogStretched .nepOpenAppsClose.sapUiIcon,\n    .nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMSTIIcon,\n    .nepThemeLight .sapMDialogStretched.nepOverflowMenu .nepTreeCategory .sapMTreeItemBaseExpander {\n        color: #888;\n    }\n    .nepThemeDark .sapMDialogStretched.nepPopover .nepOpenAppsBtn .sapMBtnIcon,\n    .nepThemeDark .sapMDialogStretched .nepOpenAppsClose.sapUiIcon,\n    .nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMSTIIcon,\n    .nepThemeDark .sapMDialogStretched.nepOverflowMenu .nepTreeCategory .sapMTreeItemBaseExpander {\n        color: #ccc;\n    }\n    .nepThemeLight .sapMDialogStretched .nepOpenAppsBtn .sapMBtnInner,\n    .nepThemeLight .sapMDialogStretched.nepOverflowMenu .nepOpenAppsBtn .sapMBtnInner,\n    .nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMBtnInner,\n    .nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMTreeItemBase {\n        color: #333;\n    }\n    .nepThemeDark .sapMDialogStretched .nepOpenAppsBtn .sapMBtnInner,\n    .nepThemeDark .sapMDialogStretched.nepOverflowMenu .nepOpenAppsBtn .sapMBtnInner,\n    .nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMBtnInner,\n    .nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMTreeItemBase {\n        color: #fafafa;\n    }\n    .nepThemeLight .nepOpenAppsClose.sapUiIcon {\n        color: #333;\n    }\n    .nepThemeDark .nepOpenAppsClose.sapUiIcon {\n        color: #fafafa;\n    }\n    .nepThemeLight .nepPopover .sapMBtnIcon,\n    .nepThemeLight .nepMainBar .sapMBtnIcon {\n        color: #888;\n    }\n    .nepThemeDark .nepPopover .sapMBtnIcon,\n    .nepThemeDark .nepMainBar .sapMBtnIcon {\n        color: #ccc;\n    }\n    .nepThemeLight .nepOpenAppsBtn .sapMBtnIcon {\n        color: #888;\n    }\n    .nepThemeDark .nepOpenAppsBtn .sapMBtnIcon {\n        color: #ccc;\n    }\n    .nepThemeLight .nepPopover .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n    .nepThemeLight .nepPopover .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n    .nepThemeLight .nepMainBar .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n    .nepThemeLight .nepMainBar .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled)>.sapMBtnActive {\n        color: #888;\n    }\n    .nepThemeDark .nepPopover .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n    .nepThemeDark .nepPopover .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n    .nepThemeDark .nepMainBar .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n    .nepThemeDark .nepMainBar .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled)>.sapMBtnActive {\n        color: #ccc;\n    }\n    .nepThemeLight .nepPopover :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n    .nepThemeLight .nepPopover .sapMIBar-CTX .sapMLabel,\n    .nepThemeLight .nepMainBar :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n    .nepThemeLight .nepMainBar .sapMIBar-CTX .sapMLabel {\n        color: #333;\n    }\n    .nepThemeDark .nepPopover :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n    .nepThemeDark .nepPopover .sapMIBar-CTX .sapMLabel,\n    .nepThemeDark .nepMainBar :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n    .nepThemeDark .nepMainBar .sapMIBar-CTX .sapMLabel {\n        color: #fafafa;\n    }\n    .nepThemeLight .nepListSetting .sapMLIB.sapMLIBActive {\n        color: #333;\n    }\n    .nepThemeDark .nepListSetting .sapMLIB.sapMLIBActive {\n        color: #fafafa;\n    }\n    .nepThemeLight .nepUserActionText.sapMText {\n        color: #333;\n    }\n    .nepThemeDark .nepUserActionText.sapMText {\n        color: #fafafa;\n    }\n    .nepThemeLight .nepNotificationItem .sapMLIBIconDel:not(.sapMBtnDisabled) .sapMBtnTransparent>.sapMBtnIcon {\n        color: #666;\n    }\n    .nepThemeDark .nepNotificationItem .sapMLIBIconDel:not(.sapMBtnDisabled) .sapMBtnTransparent>.sapMBtnIcon {\n        color: #dedede;\n    }\n    .nepThemeLight .nepPopSimpleTitle.sapMText {\n        color: #666;\n    }\n    .nepThemeDark .nepPopSimpleTitle.sapMText {\n        color: #dedede;\n    }\n    .nepThemeLight .sapMLabelRequired.nepLabelHelp:before {\n        color: #c14646;\n    }\n    .nepThemeDark .sapMLabelRequired.nepLabelHelp:before {\n        color: #c14646;\n    }\n    .nepThemeLight .nepNotifHeader.sapMText {\n        color: #666;\n    }\n    .nepThemeDark .nepNotifHeader.sapMText {\n        color: #dedede;\n    }\n    .nepThemeLight .nepFeed .sapMText {\n        color: #444;\n    }\n    .nepThemeDark .nepFeed .sapMText {\n        color: #d3d7d9;\n    }\n    .nepThemeLight .nepFCard .sapSuiteUiMicroChartNoData {\n        color: #ccc;\n    }\n    .nepThemeDark .nepFCard .sapSuiteUiMicroChartNoData {\n        color: #888;\n    }\n    .nepThemeLight .nepNumpadPanel .sapMBtnIcon,\n    .nepThemeLight .numPad .sapMBtnInner {\n        color: #333;\n    }\n    .nepThemeDark .nepNumpadPanel .sapMBtnIcon,\n    .nepThemeDark .numPad .sapMBtnInner {\n        color: #fafafa;\n    }\n    .nepThemeLight .nepLogonLayout .sapMBtnInner,\n    .nepThemeLight .nepAppCacheUser .sapMLIB.sapMLIBActive,\n    .nepThemeLight .nepAppCacheUser .sapMLIBActive div,\n    .nepThemeLight .nepAppCacheUser .sapMLIBActive .sapMText {\n        color: #333;\n    }\n    .nepThemeDark .nepLogonLayout .sapMBtnInner,\n    .nepThemeDark .nepAppCacheUser .sapMLIB.sapMLIBActive,\n    .nepThemeDark .nepAppCacheUser .sapMLIBActive div,\n    .nepThemeDark .nepAppCacheUser .sapMLIBActive .sapMText {\n        color: #fafafa;\n    }\n    /* BORDER COLOR */\n    .nepThemeLight .nepMainBar .sapMSFF,\n    .nepThemeLight .nepPopover .sapMSFF,\n    .nepThemeLight .nepMainBar .sapMSFF:hover,\n    .nepThemeLight .nepPopover .sapMSFF:hover,\n    .nepThemeLight .nepLaunchpadMenuSettings {\n        border-color: #dedede;\n    }\n    .nepThemeDark .nepMainBar .sapMSFF,\n    .nepThemeDark .nepPopover .sapMSFF,\n    .nepThemeDark .nepMainBar .sapMSFF:hover,\n    .nepThemeDark .nepPopover .sapMSFF:hover,\n    .nepThemeDark .nepLaunchpadMenuSettings {\n        border-color: #666;\n    }\n    .nepThemeLight .nepTopMenu,\n    .nepThemeLight .nepMainBar,\n    .nepThemeLight .nepNavBarContent,\n    .nepThemeLight .nepNavBarContent .sapMTBStandard,\n    .nepThemeLight .nepDocPage {\n        border-color: #ccc;\n    }\n    .nepThemeDark .nepTopMenu,\n    .nepThemeDark .nepMainBar,\n    .nepThemeDark .nepNavBarContent,\n    .nepThemeDark .nepNavBarContent .sapMTBStandard,\n    .nepThemeDark .nepDocPage {\n        border-color: #888;\n    }\n    .nepThemeLight .nepCatTitle.sapMTitle,\n    .nepThemeLight .nepCatSubTitle.sapMTitle {\n        border-color: #333;\n    }\n    .nepThemeDark .nepCatTitle.sapMTitle,\n    .nepThemeDark .nepCatSubTitle.sapMTitle {\n        border-color: #fafafa;\n    }\n    .nepThemeLight .nepTopMenuActive,\n    .nepThemeLight .nepTopMenuBtn.sapMBtn:hover,\n    .nepThemeLight .nepIconActive {\n        border-color: #d3d7d9;\n    }\n    .nepThemeDark .nepTopMenuActive,\n    .nepThemeDark .nepTopMenuBtn.sapMBtn:hover,\n    .nepThemeDark .nepIconActive {\n        border-color: #d3d7d9;\n    }\n    .nepThemeLight .nepOverflowMenu.nepPopover.sapMPopover {\n        border-top-color: #d3d7d9;\n    }\n    .nepThemeDark .nepOverflowMenu.nepPopover.sapMPopover {\n        border-top-color: #d3d7d9;\n    }\n    .nepThemeLight .nepOverflowMenu.sapMPopover {\n        border-top-color: #d3d7d9;\n    }\n    .nepThemeDark .nepOverflowMenu.sapMPopover {\n        border-top-color: #d3d7d9;\n    }\n    .nepThemeLight .nepSelectUser {\n        border-color: #888;\n    }\n    .nepThemeDark .nepSelectUser {\n        border-color: #ccc;\n    }\n    .nepThemeLight .nepLogonLayout .sapMBtnInner {\n        border-color: #888;\n    }\n    .nepThemeDark .nepLogonLayout .sapMBtnInner {\n        border-color: #ccc;\n    }\n    .nepThemeLight .numPad:not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n        border-color: rgba(0, 0, 0, 0.5);\n    }\n    .nepThemeDark .numPad:not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n        border-color: rgba(255, 255, 255, 0.5);\n    }\n    /*--------------------------------------------------------------------------------------------------*/\n    /* SAP QUARTZ LIGHT */\n    /*--------------------------------------------------------------------------------------------------*/\n    .nepThemeLight .nepActionContainer .sapMBtnInner,\n    .nepThemeLight .nepActionContainer .sapMBtn:hover>.sapMBtnHoverable {\n        background-color: transparent;\n        border-color: #333;\n        color: #333;\n    }\n    .nepThemeLight .nepActionContainer .sapMBtnIcon {\n        color: #333;\n    }\n    /*--------------------------------------------------------------------------------------------------*/\n    /* SAP QUARTZ DARK */\n    /*--------------------------------------------------------------------------------------------------*/\n    .nepThemeDark .nepActionContainer .sapMBtnInner,\n    .nepThemeDark .nepActionContainer .sapMBtn:hover>.sapMBtnHoverable {\n        background-color: transparent;\n        border-color: #d3d7d9;\n        color: #d3d7d9;\n    }\n    .nepThemeDark .nepActionContainer .sapMBtnIcon,\n    .nepThemeDark .nepFCard.sapFCard .sapFCardHeader .sapFCardIcon.sapFAvatar .sapUiIcon {\n        color: #d3d7d9;\n    }\n}\n\n/* QUARTZ LIGHT CARD BACKGROUNDS */\n\n.nepThemeLight .sapColorSet1A {\n    background-color: #fefaf4;\n}\n\n.nepThemeLight .sapColorSet1B {\n    background-color: #fdf5eb;\n}\n\n.nepThemeLight .sapColorSet1C {\n    background-color: #fcf1e2;\n}\n\n.nepThemeLight .sapColorSet1D {\n    background-color: #fbecd8;\n}\n\n.nepThemeLight .sapColorSet2A {\n    background-color: #fdf7f7;\n}\n\n.nepThemeLight .sapColorSet2B {\n    background-color: #fbeeee;\n}\n\n.nepThemeLight .sapColorSet2C {\n    background-color: #f9e6e6;\n}\n\n.nepThemeLight .sapColorSet2D {\n    background-color: #f7dede;\n}\n\n.nepThemeLight .sapColorSet3A {\n    background-color: #fef6fa;\n}\n\n.nepThemeLight .sapColorSet3B {\n    background-color: #fcedf4;\n}\n\n.nepThemeLight .sapColorSet3C {\n    background-color: #fbe4ef;\n}\n\n.nepThemeLight .sapColorSet3D {\n    background-color: #fadbea;\n}\n\n.nepThemeLight .sapColorSet4A {\n    background-color: #fefafd;\n}\n\n.nepThemeLight .sapColorSet4B {\n    background-color: #fbf3f9;\n}\n\n.nepThemeLight .sapColorSet4C {\n    background-color: #f9ebf5;\n}\n\n.nepThemeLight .sapColorSet4D {\n    background-color: #f7e3f2;\n}\n\n.nepThemeLight .sapColorSet5A {\n    background-color: #f6f7fd;\n}\n\n.nepThemeLight .sapColorSet5B {\n    background-color: #eeeefb;\n}\n\n.nepThemeLight .sapColorSet5C {\n    background-color: #e5e6fa;\n}\n\n.nepThemeLight .sapColorSet5D {\n    background-color: #dddef8;\n}\n\n.nepThemeLight .sapColorSet6A {\n    background-color: #f7fafd;\n}\n\n.nepThemeLight .sapColorSet6B {\n    background-color: #eff5fb;\n}\n\n.nepThemeLight .sapColorSet6C {\n    background-color: #e7f0fa;\n}\n\n.nepThemeLight .sapColorSet6D {\n    background-color: #deebf8;\n}\n\n.nepThemeLight .sapColorSet7A {\n    background-color: #f6fdfe;\n}\n\n.nepThemeLight .sapColorSet7B {\n    background-color: #ecfbfd;\n}\n\n.nepThemeLight .sapColorSet7C {\n    background-color: #e3fafc;\n}\n\n.nepThemeLight .sapColorSet7D {\n    background-color: #daf8fb;\n}\n\n.nepThemeLight .sapColorSet8A {\n    background-color: #fcfef5;\n}\n\n.nepThemeLight .sapColorSet8B {\n    background-color: #f9feec;\n}\n\n.nepThemeLight .sapColorSet8C {\n    background-color: #f6fde2;\n}\n\n.nepThemeLight .sapColorSet8D {\n    background-color: #f3fcd9;\n}\n\n.nepThemeLight .sapColorSet9A {\n    background-color: #ffffff;\n}\n\n.nepThemeLight .sapColorSet9B {\n    background-color: #fafafa;\n}\n\n.nepThemeLight .sapColorSet9C {\n    background-color: #f5f5f5;\n}\n\n.nepThemeLight .sapColorSet9D {\n    background-color: #f0f0f0;\n}\n\n.nepThemeLight .sapColorSet10A {\n    background-color: #ebebeb;\n}\n\n.nepThemeLight .sapColorSet10B {\n    background-color: #e6e6e6;\n}\n\n.nepThemeLight .sapColorSet10C {\n    background-color: #e0e0e0;\n}\n\n.nepThemeLight .sapColorSet10D {\n    background-color: #dbdbdb;\n}\n\n.nepThemeLight .sapColorSet11A {\n    background-color: #f5faff;\n}\n\n.nepThemeLight .sapColorSet11B {\n    background-color: #ebf5fe;\n}\n\n.nepThemeLight .sapColorSet11C {\n    background-color: #e2f0fe;\n}\n\n.nepThemeLight .sapColorSet11D {\n    background-color: #d8ebfd;\n}\n\n/* QUARTZ DARK CARD BACKGROUNDS */\n\n.nepThemeDark .sapColorSet1A {\n    background-color: #382700;\n}\n\n.nepThemeDark .sapColorSet1B {\n    background-color: #422e00;\n}\n\n.nepThemeDark .sapColorSet1C {\n    background-color: #4c3500;\n}\n\n.nepThemeDark .sapColorSet1D {\n    background-color: #563d00;\n}\n\n.nepThemeDark .sapColorSet2A {\n    background-color: #6d1c1c;\n}\n\n.nepThemeDark .sapColorSet2B {\n    background-color: #751e1e;\n}\n\n.nepThemeDark .sapColorSet2C {\n    background-color: #7d2020;\n}\n\n.nepThemeDark .sapColorSet2D {\n    background-color: #862222;\n}\n\n.nepThemeDark .sapColorSet3A {\n    background-color: #6a0a29;\n}\n\n.nepThemeDark .sapColorSet3B {\n    background-color: #730a2d;\n}\n\n.nepThemeDark .sapColorSet3C {\n    background-color: #7c0b31;\n}\n\n.nepThemeDark .sapColorSet3D {\n    background-color: #860c34;\n}\n\n.nepThemeDark .sapColorSet4A {\n    background-color: #400c35;\n}\n\n.nepThemeDark .sapColorSet4B {\n    background-color: #480e3c;\n}\n\n.nepThemeDark .sapColorSet4C {\n    background-color: #51104a;\n}\n\n.nepThemeDark .sapColorSet4D {\n    background-color: #59114a;\n}\n\n.nepThemeDark .sapColorSet5A {\n    background-color: #1c2d4c;\n}\n\n.nepThemeDark .sapColorSet5B {\n    background-color: #1e3253;\n}\n\n.nepThemeDark .sapColorSet5C {\n    background-color: #21365a;\n}\n\n.nepThemeDark .sapColorSet5D {\n    background-color: #243b62;\n}\n\n.nepThemeDark .sapColorSet6A {\n    background-color: #003952;\n}\n\n.nepThemeDark .sapColorSet6B {\n    background-color: #00405c;\n}\n\n.nepThemeDark .sapColorSet6C {\n    background-color: #004866;\n}\n\n.nepThemeDark .sapColorSet6D {\n    background-color: #004f70;\n}\n\n.nepThemeDark .sapColorSet7A {\n    background-color: #2a5e5e;\n}\n\n.nepThemeDark .sapColorSet7B {\n    background-color: #2d6565;\n}\n\n.nepThemeDark .sapColorSet7C {\n    background-color: #306c6c;\n}\n\n.nepThemeDark .sapColorSet7D {\n    background-color: #337373;\n}\n\n.nepThemeDark .sapColorSet8A {\n    background-color: #27410e;\n}\n\n.nepThemeDark .sapColorSet8B {\n    background-color: #2c4a10;\n}\n\n.nepThemeDark .sapColorSet8C {\n    background-color: #315212;\n}\n\n.nepThemeDark .sapColorSet8D {\n    background-color: #365a14;\n}\n\n.nepThemeDark .sapColorSet9A {\n    background-color: #30164c;\n}\n\n.nepThemeDark .sapColorSet9B {\n    background-color: #351853;\n}\n\n.nepThemeDark .sapColorSet9C {\n    background-color: #3a1b5b;\n}\n\n.nepThemeDark .sapColorSet9D {\n    background-color: #3f1d63;\n}\n\n.nepThemeDark .sapColorSet10A {\n    background-color: #323c44;\n}\n\n.nepThemeDark .sapColorSet10B {\n    background-color: #36424a;\n}\n\n.nepThemeDark .sapColorSet10C {\n    background-color: #3b4750;\n}\n\n.nepThemeDark .sapColorSet10D {\n    background-color: #3f4c56;\n}\n\n.nepThemeDark .sapColorSet11A {\n    background-color: #042037;\n}\n\n.nepThemeDark .sapColorSet11B {\n    background-color: #052540;\n}\n\n.nepThemeDark .sapColorSet11C {\n    background-color: #062b4a;\n}\n\n.nepThemeDark .sapColorSet11D {\n    background-color: #073053;\n}\n\n.nepCardDescription {\n    padding: 0 1rem 1rem 1rem\n}\n\n.nepActionConfig {\n    margin-right: -10px;\n}\n\n.nepActionConfig .sapMBtnInner {\n    border: none;\n}\n\n.dragPlaceholder {\n    border: 2px dotted orange;\n    min-height: 200px;\n}\n\n.dragCursor {\n    cursor: pointer;\n}\n\n.nepToolNoBorder.sapMTBStandard {\n    border-bottom: none;\n}\n\n.nepToolNoBorder.sapMIBar.sapMTB .sapMBarChild:only-child {\n    padding-left: 0rem;\n    padding-right: 0rem;\n}\n\n.nepLayout .nepMainBar .sapMLIB {\n    background: transparent;\n}\n\n.nepLayout .nepMainBar .sapMIBar.sapMHeader-CTX {\n    background: transparent;\n}\n\n.nepMultiMenu.sapMDialog.sapUiPopupWithPadding:not(.sapUiNoContentPadding) .sapMDialogScrollCont {\n    padding: 0;\n}\n\n.nepMultiMenu:not(.nepMainBar) {\n    min-width: 300px;\n}\n\n.nepMultiMenu .sapMIBar.sapMSubHeader-CTX {\n    background-color: transparent;\n}\n\n.nepMultiMenu .sapMBar {\n    box-shadow: none;\n}\n\n.nepMultiMenu .sapMIBar.sapMTB .sapMBarChild:only-child {\n    padding-left: 0;\n}\n\n.nepMultiMenu .sapMTBStandard {\n    border-bottom: none;\n    padding: 0 .5rem;\n    background-color: transparent !important;\n}\n\n.nepMainBar.sapMPage>.sapMPageHeader {\n    box-shadow: none;\n    border-bottom: none;\n}\n\n.nepMainBar.sapMPage.sapMPageWithSubHeader>.sapMPageSubHeader {\n    box-shadow: none;\n    border-bottom: none;\n}\n\n.nepCardHeaderSubTitle {\n    margin: 0.2rem 0 0 0;\n    font-size: 0.875rem;\n    font-weight: normal;\n}\n\n.nepCardHeaderStatus {\n    font-size: 0.75rem;\n}\n\n.nepThemeDark .nepCardHeaderStatus {\n    color: #d3d7d9;\n}\n\n.nepThemeLight .nepCardHeaderStatus {\n    color: #6a6d70;\n}\n\n.nepCardHeaderIcon {\n    margin-right: 20px;\n    line-height: 2.5rem;\n    -webkit-border-radius: 50%;\n}\n\n.nepICCard {\n    box-shadow: none !important;\n    background: transparent;\n}\n\n.nepScrollContent .nepDynamicPage .sapFDynamicPageContent {\n    overflow-x: scroll;\n}\n\n/* Fix page height when PWA header is visible */\n\n.pageShell>.sapMPageEnableScrolling {\n    height: auto !important;\n}\n\n/* Horizon Theme fixes */\n\n.sapUiTheme-sap_horizon .nepFCardTopImage {\n    border-top-left-radius: 1rem;\n    border-top-right-radius: 1rem;\n}\n\n.sapUiTheme-sap_horizon_dark .nepFCardTopImage {\n    border-top-left-radius: 1rem;\n    border-top-right-radius: 1rem;\n}\n\n/* Launchpad Customizations */\n.nepEditHomeContainer {\n    padding: 0.5rem .75rem;\n    pointer-events: none;\n}\n.nepEditHomeTitle {\n    margin-right: 1.5rem;\n}\nhtml[dir=\"rtl\"] .nepEditHomeTitle {\n    margin-right: 0;\n    margin-left: 1.5rem;\n}\n.nepEditHomeList .sapMListUl {\n    margin: .25rem;\n}\n.nepEditHomeListItemDivider.sapMLIB {\n    border-color: #a8b2bd;\n    border-width: .0625rem;\n}\n.nepEditHomeList .sapMListUl .nepEditHomeListItemTileRemove {\n    border-bottom-color: #a8b2bd;\n}\n.nepEditHomeListItemError .sapMTitle,\n.nepEditHomeListItemError .sapUiIcon {\n    color: #aa0808;\n}\n.nepResizable {\n    cursor: nwse-resize;\n    opacity: .2;\n    font-size: 24px;\n}\nhtml[dir=rtl] .nepResizable {\n    cursor: nesw-resize;\n}\n.nepResizable:hover {\n    opacity: 1;\n}\nbody.resizing {\n    cursor: nwse-resize;\n    user-select: none;\n}\nhtml[dir=rtl] body.resizing {\n    cursor: nesw-resize;\n}\n\n/* to take remove card item out of flex flow */\n.lp-is-customizable .nepBlockLayoutTileRow:not(.favorite-cards) .nepFCardContainer > .sapMFlexItem:first-of-type {\n    display: none;\n    position: absolute;\n    z-index: 99;\n    left: -0.75rem;\n    top: -0.75rem;\n}\n.jiggle.lp-is-customizable .nepBlockLayoutTileRow:not(.favorite-cards) .nepFCardContainer > .sapMFlexItem:first-of-type {\n    display: block;\n}\n.jiggle .nepFCard {\n    cursor: move;\n}\n.jiggle .nepResizable {\n    display: none;\n}\n.jiggle .nepFCardContainer > .sapMFlexItem:first-of-type {\n    display: block;\n}\n.nepDeleteCard .sapMBtnInner {\n    border-radius: 50%;\n}\n.nepNewCard {\n    display: none;\n}\n\n.jiggle .nepNewCard {\n    display: block;\n}\n.jiggle .nepBlockLayoutTileRow:not(.favorite-cards) .nepNewCard > .sapMFlexItem:first-of-type {\n    display: block;\n    position: relative;\n    z-index: auto;\n    left: auto;\n    top: auto;\n}\n\n.nepManagePages .sapUiIcon {\n    cursor: pointer;\n}\n.nepManagePages span[aria-label=\"trash-alt\"] {\n    color: #aa0808;\n}\n.nepManagePagesMessageStrip {\n    border: 0;\n    border-radius: 0;\n}\n#ManagePages-listUl > li {\n    cursor: grab;\n}\n#ManagePages-listUl .dragPlaceholder {\n    min-height: 52px;\n}\n#ManagePages-listUl .managePagesId {\n    display: none;\n}\n#ManagePages-listUl .icoSortManagePages {\n    cursor: grab;\n}\n#ManagePages-listUl li .sapMFlexItem:last-of-type {\n    margin-left: auto;\n}\n\n#diaAddTile ul {\n    min-height: 500px;\n}\n#diaAddTile ul li .sapMBtn {\n    padding: 0;\n    height: auto;\n}\n#diaAddTile .sapMIBar {\n    box-shadow: none;\n    border-bottom: 0;\n}\n#diaAddTile .diaAddTileToolbar {\n    z-index: 1;\n    position: sticky;\n    top: 0;\n}\n#fbHeaderAddTile {\n    margin-top: 0 !important;\n}\n#diaAddTile .addTileId {\n    display: none;\n}\n\n/* Jiggle */\n.jiggle .nepFCardContainer.nepNewCard {\n    animation: none !important;\n}\n.jiggle .nepFCard > * {\n    pointer-events: none;\n}\n.jiggle .nepFCardContainer:not(.nepFCardAction) {\n    animation-delay: -.05s;\n    animation-duration: .27s;\n}\n.jiggle .nepFCardContainer:not(.nepFCardAction):nth-child(2n) {\n    animation-name: jiggle1;\n    animation-iteration-count: infinite;\n    transform-origin: 50% 10%;\n}\n.jiggle .nepFCardContainer:not(.nepFCardAction):nth-child(2n-1) {\n    animation-name: jiggle2;\n    animation-iteration-count: infinite;\n    animation-direction: alternate;\n    transform-origin: 30% 5%;\n}\n@keyframes jiggle1 {\n    0% {\n        transform: rotate(-.5deg);\n        animation-timing-function: ease-in;\n    }\n    50% {\n        transform: rotate(.5deg);\n        animation-timing-function: ease-out;\n    }\n}\n@keyframes jiggle2 {\n    0% {\n        transform: rotate(.5deg);\n        animation-timing-function: ease-in;\n    }\n    50% {\n        transform: rotate(-.5deg);\n        animation-timing-function: ease-out;\n    }\n}\n\n#diaPWAInstall .sapMTB.sapMTBStandard,\n#diaCookie .sapMTB.sapMTBStandard {\n    border-bottom: 0;\n}\n#pwaInstallAppLogo {\n    width: 48px;\n}\n#pwaInstallAppTitle {\n    font-size: 22px;\n}\n#diaPWAInstallFooter, #diaCookieFooter {\n    border-top: 1px solid #d3d7d9;\n}\n","compiledCss":".sapUiLoSplitter.sapUiLoSplitterH > .sapUiLoSplitterBar.sapUiLoSplitterNoResize,\n.sapUiLoSplitter.sapUiLoSplitterV > .sapUiLoSplitterBar.sapUiLoSplitterNoResize {\n  height: 0 !important;\n  width: 0 !important;\n}\n\n.sapMBarPH {\n  display: inline-block !important;\n}\n\n.sapMShellBrandingBar {\n  background-color: transparent;\n}\n\n.nepMobileTitle {\n  line-height: 48px;\n}\n\n.nepFormInput {\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n/* HELP LABLE */\n.sapUiFormLblColon .sapUiFormElementLbl > .sapMLabel.nepLabelHelp:after {\n  font-family: \"SAP-icons\";\n  content: \"\\e1c4\";\n  vertical-align: inherit;\n  margin-left: 0.325rem;\n}\n\n.sapMLabel.nepLabelHelp {\n  pointer-events: none;\n  cursor: pointer;\n}\n\n.sapMLabel.nepLabelHelp::after {\n  pointer-events: all;\n}\n\n.sapUiFormResGridCont > .sapUiFormElementLbl > .nepLabelHelp.sapMLabel {\n  width: auto;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanS12) > .sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanM12) > .sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanL12) > .sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanXL12) > .sapMLabel.nepLabelHelp {\n  width: 100%;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanS12) > .sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanM12) > .sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanL12) > .sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanXL12) > .sapMLabel.nepLabelHelp:after {\n  content: \":\";\n  pointer-events: none;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanS12) > .sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanM12) > .sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanL12) > .sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanXL12) > .sapMLabel.nepLabelHelp:before {\n  font-family: \"SAP-icons\";\n  content: \"\\e1c4\";\n  margin-right: 0.325rem;\n  vertical-align: inherit;\n  pointer-events: all;\n}\n\n/* HELP OBJECT HEADER */\n.sapMOHROuter.nepLabelHelp {\n  pointer-events: none;\n}\n\n.sapMOHROuter.nepLabelHelp .sapMOHRTitleText {\n  pointer-events: none;\n  cursor: pointer;\n}\n\n.sapMOHROuter.nepLabelHelp .sapMOHRTitleText:after {\n  font-family: \"SAP-icons\";\n  content: \"\\e1c4\";\n  margin-left: 0.325rem;\n  font-size: 0.875rem;\n  pointer-events: all;\n}\n\n/* DIALOG WITH OBJECTHEADER*/\n.nepDialogWithObjHeader .sapMOHR {\n  margin-top: -0.5rem;\n  padding-top: 0 !important;\n}\n\n.nepDialogWithObjHeader .sapMSwt {\n  border-radius: 0;\n}\n\n.nepDialogWithObjHeader.nepDocPop .sapMOHR {\n  margin-top: 0;\n  padding-top: 1.1rem !important;\n  border: 1px solid #dedede;\n  border-bottom: none;\n  border-radius: 0.25rem;\n}\n\n.nepDialogWithObjHeader .sapContrastPlus.sapMOHR.sapMOHRBgTranslucent,\n.sapContrastPlus .nepDialogWithObjHeader .sapMOHR.sapMOHRBgTranslucent {\n  background: #2f3c48;\n  box-shadow: none;\n}\n\n.nepDialogWithObjHeader.sapUiSizeCompact .sapMBar {\n  height: 2.5rem;\n  border-radius: 4px 4px 0px 0px;\n}\n\n.nepDialogWithObjHeader.sapUiSizeCompact.sapMDialog > .sapMDialogTitle,\n.nepDialogWithObjHeader.sapUiSizeCompact .sapMDialog > .sapMDialogTitle {\n  height: 2.5rem;\n}\n\n.nepDialogWithObjHeader .nepCloseBtn {\n  z-index: 9999;\n}\n\n.nepDialogWithObjHeader .sapMOHRTitle h1,\n.nepDialogWithObjHeader .sapMOHRIntro .sapMText,\n.nepDialogWithObjHeader .sapMOHRIcon .sapUiIcon {\n  color: #cae4fb;\n}\n\n.nepDialogWithObjHeader .nepStateSuccess .sapMOHRIcon .sapUiIcon,\n.nepDialogWithObjHeader .nepStateSuccess .sapContrastPlus .sapMOHRIcon .sapUiIcon {\n  color: #abe2ab;\n}\n\n.nepDialogWithObjHeader .nepStateWarning .sapMOHRIcon .sapUiIcon,\n.nepDialogWithObjHeader .nepStateWarning .sapContrastPlus .sapMOHRIcon .sapUiIcon {\n  color: #e78c07;\n}\n\n.nepDialogWithObjHeader .nepStateError .sapMOHRIcon .sapUiIcon,\n.nepDialogWithObjHeader .nepStateError .sapContrastPlus .sapMOHRIcon .sapUiIcon {\n  color: #ff8888;\n}\n\n.nepDialogWithObjHeader .sapMOHRIcon {\n  top: 0.675rem;\n}\n\n.nepDialogWithObjHeader .sapMBtnIcon {\n  color: #cae4fb;\n}\n\n.nepDialogWithObjHeader .nepStackedToolBar.sapMTB {\n  border-left: 1px solid #ddd;\n  background: #fff;\n}\n\n.nepDialogWithObjHeader .sapUiLocalBusyIndicatorSizeMedium {\n  border-radius: 0.25rem;\n}\n\n.nepDialogWithObjHeader .sapMITH {\n  border-bottom: none;\n}\n\n.nepDialogSubObjHeader {\n  background: #2f3c48;\n  margin-top: -1rem;\n}\n\n.nepDialogSubObjHeader .sapMText {\n  color: #cae4fb;\n  padding: 0 1rem 1rem 7rem;\n}\n\n.nepDialogSubObjHeader .sapMDialog > .sapMDialogSection {\n  margin-top: -1rem;\n  height: calc(100% + 1rem);\n}\n\n.nepSubMenu.sapMPopover .sapMPopoverCont {\n  border-radius: 0 !important;\n}\n\n.nepSubMenu.sapMPopover {\n  border-radius: 0 !important;\n  box-shadow: rgba(0, 0, 0, 0.5) 5px 5px 10px 0px;\n  min-width: 200px;\n}\n\n.nepSubMenu .sapMSLITitleOnly {\n  font-size: 0.875rem;\n}\n\n.nepSubMenu .sapMLIB {\n  border-bottom: none;\n}\n\n.nepFCard.sapFCard:not(.nepICCard) .sapFCardHeader:not(.nepFCardFooter) {\n  border-bottom: none;\n}\n\n.nepTileApplicationPanel .sapMPanelContent {\n  overflow: hidden;\n}\n\nhtml.sap-desktop .nepDialogSubObjHeader .sapContrastPlus .sapMIBar.sapMFooter-CTX,\nhtml.sap-desktop .nepDialogSubObjHeader .sapContrastPlus.sapMIBar.sapMFooter-CTX {\n  border-top-color: #2f3c48;\n}\n\n.nepDialogSubObjHeader .sapContrastPlus.sapMOHR:not(.sapMOHRNoBorder),\n.nepDialogSubObjHeader .sapContrastPlus .sapMOHR:not(.sapMOHRNoBorder) {\n  box-shadow: 0 0.125rem 0 0 #3f5161, inset 0 -0.125rem 0 0 #2F3C45;\n}\n\n.nepDialogWithObjHeader.sapMDialog:not(.sapMDialogWithSubHeader) > header > .sapMIBar,\n.nepDialogWithObjHeader.sapMDialog > header:last-of-type .sapMIBar {\n  box-shadow: none;\n  background-color: #2f3c48;\n  border-top: none;\n}\n\n/*NEPTUNE*/\n.nepSideCollapsed {\n  padding-left: 68px;\n}\n\n.nepSideExpanded {\n  padding-left: 300px;\n}\n\n.nepSideMenu {\n  padding-left: 300px;\n}\n\n.nepSideMenuCollapsed {\n  padding-left: 368px;\n}\n\n.nepSideMenuExpanded {\n  padding-left: 600px;\n}\n\n.nepSmallFont {\n  font-size: 12px !important;\n}\n\n.nepLinks {\n  position: absolute;\n  bottom: 20px;\n}\n\n.nepPanLinks .sapMTB {\n  border-bottom: none;\n  margin-top: 20px;\n}\n\n@media (max-height: 550px) {\n  .nepPanLinks {\n    display: none;\n  }\n}\n.nepPanLogon {\n  border-bottom: none;\n  background-color: rgba(255, 255, 255, 0.6);\n  box-shadow: 0 0 1rem 0 rgba(250, 250, 250, 0.3);\n}\n\n.nepPanLogon .sapMTB-Transparent-CTX.sapMTB {\n  background: transparent;\n}\n\n.sapUiTheme-sap_fiori_3_dark .nepPanLogon,\n.sapUiTheme-sap_horizon_dark .nepPanLogon {\n  background-color: rgba(0, 0, 0, 0.3);\n}\n\n.nepPanLogonBorder {\n  border-radius: 15px;\n}\n\n.nepFlexPhone .sapMFlexItem {\n  width: 100%;\n  height: 100%;\n}\n\n.nepLinkNoBorder.sapMTBStandard {\n  border-bottom: none;\n}\n\n.nepDocPage .sapMTabStrip {\n  padding-top: 0;\n  height: 44px;\n}\n\n.nepDocPage .sapMTabContainer {\n  padding-top: 0;\n}\n\n.nepDocPage {\n  overflow: hidden;\n}\n\n.nepTopMenu {\n  min-height: auto;\n  border-radius: 0;\n}\n\n.nepTopMenu .iconNetwork .sapMBtnCustomIcon {\n  color: red !important;\n}\n\n#AppCacheDiaSettings .sapMITBContent {\n  border-bottom: none !important;\n}\n\n.sapMFT {\n  white-space: normal;\n}\n\n.nepUserList .sapMLIB.sapMObjLItem {\n  margin-bottom: 10px;\n  border-radius: 10px;\n}\n\n.nepUserList .sapMObjLIntro {\n  color: orange !important;\n}\n\n.nepNavBarBoxTitle {\n  padding-left: 15px;\n}\n\n.nepNavBarAction {\n  position: absolute;\n  top: -6px;\n}\n\n.nepNavBarAction .sapMBtnInner {\n  color: white;\n  border-radius: 6px !important;\n}\n\n.nepNavBarActionInverse .sapMBtnCustomIcon {\n  color: white !important;\n}\n\n.nepNavBarActionInverse .sapMBtnInner {\n  color: white !important;\n}\n\n.nepNavBarBoxIcon {\n  text-align: center;\n  min-width: 45px;\n}\n\n.nepTopMenu .sapMPanelContent {\n  overflow: hidden;\n}\n\n.nepTopMenu.sapMTBStandard {\n  height: 60px;\n}\n\n.nepTopMenu .sapMTB-Transparent-CTX.sapMTB {\n  padding-left: 0;\n  /* height: 48px; */\n}\n\n.nepTopMenu .sapMTBNewFlex > * {\n  -webkit-flex-shrink: unset;\n  flex-shrink: unset;\n  overflow: hidden;\n}\n\n.nepTopMenu .sapMBtnIcon {\n  font-size: 1.375rem;\n}\n\n.nepTopMenu .sapMBtnInner {\n  background-color: transparent;\n}\n\n.nepTopMenu :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive {\n  background-color: transparent !important;\n  border-color: transparent !important;\n}\n\n.nepTopMenuActive {\n  border-bottom: 4px solid orange;\n}\n\n.nepIconActive {\n  border-left: 4px solid orange;\n}\n\n.nepNavBarTile {\n  cursor: pointer;\n}\n\n.nepShell .sapUiGlobalBackgroundColor,\n.nepShell .sapMShellGlobalInnerBackground {\n  background: transparent;\n}\n\n.nepShell .sapMShellBG.sapUiGlobalBackgroundImage {\n  background: transparent;\n}\n\n.nepListSetting .sapMLIB {\n  padding: 0 1rem 0 0.1rem;\n}\n\n/*OPENUI5*/\n.sapMDialogScroll {\n  height: 100%;\n}\n\n/*TILES*/\n.nepTile .sapUiBlockCellTitle {\n  margin-bottom: 6px;\n}\n\n.nepPopCards.sapMPopover {\n  background: transparent;\n}\n\n.nepPopCards.sapMPopover .sapMPopoverCont {\n  background: transparent;\n}\n\n.nepTileCardsPop {\n  margin: 0;\n  box-shadow: none;\n  border-radius: 0 6px 6px 0;\n  border-left: none;\n}\n\n.nepTileCardsPop .sapUiBlockCellContent {\n  padding: 10px 10px 10px 4px;\n}\n\n.nepTileCardsRunning {\n  margin: 4px 4px 4px 4px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n  border-radius: 6px;\n  border-left: 4px solid transparent;\n}\n\n.nepTileCardsRunning .sapUiBlockCellContent {\n  padding: 10px 10px 10px 4px;\n}\n\n.nepTileCards {\n  margin: 8px 8px 8px 8px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n  border-radius: 4px;\n}\n\n.nepTileCards:hover {\n  box-shadow: 0 10px 24px 0 rgba(0, 0, 0, 0.2);\n}\n\n.nepChartTile {\n  padding: 0 !important;\n}\n\n.nepCatPanel .sapMTBStandard {\n  border-bottom: none;\n}\n\n.nepCatPanel .sapMPanelContent {\n  padding-bottom: 10px;\n  padding-top: 0px;\n}\n\n.nepCatPanel .sapMTB {\n  border-bottom: none;\n}\n\n.nepCatPaddingImage {\n  padding-left: 8px;\n  padding-right: 8px;\n  padding-top: 8px;\n  margin-bottom: -4px;\n}\n\n.nepCatNoPaddingImage {\n  margin-bottom: -4px;\n}\n\n.nepTileCardsFixed10 {\n  flex: unset !important;\n  width: calc(10% - 1rem);\n  min-width: 250px;\n}\n\n.nepTileCardsFixed20 {\n  flex: unset !important;\n  width: calc(20% - 1rem);\n  min-width: 250px;\n}\n\n.nepTileCardsFixed25 {\n  flex: unset !important;\n  width: calc(25% - 1rem);\n  min-width: 250px;\n}\n\n.nepTileCardsFixed30 {\n  flex: unset !important;\n  width: calc(30% - 1rem);\n  min-width: 250px;\n}\n\n.nepTileCardsFixed40 {\n  flex: unset !important;\n  width: calc(40% - 1rem);\n  min-width: 250px;\n}\n\n.nepTileCardsFixed50 {\n  flex: unset !important;\n  width: calc(50% - 1rem);\n  min-width: 250px;\n}\n\n.nepTileCardsFixed60 {\n  flex: unset !important;\n  width: calc(60% - 1rem);\n  min-width: 250px;\n}\n\n.nepTileCardsFixed70 {\n  flex: unset !important;\n  width: calc(70% - 1rem);\n  min-width: 250px;\n}\n\n.nepTileCardsFixed75 {\n  flex: unset !important;\n  width: calc(75% - 1rem);\n  min-width: 250px;\n}\n\n.nepTileCardsFixed80 {\n  flex: unset !important;\n  width: calc(80% - 1rem);\n  min-width: 250px;\n}\n\n.nepTileCardsFixed90 {\n  flex: unset !important;\n  width: calc(90% - 1rem);\n  min-width: 250px;\n}\n\n/* SCROLLBAR */\nhtml.sap-desktop .sapContrast ::-webkit-scrollbar-thumb,\nhtml.sap-desktop .sapContrast ::-webkit-scrollbar-thumb:hover {\n  background-color: #346187;\n}\n\nhtml.sap-desktop ::-webkit-scrollbar {\n  width: 10px !important;\n  height: 10px !important;\n  background-color: transparent !important;\n}\n\nhtml.sap-desktop ::-webkit-scrollbar-corner {\n  background-color: transparent !important;\n}\n\nhtml.sap-desktop ::-webkit-scrollbar-thumb {\n  background-color: #6b7d8e !important;\n}\n\nhtml.sap-desktop ::-webkit-scrollbar-thumb:hover {\n  background-color: #6b7d8e !important;\n}\n\nhtml.sap-desktop:not(.sap-tablet) .sapUiTableVSb::-webkit-scrollbar-thumb,\nhtml.sap-desktop.sap-tablet .sapUiTableVSb::-webkit-scrollbar-thumb {\n  border-left: unset !important;\n  border-right: unset !important;\n}\n\nhtml.sap-desktop:not(.sap-tablet) .sapUiTableHSb::-webkit-scrollbar-thumb,\nhtml.sap-desktop.sap-tablet .sapUiTableHSb::-webkit-scrollbar-thumb {\n  border-top: unset !important;\n  border-bottom: unset !important;\n}\n\n/*PASSCODE APP*/\n#boxNumpadPanel .sapMBtn {\n  height: 4.6rem;\n  margin: 5px;\n}\n\n#butNumpadClear-inner {\n  padding-left: 0;\n  padding-right: 0;\n}\n\n#boxNumpadPanel .sapMPanelContent {\n  border-bottom: none;\n  background: transparent;\n  overflow: hidden;\n}\n\n#boxNumpad02 {\n  margin: auto;\n}\n\n.numPad .sapMBtnInner {\n  border-top-left-radius: 3rem;\n  border-top-right-radius: 3rem;\n  border-bottom-right-radius: 3rem;\n  border-bottom-left-radius: 3rem;\n  height: 3.9rem;\n  min-width: 4rem;\n  border: none;\n  padding-top: 0.8rem;\n  font-size: 1.875rem;\n  background: rgba(0, 0, 0, 0.5);\n  color: #fff;\n  text-shadow: none;\n}\n\n#boxNumpadPanel .sapMBtnIcon {\n  color: #ffffff;\n  font-size: 1.875rem;\n}\n\n#boxNumpadPanel .sapMBtn:hover > .sapMBtnHoverable {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n#boxNumpadPanel :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n#boxNumpadPanel .sapMCbBg.sapMCbMarkChecked {\n  background: rgba(0, 0, 0, 0.5);\n}\n\n#boxNumpadPanel .sapMCbBg.sapMCbMarkChecked:before {\n  content: \"\";\n}\n\n#boxNumpadPanel .sapMCbBg {\n  background: #fff;\n  border: none;\n  border-top-left-radius: 1rem;\n  border-top-right-radius: 1rem;\n  border-bottom-right-radius: 1rem;\n  border-bottom-left-radius: 1rem;\n  -webkit-focus-ring-color: none;\n}\n\n#boxNumpadPanel .sapMCb {\n  padding: 0 0 0 2rem;\n}\n\n#boxNumpadPanel .sapMCbBgDis {\n  opacity: 1;\n}\n\n.sapUiTheme-sap_fiori_3_dark .numPad .sapMBtnInner {\n  background: #29313a;\n}\n\n.sapUiTheme-sap_fiori_3_dark #boxNumpadPanel .sapMCbBg.sapMCbMarkChecked {\n  background: #29313a;\n}\n\n.animated {\n  -webkit-animation-duration: 0.9s;\n  -moz-animation-duration: 0.9s;\n  -o-animation-duration: 0.9s;\n  -ms-animation-duration: 0.9s;\n  animation-duration: 0.9s;\n  -webkit-animation-fill-mode: both;\n  -moz-animation-fill-mode: both;\n  -o-animation-fill-mode: both;\n  -ms-animation-fill-mode: both;\n  animation-fill-mode: both;\n}\n\n.shake {\n  -webkit-animation-name: shake;\n  -moz-animation-name: shake;\n  -o-animation-name: shake;\n  -ms-animation-name: shake;\n  animation-name: shake;\n}\n\n@-webkit-keyframes shake {\n  0%, 100% {\n    -webkit-transform: translateX(0);\n    -moz-transform: translateX(0);\n    -o-transform: translateX(0);\n    -ms-transform: translateX(0);\n  }\n  10%, 30%, 50%, 70%, 90% {\n    -webkit-transform: translateX(-20px);\n    -moz-transform: translateX(-20px);\n    -o-transform: translateX(-20px);\n    -ms-transofmr: translateX(-20px);\n  }\n  20%, 40%, 60%, 80% {\n    -webkit-transform: translateX(20px);\n    -moz-transform: translateX(20px);\n    -o-transform: translateX(20px);\n    -ms-transform: translateX(20px);\n  }\n}\n@keyframes shake {\n  0%, 100% {\n    transform: translateX(0);\n  }\n  10%, 30%, 50%, 70%, 90% {\n    transform: translateX(-20px);\n  }\n  20%, 40%, 60%, 80% {\n    transform: translateX(20px);\n  }\n}\n/*NAVIGATION SIDEBAR*/\n@media only screen and (max-width: 1600px) {\n  .nepNavPanel {\n    display: none;\n  }\n}\n.navHidden {\n  visibility: hidden;\n}\n\n.nepNavPanel {\n  position: fixed;\n  height: 100%;\n  z-index: 11;\n  width: 200px;\n  right: 0px;\n  top: 48px;\n  transition-duration: 200ms;\n  transition-timing-function: linear;\n}\n\n.nepNavPanel.minified {\n  pointer-events: none;\n}\n\n.nepNavPanel.minified .nav-container {\n  pointer-events: auto;\n  width: 100px;\n}\n\n.nepNavPanel.minified .nav-in-page {\n  pointer-events: none;\n}\n\n.nepNavPanel.minified .nav-in-page .nav-link {\n  height: 4px;\n  opacity: 1;\n}\n\n.nepNavPanel.minified .nav-in-page .nav-link.active {\n  height: 4px;\n}\n\n.nepNavPanel.minified .nav-in-page .nav-link.active a {\n  transition-duration: 200ms;\n  transition-timing-function: linear;\n  font-weight: normal;\n  line-height: 1.1em;\n  font-size: 14px;\n}\n\n.nepNavPanel.minified .nav-in-page .nav-link.active a.show {\n  opacity: 1;\n  transition-duration: 200ms;\n  transition-timing-function: linear;\n}\n\n.nepNavPanel.minified .nav-in-page .nav-link a {\n  opacity: 0;\n  transition-duration: 200ms;\n  transition-timing-function: linear;\n}\n\n.nepNavPanel .nav-container {\n  height: 100%;\n}\n\n.nepNavPanel .nav-links {\n  display: inline-block;\n  width: 190px;\n  padding-left: 0px;\n}\n\n.nepNavPanel.full-state {\n  background: linear-gradient(to left, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.3));\n  transition-duration: 200ms;\n  transition-timing-function: linear;\n}\n\n.nepNavPanel.full-state .nav-in-page .nav-link {\n  height: 26px;\n  opacity: 1;\n}\n\n.nepNavPanel.full-state .nav-in-page .nav-link.active {\n  height: 42px;\n}\n\n.nepNavPanel.full-state .nav-in-page .nav-link.active a {\n  font-weight: normal;\n  line-height: 1.1em;\n  font-size: 16px;\n}\n\n.nepNavPanel.full-state .nav-in-page .nav-link a {\n  display: block;\n  opacity: 1;\n}\n\n.nepNavPanel .nav-in-page {\n  width: 200px;\n  transform: translateY(50%);\n  position: absolute;\n  bottom: 50%;\n}\n\n.nepNavPanel .nav-in-page .nav-link {\n  padding: 0 0 0 10px;\n  cursor: pointer;\n  border-right: 4px solid orange;\n  height: 26px;\n  display: flex;\n  align-items: center;\n  margin-top: 8px;\n  margin-bottom: 8px;\n  transition-duration: 200ms;\n  transition-timing-function: linear;\n  opacity: 0;\n}\n\n.nepNavPanel .nav-in-page .nav-link.active a,\n.nepNavPanel .nav-in-page .nav-link:hover a {\n  color: #fff;\n  line-height: 1.1em;\n}\n\n.nepNavPanel .nav-in-page .nav-link.active {\n  height: 42px;\n}\n\n.nepNavPanel .nav-in-page .nav-link.active a {\n  font-weight: normal;\n  line-height: 1.1em;\n  font-size: 16px;\n}\n\n.nepNavPanel .nav-in-page .nav-link.initial {\n  opacity: 1;\n  transition-duration: 1000ms;\n  transition-timing-function: linear;\n}\n\n.nepNavPanel .nav-in-page .nav-link a {\n  display: block;\n  font-weight: normal;\n  font-size: 14px;\n  line-height: 1.1em;\n  color: rgba(255, 255, 255, 0.7);\n  text-decoration: none;\n}\n\n/* P8 */\nhtml[data-sap-ui-animation=on] .nepCatPanel .sapMPanelContent {\n  transform: none;\n}\n\n.nepCatPanel.nepCatTitleLayoutTitle.sapMPanel {\n  min-height: 60px;\n}\n\n.nepCatPanel.nepCatTitleLayoutTitle.nepCatTitleLayoutSubTitle.sapMPanel {\n  min-height: 82px;\n}\n\n.nepCatPanel .sapMPanelContent {\n  padding-bottom: 0;\n  padding-top: 0;\n}\n\n.nepCatPanel .sapMTB {\n  border-bottom: none;\n}\n\n.nepCatTitleLayout {\n  /* padding-left: 10px; */\n  /* padding-right: 10px; */\n  position: absolute;\n  top: 0;\n  left: 1rem;\n}\n\n.nepCatTitle.sapMTitle {\n  font-size: 1.125rem;\n  color: #346187;\n  text-shadow: none;\n  font-weight: bold;\n  padding-top: 1.25rem;\n}\n\n.nepCatSubTitle.sapMTitle {\n  color: #346187;\n  text-shadow: none;\n}\n\nhtml[dir=rtl] .nepCatTitleLayout {\n  right: 1rem;\n}\n\nhtml[dir=rtl] .nepCatPanel .sapMPanelContent {\n  background-position: left;\n}\n\n/* P8 COPY */\n:root {\n  --xsmall: 380px;\n  --small: 680px;\n  --medium: 980px;\n  --large: 1280px;\n  --xlarge: 1580px;\n  --xxlarge: 1880px;\n  --xxxlarge: 2360px;\n  --gridGap: 0px;\n  --gridHeight: 170px;\n  --grid1: 100%;\n  --grid2: 50%;\n  --grid3: 33.3333%;\n  --grid4: 25%;\n  --grid5: 20%;\n  --grid6: 16.6666%;\n  --grid8: 12.5%;\n  --grid10: 10%;\n  --grid12: 8.3333%;\n  --grid14: 7.1428%;\n  --cardMargin: .25rem;\n  --white: #fff;\n  --lightGreyPrimary: #dedede;\n  --lightGreySecondary: #ccc;\n  --darkGreyPrimary: #666;\n  --darkGreySecondary: #888;\n  --lightPrimaryColor: #fafafa;\n  --lightSecondaryColor: #d3d7d9;\n  --darkPrimaryColor: #333;\n  --darkSecondaryColor: #444;\n  --darkThemePrimaryBackground: #1C2228;\n  --darkThemeSecondaryBackground: #29313a;\n  --lightThemeNotification: #dd0000;\n  --darkThemeNotification: #dd0000;\n  --lightThemeRequired: #c14646;\n  --darkThemeRequired: #c14646;\n  --lightActiveMenuColor: var(--lightSecondaryColor);\n  --darkActiveMenuColor: var(--darkSecondaryColor);\n  --quartzDarkPrimary: #91c8f6;\n}\n\n.nepDialogWithObjHeader.sapMDialog {\n  transform: none;\n}\n\n.nepBtnIcon .sapMBtnContent {\n  margin-left: 0.5rem;\n}\n\n.nepLayout .nepFCard.sapFCard .nepFCardBody.sapFCardHeader {\n  padding: 0;\n  /*clip-path: initial !important;*/\n  box-shadow: none;\n}\n\n.nepFCardBody.sapFCardHeader .sapFCardIcon.sapFAvatar {\n  justify-content: flex-end;\n}\n\n.nepFCard.sapFCard:focus {\n  border: 0.125rem solid #4db1ff;\n}\n\n.nepSubMenu .sapMBtn .sapMBtnInner {\n  justify-content: flex-start;\n}\n\nhtml[dir=rtl] .nepTreeItemAction .sapMSTIIcon {\n  margin: 0.5rem 0 0.5rem 0.75rem;\n}\n\n.nepNavBarContent,\n.nepMainBar {\n  position: relative;\n  z-index: 89;\n}\n\n.nepTreeCategory .sapMTreeItemBaseExpander.sapUiIcon:before {\n  content: \"\\f0da\";\n}\n\n.nepTreeCategory li[aria-expanded=true] .sapMTreeItemBaseExpander.sapUiIcon:before {\n  content: \"\\f0d7\";\n}\n\n.nepSideAppTab.sapMTabContainer {\n  padding-top: 0;\n}\n\n.nepLogonContainer {\n  height: 75%;\n}\n\n.nepLogonLayout {\n  padding: 1rem;\n  border-radius: 0.5rem;\n  margin: auto;\n}\n\n@media (max-width: 420px) {\n  .nepLogonContainer {\n    height: auto;\n  }\n  .nepLogonLayout {\n    padding: 0;\n    border-radius: 0;\n    margin: auto;\n  }\n}\n.nepLaunchpadOverflowContainer {\n  position: absolute;\n  top: 0;\n  width: 0;\n  background-color: rgba(0, 0, 0, 0.4);\n  z-index: 97;\n}\n\n.nepLaunchpadOverflowClickArea {\n  position: fixed;\n  top: 0;\n  z-index: 98;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.4);\n}\n\nhtml[dir=ltr] .nepLaunchpadOverflowClickArea {\n  right: 0;\n  left: 300px;\n}\n\nhtml[dir=rtl] .nepLaunchpadOverflowClickArea {\n  right: 300px;\n  left: 0;\n}\n\n.nepLaunchpadMenuOverflow {\n  position: absolute;\n  top: 0;\n  width: 300px;\n  height: 100%;\n  z-index: 99;\n}\n\nhtml[dir=ltr] .nepLaunchpadMenuOverflow {\n  left: -300px;\n}\n\nhtml[dir=rtl] .nepLaunchpadMenuOverflow {\n  right: -300px;\n}\n\nhtml[dir=ltr] .nepLaunchpadMenuOverflowOpen {\n  left: 0;\n}\n\nhtml[dir=rtl] .nepLaunchpadMenuOverflowOpen {\n  right: 0;\n}\n\n.nepLaunchpadSettingsContainer {\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 0;\n  background-color: rgba(0, 0, 0, 0.4);\n  z-index: 97;\n}\n\n.nepLaunchpadSettingsClickArea {\n  position: absolute;\n  top: 0;\n  z-index: 98;\n  bottom: 0;\n}\n\nhtml[dir=ltr] .nepLaunchpadSettingsClickArea {\n  right: 300px;\n  left: 0;\n}\n\nhtml[dir=rtl] .nepLaunchpadSettingsClickArea {\n  right: 0;\n  left: 300px;\n}\n\n.nepLaunchpadMenuSettings {\n  position: absolute;\n  top: 0;\n  /*right: -300px;*/\n  width: 300px;\n  height: 100%;\n  z-index: 99;\n  /*-webkit-transition: all .3s ease-out;*/\n  /*-moz-transition: all .3s ease-out;*/\n  /*-o-transition: all .3s ease-out;*/\n  /*transition: all .3s ease-out;*/\n}\n\nhtml[dir=ltr] .nepLaunchpadMenuSettings {\n  right: -300px;\n}\n\nhtml[dir=rtl] .nepLaunchpadMenuSettings {\n  left: -300px;\n  display: none;\n}\n\nhtml[dir=ltr] .nepLaunchpadMenuSettingsOpen {\n  right: 0;\n}\n\nhtml[dir=rtl] .nepLaunchpadMenuSettingsOpen {\n  left: 0;\n}\n\n.nepLaunchpadContentSideApp {\n  position: absolute;\n  top: 0;\n  right: 0;\n  height: 100%;\n  border-left: 1px solid #d9d9d9;\n  border-top: 1px solid #d9d9d9;\n}\n\n.nepThemeDark .nepLaunchpadContentSideApp {\n  border-left: 1px solid #4b596a;\n  border-top: 1px solid #4b596a;\n}\n\n.nepHeaderSearch .sapMInput {\n  padding-right: 0.5rem;\n}\n\n.nepFCard .sapMListBGTranslucent .sapMListTblHeader,\n.nepFCard .sapMListBGTranslucent .sapMListTblFooter,\n.nepFCard .sapMListTblHeader > .sapMTableTH {\n  background-color: transparent;\n}\n\n.nepGridMany .nepTileSmall .sapFCardHeaderSideIndicators .sapFCardHeaderSideIndicator:last-child {\n  display: none;\n}\n\n.nepFCard.sapFCard.nepICCard {\n  height: 100%;\n}\n\n.nepFCard.sapFCard.nepICCardActionBottom {\n  min-height: calc(3rem - 2px);\n  height: calc(3rem - 2px);\n  clip-path: inset(0 -5px -5px -5px);\n  clip-path: inset(0 -5px -5px -5px);\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.nepFCard.sapFCard.nepICCardActionTop {\n  clip-path: inset(-5px -5px 0 -5px);\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  height: 100%;\n}\n\n.nepFCardContainer,\n.nepTileContainer {\n  padding: 0.25rem;\n  padding: var(--cardMargin);\n  min-height: var(--gridHeight);\n}\n\n.nepFCardContainer.nepFCardPlain,\n.nepTileContainer.nepTilePlain {\n  padding: 0;\n}\n\n.nepFCardContainer > .sapMFlexItem,\n.nepFCardBody > .sapMFlexItem {\n  width: 100%;\n}\n\n.nepICCardContainer > .sapMFlexItem {\n  height: 100%;\n}\n\n.nepLaunchpadContent {\n  height: 100%;\n}\n\n.nepLaunchpadContentMain {\n  position: absolute;\n  left: 0;\n  right: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.nepLaunchpadShell {\n  position: relative;\n}\n\n.nepLaunchpadContentMenu {\n  z-index: 100;\n}\n\n.nepLaunchpadMenuOverflow > .sapMFlexItem:last-child,\n.nepLaunchpadContentMenu > .sapMFlexItem,\n.nepLaunchpadContentNavigator > .sapMFlexItem,\n.nepLaunchpadContentMain > .sapMFlexItem,\n.nepLaunchpadContentSideApp > .sapMFlexItem {\n  height: 100% !important;\n}\n\n.nepFCard.sapFCard .sapFCardHeader {\n  box-shadow: none;\n}\n\n.nepFCard.sapFCard .sapFCardHeader.nepFCardFooter {\n  padding: 0;\n  width: 100%;\n  border-bottom: none;\n}\n\n.nepFCard.sapFCard.nepTileClickable .sapFCardHeader.nepFCardFooter {\n  border-bottom: none;\n}\n\n.nepFCard.sapFCard .sapFCardHeader.nepFCardFooter .sapFCardStatus {\n  padding: 0.25rem 1rem 0.25rem 0;\n  margin: 0;\n}\n\nhtml[dir=rtl] .nepFCard.sapFCard .sapFCardHeader.nepFCardFooter .sapFCardStatus {\n  padding: 0.25rem 0 0.25rem 1rem;\n}\n\n.nepFCard.sapFCard .sapFCardHeader {\n  background-color: transparent;\n}\n\n.nepFCard.sapFCard .sapFCardContent {\n  flex: 1;\n}\n\n.nepFCard.sapFCard {\n  height: 100%;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n}\n\n.nepFCard.sapFCard.sapFCardFitContent {\n  height: auto;\n}\n\n.nepFCardInlineImage {\n  margin-bottom: 0.5rem;\n}\n\n.nepFCard.sapFCard .sapFCardHeader.nepFCardFooter {\n  clip-path: inset(1px 0 -5px);\n}\n\n.nepFCard.sapFCard .sapFCardHeader.nepFCardFooter,\n.nepFCard.sapFCard .sapFCardHeader.nepFCardFooter.sapFCardNumericHeader .sapFCardHeaderIndicators {\n  flex-direction: row-reverse;\n}\n\n.nepFCard.sapFCard .nepCardAction {\n  padding: 0.25rem 0.85rem;\n  min-height: 2.5rem;\n}\n\n.nepFCard .sapSuiteRMCCircleBackground,\n.nepTile .sapSuiteRMCCircleBackground {\n  stroke: transparent;\n  fill: transparent;\n}\n\n.nepFCard .sapSuiteUiMicroChartNoData {\n  border-radius: 0.5rem;\n}\n\nhtml.sapUiMedia-Std-Phone .nepFCard .sapSuiteCpMCChartContent.sapSuiteCpMCSizeAuto,\n.nepFCard .sapSuiteCpMCChartContent.sapSuiteCpMCSizeS {\n  height: auto;\n}\n\n.nepTileClickable .sapFCardHeaderTitle,\n.nepTileClickable .sapFCardSubtitle {\n  pointer-events: none;\n}\n\n.nepTileClickable {\n  cursor: pointer;\n}\n\n.nepICCard .sapMLIB {\n  background: transparent;\n}\n\n.nepFCard .sapFCardHeaderSINumber span:first-child {\n  margin-right: 0.125rem;\n}\n\nhtml.sap-desktop .sapMDialog .sapMShellAppWidthLimited .sapMShellCentralBox {\n  width: 100%;\n  margin-left: auto;\n  left: auto;\n}\n\n@media (min-width: 1280px) {\n  html.sap-desktop .nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n    width: 100%;\n    left: auto;\n    right: auto;\n    /* max-width: var(--large); */\n    margin: 0 auto 0 auto;\n  }\n}\n/* DIALOG WITH OBJECTHEADER */\n.nepDialogWithObjHeader .sapMOHR {\n  padding-top: 0 !important;\n}\n\n.nepDialogWithObjHeader.sapUiSizeCompact .sapMBar {\n  height: 2.5rem;\n  border-radius: 4px 4px 0px 0px;\n}\n\n.nepDialogWithObjHeader.sapUiSizeCompact.sapMDialog > .sapMDialogTitle,\n.nepDialogWithObjHeader.sapUiSizeCompact .sapMDialog > .sapMDialogTitle {\n  height: 2.5rem;\n}\n\n.nepDialogWithObjHeader .nepCloseBtn {\n  z-index: 9999;\n}\n\n.nepDialogWithObjHeader .sapMOHRIcon {\n  top: 0.675rem;\n}\n\n.nepDialogWithObjHeader .sapUiLocalBusyIndicatorSizeMedium {\n  border-radius: 0.25rem;\n}\n\n.nepDialogSubObjHeader {\n  margin-top: -1rem;\n}\n\n.nepDialogSubObjHeader .sapMText {\n  padding: 0 1rem 1rem 7rem;\n}\n\n.nepDialogSubObjHeader .sapMDialog > .sapMDialogSection {\n  margin-top: -1rem;\n  height: calc(100% + 1rem);\n}\n\n.nepDialogWithObjHeader.sapMDialog:not(.sapMDialogWithSubHeader) > header > .sapMIBar,\n.nepDialogWithObjHeader.sapMDialog > header:last-of-type .sapMIBar,\n.nepPopover.sapMDialog:not(.sapMDialogWithSubHeader) > header > .sapMIBar,\n.nepPopover.sapMDialog > header:last-of-type .sapMIBar {\n  box-shadow: none;\n}\n\n.nepNotificationImage {\n  max-width: 2.25rem;\n  max-height: 2.25rem;\n}\n\n@media (max-width: 680px) {\n  .nepClientInstall {\n    flex-direction: column;\n  }\n}\n.nepClientInstallContainer {\n  padding: 0.5rem;\n}\n\n.nepClientInstallLayout {\n  padding: 1rem;\n  border-radius: 0.5rem;\n  width: 100%;\n}\n\n.nepAppIcon {\n  border-radius: 2rem;\n}\n\n.nepOverflowMenu .sapMLIB,\n.nepMainBar .sapMLIB {\n  border: none;\n}\n\n.nepOverflowMenu .sapMBtn:hover > .sapMBtnHoverable,\n.nepMainBar .sapMBtn:hover > .sapMBtnHoverable {\n  background-color: transparent;\n  border-color: transparent;\n}\n\n.nepOverflowLogo {\n  margin-top: -0.5rem;\n}\n\n.nepOverflowMenu .sapMBarLeft,\n.nepMainBar .sapMBarLeft {\n  padding: 0;\n  height: 2.75rem !important;\n}\n\n.nepOverflowMenu.sapMDialog > header.sapMDialogTitle .sapMImg {\n  margin-right: 0;\n  width: auto;\n}\n\n.nepMenuBtnHidden {\n  position: relative;\n  top: 48px;\n}\n\n.nepOpenAppsBtn {\n  margin-left: 0.3125rem;\n}\n\n.sapMBtn.nepOpenAppsBtn.nepOpenAppsBtnItem .sapMBtnContent {\n  max-width: 200px;\n}\n\n.sapUiSizeCompact .nepOpenAppsBtn {\n  margin-left: 0;\n}\n\n.nepOpenAppsBtnItem {\n  margin-left: 2.4375rem;\n}\n\n.sapUiSizeCompact .nepOpenAppsBtnItem {\n  margin-left: 1.675rem;\n}\n\n.nepOpenAppsAlone .nepOpenAppsBtn {\n  margin-left: 0;\n}\n\n.nepOpenAppsBtn .sapMBtnInner {\n  border: none;\n  background-color: transparent;\n}\n\n.nepOpenAppsBtn .sapMBtnContent {\n  padding-left: 0.5rem;\n}\n\n.sapUiSizeCompact .nepOpenAppsBtn .sapMBtnContent {\n  padding-left: 0.325rem;\n}\n\n.nepOpenAppsClose.sapUiIcon {\n  margin-right: 1rem;\n  font-size: 1rem !important;\n}\n\n.nepOverflowMenu .sapMBtnInner,\n.nepMainBar .sapMBtnInner {\n  border: none;\n  background-color: transparent;\n}\n\n.nepOverflowMenu .headerMobileMenu .sapMBtnIcon,\n.nepMainBar .headerMobileMenu .sapMBtnIcon {\n  font-size: 1.375rem;\n}\n\n.nepOverflowMenu .sapUiSizeCompact .nepOpenAppsBtn .sapMBtnIcon,\n.nepMainBar .sapUiSizeCompact .nepOpenAppsBtn .sapMBtnIcon {\n  font-size: 1.125rem;\n  padding-left: 0.5rem;\n}\n\n.nepOverflowMenu .sapUiSizeCompact .nepOpenAppsBtn.nepOpenAppsBtnItem .sapMBtnIcon,\n.nepMainBar .sapUiSizeCompact .nepOpenAppsBtn.nepOpenAppsBtnItem .sapMBtnIcon {\n  font-size: 1rem;\n}\n\n.nepOverflowMenu.sapUiPopupWithPadding .sapMDialogScrollCont {\n  padding: 0;\n}\n\n.nepTopMenuIconContainerDesktop,\n.nepTopMenuIconContainerMobile {\n  min-width: 48px;\n}\n\n.nepTopMenuIconContainerMobile {\n  max-width: 48px;\n}\n\n.nepTopMenuIconDesktop,\n.nepTopMenuIconMobile {\n  max-height: 36px;\n}\n\n.nepUserActionText.sapMText {\n  text-align: left;\n  margin: 0.5rem 0 0.5rem 1rem;\n  font-weight: bold;\n  font-size: 1rem;\n}\n\n.nepTopMenuIcon.sapMImg.sapMNoImg {\n  visibility: visible;\n}\n\n@media (max-width: 800px) {\n  .nepUserButton .sapMBtnContent {\n    display: none;\n  }\n}\n.nepTile .sapMNCIconImage {\n  margin-top: 0.75rem;\n}\n\n.nepFeed,\n.nepFeed .sapMText {\n  cursor: grab;\n}\n\n.nepTileContentContainer {\n  width: 100%;\n}\n\n.nepAppCacheUser .sapMLIB.sapMObjLItem {\n  margin-bottom: 5px;\n  border-radius: 10px;\n}\n\n.nepSelectUser {\n  padding: 0 0.5rem;\n  border-radius: 0.25rem;\n  border-width: 1px;\n  border-style: solid;\n}\n\n.nepSelectUserBtn.sapMBtn,\n.nepSelectUserBtn .sapMBtnInner.sapMBtnText {\n  padding: 0;\n}\n\n.nepSelectUserBtn .sapMBtnInner {\n  height: 3rem;\n}\n\n.nepSelectUserBtn .sapMBtnContent {\n  line-height: 2.875rem;\n}\n\n/* CHART FIX */\n.sapSuiteRMC.sapSuiteRMCSizeResponsive {\n  max-height: 4.75rem;\n  max-width: 4.75rem;\n}\n\n.nepMinimized .sapMTextLineClamp,\n.nepMinimized .sapMOHRTitleTextWrappable {\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  display: block;\n}\n\n.sapMNC {\n  width: 100%;\n}\n\n.nepHiddenItem {\n  opacity: 0.25;\n  pointer-events: none;\n}\n\n.nepHiddenItem .sapMLIBIconDel {\n  opacity: 0;\n  pointer-events: none;\n}\n\n/* HELP LABLE */\n.sapUiFormLblColon .sapUiFormElementLbl > .sapMLabel.nepLabelHelp:after {\n  font-family: \"SAP-icons\";\n  content: \"\\e1c4\";\n  vertical-align: inherit;\n  margin-left: 0.325rem;\n}\n\n.sapMLabel.nepLabelHelp {\n  pointer-events: none;\n  cursor: pointer;\n}\n\n.sapMLabel.nepLabelHelp::after {\n  pointer-events: all;\n}\n\n.sapUiFormResGridCont > .sapUiFormElementLbl > .nepLabelHelp.sapMLabel {\n  width: auto;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanS12) > .sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanM12) > .sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanL12) > .sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanXL12) > .sapMLabel.nepLabelHelp {\n  width: 100%;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanS12) > .sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanM12) > .sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanL12) > .sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanXL12) > .sapMLabel.nepLabelHelp:after {\n  content: \":\";\n  pointer-events: none;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanS12) > .sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanM12) > .sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanL12) > .sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanXL12) > .sapMLabel.nepLabelHelp:before {\n  font-family: \"SAP-icons\";\n  content: \"\\e1c4\";\n  margin-right: 0.325rem;\n  vertical-align: inherit;\n  pointer-events: all;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanS12) > .sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanM12) > .sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanL12) > .sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont > .sapUiFormElementLbl:not(.sapUiRespGridSpanXL12) > .sapMLabel.nepLabelHelp:before {\n  font-family: \"SAP-icons\";\n  content: \"\\e1c4\";\n  margin-right: 0.325rem;\n  vertical-align: inherit;\n  pointer-events: all;\n}\n\n.sapMLabelRequired.nepLabelHelp:before {\n  content: inherit;\n  font-size: inherit;\n  font-weight: inherit;\n  position: inherit;\n  vertical-align: inherit;\n  line-height: inherit;\n}\n\n/* SCROLLBAR COLOR */\nhtml.sap-desktop.nepThemeLight ::-webkit-scrollbar-thumb,\nhtml.sap-desktop.nepThemeLight ::-webkit-scrollbar-thumb:hover {\n  background-color: var(--lightGreySecondary);\n}\n\nhtml.sap-desktop.nepThemeDark ::-webkit-scrollbar-thumb,\nhtml.sap-desktop.nepThemeDark ::-webkit-scrollbar-thumb:hover {\n  background-color: var(--darkThemeSecondaryBackground);\n}\n\n/* BACKGROUND COLOR */\n.nepThemeLight .nepTopMenu {\n  background: var(--white);\n}\n\n.nepThemeDark .nepTopMenu {\n  background: var(--darkThemePrimaryBackground);\n  border-radius: 0;\n}\n\n.nepThemeLight .nepNavBarContent {\n  background: var(--white);\n}\n\n.nepThemeDark .nepNavBarContent {\n  background: var(--darkThemeSecondaryBackground);\n}\n\n.nepThemeLight .nepMainBar {\n  background: var(--white);\n}\n\n.nepThemeDark .nepMainBar {\n  background: var(--darkThemeSecondaryBackground);\n}\n\n.nepThemeLight .nepLayoutOpenApps {\n  background-color: var(--white);\n}\n\n.nepThemeDark .nepLayoutOpenApps {\n  background-color: var(--darkThemeSecondaryBackground);\n}\n\n.nepThemeLight .nepTopMenu .nepNotificationButton span.sapMBtnInner:hover {\n  background-color: var(--lightThemeNotification);\n}\n\n.nepThemeDark .nepTopMenu .nepNotificationButton span.sapMBtnInner:hover {\n  background-color: var(--darkThemeNotification);\n}\n\n.nepThemeLight .nepSelectUser {\n  background-color: var(--white);\n}\n\n.nepThemeDark .nepSelectUser {\n  background-color: var(--darkThemeSecondaryBackground);\n}\n\n.nepThemeLight .nepLaunchpadMenuSettings {\n  background: var(--white);\n}\n\n.nepThemeDark .nepLaunchpadMenuSettings {\n  background: var(--darkThemeSecondaryBackground);\n}\n\n.nepThemeLight .numPad .sapMBtnInner,\n.nepThemeLight .nepNumpadPanel .sapMCbBg.sapMCbMarkChecked,\n.nepThemeLight .nepNumpadPanel .sapMBtn:hover > .sapMBtnHoverable,\n.nepThemeLight .numPad:not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive {\n  background-color: rgba(0, 0, 0, 0.2);\n}\n\n.nepThemeDark .numPad .sapMBtnInner,\n.nepThemeDark .nepNumpadPanel .sapMCbBg.sapMCbMarkChecked,\n.nepThemeDark .nepNumpadPanel .sapMBtn:hover > .sapMBtnHoverable,\n.nepThemeDark .numPad:not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive {\n  background-color: rgba(255, 255, 255, 0.2);\n}\n\n.nepThemeLight .nepNumpadPanel .sapMCbBg {\n  background: rgba(0, 0, 0, 0.1);\n}\n\n.nepThemeDark .nepNumpadPanel .sapMCbBg {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n.nepThemeLight .nepLogonLayout {\n  background: rgba(0, 0, 0, 0.2);\n}\n\n.nepThemeDark .nepLogonLayout {\n  background-color: rgba(255, 255, 255, 0.2);\n}\n\n@media (max-width: 420px) {\n  .nepThemeLight .nepLogonLayout,\n  .nepThemeDark .nepLogonLayout {\n    background-color: transparent;\n  }\n}\n.nepThemeLight .nepLogonLayoutBtn .sapMBtn:not(.numPad):hover > .sapMBtnHoverable {\n  background-color: var(--white);\n}\n\n.nepThemeDark .nepLogonLayoutBtn .sapMBtn:not(.numPad):hover > .sapMBtnHoverable {\n  background-color: var(--darkThemeSecondaryBackground);\n}\n\n/* TEXT COLOR */\n.nepNavBarActionInverse .sapMBtnCustomIcon {\n  color: white !important;\n}\n\n.nepNavBarActionInverse .sapMBtnInner {\n  color: white !important;\n}\n\n.nepThemeLight .nepMainBar .sapMBtnIcon,\n.nepThemeLight .nepTopMenuContent .sapMBtn,\n.nepThemeLight .nepTopMenuContent .sapMBtnInner,\n.nepThemeLight .nepTopMenuContent .sapMBtnIcon {\n  color: var(--darkSecondaryColor);\n}\n\n.nepThemeDark .nepMainBar .sapMBtnIcon,\n.nepThemeDark .nepTopMenuContent .sapMBtn,\n.nepThemeDark .nepTopMenuContent .sapMBtnInner,\n.nepThemeDark .nepTopMenuContent .sapMBtnIcon {\n  color: var(--lightSecondaryColor);\n}\n\n.nepThemeLight .nepTopMenuContent .sapMBtn:hover > .sapMBtnHoverable,\n.nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive,\n.nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeLight .nepTopMenuContent span.sapMBtnInner.sapMBtnEmphasized,\n.nepThemeLight .nepTopMenuContent .sapMBtn:hover:not(.sapMBtnDisabled) > .sapMBtnHoverable.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed) > .sapMBtnIcon,\n.nepThemeLight .nepTopMenuContent *.sapMBtn:hover:not(.sapMBtnDisabled) > span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed) > .sapMBtnIcon,\n.nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled):not(.sapMSBActive) > span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed):hover > .sapMBtnIcon {\n  color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepTopMenuContent .sapMBtn:hover > .sapMBtnHoverable,\n.nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive,\n.nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeDark .nepTopMenuContent span.sapMBtnInner.sapMBtnEmphasized,\n.nepThemeDark .nepTopMenuContent .sapMBtn:hover:not(.sapMBtnDisabled) > .sapMBtnHoverable.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed) > .sapMBtnIcon,\n.nepThemeDark .nepTopMenuContent *.sapMBtn:hover:not(.sapMBtnDisabled) > span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed) > .sapMBtnIcon,\n.nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled):not(.sapMSBActive) > span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed):hover > .sapMBtnIcon {\n  color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .sapMNCIconImage {\n  color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .sapMNCIconImage {\n  color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepSubMenu .sapMBtnInner {\n  color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepSubMenu .sapMBtnInner {\n  color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeLight .nepTreeCategory .sapMTreeItemBaseExpander {\n  color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeDark .nepTreeCategory .sapMTreeItemBaseExpander {\n  color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .nepOpenAppsBtn .sapMBtnIcon,\n.nepThemeLight .nepMainBar .sapMSFF,\n.nepThemeLight .nepMainBar .sapMSFB,\n.nepThemeLight .nepPopover .sapMSFF,\n.nepThemeLight .nepPopover .sapMSFB {\n  color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .nepOpenAppsBtn .sapMBtnIcon,\n.nepThemeDark .nepMainBar .sapMSFF,\n.nepThemeDark .nepMainBar .sapMSFB,\n.nepThemeDark .nepPopover .sapMSFF,\n.nepThemeDark .nepPopover .sapMSFB {\n  color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .sapMDialogStretched.nepPopover .nepOpenAppsBtn .sapMBtnIcon,\n.nepThemeLight .sapMDialogStretched .nepOpenAppsClose.sapUiIcon,\n.nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMSTIIcon,\n.nepThemeLight .sapMDialogStretched.nepOverflowMenu .nepTreeCategory .sapMTreeItemBaseExpander {\n  color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .sapMDialogStretched.nepPopover .nepOpenAppsBtn .sapMBtnIcon,\n.nepThemeDark .sapMDialogStretched .nepOpenAppsClose.sapUiIcon,\n.nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMSTIIcon,\n.nepThemeDark .sapMDialogStretched.nepOverflowMenu .nepTreeCategory .sapMTreeItemBaseExpander {\n  color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .sapMDialogStretched .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeLight .sapMDialogStretched.nepOverflowMenu .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMBtnInner,\n.nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMTreeItemBase {\n  color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .sapMDialogStretched .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeDark .sapMDialogStretched.nepOverflowMenu .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMBtnInner,\n.nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMTreeItemBase {\n  color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepOpenAppsClose.sapUiIcon {\n  color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepOpenAppsClose.sapUiIcon {\n  color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepPopover .sapMBtnIcon,\n.nepThemeLight .nepMainBar .sapMBtnIcon {\n  color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .nepPopover .sapMBtnIcon,\n.nepThemeDark .nepMainBar .sapMBtnIcon {\n  color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .nepOpenAppsBtn .sapMBtnIcon {\n  color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepOpenAppsBtn .sapMBtnIcon {\n  color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .nepPopover .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n.nepThemeLight .nepPopover .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n.nepThemeLight .nepMainBar .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n.nepThemeLight .nepMainBar .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled) > .sapMBtnActive {\n  color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .nepPopover .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n.nepThemeDark .nepPopover .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n.nepThemeDark .nepMainBar .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n.nepThemeDark .nepMainBar .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled) > .sapMBtnActive {\n  color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .nepPopover :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeLight .nepPopover .sapMIBar-CTX .sapMLabel,\n.nepThemeLight .nepMainBar :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeLight .nepMainBar .sapMIBar-CTX .sapMLabel {\n  color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepPopover :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeDark .nepPopover .sapMIBar-CTX .sapMLabel,\n.nepThemeDark .nepMainBar :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeDark .nepMainBar .sapMIBar-CTX .sapMLabel {\n  color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepListSetting .sapMLIB.sapMLIBActive {\n  color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepListSetting .sapMLIB.sapMLIBActive {\n  color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepUserActionText.sapMText {\n  color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepUserActionText.sapMText {\n  color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepNotificationItem .sapMLIBIconDel:not(.sapMBtnDisabled) .sapMBtnTransparent > .sapMBtnIcon {\n  color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepNotificationItem .sapMLIBIconDel:not(.sapMBtnDisabled) .sapMBtnTransparent > .sapMBtnIcon {\n  color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .nepPopSimpleTitle.sapMText {\n  color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepPopSimpleTitle.sapMText {\n  color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .sapMLabelRequired.nepLabelHelp:before {\n  color: var(--lightThemeRequired);\n}\n\n.nepThemeDark .sapMLabelRequired.nepLabelHelp:before {\n  color: var(--lightThemeRequired);\n}\n\n.nepThemeLight .nepNotifHeader.sapMText {\n  color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepNotifHeader.sapMText {\n  color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .nepFeed .sapMText {\n  color: var(--darkSecondaryColor);\n}\n\n.nepThemeDark .nepFeed .sapMText {\n  color: var(--lightSecondaryColor);\n}\n\n.nepThemeLight .nepFCard .sapSuiteUiMicroChartNoData {\n  color: var(--lightGreySecondary);\n}\n\n.nepThemeDark .nepFCard .sapSuiteUiMicroChartNoData {\n  color: var(--darkGreySecondary);\n}\n\n.nepThemeLight .nepNumpadPanel .sapMBtnIcon,\n.nepThemeLight .numPad .sapMBtnInner {\n  color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepNumpadPanel .sapMBtnIcon,\n.nepThemeDark .numPad .sapMBtnInner {\n  color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepLogonLayout .sapMBtnInner,\n.nepThemeLight .nepAppCacheUser .sapMLIB.sapMLIBActive,\n.nepThemeLight .nepAppCacheUser .sapMLIBActive div,\n.nepThemeLight .nepAppCacheUser .sapMLIBActive .sapMText {\n  color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepLogonLayout .sapMBtnInner,\n.nepThemeDark .nepAppCacheUser .sapMLIB.sapMLIBActive,\n.nepThemeDark .nepAppCacheUser .sapMLIBActive div,\n.nepThemeDark .nepAppCacheUser .sapMLIBActive .sapMText {\n  color: var(--lightPrimaryColor);\n}\n\n/* BORDER COLOR */\n.nepThemeLight .nepMainBar .sapMSFF,\n.nepThemeLight .nepPopover .sapMSFF,\n.nepThemeLight .nepMainBar .sapMSFF:hover,\n.nepThemeLight .nepPopover .sapMSFF:hover,\n.nepThemeLight .nepLaunchpadMenuSettings {\n  border-color: var(--lightGreyPrimary);\n}\n\n.nepThemeDark .nepMainBar .sapMSFF,\n.nepThemeDark .nepPopover .sapMSFF,\n.nepThemeDark .nepMainBar .sapMSFF:hover,\n.nepThemeDark .nepPopover .sapMSFF:hover,\n.nepThemeDark .nepLaunchpadMenuSettings {\n  border-color: var(--darkGreyPrimary);\n}\n\n.nepThemeLight .nepTopMenu,\n.nepThemeLight .nepMainBar,\n.nepThemeLight .nepNavBarContent,\n.nepThemeLight .nepNavBarContent .sapMTBStandard,\n.nepThemeLight .nepDocPage {\n  border-color: var(--lightGreySecondary);\n}\n\n.nepThemeDark .nepTopMenu,\n.nepThemeDark .nepMainBar,\n.nepThemeDark .nepNavBarContent,\n.nepThemeDark .nepNavBarContent .sapMTBStandard,\n.nepThemeDark .nepDocPage {\n  border-color: var(--darkGreySecondary);\n}\n\n.nepThemeLight .nepCatTitle.sapMTitle,\n.nepThemeLight .nepCatSubTitle.sapMTitle {\n  border-color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepCatTitle.sapMTitle,\n.nepThemeDark .nepCatSubTitle.sapMTitle {\n  border-color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepTopMenuActive,\n.nepThemeLight .nepTopMenuBtn.sapMBtn:hover,\n.nepThemeLight .nepLayoutOpenApps.nepIconActive {\n  border-color: var(--darkActiveMenuColor);\n}\n\n.nepThemeDark .nepTopMenuActive,\n.nepThemeDark .nepTopMenuBtn.sapMBtn:hover,\n.nepThemeDark .nepLayoutOpenApps.nepIconActive {\n  border-color: var(--lightActiveMenuColor);\n}\n\n.nepThemeLight .nepOverflowMenu.nepPopover.sapMPopover {\n  border-top-color: var(--darkActiveMenuColor);\n}\n\n.nepThemeDark .nepOverflowMenu.nepPopover.sapMPopover {\n  border-top-color: var(--lightActiveMenuColor);\n}\n\n.nepThemeLight .nepOverflowMenu.sapMPopover {\n  border-top-color: var(--darkActiveMenuColor);\n}\n\n.nepThemeDark .nepOverflowMenu.sapMPopover {\n  border-top-color: var(--lightActiveMenuColor);\n}\n\n.nepThemeLight .nepSelectUser {\n  border-color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .nepSelectUser {\n  border-color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .nepLogonLayout .sapMBtnInner {\n  border-color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .nepLogonLayout .sapMBtnInner {\n  border-color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .numPad:not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive {\n  border-color: rgba(0, 0, 0, 0.5);\n}\n\n.nepThemeDark .numPad:not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive {\n  border-color: rgba(255, 255, 255, 0.5);\n}\n\n/* BOX SHADOW */\n.nepThemeLight .nepLayoutOpenApps,\n.nepThemeLight .nepPinOpenApps,\n.nepThemeLight .nepOverflowMenu.sapMPopover,\n.nepThemeLight .nepPopover.sapMPopover,\n.nepThemeLight .nepTileCards,\n.nepThemeLight .nepFioriStyle .nepTile,\n.nepThemeLight .nepClientInstallLayout {\n  box-shadow: 0 8px 18px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n}\n\n.nepThemeDark .nepLayoutOpenApps,\n.nepThemeDark .nepPinOpenApps,\n.nepThemeDark .nepOverflowMenu.sapMPopover,\n.nepThemeDark .nepPopover.sapMPopover,\n.nepThemeDark .nepTileCards,\n.nepThemeDark .nepFioriStyle .nepTile,\n.nepThemeDark .nepClientInstallLayout {\n  box-shadow: 0 8px 18px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n}\n\n.nepThemeLight .nepFCard:hover,\n.nepThemeLight .nepLayoutOpenApps:hover,\n.nepThemeLight .nepPinOpenApps:hover,\n.nepThemeLight .nepOverflowMenu.sapMPopover:hover,\n.nepThemeLight .nepTileCards:hover,\n.nepThemeLight .nepFioriStyle .nepTile:hover,\n.nepThemeLight .nepICCardActionHover {\n  box-shadow: 0 8px 18px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n}\n\n.nepThemeDark .nepFCard:hover,\n.nepThemeDark .nepLayoutOpenApps:hover,\n.nepThemeDark .nepPinOpenApps:hover,\n.nepThemeDark .nepOverflowMenu.sapMPopover:hover,\n.nepThemeDark .nepTileCards:hover,\n.nepThemeDark .nepFioriStyle .nepTile:hover,\n.nepThemeDark .nepICCardActionHover {\n  box-shadow: 0 8px 18px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n}\n\n/* SAP QUARTZ LIGHT */\n.nepThemeLight .nepActionContainer .sapMBtnInner,\n.nepThemeLight .nepActionContainer .sapMBtn:hover > .sapMBtnHoverable {\n  background-color: transparent;\n  border-color: var(--darkPrimaryColor);\n  color: var(--darkPrimaryColor);\n}\n\n.nepThemeLight .nepActionContainer .sapMBtnIcon {\n  color: var(--darkPrimaryColor);\n}\n\n/* SAP QUARTZ DARK */\n.nepThemeDark .nepActionContainer .sapMBtnInner,\n.nepThemeDark .nepActionContainer .sapMBtn:hover > .sapMBtnHoverable {\n  background-color: transparent;\n  border-color: var(--lightSecondaryColor);\n  color: var(--lightSecondaryColor);\n}\n\n.nepThemeDark .nepActionContainer .sapMBtnIcon,\n.nepThemeDark .nepFCard.sapFCard .sapFCardHeader .sapFCardIcon.sapFAvatar .sapUiIcon {\n  color: var(--lightSecondaryColor);\n}\n\n/* NEPTUNE TREE CATEGORY (TILE GROUPS)*/\n.nepTreeCategory li[aria-level=\"2\"] {\n  padding-left: 1rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"3\"] {\n  padding-left: 2.5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"4\"] {\n  padding-left: 4rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"5\"] {\n  padding-left: 5.5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"2\"].nepTreeItemAction {\n  padding-left: 1.5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"3\"].nepTreeItemAction {\n  padding-left: 3.5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"4\"].nepTreeItemAction {\n  padding-left: 5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"5\"].nepTreeItemAction {\n  padding-left: 6.5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"6\"].nepTreeItemAction {\n  padding-left: 7rem !important;\n}\n\nhtml[dir=rtl] .nepTreeCategory li[aria-level=\"2\"] {\n  padding-left: 0 !important;\n  padding-right: 2rem !important;\n}\n\nhtml[dir=rtl] .nepTreeCategory li[aria-level=\"3\"] {\n  padding-left: 0 !important;\n  padding-right: 4rem !important;\n}\n\nhtml[dir=rtl] .nepTreeCategory li[aria-level=\"4\"] {\n  padding-left: 0 !important;\n  padding-right: 6rem !important;\n}\n\nhtml[dir=rtl] .nepTreeCategory li[aria-level=\"2\"] {\n  padding-left: 0 !important;\n  padding-right: 1.5rem !important;\n}\n\nhtml[dir=rtl] .nepTreeCategory li[aria-level=\"3\"] {\n  padding-left: 0 !important;\n  padding-right: 3rem !important;\n}\n\nhtml[dir=rtl] .nepTreeCategory li[aria-level=\"4\"] {\n  padding-left: 0 !important;\n  padding-right: 4.5rem !important;\n}\n\n.nepTreeCategory .sapMTreeItemBaseChildren {\n  background-color: transparent;\n}\n\n.nepTreeCategory .sapMTreeItemBaseExpander {\n  font-family: \"fa-solid\" !important;\n}\n\n.nepTreeCategory .sapMTreeItemBaseLeaf > .sapMTreeItemBaseExpander {\n  opacity: 1;\n}\n\n.nepTreeCategory .nepTreeItemAction.sapMTreeItemBaseLeaf > .sapMTreeItemBaseExpander.sapUiIcon {\n  display: none;\n}\n\n.nepTreeCategory .sapMTreeItemBaseExpander.sapUiIcon {\n  font-family: \"fa-solid\" !important;\n  font-size: 1.5rem;\n  margin-right: 0.125rem;\n}\n\n.nepTreeCategory .sapMTreeItemBaseExpander.sapUiIcon {\n  font-size: 1.125rem;\n}\n\n.nepOpenAppsBtn:not(.nepOpenAppsBtnItem) .sapMBtnIcon {\n  font-size: 1.5rem;\n}\n\n.nepOpenAppsBtn .sapMBtnIcon {\n  font-size: 1rem;\n}\n\n.nepOpenAppsBtnMaster .sapMBtnIcon {\n  font-size: 1.125rem;\n  padding-left: 0.5rem;\n}\n\n.nepTreeCategory .sapMBtnInner.sapMBtnText .sapMBtnIcon {\n  font-size: 1rem;\n}\n\n@-webkit-keyframes fadein {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@-moz-keyframes fadein {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@keyframes fadein {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n/*--------------------------------------------------------------------------------------------------*/\n/* MENU*/\n/*--------------------------------------------------------------------------------------------------*/\n.nepTopMenuContent {\n  overflow: hidden;\n}\n\n.nepTopMenuContent .sapMBtnIcon {\n  font-size: 1.375rem;\n  line-height: 2.375rem;\n  width: 2.375rem;\n}\n\n.nepTopMenuContent .sapMBtn {\n  height: 3rem;\n}\n\n.nepTopMenuContent .sapMBtnInner {\n  height: 2.5rem;\n  min-width: 2.5rem;\n  border-radius: 0.2rem;\n}\n\n.nepTopMenuContent .sapMBtnContent {\n  line-height: 2.375rem;\n}\n\n.nepTopMenuContent .nepNotificationButton .sapMBtnInner {\n  height: 1.5rem;\n  min-width: 1.5rem;\n}\n\n.nepTopMenuContent .nepNotificationButton .sapMBtnInner.sapMBtnText,\n.nepTopMenuContent .nepNotificationButton .sapMBtnIconLeft + .sapMBtnIconRight,\n.nepTopMenuContent .nepNotificationButton .sapMBtnIconLeft + .sapMBtnIconLeft {\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n}\n\n.nepTopMenuContent .nepNotificationButton .sapMBtnContent {\n  line-height: 1.5rem;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n/* CANVAS */\n/*--------------------------------------------------------------------------------------------------*/\nhtml.sap-desktop .nepShell.sapMShellAppWidthLimited .sapMShellCentralBox:before {\n  box-shadow: -15px 0 15px -15px rgba(0, 0, 0, 0.15) inset;\n  content: \" \";\n  height: 100%;\n  left: -15px;\n  position: absolute;\n  top: 0;\n  width: 15px;\n}\n\nhtml.sap-desktop .nepShell.sapMShellAppWidthLimited .sapMShellCentralBox:after {\n  box-shadow: 15px 0 15px -15px rgba(0, 0, 0, 0.15) inset;\n  content: \" \";\n  height: 100%;\n  position: absolute;\n  top: 0;\n  right: -15px;\n  width: 15px;\n}\n\nhtml.sap-desktop .nepShellXXXLarge.nepShell.sapMShellAppWidthLimited > .sapMShellCentralBox {\n  max-width: var(--xxxlarge);\n}\n\nhtml.sap-desktop .nepShellXXLarge.nepShell.sapMShellAppWidthLimited > .sapMShellCentralBox {\n  max-width: var(--xxlarge);\n}\n\nhtml.sap-desktop .nepShellXLarge.nepShell.sapMShellAppWidthLimited > .sapMShellCentralBox {\n  max-width: var(--xlarge);\n}\n\nhtml.sap-desktop .nepShellLarge.nepShell.sapMShellAppWidthLimited > .sapMShellCentralBox {\n  max-width: var(--large);\n}\n\nhtml.sap-desktop .nepShellMedium.nepShell.sapMShellAppWidthLimited > .sapMShellCentralBox {\n  max-width: var(--medium);\n}\n\nhtml.sap-desktop .nepShellSmall.nepShell.sapMShellAppWidthLimited > .sapMShellCentralBox {\n  max-width: var(--small);\n}\n\nhtml.sap-desktop .nepShellXSmall.nepShell.sapMShellAppWidthLimited > .sapMShellCentralBox {\n  max-width: var(--xsmall);\n}\n\n.nepShellWidthApp .sapMShellCentralBox {\n  max-width: var(--large);\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n/* NORMAL GRID */\n/*--------------------------------------------------------------------------------------------------*/\n.nepGrid {\n  display: grid;\n  grid-gap: var(--gridGap);\n  grid-template-columns: repeat(12, var(--grid12));\n  width: 100%;\n  margin-bottom: 8px;\n  margin-bottom: var(--gridGap);\n}\n\n.nepGrid.nepGridXXXLarge,\n.nepGrid.nepGroupXXXLarge {\n  grid-template-columns: repeat(10, var(--grid10));\n  width: 100%;\n}\n\n.nepGrid.nepGridXXLarge,\n.nepGrid.nepGroupXXLarge {\n  grid-template-columns: repeat(8, var(--grid8));\n  width: 100%;\n}\n\n.nepGrid.nepGridXLarge,\n.nepGrid.nepGroupXLarge {\n  grid-template-columns: repeat(6, var(--grid6));\n  width: 100%;\n}\n\n.nepGrid.nepGridLarge,\n.nepGrid.nepGroupLarge {\n  grid-template-columns: repeat(4, var(--grid4));\n  width: 100%;\n}\n\n.nepGrid.nepGridMedium,\n.nepGrid.nepGroupMedium {\n  grid-template-columns: repeat(3, var(--grid3));\n  width: 100%;\n}\n\n.nepGrid.nepGridSmall,\n.nepGrid.nepGroupSmall {\n  grid-template-columns: repeat(2, var(--grid2));\n  width: 100%;\n}\n\n.nepGrid.nepGridXSmall,\n.nepGrid.nepGroupXSmall {\n  grid-template-columns: var(--grid1);\n  width: 100%;\n}\n\n.nepHeaderXXXLarge,\n.nepGrid.nepGroupXXXLarge {\n  max-width: var(--xxxlarge);\n  margin: 0 auto 0 auto;\n}\n\n.nepHeaderXXLarge,\n.nepGrid.nepGroupXXLarge {\n  max-width: var(--xxlarge);\n  margin: 0 auto 0 auto;\n}\n\n.nepHeaderXLarge,\n.nepGrid.nepGroupXLarge {\n  max-width: var(--xlarge);\n  margin: 0 auto 0 auto;\n}\n\n.nepHeaderLarge,\n.nepGrid.nepGroupLarge {\n  max-width: var(--large);\n  margin: 0 auto 0 auto;\n}\n\n.nepHeaderMedium,\n.nepGrid.nepGroupMedium {\n  max-width: var(--medium);\n  margin: 0 auto 0 auto;\n}\n\n.nepHeaderSmall,\n.nepGrid.nepGroupSmall {\n  max-width: var(--small);\n  margin: 0 auto 0 auto;\n}\n\n.nepHeaderXSmall,\n.nepGrid.nepGroupXSmall {\n  max-width: var(--xsmall);\n  margin: 0 auto 0 auto;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n/* MANY GRID */\n/*--------------------------------------------------------------------------------------------------*/\n.nepGrid.nepGridMany {\n  grid-template-columns: repeat(14, var(--grid14));\n  width: 100%;\n  margin-bottom: var(--gridGap);\n}\n\n.nepGrid.nepGridXXXLarge.nepGridMany,\n.nepGrid.nepGroupXXXLarge.nepGridMany {\n  grid-template-columns: repeat(12, var(--grid12));\n  width: 100%;\n}\n\n.nepGrid.nepGridXXLarge.nepGridMany,\n.nepGrid.nepGroupXXLarge.nepGridMany {\n  grid-template-columns: repeat(10, var(--grid10));\n  width: 100%;\n}\n\n.nepGrid.nepGridXLarge.nepGridMany,\n.nepGrid.nepGroupXLarge.nepGridMany {\n  grid-template-columns: repeat(8, var(--grid8));\n  width: 100%;\n}\n\n.nepGrid.nepGridLarge.nepGridMany,\n.nepGrid.nepGroupLarge.nepGridMany {\n  grid-template-columns: repeat(6, var(--grid6));\n  width: 100%;\n}\n\n.nepGrid.nepGridMedium.nepGridMany,\n.nepGrid.nepGroupMedium.nepGridMany {\n  grid-template-columns: repeat(3, var(--grid3));\n  width: 100%;\n}\n\n.nepGrid.nepGridSmall.nepGridMany,\n.nepGrid.nepGroupSmall.nepGridMany {\n  grid-template-columns: repeat(2, var(--grid2));\n  width: 100%;\n}\n\n.nepGrid.nepGridXSmall.nepGridMany,\n.nepGrid.nepGroupXSmall.nepGridMany {\n  grid-template-columns: var(--grid1);\n  width: 100%;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n/* FEW GRID */\n/*--------------------------------------------------------------------------------------------------*/\n.nepGrid.nepGridFew {\n  grid-template-columns: repeat(8, var(--grid8));\n  width: 100%;\n  margin-bottom: var(--gridGap);\n}\n\n.nepGrid.nepGridXXXLarge.nepGridFew,\n.nepGrid.nepGroupXXXLarge.nepGridFew {\n  grid-template-columns: repeat(8, var(--grid8));\n  width: 100%;\n}\n\n.nepGrid.nepGridXXLarge.nepGridFew,\n.nepGrid.nepGroupXXLarge.nepGridFew {\n  grid-template-columns: repeat(6, var(--grid6));\n  width: 100%;\n}\n\n.nepGrid.nepGridXLarge.nepGridFew,\n.nepGrid.nepGroupXLarge.nepGridFew {\n  grid-template-columns: repeat(4, var(--grid4));\n  width: 100%;\n}\n\n.nepGrid.nepGridLarge.nepGridFew,\n.nepGrid.nepGroupLarge.nepGridFew {\n  grid-template-columns: repeat(2, var(--grid2));\n  width: 100%;\n}\n\n.nepGrid.nepGridMedium.nepGridFew,\n.nepGrid.nepGroupMedium.nepGridFew,\n.nepGrid.nepGridSmall.nepGridFew,\n.nepGrid.nepGroupSmall.nepGridFew,\n.nepGrid.nepGridXSmall.nepGridFew,\n.nepGrid.nepGroupXSmall.nepGridFew {\n  grid-template-columns: var(--grid1);\n  width: 100%;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n/* ONE GRID */\n/*--------------------------------------------------------------------------------------------------*/\n.nepGrid.nepGridOne {\n  grid-template-columns: var(--grid1);\n  width: 100%;\n  margin-bottom: var(--gridGap);\n}\n\n.nepGrid.nepGridXXXLarge.nepGridOne,\n.nepGrid.nepGroupXXXLarge.nepGridOne,\n.nepGrid.nepGridXXLarge.nepGridOne,\n.nepGrid.nepGroupXXLarge.nepGridOne,\n.nepGrid.nepGridXLarge.nepGridOne,\n.nepGrid.nepGroupXLarge.nepGridOne,\n.nepGrid.nepGridLarge.nepGridOne,\n.nepGrid.nepGroupLarge.nepGridOne,\n.nepGrid.nepGridMedium.nepGridOne,\n.nepGrid.nepGroupMedium.nepGridOne,\n.nepGrid.nepGridSmall.nepGridOne,\n.nepGrid.nepGroupSmall.nepGridOne,\n.nepGrid.nepGridXSmall.nepGridOne,\n.nepGrid.nepGroupXSmall.nepGridOne {\n  grid-template-columns: var(--grid1);\n  width: 100%;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n/* TILE */\n/*--------------------------------------------------------------------------------------------------*/\n.nepTile,\n.nepTileContentContainer {\n  height: calc(100% - 2 * var(--cardMargin));\n  min-height: var(--gridHeight);\n}\n\n.nepTile.nepTileCards > .sapMFlexItem {\n  height: 100%;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n/* TILE HEIGHT */\n/*--------------------------------------------------------------------------------------------------*/\n.nepTileTall {\n  grid-row: auto/span 2;\n  min-height: calc(2 * var(--gridHeight));\n}\n\n.nepTileTower {\n  grid-row: auto/span 3;\n  min-height: calc(3 * var(--gridHeight));\n}\n\n.nepTileSkyscraper {\n  grid-row: auto/span 4;\n  min-height: calc(4 * var(--gridHeight));\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n/* TILE WIDTH */\n/*--------------------------------------------------------------------------------------------------*/\n.nepTileMedium {\n  grid-column: auto/span 2;\n}\n\n.nepTileWide {\n  grid-column: auto/span 3;\n}\n\n.nepTileWider {\n  grid-column: auto/span 4;\n}\n\n.nepTileMax {\n  grid-column: auto/span 12;\n}\n\n.nepGroupXXXLarge .nepTileMax,\n.nepGridXXXLarge .nepTileMax {\n  grid-column: auto/span 10;\n}\n\n.nepGroupXXLarge .nepTileMax,\n.nepGridXXLarge .nepTileMax {\n  grid-column: auto/span 8;\n}\n\n.nepGroupXLarge .nepTileMax,\n.nepGridXLarge .nepTileMax {\n  grid-column: auto/span 6;\n}\n\n.nepGroupLarge .nepTileMax,\n.nepGridLarge .nepTileMax {\n  grid-column: auto/span 4;\n}\n\n.nepGroupMedium .nepTileWider,\n.nepGroupMedium .nepTileMax,\n.nepGridMedium .nepTileWider,\n.nepGridMedium .nepTileMax {\n  grid-column: auto/span 3;\n}\n\n.nepGroupSmall .nepTileWide,\n.nepGroupSmall .nepTileWider,\n.nepGroupSmall .nepTileMax,\n.nepGridSmall .nepTileWide,\n.nepGridSmall .nepTileWider,\n.nepGridSmall .nepTileMax {\n  grid-column: auto/span 2;\n}\n\n.nepGroupXSmall .nepTileMedium,\n.nepGroupXSmall .nepTileWide,\n.nepGroupXSmall .nepTileWider,\n.nepGroupXSmall .nepTileMax,\n.nepGridXSmall .nepTileMedium,\n.nepGridXSmall .nepTileWide,\n.nepGridXSmall .nepTileWider,\n.nepGridXSmall .nepTileMax {\n  grid-column: auto/span 1;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n/* TILE WIDTH MANY */\n/*--------------------------------------------------------------------------------------------------*/\n.nepGridMany .nepTileMax {\n  grid-column: auto/span 14;\n}\n\n.nepGridMany.nepGroupXXXLarge .nepTileMax,\n.nepGridMany.nepGridXXXLarge .nepTileMax {\n  grid-column: auto/span 12;\n}\n\n.nepGridMany.nepGroupXXLarge .nepTileMax,\n.nepGridMany.nepGridXXLarge .nepTileMax {\n  grid-column: auto/span 10;\n}\n\n.nepGridMany.nepGroupXLarge .nepTileMax,\n.nepGridMany.nepGridXLarge .nepTileMax {\n  grid-column: auto/span 8;\n}\n\n.nepGridMany.nepGroupLarge .nepTileMax,\n.nepGridMany.nepGridLarge .nepTileMax {\n  grid-column: auto/span 6;\n}\n\n.nepGridMany.nepGroupMedium .nepTileWider,\n.nepGridMany.nepGroupMedium .nepTileMax,\n.nepGridMany.nepGridMedium .nepTileWider,\n.nepGridMany.nepGridMedium .nepTileMax {\n  grid-column: auto/span 3;\n}\n\n.nepGridMany.nepGroupSmall .nepTileWide,\n.nepGridMany.nepGroupSmall .nepTileWider,\n.nepGridMany.nepGroupSmall .nepTileMax,\n.nepGridMany.nepGridSmall .nepTileWide,\n.nepGridMany.nepGridSmall .nepTileWider,\n.nepGridMany.nepGridSmall .nepTileMax {\n  grid-column: auto/span 2;\n}\n\n.nepGridMany.nepGroupXSmall .nepTileMedium,\n.nepGridMany.nepGroupXSmall .nepTileWide,\n.nepGridMany.nepGroupXSmall .nepTileWider,\n.nepGridMany.nepGroupXSmall .nepTileMax,\n.nepGridMany.nepGridXSmall .nepTileMedium,\n.nepGridMany.nepGridXSmall .nepTileWide,\n.nepGridMany.nepGridXSmall .nepTileWider,\n.nepGridMany.nepGridXSmall .nepTileMax {\n  grid-column: auto/span 1;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n/* TILE WIDTH FEW */\n/*--------------------------------------------------------------------------------------------------*/\n.nepGridFew .nepTileMax {\n  grid-column: auto/span 8;\n}\n\n.nepGridFew.nepGroupXXXLarge .nepTileMax,\n.nepGridFew.nepGridXXXLarge .nepTileMax {\n  grid-column: auto/span 8;\n}\n\n.nepGridFew.nepGroupXXLarge .nepTileMax,\n.nepGridFew.nepGridXXLarge .nepTileMax {\n  grid-column: auto/span 6;\n}\n\n.nepGridFew.nepGroupXLarge .nepTileMax,\n.nepGridFew.nepGridXLarge .nepTileMax {\n  grid-column: auto/span 4;\n}\n\n.nepGridFew.nepGroupLarge .nepTileWide,\n.nepGridFew.nepGroupLarge .nepTileWider,\n.nepGridFew.nepGroupLarge .nepTileMax,\n.nepGridFew.nepGridLarge .nepTileWide,\n.nepGridFew.nepGridLarge .nepTileWider,\n.nepGridFew.nepGridLarge .nepTileMax {\n  grid-column: auto/span 2;\n}\n\n.nepGridFew.nepGroupMedium .nepTileMedium,\n.nepGridFew.nepGroupMedium .nepTileWide,\n.nepGridFew.nepGroupMedium .nepTileWider,\n.nepGridFew.nepGroupMedium .nepTileMax,\n.nepGridFew.nepGridMedium .nepTileMedium,\n.nepGridFew.nepGridMedium .nepTileWide,\n.nepGridFew.nepGridMedium .nepTileWider,\n.nepGridFew.nepGridMedium .nepTileMax {\n  grid-column: auto/span 1;\n}\n\n.nepGridFew.nepGroupSmall .nepTileMedium,\n.nepGridFew.nepGroupSmall .nepTileWide,\n.nepGridFew.nepGroupSmall .nepTileWider,\n.nepGridFew.nepGroupSmall .nepTileMax,\n.nepGridFew.nepGridSmall .nepTileMedium,\n.nepGridFew.nepGridSmall .nepTileWide,\n.nepGridFew.nepGridSmall .nepTileWider,\n.nepGridFew.nepGridSmall .nepTileMax {\n  grid-column: auto/span 1;\n}\n\n.nepGridFew.nepGroupXSmall .nepTileMedium,\n.nepGridFew.nepGroupXSmall .nepTileWide,\n.nepGridFew.nepGroupXSmall .nepTileWider,\n.nepGridFew.nepGroupXSmall .nepTileMax,\n.nepGridFew.nepGridXSmall .nepTileMedium,\n.nepGridFew.nepGridXSmall .nepTileWide,\n.nepGridFew.nepGridXSmall .nepTileWider,\n.nepGridFew.nepGridXSmall .nepTileMax {\n  grid-column: auto/span 1;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n/* TILE WIDTH ONE */\n/*--------------------------------------------------------------------------------------------------*/\n.nepGrid.nepGridOne .nepTileMedium,\n.nepGrid.nepGridOne .nepTileWide,\n.nepGrid.nepGridOne .nepTileWider,\n.nepGrid.nepGridOne .nepTileMax {\n  grid-column: auto/span 1;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n/* TILE ALIGNMENT \n/*--------------------------------------------------------------------------------------------------*/\n.nepHeaderAlignLeft,\n.nepGrid.nepGridAlignLeft {\n  margin: 0 auto 0 0;\n}\n\n.nepHeaderAlignRight,\n.nepGrid.nepGridAlignRight {\n  margin: 0 0 0 auto;\n}\n\n/* --------------------------------------------------------------------------------------------------\n/* FIORI TILES \n/*--------------------------------------------------------------------------------------------------*/\n.nepGrid.nepGridFiori {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.nepGridFiori .nepTileMax {\n  width: 100%;\n}\n\n.nepGridFiori .nepTile {\n  width: 11rem;\n  height: 11rem;\n}\n\n.nepGridFiori .nepTile.nepFioriStyleTwoByOne {\n  width: 22.5rem;\n}\n\n.nepTileCards {\n  height: 100%;\n}\n\n.nepTileCards,\n.nepFioriStyle .nepTile {\n  border-radius: 4px;\n}\n\n.nepFitTileContent .nepTileContentContainer {\n  min-height: auto;\n}\n\n.nepFitTileContent.nepTileCards {\n  height: auto;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n/* INTERNET EXPLORER */\n/*--------------------------------------------------------------------------------------------------*/\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .sapFCard .sapFCardHeader {\n    box-shadow: none !important;\n  }\n  .nepFCardContainer > .sapMFlexItem,\n  .nepFCardBody > .sapMFlexItem {\n    width: 100% !important;\n  }\n  .nepGrid {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  html.sap-desktop .nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n    max-width: 1280px;\n  }\n  html.sap-desktop .nepShellXXXLarge.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n    max-width: 2360px;\n  }\n  html.sap-desktop .nepShellXXLarge.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n    max-width: 1880px;\n  }\n  html.sap-desktop .nepShellXLarge.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n    max-width: 1580px;\n  }\n  html.sap-desktop .nepShellLarge.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n    max-width: 1280px;\n  }\n  html.sap-desktop .nepShellMedium.nepShell.sapMShellAppWidthLimited > .sapMShellCentralBox {\n    max-width: 980px;\n  }\n  html.sap-desktop .nepShellSmall.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n    max-width: 680px;\n  }\n  html.sap-desktop .nepShellXSmall.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n    max-width: 380px;\n  }\n  .nepShellWidthApp .sapMShellCentralBox {\n    max-width: 1280px;\n  }\n  .nepHeaderXXXLarge,\n  .nepGrid.nepGroupXXXLarge {\n    max-width: 2360px;\n  }\n  .nepHeaderXXLarge,\n  .nepGrid.nepGroupXXLarge {\n    max-width: 1880px;\n  }\n  .nepHeaderXLarge,\n  .nepGrid.nepGroupXLarge {\n    max-width: 1580px;\n  }\n  .nepHeaderLarge,\n  .nepGrid.nepGroupLarge {\n    max-width: 1280px;\n  }\n  .nepHeaderMedium,\n  .nepGrid.nepGroupMedium {\n    max-width: 980px;\n  }\n  .nepHeaderSmall,\n  .nepGrid.nepGroupSmall {\n    max-width: 680px;\n  }\n  .nepHeaderXSmall,\n  .nepGrid.nepGroupXSmall {\n    max-width: 380px;\n  }\n  /*--------------------------------------------------------------------------------------------------*/\n  /* TILE HEIGHT */\n  /*--------------------------------------------------------------------------------------------------*/\n  .nepTile,\n  .nepTileContentContainer,\n  .nepFCardContainer,\n  .nepTileContainer {\n    min-height: 270px;\n  }\n  .nepTileTall {\n    min-height: 540px;\n  }\n  .nepTileTower {\n    min-height: 710px;\n  }\n  .nepTileSkyscraper {\n    min-height: 880px;\n  }\n  /*--------------------------------------------------------------------------------------------------*/\n  /* TILE WIDTH */\n  /*--------------------------------------------------------------------------------------------------*/\n  .nepGrid .nepTileSmall {\n    width: 8.3333% !important;\n  }\n  .nepPageXXXLarge .nepGrid .nepTileSmall,\n  .nepGridXXXLarge.nepGrid .nepTileSmall {\n    width: 10% !important;\n  }\n  .nepPageXXLarge .nepGrid .nepTileSmall,\n  .nepGridXXLarge.nepGrid .nepTileSmall {\n    width: 12.5% !important;\n  }\n  .nepPageXLarge .nepGrid .nepTileSmall,\n  .nepGridXLarge.nepGrid .nepTileSmall {\n    width: 16.6666% !important;\n  }\n  .nepPageLarge .nepGrid .nepTileSmall,\n  .nepGridLarge.nepGrid .nepTileSmall {\n    width: 25% !important;\n  }\n  .nepPageMedium .nepGrid .nepTileSmall,\n  .nepGridMedium.nepGrid .nepTileSmall {\n    width: 50% !important;\n  }\n  .nepPageSmall .nepGrid .nepTileSmall,\n  .nepGridSmall.nepGrid .nepTileSmall,\n  .nepPageXSmall .nepGrid .nepTileSmall,\n  .nepGridXSmall.nepGrid .nepTileSmall {\n    width: 100% !important;\n  }\n  .nepGrid .nepTileMedium {\n    width: 25% !important;\n  }\n  .nepPageXLarge .nepGrid .nepTileMedium,\n  .nepGridXLarge.nepGrid .nepTileMedium,\n  .nepPageLarge .nepGrid .nepTileMedium,\n  .nepGridLarge.nepGrid .nepTileMedium {\n    width: 50% !important;\n  }\n  .nepPageMedium .nepGrid .nepTileMedium,\n  .nepGridMedium.nepGrid .nepTileMedium,\n  .nepPageSmall .nepGrid .nepTileMedium,\n  .nepGridSmall.nepGrid .nepTileMedium,\n  .nepPageXSmall .nepGrid .nepTileMedium,\n  .nepGridXSmall.nepGrid .nepTileMedium {\n    width: 100% !important;\n  }\n  .nepGrid .nepTileWide {\n    width: 25% !important;\n  }\n  .nepPageXLarge .nepGrid .nepTileWide,\n  .nepGridXLarge.nepGrid .nepTileWide {\n    width: 50% !important;\n  }\n  .nepPageLarge .nepGrid .nepTileWide,\n  .nepGridLarge.nepGrid .nepTileWide,\n  .nepPageMedium .nepGrid .nepTileWide,\n  .nepGridMedium.nepGrid .nepTileWide,\n  .nepPageSmall .nepGrid .nepTileWide,\n  .nepGridSmall.nepGrid .nepTileWide,\n  .nepPageXSmall .nepGrid .nepTileWide,\n  .nepGridXSmall.nepGrid .nepTileWide {\n    width: 100% !important;\n  }\n  .nepGrid .nepTileWider {\n    width: 50% !important;\n  }\n  .nepPageXLarge .nepGrid .nepTileWider,\n  .nepGridXLarge.nepGrid .nepTileWider,\n  .nepPageLarge .nepGrid .nepTileWider,\n  .nepGridLarge.nepGrid .nepTileWider,\n  .nepPageMedium .nepGrid .nepTileWider,\n  .nepGridMedium.nepGrid .nepTileWider,\n  .nepPageSmall .nepGrid .nepTileWider,\n  .nepGridSmall.nepGrid .nepTileWider,\n  .nepPageXSmall .nepGrid .nepTileWide,\n  .nepGridXSmall.nepGrid .nepTileWider {\n    width: 100% !important;\n  }\n  .nepGrid .nepTileMax {\n    width: 100% !important;\n  }\n  /*--------------------------------------------------------------------------------------------------*/\n  /* TILE WIDTH FEW */\n  /*--------------------------------------------------------------------------------------------------*/\n  .nepGridFew .nepTileSmall {\n    width: 10% !important;\n  }\n  .nepPageXXXLarge .nepGridFew .nepTileSmall,\n  .nepGridXXXLarge.nepGridFew .nepTileSmall {\n    width: 12.5% !important;\n  }\n  .nepPageXXLarge .nepGridFew .nepTileSmall,\n  .nepGridXXLarge.nepGridFew .nepTileSmall {\n    width: 16.6666% !important;\n  }\n  .nepPageXLarge .nepGridFew .nepTileSmall,\n  .nepGridXLarge.nepGridFew .nepTileSmall {\n    width: 25% !important;\n  }\n  .nepPageLarge .nepGridFew .nepTileSmall,\n  .nepGridLarge.nepGridFew .nepTileSmall {\n    width: 50% !important;\n  }\n  .nepPageMedium .nepGridFew .nepTileSmall,\n  .nepGridMedium.nepGridFew .nepTileSmall {\n    width: 100% !important;\n  }\n  .nepPageSmall .nepGridFew .nepTileSmall,\n  .nepGridSmall.nepGridFew .nepTileSmall,\n  .nepPageXSmall .nepGridFew .nepTileSmall,\n  .nepGridXSmall.nepGridFew .nepTileSmall {\n    width: 100% !important;\n  }\n  .nepGridFew .nepTileMedium {\n    width: 50% !important;\n  }\n  .nepPageXLarge .nepGridFew .nepTileMedium,\n  .nepGridXLarge.nepGridFew .nepTileMedium,\n  .nepPageLarge .nepGridFew .nepTileMedium,\n  .nepGridLarge.nepGridFew .nepTileMedium,\n  .nepPageMedium .nepGridFew .nepTileMedium,\n  .nepGridMedium.nepGridFew .nepTileMedium,\n  .nepPageSmall .nepGridFew .nepTileMedium,\n  .nepGridSmall.nepGridFew .nepTileMedium,\n  .nepPageXSmall .nepGridFew .nepTileMedium,\n  .nepGridXSmall.nepGridFew .nepTileMedium {\n    width: 100% !important;\n  }\n  .nepGridFew .nepTileWide {\n    width: 50% !important;\n  }\n  .nepPageXLarge .nepGridFew .nepTileWide,\n  .nepGridXLarge.nepGridFew .nepTileWide,\n  .nepPageLarge .nepGridFew .nepTileWide,\n  .nepGridLarge.nepGridFew .nepTileWide,\n  .nepPageMedium .nepGridFew .nepTileWide,\n  .nepGridMedium.nepGridFew .nepTileWide,\n  .nepPageSmall .nepGridFew .nepTileWide,\n  .nepGridSmall.nepGridFew .nepTileWide,\n  .nepPageXSmall .nepGridFew .nepTileWide,\n  .nepGridXSmall.nepGridFew .nepTileWide {\n    width: 100% !important;\n  }\n  .nepGridFew .nepTileWider,\n  .nepPageXLarge .nepGridFew .nepTileWider,\n  .nepGridXLarge.nepGridFew .nepTileWider,\n  .nepPageLarge .nepGridFew .nepTileWider,\n  .nepGridLarge.nepGridFew .nepTileWider,\n  .nepPageMedium .nepGridFew .nepTileWider,\n  .nepGridMedium.nepGridFew .nepTileWider,\n  .nepPageSmall .nepGridFew .nepTileWider,\n  .nepGridSmall.nepGridFew .nepTileWider,\n  .nepPageXSmall .nepGridFew .nepTileWide,\n  .nepGridXSmall.nepGridFew .nepTileWider {\n    width: 100% !important;\n  }\n  .nepGridFew .nepTileMax {\n    width: 100% !important;\n  }\n  /*--------------------------------------------------------------------------------------------------*/\n  /* TILE WIDTH ONE */\n  /*--------------------------------------------------------------------------------------------------*/\n  .nepGridOne .nepTileSmall,\n  .nepPageXXXLarge .nepGridOne .nepTileSmall,\n  .nepGridXXXLarge.nepGridOne .nepTileSmall,\n  .nepPageXXLarge .nepGridOne .nepTileSmall,\n  .nepGridXXLarge.nepGridOne .nepTileSmall,\n  .nepPageXLarge .nepGridOne .nepTileSmall,\n  .nepGridXLarge.nepGridOne .nepTileSmall,\n  .nepPageLarge .nepGridOne .nepTileSmall,\n  .nepGridLarge.nepGridOne .nepTileSmall,\n  .nepPageMedium .nepGridOne .nepTileSmall,\n  .nepGridMedium.nepGridOne .nepTileSmall,\n  .nepPageSmall .nepGridOne .nepTileSmall,\n  .nepGridSmall.nepGridOne .nepTileSmall,\n  .nepPageXSmall .nepGridOne .nepTileSmall,\n  .nepGridXSmall.nepGridOne .nepTileSmall,\n  .nepGridOne .nepTileMedium,\n  .nepPageXLarge .nepGridOne .nepTileMedium,\n  .nepGridXLarge.nepGridOne .nepTileMedium,\n  .nepPageLarge .nepGridOne .nepTileMedium,\n  .nepGridLarge.nepGridOne .nepTileMedium,\n  .nepPageMedium .nepGridOne .nepTileMedium,\n  .nepGridMedium.nepGridOne .nepTileMedium,\n  .nepPageSmall .nepGridOne .nepTileMedium,\n  .nepGridSmall.nepGridOne .nepTileMedium,\n  .nepPageXSmall .nepGridOne .nepTileMedium,\n  .nepGridXSmall.nepGridOne .nepTileMedium,\n  .nepGridOne .nepTileWide,\n  .nepPageXLarge .nepGridOne .nepTileWide,\n  .nepGridXLarge.nepGridOne .nepTileWide,\n  .nepPageLarge .nepGridOne .nepTileWide,\n  .nepGridLarge.nepGridOne .nepTileWide,\n  .nepPageMedium .nepGridOne .nepTileWide,\n  .nepGridMedium.nepGridOne .nepTileWide,\n  .nepPageSmall .nepGridOne .nepTileWide,\n  .nepGridSmall.nepGridOne .nepTileWide,\n  .nepPageXSmall .nepGridOne .nepTileWide,\n  .nepGridXSmall.nepGridOne .nepTileWide,\n  .nepGridOne .nepTileWider,\n  .nepPageXLarge .nepGridOne .nepTileWider,\n  .nepGridXLarge.nepGridOne .nepTileWider,\n  .nepPageLarge .nepGridOne .nepTileWider,\n  .nepGridLarge.nepGridOne .nepTileWider,\n  .nepPageMedium .nepGridOne .nepTileWider,\n  .nepGridMedium.nepGridOne .nepTileWider,\n  .nepPageSmall .nepGridOne .nepTileWider,\n  .nepGridSmall.nepGridOne .nepTileWider,\n  .nepPageXSmall .nepGridOne .nepTileWide,\n  .nepGridXSmall.nepGridOne .nepTileWider,\n  .nepGridOne .nepTileMax {\n    width: 100% !important;\n  }\n  .nepGrid.nepGridFiori .nepTileContainer {\n    width: 11.5rem !important;\n  }\n  .nepGrid.nepGridFiori .nepTileContainer.nepFioriStyleTwoByOne {\n    width: 23rem !important;\n  }\n  /* BACKGROUND COLOR */\n  .nepThemeLight .nepTopMenu {\n    background: white;\n  }\n  .nepThemeDark .nepTopMenu {\n    background: #1C2228;\n  }\n  .nepThemeLight .nepNavBarContent {\n    background: white;\n  }\n  .nepThemeDark .nepNavBarContent {\n    background: #29313a;\n  }\n  .nepThemeLight .nepMainBar {\n    background: white;\n  }\n  .nepThemeDark .nepMainBar {\n    background: #29313a;\n  }\n  .nepThemeLight .nepLayoutOpenApps {\n    background-color: white;\n  }\n  .nepThemeDark .nepLayoutOpenApps {\n    background-color: #29313a;\n  }\n  .nepThemeLight .nepTopMenu .nepNotificationButton span.sapMBtnInner:hover {\n    background-color: #dd0000;\n  }\n  .nepThemeDark .nepTopMenu .nepNotificationButton span.sapMBtnInner:hover {\n    background-color: #dd0000;\n  }\n  .nepThemeLight .nepSelectUser {\n    background-color: white;\n  }\n  .nepThemeDark .nepSelectUser {\n    background-color: #29313a;\n  }\n  .nepThemeLight .nepLaunchpadMenuSettings {\n    background: white;\n  }\n  .nepThemeDark .nepLaunchpadMenuSettings {\n    background: #29313a;\n  }\n  .nepThemeLight .numPad .sapMBtnInner,\n  .nepThemeLight .nepNumpadPanel .sapMCbBg.sapMCbMarkChecked,\n  .nepThemeLight .nepNumpadPanel .sapMBtn:hover > .sapMBtnHoverable,\n  .nepThemeLight .numPad:not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive {\n    background-color: rgba(0, 0, 0, 0.2);\n  }\n  .nepThemeDark .numPad .sapMBtnInner,\n  .nepThemeDark .nepNumpadPanel .sapMCbBg.sapMCbMarkChecked,\n  .nepThemeDark .nepNumpadPanel .sapMBtn:hover > .sapMBtnHoverable,\n  .nepThemeDark .numPad:not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive {\n    background-color: rgba(255, 255, 255, 0.2);\n  }\n  .nepThemeLight .nepNumpadPanel .sapMCbBg {\n    background: rgba(0, 0, 0, 0.1);\n  }\n  .nepThemeDark .nepNumpadPanel .sapMCbBg {\n    background: rgba(255, 255, 255, 0.1);\n  }\n  .nepThemeLight .nepLogonLayout {\n    background: rgba(0, 0, 0, 0.1);\n  }\n  .nepThemeDark .nepLogonLayout {\n    background-color: rgba(255, 255, 255, 0.1);\n  }\n  .nepThemeLight .nepLogonLayoutBtn .sapMBtn:not(.numPad):hover > .sapMBtnHoverable {\n    background-color: white;\n  }\n  .nepThemeDark .nepLogonLayoutBtn .sapMBtn:not(.numPad):hover > .sapMBtnHoverable {\n    background-color: #29313a;\n  }\n  /* TEXT COLOR */\n  .nepNavBarActionInverse .sapMBtnCustomIcon {\n    color: white !important;\n  }\n  .nepNavBarActionInverse .sapMBtnInner {\n    color: white !important;\n  }\n  .nepThemeLight .nepMainBar .sapMBtnIcon,\n  .nepThemeLight .nepTopMenuContent .sapMBtn,\n  .nepThemeLight .nepTopMenuContent .sapMBtnInner,\n  .nepThemeLight .nepTopMenuContent .sapMBtnIcon {\n    color: #444;\n  }\n  .nepThemeDark .nepMainBar .sapMBtnIcon,\n  .nepThemeDark .nepTopMenuContent .sapMBtn,\n  .nepThemeDark .nepTopMenuContent .sapMBtnInner,\n  .nepThemeDark .nepTopMenuContent .sapMBtnIcon {\n    color: #d3d7d9;\n  }\n  .nepThemeLight .nepTopMenuContent .sapMBtn:hover > .sapMBtnHoverable,\n  .nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive,\n  .nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n  .nepThemeLight .nepTopMenuContent span.sapMBtnInner.sapMBtnEmphasized,\n  .nepThemeLight .nepTopMenuContent .sapMBtn:hover:not(.sapMBtnDisabled) > .sapMBtnHoverable.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed) > .sapMBtnIcon,\n  .nepThemeLight .nepTopMenuContent *.sapMBtn:hover:not(.sapMBtnDisabled) > span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed) > .sapMBtnIcon,\n  .nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled):not(.sapMSBActive) > span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed):hover > .sapMBtnIcon {\n    color: #333;\n  }\n  .nepThemeDark .nepTopMenuContent .sapMBtn:hover > .sapMBtnHoverable,\n  .nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive,\n  .nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n  .nepThemeDark .nepTopMenuContent span.sapMBtnInner.sapMBtnEmphasized,\n  .nepThemeDark .nepTopMenuContent .sapMBtn:hover:not(.sapMBtnDisabled) > .sapMBtnHoverable.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed) > .sapMBtnIcon,\n  .nepThemeDark .nepTopMenuContent *.sapMBtn:hover:not(.sapMBtnDisabled) > span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed) > .sapMBtnIcon,\n  .nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled):not(.sapMSBActive) > span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed):hover > .sapMBtnIcon {\n    color: #fafafa;\n  }\n  .nepThemeLight .sapMNCIconImage {\n    color: #333;\n  }\n  .nepThemeDark .sapMNCIconImage {\n    color: #fafafa;\n  }\n  .nepThemeLight .nepSubMenu .sapMBtnInner {\n    color: #666;\n  }\n  .nepThemeDark .nepSubMenu .sapMBtnInner {\n    color: #dedede;\n  }\n  .nepThemeLight .nepOpenAppsBtn .sapMBtnInner,\n  .nepThemeLight .nepTreeCategory .sapMTreeItemBaseExpander {\n    color: #666;\n  }\n  .nepThemeDark .nepOpenAppsBtn .sapMBtnInner,\n  .nepThemeDark .nepTreeCategory .sapMTreeItemBaseExpander {\n    color: #dedede;\n  }\n  .nepThemeLight .nepOpenAppsBtn .sapMBtnIcon,\n  .nepThemeLight .nepMainBar .sapMSFF,\n  .nepThemeLight .nepMainBar .sapMSFB,\n  .nepThemeLight .nepPopover .sapMSFF,\n  .nepThemeLight .nepPopover .sapMSFB {\n    color: #888;\n  }\n  .nepThemeDark .nepOpenAppsBtn .sapMBtnIcon,\n  .nepThemeDark .nepMainBar .sapMSFF,\n  .nepThemeDark .nepMainBar .sapMSFB,\n  .nepThemeDark .nepPopover .sapMSFF,\n  .nepThemeDark .nepPopover .sapMSFB {\n    color: #ccc;\n  }\n  .nepThemeLight .sapMDialogStretched.nepPopover .nepOpenAppsBtn .sapMBtnIcon,\n  .nepThemeLight .sapMDialogStretched .nepOpenAppsClose.sapUiIcon,\n  .nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMSTIIcon,\n  .nepThemeLight .sapMDialogStretched.nepOverflowMenu .nepTreeCategory .sapMTreeItemBaseExpander {\n    color: #888;\n  }\n  .nepThemeDark .sapMDialogStretched.nepPopover .nepOpenAppsBtn .sapMBtnIcon,\n  .nepThemeDark .sapMDialogStretched .nepOpenAppsClose.sapUiIcon,\n  .nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMSTIIcon,\n  .nepThemeDark .sapMDialogStretched.nepOverflowMenu .nepTreeCategory .sapMTreeItemBaseExpander {\n    color: #ccc;\n  }\n  .nepThemeLight .sapMDialogStretched .nepOpenAppsBtn .sapMBtnInner,\n  .nepThemeLight .sapMDialogStretched.nepOverflowMenu .nepOpenAppsBtn .sapMBtnInner,\n  .nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMBtnInner,\n  .nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMTreeItemBase {\n    color: #333;\n  }\n  .nepThemeDark .sapMDialogStretched .nepOpenAppsBtn .sapMBtnInner,\n  .nepThemeDark .sapMDialogStretched.nepOverflowMenu .nepOpenAppsBtn .sapMBtnInner,\n  .nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMBtnInner,\n  .nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMTreeItemBase {\n    color: #fafafa;\n  }\n  .nepThemeLight .nepOpenAppsClose.sapUiIcon {\n    color: #333;\n  }\n  .nepThemeDark .nepOpenAppsClose.sapUiIcon {\n    color: #fafafa;\n  }\n  .nepThemeLight .nepPopover .sapMBtnIcon,\n  .nepThemeLight .nepMainBar .sapMBtnIcon {\n    color: #888;\n  }\n  .nepThemeDark .nepPopover .sapMBtnIcon,\n  .nepThemeDark .nepMainBar .sapMBtnIcon {\n    color: #ccc;\n  }\n  .nepThemeLight .nepOpenAppsBtn .sapMBtnIcon {\n    color: #888;\n  }\n  .nepThemeDark .nepOpenAppsBtn .sapMBtnIcon {\n    color: #ccc;\n  }\n  .nepThemeLight .nepPopover .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n  .nepThemeLight .nepPopover .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n  .nepThemeLight .nepMainBar .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n  .nepThemeLight .nepMainBar .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled) > .sapMBtnActive {\n    color: #888;\n  }\n  .nepThemeDark .nepPopover .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n  .nepThemeDark .nepPopover .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n  .nepThemeDark .nepMainBar .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n  .nepThemeDark .nepMainBar .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled) > .sapMBtnActive {\n    color: #ccc;\n  }\n  .nepThemeLight .nepPopover :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n  .nepThemeLight .nepPopover .sapMIBar-CTX .sapMLabel,\n  .nepThemeLight .nepMainBar :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n  .nepThemeLight .nepMainBar .sapMIBar-CTX .sapMLabel {\n    color: #333;\n  }\n  .nepThemeDark .nepPopover :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n  .nepThemeDark .nepPopover .sapMIBar-CTX .sapMLabel,\n  .nepThemeDark .nepMainBar :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n  .nepThemeDark .nepMainBar .sapMIBar-CTX .sapMLabel {\n    color: #fafafa;\n  }\n  .nepThemeLight .nepListSetting .sapMLIB.sapMLIBActive {\n    color: #333;\n  }\n  .nepThemeDark .nepListSetting .sapMLIB.sapMLIBActive {\n    color: #fafafa;\n  }\n  .nepThemeLight .nepUserActionText.sapMText {\n    color: #333;\n  }\n  .nepThemeDark .nepUserActionText.sapMText {\n    color: #fafafa;\n  }\n  .nepThemeLight .nepNotificationItem .sapMLIBIconDel:not(.sapMBtnDisabled) .sapMBtnTransparent > .sapMBtnIcon {\n    color: #666;\n  }\n  .nepThemeDark .nepNotificationItem .sapMLIBIconDel:not(.sapMBtnDisabled) .sapMBtnTransparent > .sapMBtnIcon {\n    color: #dedede;\n  }\n  .nepThemeLight .nepPopSimpleTitle.sapMText {\n    color: #666;\n  }\n  .nepThemeDark .nepPopSimpleTitle.sapMText {\n    color: #dedede;\n  }\n  .nepThemeLight .sapMLabelRequired.nepLabelHelp:before {\n    color: #c14646;\n  }\n  .nepThemeDark .sapMLabelRequired.nepLabelHelp:before {\n    color: #c14646;\n  }\n  .nepThemeLight .nepNotifHeader.sapMText {\n    color: #666;\n  }\n  .nepThemeDark .nepNotifHeader.sapMText {\n    color: #dedede;\n  }\n  .nepThemeLight .nepFeed .sapMText {\n    color: #444;\n  }\n  .nepThemeDark .nepFeed .sapMText {\n    color: #d3d7d9;\n  }\n  .nepThemeLight .nepFCard .sapSuiteUiMicroChartNoData {\n    color: #ccc;\n  }\n  .nepThemeDark .nepFCard .sapSuiteUiMicroChartNoData {\n    color: #888;\n  }\n  .nepThemeLight .nepNumpadPanel .sapMBtnIcon,\n  .nepThemeLight .numPad .sapMBtnInner {\n    color: #333;\n  }\n  .nepThemeDark .nepNumpadPanel .sapMBtnIcon,\n  .nepThemeDark .numPad .sapMBtnInner {\n    color: #fafafa;\n  }\n  .nepThemeLight .nepLogonLayout .sapMBtnInner,\n  .nepThemeLight .nepAppCacheUser .sapMLIB.sapMLIBActive,\n  .nepThemeLight .nepAppCacheUser .sapMLIBActive div,\n  .nepThemeLight .nepAppCacheUser .sapMLIBActive .sapMText {\n    color: #333;\n  }\n  .nepThemeDark .nepLogonLayout .sapMBtnInner,\n  .nepThemeDark .nepAppCacheUser .sapMLIB.sapMLIBActive,\n  .nepThemeDark .nepAppCacheUser .sapMLIBActive div,\n  .nepThemeDark .nepAppCacheUser .sapMLIBActive .sapMText {\n    color: #fafafa;\n  }\n  /* BORDER COLOR */\n  .nepThemeLight .nepMainBar .sapMSFF,\n  .nepThemeLight .nepPopover .sapMSFF,\n  .nepThemeLight .nepMainBar .sapMSFF:hover,\n  .nepThemeLight .nepPopover .sapMSFF:hover,\n  .nepThemeLight .nepLaunchpadMenuSettings {\n    border-color: #dedede;\n  }\n  .nepThemeDark .nepMainBar .sapMSFF,\n  .nepThemeDark .nepPopover .sapMSFF,\n  .nepThemeDark .nepMainBar .sapMSFF:hover,\n  .nepThemeDark .nepPopover .sapMSFF:hover,\n  .nepThemeDark .nepLaunchpadMenuSettings {\n    border-color: #666;\n  }\n  .nepThemeLight .nepTopMenu,\n  .nepThemeLight .nepMainBar,\n  .nepThemeLight .nepNavBarContent,\n  .nepThemeLight .nepNavBarContent .sapMTBStandard,\n  .nepThemeLight .nepDocPage {\n    border-color: #ccc;\n  }\n  .nepThemeDark .nepTopMenu,\n  .nepThemeDark .nepMainBar,\n  .nepThemeDark .nepNavBarContent,\n  .nepThemeDark .nepNavBarContent .sapMTBStandard,\n  .nepThemeDark .nepDocPage {\n    border-color: #888;\n  }\n  .nepThemeLight .nepCatTitle.sapMTitle,\n  .nepThemeLight .nepCatSubTitle.sapMTitle {\n    border-color: #333;\n  }\n  .nepThemeDark .nepCatTitle.sapMTitle,\n  .nepThemeDark .nepCatSubTitle.sapMTitle {\n    border-color: #fafafa;\n  }\n  .nepThemeLight .nepTopMenuActive,\n  .nepThemeLight .nepTopMenuBtn.sapMBtn:hover,\n  .nepThemeLight .nepIconActive {\n    border-color: #d3d7d9;\n  }\n  .nepThemeDark .nepTopMenuActive,\n  .nepThemeDark .nepTopMenuBtn.sapMBtn:hover,\n  .nepThemeDark .nepIconActive {\n    border-color: #d3d7d9;\n  }\n  .nepThemeLight .nepOverflowMenu.nepPopover.sapMPopover {\n    border-top-color: #d3d7d9;\n  }\n  .nepThemeDark .nepOverflowMenu.nepPopover.sapMPopover {\n    border-top-color: #d3d7d9;\n  }\n  .nepThemeLight .nepOverflowMenu.sapMPopover {\n    border-top-color: #d3d7d9;\n  }\n  .nepThemeDark .nepOverflowMenu.sapMPopover {\n    border-top-color: #d3d7d9;\n  }\n  .nepThemeLight .nepSelectUser {\n    border-color: #888;\n  }\n  .nepThemeDark .nepSelectUser {\n    border-color: #ccc;\n  }\n  .nepThemeLight .nepLogonLayout .sapMBtnInner {\n    border-color: #888;\n  }\n  .nepThemeDark .nepLogonLayout .sapMBtnInner {\n    border-color: #ccc;\n  }\n  .nepThemeLight .numPad:not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive {\n    border-color: rgba(0, 0, 0, 0.5);\n  }\n  .nepThemeDark .numPad:not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive {\n    border-color: rgba(255, 255, 255, 0.5);\n  }\n  /*--------------------------------------------------------------------------------------------------*/\n  /* SAP QUARTZ LIGHT */\n  /*--------------------------------------------------------------------------------------------------*/\n  .nepThemeLight .nepActionContainer .sapMBtnInner,\n  .nepThemeLight .nepActionContainer .sapMBtn:hover > .sapMBtnHoverable {\n    background-color: transparent;\n    border-color: #333;\n    color: #333;\n  }\n  .nepThemeLight .nepActionContainer .sapMBtnIcon {\n    color: #333;\n  }\n  /*--------------------------------------------------------------------------------------------------*/\n  /* SAP QUARTZ DARK */\n  /*--------------------------------------------------------------------------------------------------*/\n  .nepThemeDark .nepActionContainer .sapMBtnInner,\n  .nepThemeDark .nepActionContainer .sapMBtn:hover > .sapMBtnHoverable {\n    background-color: transparent;\n    border-color: #d3d7d9;\n    color: #d3d7d9;\n  }\n  .nepThemeDark .nepActionContainer .sapMBtnIcon,\n  .nepThemeDark .nepFCard.sapFCard .sapFCardHeader .sapFCardIcon.sapFAvatar .sapUiIcon {\n    color: #d3d7d9;\n  }\n}\n/* QUARTZ LIGHT CARD BACKGROUNDS */\n.nepThemeLight .sapColorSet1A {\n  background-color: #fefaf4;\n}\n\n.nepThemeLight .sapColorSet1B {\n  background-color: #fdf5eb;\n}\n\n.nepThemeLight .sapColorSet1C {\n  background-color: #fcf1e2;\n}\n\n.nepThemeLight .sapColorSet1D {\n  background-color: #fbecd8;\n}\n\n.nepThemeLight .sapColorSet2A {\n  background-color: #fdf7f7;\n}\n\n.nepThemeLight .sapColorSet2B {\n  background-color: #fbeeee;\n}\n\n.nepThemeLight .sapColorSet2C {\n  background-color: #f9e6e6;\n}\n\n.nepThemeLight .sapColorSet2D {\n  background-color: #f7dede;\n}\n\n.nepThemeLight .sapColorSet3A {\n  background-color: #fef6fa;\n}\n\n.nepThemeLight .sapColorSet3B {\n  background-color: #fcedf4;\n}\n\n.nepThemeLight .sapColorSet3C {\n  background-color: #fbe4ef;\n}\n\n.nepThemeLight .sapColorSet3D {\n  background-color: #fadbea;\n}\n\n.nepThemeLight .sapColorSet4A {\n  background-color: #fefafd;\n}\n\n.nepThemeLight .sapColorSet4B {\n  background-color: #fbf3f9;\n}\n\n.nepThemeLight .sapColorSet4C {\n  background-color: #f9ebf5;\n}\n\n.nepThemeLight .sapColorSet4D {\n  background-color: #f7e3f2;\n}\n\n.nepThemeLight .sapColorSet5A {\n  background-color: #f6f7fd;\n}\n\n.nepThemeLight .sapColorSet5B {\n  background-color: #eeeefb;\n}\n\n.nepThemeLight .sapColorSet5C {\n  background-color: #e5e6fa;\n}\n\n.nepThemeLight .sapColorSet5D {\n  background-color: #dddef8;\n}\n\n.nepThemeLight .sapColorSet6A {\n  background-color: #f7fafd;\n}\n\n.nepThemeLight .sapColorSet6B {\n  background-color: #eff5fb;\n}\n\n.nepThemeLight .sapColorSet6C {\n  background-color: #e7f0fa;\n}\n\n.nepThemeLight .sapColorSet6D {\n  background-color: #deebf8;\n}\n\n.nepThemeLight .sapColorSet7A {\n  background-color: #f6fdfe;\n}\n\n.nepThemeLight .sapColorSet7B {\n  background-color: #ecfbfd;\n}\n\n.nepThemeLight .sapColorSet7C {\n  background-color: #e3fafc;\n}\n\n.nepThemeLight .sapColorSet7D {\n  background-color: #daf8fb;\n}\n\n.nepThemeLight .sapColorSet8A {\n  background-color: #fcfef5;\n}\n\n.nepThemeLight .sapColorSet8B {\n  background-color: #f9feec;\n}\n\n.nepThemeLight .sapColorSet8C {\n  background-color: #f6fde2;\n}\n\n.nepThemeLight .sapColorSet8D {\n  background-color: #f3fcd9;\n}\n\n.nepThemeLight .sapColorSet9A {\n  background-color: #ffffff;\n}\n\n.nepThemeLight .sapColorSet9B {\n  background-color: #fafafa;\n}\n\n.nepThemeLight .sapColorSet9C {\n  background-color: #f5f5f5;\n}\n\n.nepThemeLight .sapColorSet9D {\n  background-color: #f0f0f0;\n}\n\n.nepThemeLight .sapColorSet10A {\n  background-color: #ebebeb;\n}\n\n.nepThemeLight .sapColorSet10B {\n  background-color: #e6e6e6;\n}\n\n.nepThemeLight .sapColorSet10C {\n  background-color: #e0e0e0;\n}\n\n.nepThemeLight .sapColorSet10D {\n  background-color: #dbdbdb;\n}\n\n.nepThemeLight .sapColorSet11A {\n  background-color: #f5faff;\n}\n\n.nepThemeLight .sapColorSet11B {\n  background-color: #ebf5fe;\n}\n\n.nepThemeLight .sapColorSet11C {\n  background-color: #e2f0fe;\n}\n\n.nepThemeLight .sapColorSet11D {\n  background-color: #d8ebfd;\n}\n\n/* QUARTZ DARK CARD BACKGROUNDS */\n.nepThemeDark .sapColorSet1A {\n  background-color: #382700;\n}\n\n.nepThemeDark .sapColorSet1B {\n  background-color: #422e00;\n}\n\n.nepThemeDark .sapColorSet1C {\n  background-color: #4c3500;\n}\n\n.nepThemeDark .sapColorSet1D {\n  background-color: #563d00;\n}\n\n.nepThemeDark .sapColorSet2A {\n  background-color: #6d1c1c;\n}\n\n.nepThemeDark .sapColorSet2B {\n  background-color: #751e1e;\n}\n\n.nepThemeDark .sapColorSet2C {\n  background-color: #7d2020;\n}\n\n.nepThemeDark .sapColorSet2D {\n  background-color: #862222;\n}\n\n.nepThemeDark .sapColorSet3A {\n  background-color: #6a0a29;\n}\n\n.nepThemeDark .sapColorSet3B {\n  background-color: #730a2d;\n}\n\n.nepThemeDark .sapColorSet3C {\n  background-color: #7c0b31;\n}\n\n.nepThemeDark .sapColorSet3D {\n  background-color: #860c34;\n}\n\n.nepThemeDark .sapColorSet4A {\n  background-color: #400c35;\n}\n\n.nepThemeDark .sapColorSet4B {\n  background-color: #480e3c;\n}\n\n.nepThemeDark .sapColorSet4C {\n  background-color: #51104a;\n}\n\n.nepThemeDark .sapColorSet4D {\n  background-color: #59114a;\n}\n\n.nepThemeDark .sapColorSet5A {\n  background-color: #1c2d4c;\n}\n\n.nepThemeDark .sapColorSet5B {\n  background-color: #1e3253;\n}\n\n.nepThemeDark .sapColorSet5C {\n  background-color: #21365a;\n}\n\n.nepThemeDark .sapColorSet5D {\n  background-color: #243b62;\n}\n\n.nepThemeDark .sapColorSet6A {\n  background-color: #003952;\n}\n\n.nepThemeDark .sapColorSet6B {\n  background-color: #00405c;\n}\n\n.nepThemeDark .sapColorSet6C {\n  background-color: #004866;\n}\n\n.nepThemeDark .sapColorSet6D {\n  background-color: #004f70;\n}\n\n.nepThemeDark .sapColorSet7A {\n  background-color: #2a5e5e;\n}\n\n.nepThemeDark .sapColorSet7B {\n  background-color: #2d6565;\n}\n\n.nepThemeDark .sapColorSet7C {\n  background-color: #306c6c;\n}\n\n.nepThemeDark .sapColorSet7D {\n  background-color: #337373;\n}\n\n.nepThemeDark .sapColorSet8A {\n  background-color: #27410e;\n}\n\n.nepThemeDark .sapColorSet8B {\n  background-color: #2c4a10;\n}\n\n.nepThemeDark .sapColorSet8C {\n  background-color: #315212;\n}\n\n.nepThemeDark .sapColorSet8D {\n  background-color: #365a14;\n}\n\n.nepThemeDark .sapColorSet9A {\n  background-color: #30164c;\n}\n\n.nepThemeDark .sapColorSet9B {\n  background-color: #351853;\n}\n\n.nepThemeDark .sapColorSet9C {\n  background-color: #3a1b5b;\n}\n\n.nepThemeDark .sapColorSet9D {\n  background-color: #3f1d63;\n}\n\n.nepThemeDark .sapColorSet10A {\n  background-color: #323c44;\n}\n\n.nepThemeDark .sapColorSet10B {\n  background-color: #36424a;\n}\n\n.nepThemeDark .sapColorSet10C {\n  background-color: #3b4750;\n}\n\n.nepThemeDark .sapColorSet10D {\n  background-color: #3f4c56;\n}\n\n.nepThemeDark .sapColorSet11A {\n  background-color: #042037;\n}\n\n.nepThemeDark .sapColorSet11B {\n  background-color: #052540;\n}\n\n.nepThemeDark .sapColorSet11C {\n  background-color: #062b4a;\n}\n\n.nepThemeDark .sapColorSet11D {\n  background-color: #073053;\n}\n\n.nepCardDescription {\n  padding: 0 1rem 1rem 1rem;\n}\n\n.nepActionConfig {\n  margin-right: -10px;\n}\n\n.nepActionConfig .sapMBtnInner {\n  border: none;\n}\n\n.dragPlaceholder {\n  border: 2px dotted orange;\n  min-height: 200px;\n}\n\n.dragCursor {\n  cursor: pointer;\n}\n\n.nepToolNoBorder.sapMTBStandard {\n  border-bottom: none;\n}\n\n.nepToolNoBorder.sapMIBar.sapMTB .sapMBarChild:only-child {\n  padding-left: 0rem;\n  padding-right: 0rem;\n}\n\n.nepLayout .nepMainBar .sapMLIB {\n  background: transparent;\n}\n\n.nepLayout .nepMainBar .sapMIBar.sapMHeader-CTX {\n  background: transparent;\n}\n\n.nepMultiMenu.sapMDialog.sapUiPopupWithPadding:not(.sapUiNoContentPadding) .sapMDialogScrollCont {\n  padding: 0;\n}\n\n.nepMultiMenu:not(.nepMainBar) {\n  min-width: 300px;\n}\n\n.nepMultiMenu .sapMIBar.sapMSubHeader-CTX {\n  background-color: transparent;\n}\n\n.nepMultiMenu .sapMBar {\n  box-shadow: none;\n}\n\n.nepMultiMenu .sapMIBar.sapMTB .sapMBarChild:only-child {\n  padding-left: 0;\n}\n\n.nepMultiMenu .sapMTBStandard {\n  border-bottom: none;\n  padding: 0 0.5rem;\n  background-color: transparent !important;\n}\n\n.nepMainBar.sapMPage > .sapMPageHeader {\n  box-shadow: none;\n  border-bottom: none;\n}\n\n.nepMainBar.sapMPage.sapMPageWithSubHeader > .sapMPageSubHeader {\n  box-shadow: none;\n  border-bottom: none;\n}\n\n.nepCardHeaderSubTitle {\n  margin: 0.2rem 0 0 0;\n  font-size: 0.875rem;\n  font-weight: normal;\n}\n\n.nepCardHeaderStatus {\n  font-size: 0.75rem;\n}\n\n.nepThemeDark .nepCardHeaderStatus {\n  color: #d3d7d9;\n}\n\n.nepThemeLight .nepCardHeaderStatus {\n  color: #6a6d70;\n}\n\n.nepCardHeaderIcon {\n  margin-right: 20px;\n  line-height: 2.5rem;\n  -webkit-border-radius: 50%;\n}\n\n.nepICCard {\n  box-shadow: none !important;\n  background: transparent;\n}\n\n.nepScrollContent .nepDynamicPage .sapFDynamicPageContent {\n  overflow-x: scroll;\n}\n\n/* Fix page height when PWA header is visible */\n.pageShell > .sapMPageEnableScrolling {\n  height: auto !important;\n}\n\n/* Horizon Theme fixes */\n.sapUiTheme-sap_horizon .nepFCardTopImage {\n  border-top-left-radius: 1rem;\n  border-top-right-radius: 1rem;\n}\n\n.sapUiTheme-sap_horizon_dark .nepFCardTopImage {\n  border-top-left-radius: 1rem;\n  border-top-right-radius: 1rem;\n}\n\n/* Launchpad Customizations */\n.nepEditHomeContainer {\n  padding: 0.5rem 0.75rem;\n  pointer-events: none;\n}\n\n.nepEditHomeTitle {\n  margin-right: 1.5rem;\n}\n\nhtml[dir=rtl] .nepEditHomeTitle {\n  margin-right: 0;\n  margin-left: 1.5rem;\n}\n\n.nepEditHomeList .sapMListUl {\n  margin: 0.25rem;\n}\n\n.nepEditHomeListItemDivider.sapMLIB {\n  border-color: #a8b2bd;\n  border-width: 0.0625rem;\n}\n\n.nepEditHomeList .sapMListUl .nepEditHomeListItemTileRemove {\n  border-bottom-color: #a8b2bd;\n}\n\n.nepEditHomeListItemError .sapMTitle,\n.nepEditHomeListItemError .sapUiIcon {\n  color: #aa0808;\n}\n\n.nepResizable {\n  cursor: nwse-resize;\n  opacity: 0.2;\n  font-size: 24px;\n}\n\nhtml[dir=rtl] .nepResizable {\n  cursor: nesw-resize;\n}\n\n.nepResizable:hover {\n  opacity: 1;\n}\n\nbody.resizing {\n  cursor: nwse-resize;\n  user-select: none;\n}\n\nhtml[dir=rtl] body.resizing {\n  cursor: nesw-resize;\n}\n\n/* to take remove card item out of flex flow */\n.lp-is-customizable .nepBlockLayoutTileRow:not(.favorite-cards) .nepFCardContainer > .sapMFlexItem:first-of-type {\n  display: none;\n  position: absolute;\n  z-index: 99;\n  left: -0.75rem;\n  top: -0.75rem;\n}\n\n.jiggle.lp-is-customizable .nepBlockLayoutTileRow:not(.favorite-cards) .nepFCardContainer > .sapMFlexItem:first-of-type {\n  display: block;\n}\n\n.jiggle .nepFCard {\n  cursor: move;\n}\n\n.jiggle .nepResizable {\n  display: none;\n}\n\n.jiggle .nepFCardContainer > .sapMFlexItem:first-of-type {\n  display: block;\n}\n\n.nepDeleteCard .sapMBtnInner {\n  border-radius: 50%;\n}\n\n.nepNewCard {\n  display: none;\n}\n\n.jiggle .nepNewCard {\n  display: block;\n}\n\n.jiggle .nepBlockLayoutTileRow:not(.favorite-cards) .nepNewCard > .sapMFlexItem:first-of-type {\n  display: block;\n  position: relative;\n  z-index: auto;\n  left: auto;\n  top: auto;\n}\n\n.nepManagePages .sapUiIcon {\n  cursor: pointer;\n}\n\n.nepManagePages span[aria-label=trash-alt] {\n  color: #aa0808;\n}\n\n.nepManagePagesMessageStrip {\n  border: 0;\n  border-radius: 0;\n}\n\n#ManagePages-listUl > li {\n  cursor: grab;\n}\n\n#ManagePages-listUl .dragPlaceholder {\n  min-height: 52px;\n}\n\n#ManagePages-listUl .managePagesId {\n  display: none;\n}\n\n#ManagePages-listUl .icoSortManagePages {\n  cursor: grab;\n}\n\n#ManagePages-listUl li .sapMFlexItem:last-of-type {\n  margin-left: auto;\n}\n\n#diaAddTile ul {\n  min-height: 500px;\n}\n\n#diaAddTile ul li .sapMBtn {\n  padding: 0;\n  height: auto;\n}\n\n#diaAddTile .sapMIBar {\n  box-shadow: none;\n  border-bottom: 0;\n}\n\n#diaAddTile .diaAddTileToolbar {\n  z-index: 1;\n  position: sticky;\n  top: 0;\n}\n\n#fbHeaderAddTile {\n  margin-top: 0 !important;\n}\n\n#diaAddTile .addTileId {\n  display: none;\n}\n\n/* Jiggle */\n.jiggle .nepFCardContainer.nepNewCard {\n  animation: none !important;\n}\n\n.jiggle .nepFCard > * {\n  pointer-events: none;\n}\n\n.jiggle .nepFCardContainer:not(.nepFCardAction) {\n  animation-delay: -0.05s;\n  animation-duration: 0.27s;\n}\n\n.jiggle .nepFCardContainer:not(.nepFCardAction):nth-child(2n) {\n  animation-name: jiggle1;\n  animation-iteration-count: infinite;\n  transform-origin: 50% 10%;\n}\n\n.jiggle .nepFCardContainer:not(.nepFCardAction):nth-child(2n-1) {\n  animation-name: jiggle2;\n  animation-iteration-count: infinite;\n  animation-direction: alternate;\n  transform-origin: 30% 5%;\n}\n\n@keyframes jiggle1 {\n  0% {\n    transform: rotate(-0.5deg);\n    animation-timing-function: ease-in;\n  }\n  50% {\n    transform: rotate(0.5deg);\n    animation-timing-function: ease-out;\n  }\n}\n@keyframes jiggle2 {\n  0% {\n    transform: rotate(0.5deg);\n    animation-timing-function: ease-in;\n  }\n  50% {\n    transform: rotate(-0.5deg);\n    animation-timing-function: ease-out;\n  }\n}\n#diaPWAInstall .sapMTB.sapMTBStandard,\n#diaCookie .sapMTB.sapMTBStandard {\n  border-bottom: 0;\n}\n\n#pwaInstallAppLogo {\n  width: 48px;\n}\n\n#pwaInstallAppTitle {\n  font-size: 22px;\n}\n\n#diaPWAInstallFooter, #diaCookieFooter {\n  border-top: 1px solid #d3d7d9;\n}","header":"<script src=\"/public/neptune/aes.js\"></script>\n<script>\n\tlet _pwaInstall = false;\n    let _pwaUpdate = false;\n    let _pwadeferredPrompt = null;\n</script>","manifest":"","globalScript":"","deleted":false,"libHighchart":false,"libHighmap":false,"publicAccess":false,"ui5_bootstrap":false,"ui5_ionic":false,"useV2AppHandler":false,"compilerTarget":2,"tabWidth":null,"printWidth":null,"generateVersionOnActivation":false,"activationHistoryCount":0,"apis":[],"package":null,"customComponents":[]}],"Category":[{"id":"16c0fe0d-ff35-4b19-8550-cd76a75eb426","createdAt":"2024-03-13T11:27:25.000Z","updatedAt":"2024-03-13T11:27:25.000Z","createdBy":"admin","changedBy":"admin","translation":[{"language":"PT","title":"Applicações Climáticas"}],"configMessage":{"type":"None"},"title":"Weather Apps","subTitle":null,"description":null,"titleAlignment":null,"enableFullScreen":null,"hideHeader":null,"backgroundType":"cards","backgroundColor":"","backgroundShade":null,"type":null,"image":null,"icon":null,"sort":null,"inclFav":false,"styleClass":null,"enableScroll":false,"enableShadeCalc":false,"numTiles":null,"enableMessage":false,"ver":"24.03.13.1127","headColor":null,"headTxtClr":null,"subheadTxtClr":null,"headBorderClr":null,"headBorderWidth":null,"imageTablet":null,"imageMobile":null,"imageCover":false,"imageTabletCover":false,"imageMobileCover":false,"imageMobileHeight":null,"imageTabletHeight":null,"imageHeight":null,"name":"weatherGroup","cardContentWidth":null,"cardContentAlign":null,"cardPerRow":null,"cardStyle":null,"cardHeightFit":false,"imagePlacement":null,"imageRepeat":null,"imageSize":null,"imageTabletPlacement":null,"imageTabletRepeat":null,"imageTabletSize":null,"imageMobilePlacement":null,"imageMobileRepeat":null,"imageMobileSize":null,"hideFromMenu":false,"roleTag":null,"cockpitTileGroup":null,"package":"c3588c14-4083-4933-baab-7d3a0b4e4064","roles":[],"pad":[{"id":"b6eb065e-bf5a-49b3-a66f-c0218107fbf6","createdAt":"2024-03-13T11:28:16.000Z","updatedAt":"2024-03-13T12:10:28.000Z","createdBy":"admin","changedBy":"admin","extUserRoles":[],"extUserDepartments":[],"catOrder":["16c0fe0d-ff35-4b19-8550-cd76a75eb426"],"layout":[],"config":{"enhancement":"","languages":["EN","PT"]},"enhancement":[],"name":"weatherLaunchpad","title":"Weather Launchpad","description":null,"startApp":null,"startWebApp":null,"customLogo":null,"launchpadApp":"planet9_launchpad_standard","hideSidemenu":false,"ui5Version":"1.108","ui5Url":null,"ui5Theme":"sap_horizon","header":null,"customTheme":null,"isExternal":null,"emailPattern":null,"loginApp":null,"enableNotifications":false,"firebaseProjectId":null,"firebaseAppId":null,"defaultLoginIDP":null,"publicAccess":false,"css":null,"clientRequestTimeout":120,"limitWidth":false,"searchBackgroundType":null,"searchBackgroundColor":null,"searchBackgroundShade":null,"usedBackgroundType":null,"usedBackgroundColor":null,"usedBackgroundShade":null,"searchEnableShadeCalc":null,"usedEnableShadeCalc":null,"enableTrace":false,"ver":"24.03.13.1210","pwa_enable":true,"pwa_customImageIos":null,"pwa_customImageAndroidOld":null,"pwa_customImageAndroidNew":null,"pwa_displayMode":null,"pwa_themeColor":"rgb(255,255,255)","pwa_backgroundColor":"rgb(255,255,255)","passwordResetEmail":null,"activationCodeEmail":null,"package":"c3588c14-4083-4933-baab-7d3a0b4e4064"}],"tilegroups":[],"tiles":[{"id":"bd647f30-03cc-46f0-aaa7-fd2665f67749","createdAt":"2024-03-13T11:24:34.000Z","updatedAt":"2024-03-13T11:24:34.000Z","createdBy":"admin","changedBy":"admin","translation":[{"language":"PT","title":"Applicação Climática"}],"storeItem":{},"settings":null,"title":"Weather App","subTitle":null,"description":null,"categoryID":null,"sort":null,"urlApplication":null,"actionApplication":"weatherapp","actionParameters":null,"actionURL":null,"openDialog":false,"openWindow":false,"openFullscreen":false,"forceRow":false,"frameType":null,"type":null,"image":null,"icon":"sap-icon://cloud","backgroundType":null,"backgroundColor":null,"backgroundShade":null,"tileApplication":null,"hideHeaderL":null,"hideHeaderM":false,"hideHeaderS":false,"hideTileDesktop":false,"hideTileMobile":false,"hideTileTablet":false,"enableDocumentation":false,"navObject":"","navAction":"","dialogWidth":null,"dialogHeight":null,"tileApplicationStyleClass":null,"sidepanelApp":null,"sidepanelTitle":null,"tags":"","actiongroup":null,"styleClass":null,"titleAlignment":null,"titleLevel":null,"dataUrl":null,"dataInterval":null,"footer":null,"browserBlockWin":null,"browserBlockMac":null,"blackoutEnabled":false,"blackoutText":null,"blackoutDescription":null,"helpText":null,"helpEnabled":false,"openClickTile":false,"ver":"24.03.13.1124","actionWebApp":null,"name":"weatherApp","cardWidth":null,"cardHeight":null,"cardHeightFit":false,"cardImage":null,"cardButtonIcon":null,"cardButtonIconOnly":false,"imagePlacement":null,"imageRepeat":null,"imageSize":null,"imagePosition":null,"openText":null,"imageHeight":null,"bodyHeight":null,"roleTag":null,"sapICFNode":null,"actionType":"A","cockpitTile":null,"package":"c3588c14-4083-4933-baab-7d3a0b4e4064"}]}],"Dictionary":[{"id":"fb27873b-d7ab-4a72-9082-49f2a44b92a6","createdAt":"2024-03-11T23:56:52.000Z","updatedAt":"2024-03-13T11:16:07.000Z","createdBy":"admin","changedBy":"admin","fields":[{"id":"5f9e7b96-8f86-43d7-9244-406efdbe0268","fieldName":"city","fieldType":"text","isUnique":false},{"id":"caeb4c6a-9374-4ea9-b5bf-93a29b9148fa","fieldName":"country","fieldType":"text","isUnique":false},{"id":"7deb7681-74fc-41e8-f604-f3be284313fe","fieldName":"country_code","fieldType":"text","isUnique":false}],"indices":[],"foreignKeys":[],"name":"placesdata","description":null,"ver":"24.03.13.1116","enableAudit":false,"includeDataInPackage":false,"package":"c3588c14-4083-4933-baab-7d3a0b4e4064","rolesRead":[],"rolesWrite":[]}],"Launchpad":[{"id":"b6eb065e-bf5a-49b3-a66f-c0218107fbf6","createdAt":"2024-03-13T11:28:16.000Z","updatedAt":"2024-03-13T12:10:28.000Z","createdBy":"admin","changedBy":"admin","extUserRoles":[],"extUserDepartments":[],"layout":[],"config":{"enhancement":"","languages":["EN","PT"]},"enhancement":[],"name":"weatherLaunchpad","title":"Weather Launchpad","description":null,"startApp":null,"startWebApp":null,"customLogo":null,"launchpadApp":"planet9_launchpad_standard","hideSidemenu":false,"ui5Version":"1.108","ui5Url":null,"ui5Theme":"sap_horizon","header":null,"customTheme":null,"isExternal":null,"emailPattern":null,"loginApp":null,"enableNotifications":false,"firebaseProjectId":null,"firebaseAppId":null,"defaultLoginIDP":null,"publicAccess":false,"css":null,"clientRequestTimeout":120,"limitWidth":false,"searchBackgroundType":null,"searchBackgroundColor":null,"searchBackgroundShade":null,"usedBackgroundType":null,"usedBackgroundColor":null,"usedBackgroundShade":null,"searchEnableShadeCalc":null,"usedEnableShadeCalc":null,"enableTrace":false,"ver":"24.03.13.1210","pwa_enable":true,"pwa_customImageIos":null,"pwa_customImageAndroidOld":null,"pwa_customImageAndroidNew":null,"pwa_displayMode":null,"pwa_themeColor":"rgb(255,255,255)","pwa_backgroundColor":"rgb(255,255,255)","passwordResetEmail":null,"activationCodeEmail":null,"package":"c3588c14-4083-4933-baab-7d3a0b4e4064","cat":[{"id":"16c0fe0d-ff35-4b19-8550-cd76a75eb426","createdAt":"2024-03-13T11:27:25.000Z","updatedAt":"2024-03-13T11:27:25.000Z","createdBy":"admin","changedBy":"admin","translation":[{"language":"PT","title":"Applicações Climáticas"}],"tilesOrder":["bd647f30-03cc-46f0-aaa7-fd2665f67749"],"tilegroupsOrder":[],"configMessage":{"type":"None"},"title":"Weather Apps","subTitle":null,"description":null,"titleAlignment":null,"enableFullScreen":null,"hideHeader":null,"backgroundType":"cards","backgroundColor":"","backgroundShade":null,"type":null,"image":null,"icon":null,"sort":null,"inclFav":false,"styleClass":null,"enableScroll":false,"enableShadeCalc":false,"numTiles":null,"enableMessage":false,"ver":"24.03.13.1127","headColor":null,"headTxtClr":null,"subheadTxtClr":null,"headBorderClr":null,"headBorderWidth":null,"imageTablet":null,"imageMobile":null,"imageCover":false,"imageTabletCover":false,"imageMobileCover":false,"imageMobileHeight":null,"imageTabletHeight":null,"imageHeight":null,"name":"weatherGroup","cardContentWidth":null,"cardContentAlign":null,"cardPerRow":null,"cardStyle":null,"cardHeightFit":false,"imagePlacement":null,"imageRepeat":null,"imageSize":null,"imageTabletPlacement":null,"imageTabletRepeat":null,"imageTabletSize":null,"imageMobilePlacement":null,"imageMobileRepeat":null,"imageMobileSize":null,"hideFromMenu":false,"roleTag":null,"cockpitTileGroup":null,"package":"c3588c14-4083-4933-baab-7d3a0b4e4064"}]}],"Media":[{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADe0lEQVR4nO3cWahNURzH8a8picg1hqLEC4UMGe6DKfMDhaQkojwpRZQHxZs3PChSui+elGSWkHnMTB5MV0mUISQUrSy6xO24Z6//f+38PnW6t+5t/9Y5v3P2uPZBRERERERERERERERERERERERERMRMM6ugl8tnFLWoGqAWGAoMBHoAHePfmgNvgBfATeA6cAZ4XERw5837ilhMo1omTyhGf2AiMB6YArStYKlTG/x+Agiv5mngQs5PNPdC+gDrgQVVLmdsfATHgbXAuQLGV7jmOQ4K6ALUAQ8KKON344CzwDFgeMHLrlqOhcwD7sQiUm7jwurvIrAqYcY/y62QbcCusP00zNwInMpl9Z1TIYeApU7ZtfFT2dsp/6ccCmkZN7STncfRL67CXEvJoZDDDfaAvHUFznuuvrwL2R43rjnpDlwCWnmMybOQWcASx/zGDAY2eAR7FdIe2OmUXanVHqtSr0K2x1JyZ/6m8SikEzDXIbcpwh7XdMtAj0K2OmRWYwfQwirMupDwjptjnFmtbsAkqzDrQqZW8D85mmY1JutCphjnFWW+1cGiZSHtrDeQBaqJp+2TsyxkbImuUP6JyafbspCRhlkpDLEIsSxkgGFWCl0sQiwL6WmYlUIlEyuqZllIB8OsFFpbhFgW8tUwq7QsC8l1hktWLF+k9yV4PRrzxSLEspBnhlkpvLMIsSzknmFWCq8tQiwLuWyYlcIdixDLQo4ZZqVw1CLEspDncfZ5GX2KE/mSs94V3VvSQnYDby2CrAsx+dgnsN8qyLqQa3G6Zpl8Bg5Yjdfj6HmxQ2Y1wu0Kr6zCPAq5XaJd4A/AJstAr/NLi5xy/9Vy60CvQm4Ba5yyK7Unzsky5XkGdmO81y9H4dbqZR7j8iwkXB8ZA9Q7juFvRsUDWXM5XKMYHb5XIINx/BDu5LrrFZ5DIU+BEcCjDMYS5o0d8RxALlfxHsZZKVed8sNxxiDLA8C/yemyatjnHxm/ucFSXbxj6obv0/8ut+vc4TTFujhL8ErirPp4nLEQeJI4q2K5TjwId+YOA2YD9wtedjhruxLoC2wpeNlVy32u7e74mAlMiD97NWE57+KBXthgH8xsr+4XZZn8vCc+VjT4mqYhcXpnmFXfJv5f+G6Uj3F79DJedj0Zr1ZmW4KIiIiIiIiIiIiIiIiIiIiIiIjI/wH4BqdEdDZEJK4oAAAAAElFTkSuQmCC","createdAt":"2024-03-13T11:59:38.000Z","filename":"01d.png","filesize":948,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"},{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADeElEQVR4nO3cWYiOURzH8a8tichYQ1HihkKWbBe2GNxQlEQiypVSRLlQ3LmTC2UpceFKSZZBQvY1O7mwl0RZQkLRyaEhxjve5/z/58nvU2+jTM/vzPzmfbZznhcRERERERERERERERERERERERERETNNrIJqa6cUtakaYDQwGOgPdAPax/9rCrwGngPXgavAKeBhEcF1dfuL2EyDmidPKEZfYAIwLnQLtK5gq5Pr/fsYsBc4CZzL+QfNvZBewBpgbpXbGRNfwVFgFXCmgPEVrmmOgwI6ATuAewWU8auxwGngCDC04G1XLcdCZgG3gDmJj3Fh93ceWJ4wo9FyK2QTsBPoaJi5DjiRy+47p0LqgEVO2aPju7KnU/4PORTSPB5oJzmPo0/chbmWkkMhB+udAXnrDJz13H15F7I5Hlxz0hW4ALTwGJNnIdOBhY75DRkIrPUI9iqkLbDNKbtSKzx2pV6FbIml5M78j8ajkA7ATIfcfxHOuKZaBnoUstEhsxpbgWZWYdaF9CzRu+O7LsBEqzDrQiZX8D05Kmwy52+sC6k1zivKbKuLRctC2lgfIAtUE2/bJ2dZyJgSzVD+jsm727KQ4YZZKQyyCLEspJ9hVgqdLEIsC+lumJVCJQsrqmZZSDvDrBRaWoRYFvLFMKu0LAvJdYVLVix/Se9K8PtoyGeLEMtCnhpmpfDWIsSykDuGWSm8sgixLOSiYVYKtyxCLAs5YpiVwmGLEMtCnsXV52X0MS7kS876VHRPSQvZBbyxCLIuxORtn8A+qyDrQq7E5Zpl8glI/+hU5HH1vMAhsxrhcYWXVmEehdws0Snwe2C9ZaDX/aX5TrmNtcQ60KuQG8BKp+xK7Y5rskx53oFdF5/1y1F4tHqxx7g8CwnzI6OAx45j+JMR8ULWXA5zFCOBFxmM47vwJNdtr/AcCnkCDAMeZDCWsG7skOcAcpnFux9XpVx2yg/XGQMsLwD/JKdp1XDOPzx+coOl7fGJqWu+P/43uc1zh9sUq+MqwUuJsx7H64x5wKPEWRXLdeFBeDJ3CDADuFvwtsNd22VAb2BDwduuWu5rbXfF1zRgfPza4x+28zZe6IUD9oHMzup+UpbFz7vja2m9j2kaFJd3hlX1reL3hc9G+RCPRy/itOvxOFuZbQkiIiIiIiIiIiIiIiIiIiIiIiIi/wfgKw42dDZq2n0SAAAAAElFTkSuQmCC","createdAt":"2024-03-13T11:59:38.000Z","filename":"01n.png","filesize":945,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"},{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAGI0lEQVR4nO2be4hUVRzHP/femd3ZdR+ma7m+3QwfVD4qIjOtSCoK0worIygrKIoyECL/yaggMYxEqBRKIikrCMssVEqL0CyhB9o/6Ua6K8u6q/venb0zN86dM+VjH87MufPYfh8Ydpm593d+937v+f3O79xzEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEM7HMnVPWltbcnZ7rfIK3G2bcbesw6qeONjh04GFwFxgKlANlAI9QD1wBPgB2A38moofVeu3Z3QdilDGFgqDcuBBYDFwaz8eq2OqgCuBJfq774GtwMdAYzau1C6gm5ouD+mn/q0BxOiPG4AN+vynsuHsUBZEPe2fAu8DozK0Va6F+RqoMeRfnwxVQSYBB4B7DNtVPexnHdYCId9ziAPMA+YAo7W/J4HfgH1A879Hui54cfWfyup/AJGAfLoI+AWYCfxu2ni+CjIDeFw/4eP7OaZNh6SNwH6KI2DbKkx9E6AYSSw9EpumR2bGyMeQ9R5wCFgxgBjouP6I7ik7rTGTRuG6bxCP1WAZG80PhGr/S9NG80kQlSxVfH441RO9aM9CZ+rMo/Z1ty3z6mqD8a5vZgErTRrMF0GqtBhXpXV2VxcMKy8rWrnOtq+5Ga++FhzHuJP9sBYYa8pYvghyUCfL9LBtvJbT/qnhFWuxRk/Eazzhf58lHjPVTD4I8iIwIWMrvigtWCWlhJevgt4e6I0acfACGDKCqFHKamPWbAuvswN71lychUvxGuvJUoIfB9xuwlCuBXnSuEW31/9jz5yXECNRm5yBZ7xJzX0mjOS6DrneuEXLhriHXTMDa9yl0HYabAfv9EmIuYm8Eo+BE8YaPhIipRA/V7S0MFK951KQal2BG8fr6sQaUYU95QrcrRuwplyOs2AR1vgpWKEwXjyG9/efxA7uhfq/sC4eB06oj96UEpUmriOXgswy+T7mLFQPUJSUYc+eR/iZNdiTpp53mHP8KLFt7xL79jOsEZdAWWWiF6VHqQnXc/mCSo1MNplq/zwcB6+pAWvUGKxIBK+9PSGUn1c8P4xZZWX+WbE9n+NuXgPFxb6I/u+p01y1fvvITN3OZVIPdvjT24s1ZrKfK/waRYWj5IhLJ3v1vdcTJXTjIpy7lidql/QxkohyKciuQK2r5N3ZBt0d/ReI6vueLuLRXkJLHsWeMx/v5Il0h8qdGXrsk80cMlvXHSN0u5X6qcrt0Fvd/K4OKBru1y7xQz/p0JayW+0m3MmGIPcCzwNX9/FbYEVBSugeZI2tSSR3VeEXpTyDb2QaPkhB1Lh8PbBggGOyUkZfEOrRCBdBpATaTqVj4QsTbgQliFocsDevbviFoMJX+lMtW0y4EIQgqmd8F4DdYFE6nGrEqz3sV/p+TwkXY5WWQWTYYEXjh0CTCf9MCzJMLzArPFRBGI/j3HQ3VuVIvM42PCXQ8SP++xVVz/h5JVl0ns1GU9drWpBnDSy5yQleRzvWhMsIP/3qf83HPbyGY7g7PiC26xO/1/hJ/+xqXkWDPaZ8NlmpFwF1+u1fYZLMIX6lbvnzW1ZJYrQV+3E37qaX1etirKrqpChq+elkwK8oTSwlNVkDPFDQYiiUEGrmV/1VOcON4rW2+O9YQtfeQnjVO4mRWGtzMvk/kRTDFCYFWWzSsbxB3fiYS7ytDadmGuFlzxGvq8VrbljhtTRt9lqaSH5MYDKHTC/k+z4wibmveDSKPf9OQocPvB2vq33TKjt3xn2fiZbM0Nra0ljwIWswVDhTw+FQ0Ut0d6xWM8ZnUlGa+Qy8yZDVY9BWfuJPRnZDtGepqlF8Qc78GMBkyGowuT4pb1E5xY1W4vrRxfhcnMkeknkALRycoGapTRr9wKCtfEeF5z5L9kwxKch+vSfj/0Bg29tMdztzi97ym4+C8s60IF/pTZJDGdU7Xg/q+oJITPcP8QSf8naJVAjqfbbaA74jINu55IWgryvIBQZ36On4YwG2kS2O6+3VrwXdXjYWykX0fsEleouaWnUSNtVugLTqhQs7gVeA7sGaqqgwsppUEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEIRcA/wDoOOQV9MnNu8AAAAASUVORK5CYII=","createdAt":"2024-03-13T11:59:38.000Z","filename":"02d.png","filesize":1628,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"},{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAGSUlEQVR4nO2bf2xTVRTHP2tHt7UbVRjh11QYCENxEPWvyYA/ADVENzKjoBIkskRJjERJjMYgRIkmYICo0TABAxpAJYYYcZlGjMbAABN/REwIdATcgA2HMLqt7UrNeXvVyY8ttPe13TyfZHnd63vnnne/vffcc+99KIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKFeSZapOLlw4n7bqLSgYzObNW1iz5k3GjLmlr8snAbOBMmAiMBLwAiGgCTgG/AB8Dfx8PX7U1u5J6jmE7KQt9A8KgMeASuDea3gs1xQCpcA8+9z3wE7gY6AlFU/q6keVmiiP27/6d3sR41qUA2/b9y9NhbMDWRD5tX8KbAOGJWlLWs870isBxYb8uyoDVZAxwAGgyrBdaWEH7W7NETI9hriBacCdwAjb37PAL8A+oDV+YSQS4dKlS/JRovrvQK5DPg0BfgKmAL+aNp6pgtwGVNu/8JuucU2b3SVtBPbn5eXhcrmkm/rGQTHiZNkjsRJ7ZGaMTOyytgC/Act6EQO7X19st5S6ceOKh0UiXeui0WhxVpax0XxvSPlfmDaaSYJIsDwEPHG9N4bDodmlpaWBuXPvezQQCFjnUqMJU4HnTRrMFEEKbTHuSuTmjo4OCgoK8jdsWO+aNWsWgUADLpfbvJdXZy0w2pSxTBHkR+DGRG92uVycP/+X9XndurVWtt7UdMo6nyKeNFVMJgjyCnBzskak8mX6Ji/Py4oVLxMKdRIOR8x42DfVpgylWxAZpaw0ZUyCeXt7O2VlZSxYMJ/GxkZSFOCLgPtNGEq3IE+bNhiJhK1jefk0XK6seG7yD7FYzHSRcR4xYSTdecg9pg1K1yWVPnny7YwfP45z587hdmfT0nKWrq6I9b2IlJ09iMLCoXi93itESxAj2Xs6BRlpZ+DG6ehoZ+jQQkpL72D9+resY2Xlg0yYcCuDBg0iGo1y5MhR9u7dy/HjxykqKiI7OztZYfwmniOdgkwxuR7TE6lwwecrYPr0ctauXUNJycQrrlu0aCE1Ne+za9dnjBgxHL/fT1dXV6LFek34ns4FqiVAjanyL8ftdnP69BmKikbh8eQSDF60hJIgL12afO/z5Vt37d69m9WrXyc3N5f8/PxE40xrbe2eocn6nc6g7ujwRyYbi4vHWrFCchTpjuIjLjnK/3JeBgEVFRVUVy+hqSmpaSkjgSidgnzlpHEJ3m1tbQSDwWsmiHJesnwRTwSZOXOGlVAmOFRuT9ZnUhxDptrr2UPsciUIxpxuKX3RnbsE8ftvsHKX+vqDVteWQJZ/0YQ/qRDkIeAF4O4UlJUQ8cqXLk6CezgctuLJdWJkGt7JLkvG5d8Cn2SyGD3JyclB1lUSHGl9bsIHp1pIuS1Gv1oilu6rexSW0O0fmfDBCUGkZXzngF3HaW5u4fDhw0SjMXy+PDwej0zr4/X6iMV6HURtB/404Z9pQXz2BrN+RzTaZQXzqqoqa0pFRmjNzc0cPXqMhoYGRo8eZcWVeNJ5GRtNPa/pxPAlYLUpm6lEWoDMecWTxW5inDhxkq1bt7Fjx05r3mv48OGXxxjpDWZgaOeiSUE8QKO9+tcv+TeGxKyjzG/l5HSPturq6li16lU6O0OMGjUyLopsPx0LnMKQICaD7oL+LAb21Lxk8PGjDH+l5UueMmfOHDZtqiEnx0Nra2s8eXwqLoYpTMaQSpOOZQpS8RJfLl5so6SkhOXLn2Pp0mckpixzudwfmHbTpCCTDNrKMLrnvmSKpaLiAerrD7wXCDRs8PsH/8fNQ4fqk3bbZAxp6e9dVl+IKJI4ejyeVcFgcKXMGPdE1vOTxWQMCZmugExDplg6OzsJhUIPS1YvgvT8M4HJLuuMyf1JmYrElHA47Ld7F+ML9CZbyD6DtjIdt1PTQiaNfmjQVqYj3fNVU/ZkMSnIfvudjP8DZ516RtPNztimtwxnu1PumRbkS/slyYFMi73B2hGcCEzzB3iAX+ykcacWkOQd8ORn2jKPF514SacnTq7ozQWeBU46WEaq+ANYCLzhdHmp2CiXa2/Xn2e/oibvgXhMlesgF+yNC3XAa0BnX0UNHmxkN6miKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKOkG+Bv7LcNXBtvwtwAAAABJRU5ErkJggg==","createdAt":"2024-03-13T11:59:38.000Z","filename":"02n.png","filesize":1666,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"},{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADDElEQVR4nO3bT4hNYRjH8e8YIqPLICSR/NtoShQKK5qJbOxIig3Z+FuUWCglTFiIBSn/diwoGxY0SGOnxAIloUgyG8bI6K136qo73TO35znnPeP3qdnMnfu8zzm/O+e85z3nIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIqXW5NF8T89365ITgE3AamAu0AL0AR+BZ8B14Ln1oFlUKuNN66UeyFLgELAWaK7zty+A08Alq8Gz+J8COQAcb+B9T4H20IZFE/VYBzLCo0kDtxsMI1gGhE/E4qS2KKMUA7kJrDeocw+Yb1AnV6kFshPYYFSrFbhhVCs3KQXSBpwzrhkOW3uNa7pKKZAwrfVwBJhc7KZll0ogYUq70al2mAZ1ONU2l0og64CZjvWX1Phdc4qTmlQaWu5cf2AKvAi4AnTHq/z3wEPgAjDHuYdMRqbQBDDbuX4FOAwcrfHadGAVsB3YHJdhCpNKIOOc67fFn3quxQnAWed+BpXKIetrAj0MOAOsLGrwIgOZVHXc/lZgH7VsK2rgvBcXw7L5LmALMC9+IPqBX8Boj14a9BOYBXyu9/ayLi6OBU7GQ9MxYEHV2E2JhRGMGWSq7C6Pk3q4uXS/hKuvLUUM6h1ICOMVMNV5HA/vihjUM5BwJdxV0jA+xFvE4d5KL/AynlfceQayB1iYx0Y4mAg8iecS4t3HW8BF4LHnwF6zrFHAW2CGR/2CXa6eFpdllrV1mIZB3LYur33nFUi7U91UrABOePTiFUghc/ic7YsnfVNegbSmuAcd7LcumepjQGWRZQV5SLwC+VKq3dq4KdYFvQLpdqqbGvP95xXIXae6qemz7scrkKvAG6faKflk3YvnSb3TsXYqHln34RnIeeCBY/2i/QZOWffgPe3tKGoZOwcHgdfWw3gH0hvvDg63/5ROr0NyHheGIZQ18bko8++65ewHsNvjCn1A3g85hJtWO+KD1dOq7jf0e/RhIHxg/8SnYu7ELxH9880s6+V3ERERERERERERERERERERERERERERERGRoQD+AsqjaPphCrlmAAAAAElFTkSuQmCC","createdAt":"2024-03-13T11:59:38.000Z","filename":"03d.png","filesize":837,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"},{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADDElEQVR4nO3bT4hNYRjH8e8YIqPLICSR/NtoShQKK5qJbOxIig3Z+FuUWCglTFiIBSn/diwoGxY0SGOnxAIloUgyG8bI6K136qo73TO35znnPeP3qdnMnfu8zzm/O+e85z3nIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIqXW5NF8T89365ITgE3AamAu0AL0AR+BZ8B14Ln1oFlUKuNN66UeyFLgELAWaK7zty+A08Alq8Gz+J8COQAcb+B9T4H20IZFE/VYBzLCo0kDtxsMI1gGhE/E4qS2KKMUA7kJrDeocw+Yb1AnV6kFshPYYFSrFbhhVCs3KQXSBpwzrhkOW3uNa7pKKZAwrfVwBJhc7KZll0ogYUq70al2mAZ1ONU2l0og64CZjvWX1Phdc4qTmlQaWu5cf2AKvAi4AnTHq/z3wEPgAjDHuYdMRqbQBDDbuX4FOAwcrfHadGAVsB3YHJdhCpNKIOOc67fFn3quxQnAWed+BpXKIetrAj0MOAOsLGrwIgOZVHXc/lZgH7VsK2rgvBcXw7L5LmALMC9+IPqBX8Boj14a9BOYBXyu9/ayLi6OBU7GQ9MxYEHV2E2JhRGMGWSq7C6Pk3q4uXS/hKuvLUUM6h1ICOMVMNV5HA/vihjUM5BwJdxV0jA+xFvE4d5KL/AynlfceQayB1iYx0Y4mAg8iecS4t3HW8BF4LHnwF6zrFHAW2CGR/2CXa6eFpdllrV1mIZB3LYur33nFUi7U91UrABOePTiFUghc/ic7YsnfVNegbSmuAcd7LcumepjQGWRZQV5SLwC+VKq3dq4KdYFvQLpdqqbGvP95xXIXae6qemz7scrkKvAG6faKflk3YvnSb3TsXYqHln34RnIeeCBY/2i/QZOWffgPe3tKGoZOwcHgdfWw3gH0hvvDg63/5ROr0NyHheGIZQ18bko8++65ewHsNvjCn1A3g85hJtWO+KD1dOq7jf0e/RhIHxg/8SnYu7ELxH9880s6+V3ERERERERERERERERERERERERERERERGRoQD+AsqjaPphCrlmAAAAAElFTkSuQmCC","createdAt":"2024-03-13T11:59:38.000Z","filename":"03n.png","filesize":837,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"},{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAHFElEQVR4nO2bf2xTVRTHv223sa5dB2w4B7oJcTDRiGAAIUaDCgZ/bMQwBhEJYRmMgGIIf8CQgEZDJC5TwUQNTkP4CyVBomQSwzJAMUEYKiPI3A8U2Q/G3Nb1x7q2M+dyu8zRYdd3u74u55M0/fnOu+9+37n3nHNvwTAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMw9yOQWufdHV1jli3Jicno7W1FcXFG8QzvQ/CYwCKAMwGkC6/bgZwFsBnAM5Eup0VFcfCPjZOaUuiy0sA3gGQE6QVdwF4GEAhgEsAtgE4qseLMOqgDSr4EMDhIcQYzHQAXwPYrccLiTEPMcDn86G3txcGQ/+99C2A58IwthXAZADL1bZRGzHlIX6/D2azGYmJifB6e+mj7WGKEaAAwE6ljdRITAnicrkwduw4TJkyGe3t7Y8ajca3FZjdBeB+BXaUoEdBTACWAigH8COA8/JR4fP53gTw0JIleXC53AUdHR0wmUwqzlmswogK9BT2ZgMokdGSbagfxcXFwWxOOl5e/nl2Wdn7k0mQSZMmoa+vTzzCpAnAfQA8Ki5ES9irF0FeBnAgFI+lTidRkpIsuHjxIrZuLUFjYyOysrLg9/u1tOEJAKcAzJWvMwFcB3BS5i4hG491QfYB2DCcA/r6/DCZ4mCxWIUIRUVrUVlZhenTHxBRWJhQ6DwFwAtBDv8HwAIAv4RiWosg0Z5DyoYrBkEhLwlBN4PRaMRHH+3DnDmzhaeQ94TJa0OIQYwDUA1gocbr/V+iKcgyAK9rMWAwGNDZ2SHC4LKyUmRk3I2bN9vF5xGAjH6qYlS5E9ESJBXAfhWGyEPIUzIyMrBixXI0NTVFShDIiX91pIwjioKsoFqhKmMBAfLzl2LmzEfQ1tamynQwno+k8WgJsk61QfKS5GQbcnNfhN1u7/+cJnm32y0eGib8gWSqMDIU0ahlzaPkTrXRgJfMmjUTaWlpaG5uhtPpgs1mQ0qKTXxPiWRXlx1WqwXp6enh5i5Nqts+kGgI8ngkjdMaSXNziwiBV616RUz048ePF4K0t7eLOebIkaM4ffoHZGbeC4vFMlzPcQJ4RnoKVRIuq2x/NARJD+E3YeHzeUWOUlRUiDVrViM1NS2omdzcXJSWluLQoa/EeypYDsNTCgZViM/KkPknFdcQjcSQErBXtZ43GNSpFHVZrcmiGuxwOMT7gZBgSUlWka8cPHgQO3bswrRpU1VEZp8EamKxlhi6Imf6Vqc6nd1wOp23iQGZVDqdDlHKX7lyJQoK8nHt2t9BfztM1skVS02MlCBWAPfI195InYRucvISn89/xzuevgtEYuvXFyM9fQIcDqeKJpTINf2wiaQgJrnZgMbWVgB/STE208gRwfOGBHmE2+0SRcmcnBx0dXWpMl2i5eBITeq75RLpYEzyoQsoCCAoy/d4lFTeoTWkVy3IOLmbI6KhrSoCgRWFvjTZKyJVixmVgpCtn2UJOyYITOT19Q1oaWkV4S+ts1gsZjH5h7ngpUlZlYJ8H0tiQK4+OhzdMJsTsXjxs8JTKOJqaGgUHkMrkWPGjBlu4tiqqU1aDh4ATd5PKrI1YtC8QVuKtm/fhpSUFNHxN27cwLlz50UmX1HxHeLj40WZxesNOTg8r6X9qhLD3yJRn4o0gUSSvIA8goap+PiE/rNWVp5ASckb8Hh6MXHixFBFmVFRcezXcJuuIuwtiEUxIPMREoUqwT09HvFst3eJm8zlcmLBgqdw4MAXSEhIEDWwEFYjqYQSthhQJIiWjWq6hISioay7247s7KkoLX1PiNHd3X2n5lL+sVfr9agQZIYCG7qDRKF1e5r058+fh0WLFnpqai55aYgbVAU4JUcIJXuFVUzqWQps6BLq+ECEtWXL5uqrV//Mq6qqSsvJmZZAu178fj9tE2pR2XYVHjJadtAHJbCRwmZLebC8fH/vsmX5NXV1DdVut7vaaDQqFQOKOrNRgQ1dQ8NUZ2eH1WQyzd2z511s3LgetbV/iAKloq2s/agQ5IKitugaKYqN6l+bNm3C3r0foK3tJlpaWrTsBbsNFYJ8o/veVITRaLRTpOXx9CAvj1Yd94gcpb6+vj+n0YqqxLBG/jNpNOOVAcx16nwaqmgr65Urtdi5cxeqqy+IxJEy+8uXa8LuBlWCrJVLmKOZL+VuS8EtjzDAarWJdZUTJypRV1cv6mGFhWuiLghkcfHpUSzIUvk/xv9AJRfyFAqDA2hZn1cpCBWBfpfbLUcbh6UgIWGzpYR9+SpzCI/8F+xJhTb1wPHhiKEV1Uldj9xE9hYAh556NUw+HulaXST3ZSXI6idVgyfQSqk8X9Q3OAwB3Zw+eSOdkf/OrQ3HkJYhi2EYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYHQDgX9lKVZgWrU3rAAAAAElFTkSuQmCC","createdAt":"2024-03-13T11:59:38.000Z","filename":"04d.png","filesize":1869,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"},{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAHFElEQVR4nO2bf2xTVRTHv223sa5dB2w4B7oJcTDRiGAAIUaDCgZ/bMQwBhEJYRmMgGIIf8CQgEZDJC5TwUQNTkP4CyVBomQSwzJAMUEYKiPI3A8U2Q/G3Nb1x7q2M+dyu8zRYdd3u74u55M0/fnOu+9+37n3nHNvwTAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMw9yOQWufdHV1jli3Jicno7W1FcXFG8QzvQ/CYwCKAMwGkC6/bgZwFsBnAM5Eup0VFcfCPjZOaUuiy0sA3gGQE6QVdwF4GEAhgEsAtgE4qseLMOqgDSr4EMDhIcQYzHQAXwPYrccLiTEPMcDn86G3txcGQ/+99C2A58IwthXAZADL1bZRGzHlIX6/D2azGYmJifB6e+mj7WGKEaAAwE6ljdRITAnicrkwduw4TJkyGe3t7Y8ajca3FZjdBeB+BXaUoEdBTACWAigH8COA8/JR4fP53gTw0JIleXC53AUdHR0wmUwqzlmswogK9BT2ZgMokdGSbagfxcXFwWxOOl5e/nl2Wdn7k0mQSZMmoa+vTzzCpAnAfQA8Ki5ES9irF0FeBnAgFI+lTidRkpIsuHjxIrZuLUFjYyOysrLg9/u1tOEJAKcAzJWvMwFcB3BS5i4hG491QfYB2DCcA/r6/DCZ4mCxWIUIRUVrUVlZhenTHxBRWJhQ6DwFwAtBDv8HwAIAv4RiWosg0Z5DyoYrBkEhLwlBN4PRaMRHH+3DnDmzhaeQ94TJa0OIQYwDUA1gocbr/V+iKcgyAK9rMWAwGNDZ2SHC4LKyUmRk3I2bN9vF5xGAjH6qYlS5E9ESJBXAfhWGyEPIUzIyMrBixXI0NTVFShDIiX91pIwjioKsoFqhKmMBAfLzl2LmzEfQ1tamynQwno+k8WgJsk61QfKS5GQbcnNfhN1u7/+cJnm32y0eGib8gWSqMDIU0ahlzaPkTrXRgJfMmjUTaWlpaG5uhtPpgs1mQ0qKTXxPiWRXlx1WqwXp6enh5i5Nqts+kGgI8ngkjdMaSXNziwiBV616RUz048ePF4K0t7eLOebIkaM4ffoHZGbeC4vFMlzPcQJ4RnoKVRIuq2x/NARJD+E3YeHzeUWOUlRUiDVrViM1NS2omdzcXJSWluLQoa/EeypYDsNTCgZViM/KkPknFdcQjcSQErBXtZ43GNSpFHVZrcmiGuxwOMT7gZBgSUlWka8cPHgQO3bswrRpU1VEZp8EamKxlhi6Imf6Vqc6nd1wOp23iQGZVDqdDlHKX7lyJQoK8nHt2t9BfztM1skVS02MlCBWAPfI195InYRucvISn89/xzuevgtEYuvXFyM9fQIcDqeKJpTINf2wiaQgJrnZgMbWVgB/STE208gRwfOGBHmE2+0SRcmcnBx0dXWpMl2i5eBITeq75RLpYEzyoQsoCCAoy/d4lFTeoTWkVy3IOLmbI6KhrSoCgRWFvjTZKyJVixmVgpCtn2UJOyYITOT19Q1oaWkV4S+ts1gsZjH5h7ngpUlZlYJ8H0tiQK4+OhzdMJsTsXjxs8JTKOJqaGgUHkMrkWPGjBlu4tiqqU1aDh4ATd5PKrI1YtC8QVuKtm/fhpSUFNHxN27cwLlz50UmX1HxHeLj40WZxesNOTg8r6X9qhLD3yJRn4o0gUSSvIA8goap+PiE/rNWVp5ASckb8Hh6MXHixFBFmVFRcezXcJuuIuwtiEUxIPMREoUqwT09HvFst3eJm8zlcmLBgqdw4MAXSEhIEDWwEFYjqYQSthhQJIiWjWq6hISioay7247s7KkoLX1PiNHd3X2n5lL+sVfr9agQZIYCG7qDRKF1e5r058+fh0WLFnpqai55aYgbVAU4JUcIJXuFVUzqWQps6BLq+ECEtWXL5uqrV//Mq6qqSsvJmZZAu178fj9tE2pR2XYVHjJadtAHJbCRwmZLebC8fH/vsmX5NXV1DdVut7vaaDQqFQOKOrNRgQ1dQ8NUZ2eH1WQyzd2z511s3LgetbV/iAKloq2s/agQ5IKitugaKYqN6l+bNm3C3r0foK3tJlpaWrTsBbsNFYJ8o/veVITRaLRTpOXx9CAvj1Yd94gcpb6+vj+n0YqqxLBG/jNpNOOVAcx16nwaqmgr65Urtdi5cxeqqy+IxJEy+8uXa8LuBlWCrJVLmKOZL+VuS8EtjzDAarWJdZUTJypRV1cv6mGFhWuiLghkcfHpUSzIUvk/xv9AJRfyFAqDA2hZn1cpCBWBfpfbLUcbh6UgIWGzpYR9+SpzCI/8F+xJhTb1wPHhiKEV1Uldj9xE9hYAh556NUw+HulaXST3ZSXI6idVgyfQSqk8X9Q3OAwB3Zw+eSOdkf/OrQ3HkJYhi2EYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYHQDgX9lKVZgWrU3rAAAAAElFTkSuQmCC","createdAt":"2024-03-13T11:59:38.000Z","filename":"04n.png","filesize":1869,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"},{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAKUElEQVR4nO2ce1BU1x3HvxeW1y4gUF4CRrCZUBCF0YqpMYmhD9PaxCYNMG3aaX1H46TpmGqaiWaitrbYOtNM1LSNaUR8zVRN8gchHW0QxZFOq0aBtgFUnhqqvJbXwi638zucpet2kb27e5Zr5nxmduZyl3vuued7z/n9zu/8zkIikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJJLPM4qoZ+vp6RZSbkREJM6dO4cXX9yAqKgpCAwMdPx6KYDvAVgAIAqADUAtgBMAdgMY8FU9yspKfVXUHQQIKdX/zANwHMB7AAoBTCPtuCgkzk4A/wawTO8PYtBBHTQzNDQMq9WKgAD2PmUD+JsbZZBI7wCYAWCzvp7of9yTPSQiwoTQ0FDYbLbpAC5qvPxVAD8WVDWvuRcEoV48FUAS2TxVtSE9PR2JifHo6THvUhTFEztI9iRGQF29Rq+CKNwWHAPQxD+N9OnvHzgSHh6Rl5OTnV5f3/D0yMiIfejSghHAa5P6hOOgRxuyig8r97n4bprNZiu0WCyFGzZs6LdabSguPoDU1FSEh4fTEKblPl9zOJ7LHYDrABq8fwTP0VsP+R2AP4wjBoNGqMHBAZhMJuPWra9jy5bN6Orqgtls1tpTjNyWnAfwdwAnAdRzby3bJ0/jAXoSZB+AF9z5R2r47u4uWK3DWL58GdaufQ4tLS1ae0gqgD8BmO90/ikAlwCka6q9j9CLIN8EsFzLBSRKf38/LJZBrFmzGs8++300N7d4Yk/Go8RXBWlBD4JEAjjsyYWjw9cgO169eiUiIyPG/vYBX+YTTr+iB0G+DWCKpxdTjyCbkpIyDQsWfAW3bt1i5/v6+thxR0cHhoaG4Jl3jIc8rZen6EGQB70tgBqcyMtbhNbWNly7do3FvHJycpCRkQGLxYKGhgb09vbCYNDkWJ7ytm5a0YPbm+ttAfa3Pzo6BosWPYKCggIsXPgQYmNjQfOU+vo6lJdX4MSJ93Dz5k0kJCS44wCMcLtGUdJ2AFUA/uFtXSd8FlEFa4j2XgWQ5u396M3v7OxEVFQUjEYTOzc0ZGFDmsEQxP6ura3FihWrmEhxcXETiaK6aJ9tALbgcx7t7fJFITRsUY+gGBe5xGZzDxuqBgYG2MvR12dGZmYm3nzzDSYSnZ8AVy8rBSXf9kV9x2OyBKGJ31cBPAZg2BcFUiOTAGTMnV1fGtJsthEMDPRj7ty5WLz4G2zo8pAVAL7rizq7wt825IcAnncxGRMOiTI8PIywMCAj40tQVZV9PPS+tvI4m8/xlyCLeIQ100/3c4m98adOnQqj0eiNIF8QVUd/CJI3Ge7j3bh9+zZaW1uZmTAaw5jdIaeABHITYUO9aEHu05sY1Og9PWbMmTMH8fHxaG9vx40bNxAQEIiEhPixoWwCfGL3XCHa7S3lcSrdQEMULf/SkEVub1dXNz79tA57976FixcvIi0tjTkFE4hSXFZW+iMRzyTSy5qtNzEImoOEhYWxRg8KMjB78uijj6CkZD+WLn0S169fn6iITgAbRdVP5JC1TmDZHkM9xB5qGWWQiTRlShSKin7N3OYzZyoxbVoKO+8EXfh1AJ+Jqp/IHuJ1SMRf2NdXiFdeeZnmM8NkWxziXuQBvMEzVoSGT0QKEi2wbJ8zOnvvQ3JyCrZv37rMarU+0NbWNtNgMGTwxayfcGHE1kNg2VaBZQuB8r36+/uQn/9M4v7979YZjcbaxsamfxkMBr89i0hBJjVZwBOol5AH1ttrzp09exaKi99li14Uzg8KCvJPHQSWfUJg2cIgo6+q6iC57eQCkygxMTHMNSavTDQiBdnH1xLuRapIGBJlxowZOHLkENLTH8CFC5fYAlhbW5u4F0JUwXxiuIqn9bgNTcjIu6EPRW8niSj7y2R3ibu6OrFjRxH6+nrZpHLnziIhNfPHAtUHAJ5w5xp6eBLCZAq/oxwPA4CeQkHQ9c71IlEcEVUnf6yHPOmuPQkODmZiUBhjyZInUFV1/g5x/ECpsxjgxp4WvKh30JoKeWKi8NcC1dN8YadmvH8YDWkY0dragt2796C8vBx79/6eNQYJJRiVr3EsudttqI7khWlMyNOEPxeo3uGffL4+ckdmoN2tLCk5+KDVajNRhntcXNxNRVFq7IE+7gG5LJzO09huXz+nrEZKpJtgaKFQyFkAR/ja/qSjiy1t1JiRkVPw4YdlWL/+hVfvv/+L28igh4WFzdy16ze1lMrjDA0f9KbStfbxnYaT8+ermAi5ufPGkh0oLOLDjEYG1VcEk5oG5PxWf/LJZWrMXxkMhk5FUT5ramqptTdkRUUFa2zaUzh/fi4WLlw4Vk53dzeOHTuOkydP4cqV6pkAQmbNmnkhLy8PBQX5TLDeXjMbcvzsIGhmUnoICRESEoKQENoFZcXHH5fj8OGjuHr1GoKDg9jbTI1HveSllzagsbERe/a8xfJ4R0ZUtvWgsDCf5fOSGJs3v8bEjI2NzYmPj2M7qtrb//Pw7du3zlKmyY4dv0R29mwmioZVwbsiqof4VRBq5IiICLY6R5SWlqK4uASXL19hQlCuFBlwe9ibXGBKBaWtBpTcFhwcvE1RlMbBwcG3aXKWmJjIjCzl89K1qqpeVFU1B6P2pkhRlE00kaNU0wMH9mPevHk+c6PvOUFojLcTGhqCgIDR0ZHyod5//wOcPn0aZ86cRWCgAUlJU6mRHlZVlXJpDzhGVclOUI9RFGUx5afx07sVRVlPZVHj0oITF/GvPLWIoP2HTTTENTU1Yfr06di374+IiYl2JydrQu45G2I3qOBG1WzuZT3h4MFDqKw8h8jISKSkpDCbQI2pqiplwCcD+AVvzBa61mEf+usOxQfQ0EPJCeA9j/Md/n+X+DY4Jijdp77+Kqqrq0F2xYfb1X2OMEE2btw0tjbd3NyMjo4uNsegISkrK5PZAvqON2YSFwPjzI3mOORy0X6Dn41z2x4AP3U+ScNaeLiJ2S29I0yQjz76CzegCkwmIxMiOTmZiURZhE783OHP4/be4cBSh+NyGhG11md0Dd0/IXRvECZIUlKSy/MuvJxQp3DFdheXneKz/XgeRdaMxTI0NsSRs0BZjHp0gfWQbE1xiP38uHqcHwKoADCL/xrDn7XegOxQeDhFaH+LyspKFqIho+xmDpZf0YMgw3w3LNmIb7n4Po1vxAQPdTiTzRMPaKj7/yk9Jzo6GjU1NVi3bj3Wrn0eVVVVTBQ3crD8irA++/jjrtpWM8HcW0rgyc3PuCjgJM+kB9+7sW28m1Dj01BVV1fHdlgdPXqI7bDyZG4iyu3V+09rPMbFAN8C4NxqGQ5iEIfuVhh5dDR8ZWVlwWAIxMqVq9nEkxrXRQ7WpKB3Qei3rsz8+Ac8TO7IUw7HDe4mVpAbTE5HR0cnNm16mZ2jeJceRNG7IM08TE8G/aCL7yl0/k+e3rlTS8E0YUxLS0VFxVmsWfMc2w5HM36JRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkogDwX+zkxYQA9SwvAAAAAElFTkSuQmCC","createdAt":"2024-03-13T11:59:38.000Z","filename":"09d.png","filesize":2697,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"},{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAKUElEQVR4nO2ce1BU1x3HvxeW1y4gUF4CRrCZUBCF0YqpMYmhD9PaxCYNMG3aaX1H46TpmGqaiWaitrbYOtNM1LSNaUR8zVRN8gchHW0QxZFOq0aBtgFUnhqqvJbXwi638zucpet2kb27e5Zr5nxmduZyl3vuued7z/n9zu/8zkIikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJJLPM4qoZ+vp6RZSbkREJM6dO4cXX9yAqKgpCAwMdPx6KYDvAVgAIAqADUAtgBMAdgMY8FU9yspKfVXUHQQIKdX/zANwHMB7AAoBTCPtuCgkzk4A/wawTO8PYtBBHTQzNDQMq9WKgAD2PmUD+JsbZZBI7wCYAWCzvp7of9yTPSQiwoTQ0FDYbLbpAC5qvPxVAD8WVDWvuRcEoV48FUAS2TxVtSE9PR2JifHo6THvUhTFEztI9iRGQF29Rq+CKNwWHAPQxD+N9OnvHzgSHh6Rl5OTnV5f3/D0yMiIfejSghHAa5P6hOOgRxuyig8r97n4bprNZiu0WCyFGzZs6LdabSguPoDU1FSEh4fTEKblPl9zOJ7LHYDrABq8fwTP0VsP+R2AP4wjBoNGqMHBAZhMJuPWra9jy5bN6Orqgtls1tpTjNyWnAfwdwAnAdRzby3bJ0/jAXoSZB+AF9z5R2r47u4uWK3DWL58GdaufQ4tLS1ae0gqgD8BmO90/ikAlwCka6q9j9CLIN8EsFzLBSRKf38/LJZBrFmzGs8++300N7d4Yk/Go8RXBWlBD4JEAjjsyYWjw9cgO169eiUiIyPG/vYBX+YTTr+iB0G+DWCKpxdTjyCbkpIyDQsWfAW3bt1i5/v6+thxR0cHhoaG4Jl3jIc8rZen6EGQB70tgBqcyMtbhNbWNly7do3FvHJycpCRkQGLxYKGhgb09vbCYNDkWJ7ytm5a0YPbm+ttAfa3Pzo6BosWPYKCggIsXPgQYmNjQfOU+vo6lJdX4MSJ93Dz5k0kJCS44wCMcLtGUdJ2AFUA/uFtXSd8FlEFa4j2XgWQ5u396M3v7OxEVFQUjEYTOzc0ZGFDmsEQxP6ura3FihWrmEhxcXETiaK6aJ9tALbgcx7t7fJFITRsUY+gGBe5xGZzDxuqBgYG2MvR12dGZmYm3nzzDSYSnZ8AVy8rBSXf9kV9x2OyBKGJ31cBPAZg2BcFUiOTAGTMnV1fGtJsthEMDPRj7ty5WLz4G2zo8pAVAL7rizq7wt825IcAnncxGRMOiTI8PIywMCAj40tQVZV9PPS+tvI4m8/xlyCLeIQ100/3c4m98adOnQqj0eiNIF8QVUd/CJI3Ge7j3bh9+zZaW1uZmTAaw5jdIaeABHITYUO9aEHu05sY1Og9PWbMmTMH8fHxaG9vx40bNxAQEIiEhPixoWwCfGL3XCHa7S3lcSrdQEMULf/SkEVub1dXNz79tA57976FixcvIi0tjTkFE4hSXFZW+iMRzyTSy5qtNzEImoOEhYWxRg8KMjB78uijj6CkZD+WLn0S169fn6iITgAbRdVP5JC1TmDZHkM9xB5qGWWQiTRlShSKin7N3OYzZyoxbVoKO+8EXfh1AJ+Jqp/IHuJ1SMRf2NdXiFdeeZnmM8NkWxziXuQBvMEzVoSGT0QKEi2wbJ8zOnvvQ3JyCrZv37rMarU+0NbWNtNgMGTwxayfcGHE1kNg2VaBZQuB8r36+/uQn/9M4v7979YZjcbaxsamfxkMBr89i0hBJjVZwBOol5AH1ttrzp09exaKi99li14Uzg8KCvJPHQSWfUJg2cIgo6+q6iC57eQCkygxMTHMNSavTDQiBdnH1xLuRapIGBJlxowZOHLkENLTH8CFC5fYAlhbW5u4F0JUwXxiuIqn9bgNTcjIu6EPRW8niSj7y2R3ibu6OrFjRxH6+nrZpHLnziIhNfPHAtUHAJ5w5xp6eBLCZAq/oxwPA4CeQkHQ9c71IlEcEVUnf6yHPOmuPQkODmZiUBhjyZInUFV1/g5x/ECpsxjgxp4WvKh30JoKeWKi8NcC1dN8YadmvH8YDWkY0dragt2796C8vBx79/6eNQYJJRiVr3EsudttqI7khWlMyNOEPxeo3uGffL4+ckdmoN2tLCk5+KDVajNRhntcXNxNRVFq7IE+7gG5LJzO09huXz+nrEZKpJtgaKFQyFkAR/ja/qSjiy1t1JiRkVPw4YdlWL/+hVfvv/+L28igh4WFzdy16ze1lMrjDA0f9KbStfbxnYaT8+ermAi5ufPGkh0oLOLDjEYG1VcEk5oG5PxWf/LJZWrMXxkMhk5FUT5ramqptTdkRUUFa2zaUzh/fi4WLlw4Vk53dzeOHTuOkydP4cqV6pkAQmbNmnkhLy8PBQX5TLDeXjMbcvzsIGhmUnoICRESEoKQENoFZcXHH5fj8OGjuHr1GoKDg9jbTI1HveSllzagsbERe/a8xfJ4R0ZUtvWgsDCf5fOSGJs3v8bEjI2NzYmPj2M7qtrb//Pw7du3zlKmyY4dv0R29mwmioZVwbsiqof4VRBq5IiICLY6R5SWlqK4uASXL19hQlCuFBlwe9ibXGBKBaWtBpTcFhwcvE1RlMbBwcG3aXKWmJjIjCzl89K1qqpeVFU1B6P2pkhRlE00kaNU0wMH9mPevHk+c6PvOUFojLcTGhqCgIDR0ZHyod5//wOcPn0aZ86cRWCgAUlJU6mRHlZVlXJpDzhGVclOUI9RFGUx5afx07sVRVlPZVHj0oITF/GvPLWIoP2HTTTENTU1Yfr06di374+IiYl2JydrQu45G2I3qOBG1WzuZT3h4MFDqKw8h8jISKSkpDCbQI2pqiplwCcD+AVvzBa61mEf+usOxQfQ0EPJCeA9j/Md/n+X+DY4Jijdp77+Kqqrq0F2xYfb1X2OMEE2btw0tjbd3NyMjo4uNsegISkrK5PZAvqON2YSFwPjzI3mOORy0X6Dn41z2x4AP3U+ScNaeLiJ2S29I0yQjz76CzegCkwmIxMiOTmZiURZhE783OHP4/be4cBSh+NyGhG11md0Dd0/IXRvECZIUlKSy/MuvJxQp3DFdheXneKz/XgeRdaMxTI0NsSRs0BZjHp0gfWQbE1xiP38uHqcHwKoADCL/xrDn7XegOxQeDhFaH+LyspKFqIho+xmDpZf0YMgw3w3LNmIb7n4Po1vxAQPdTiTzRMPaKj7/yk9Jzo6GjU1NVi3bj3Wrn0eVVVVTBQ3crD8irA++/jjrtpWM8HcW0rgyc3PuCjgJM+kB9+7sW28m1Dj01BVV1fHdlgdPXqI7bDyZG4iyu3V+09rPMbFAN8C4NxqGQ5iEIfuVhh5dDR8ZWVlwWAIxMqVq9nEkxrXRQ7WpKB3Qei3rsz8+Ac8TO7IUw7HDe4mVpAbTE5HR0cnNm16mZ2jeJceRNG7IM08TE8G/aCL7yl0/k+e3rlTS8E0YUxLS0VFxVmsWfMc2w5HM36JRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkogDwX+zkxYQA9SwvAAAAAElFTkSuQmCC","createdAt":"2024-03-13T11:59:38.000Z","filename":"09n.png","filesize":2697,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"},{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAJ30lEQVR4nO2ce3BU1R3HP+fefT8SQgAbQIu2UGmt0pGp0zJqrVDRFkut2DJj0Tq2VhyL2HacVq1WrX+g1ApVpj4GXwwgqOigHQuUUETFqthO6wvlGRJMAiXZJdns7r23c+7eyDYuIRvuvbs45zOzk2RPzuOe7zm/8zvn/u5FoVAoFAqFQqFQKBQKhUKhUCgUCoVCoVAoFAqFQqFQKBSKTzPC62vr7Oz0tHwrnECk28nddQ1maxsikSj1b6OBC4BzgJOBEc61twNbgUbgReD9I9U3bMFqT66jl4CnpVees4GZwBVAsERrGoAvAxc5f68AngCeq1TLtUpV7AOPOCP/qsOIUYoZwLPAU0CyEo3+dAhiWWAaIGwL/EXgPeCyoyhRzphtwFnuNXJgHCsm6zTgJGCsY/ubHHv/DlhpNB0CATDNkcDfgXoX6hwGrAMmAa+5UN6AqHZBrgRuAj57mPR2kcs8YMbqbhSJWqyObf8UNTX19oxxB9k/rwBRIOvHBVeryTrBGekP9iMG9ig2jd8gxBr98+OXGe2dw2yrJVx1HjWnLb5QjYIcB7wFnDnQDMLITramXfuDyAXfIL+9CaG7fllnAN9zu9BSVKMgcjTWlZNBZDPIdURct4jAyZ/D2NXshSi/dbvAUlSbIPcC48rOpWlo3Z22qQpeOgcrm8PKG263bUI5s3awVJMgsi0/H3xuDS2XwRw3idDkczB2txxaS+RPd9aVq9wopD+qycuSO+qjI5+FYAT9rO8iXtqElU5jdaTtGSMRAR0xJIlIOnu+8r2xU9y84FJUkyDfP+oSNGfC14/G7DiIPqSW4Nlnoo0+yU4z9+zE3PY+xoe70EaOQAQDWGZZopS1tg2GahLkC24UIrAQ2W7CMy9Bn3oFZt0orI/TIJBJE/jrw3Q/+BCBE0chouFyRIm60cb+qCZBXLlY0XMQq/54xMybMeWkyXXJHbyTqGFGEnDhHKKBID1LH0MLDS9nffH8dLyaFvXtrpQi1wU9gJbrRsukDolhp5m2NyZMA/P82QQnfR2zaW85gni+W6/kDPkS8E1gPCBX3c+4UqrsXMvEtlOlOlrTENkuRCSJdsYUsus2lLO4H3Sljf1QCUHkjaKrge9UoO4CQti2xzpxAvoJDZDJQCQykJzbvG6a3ybrD8DzFRWjCJGoQ9QN+dgtHgBPed0mP2fIfGCuj/X1i23Rmt8n9/IWe1hqHSlEMoaorbWPXUp4Xgecu4me4pcg04DrfaprYJiG7ZFFfjQTMbwBq3knxu4dGG+/h4hF0IbXY+XyxUUtALq9bpZfQQ57gJFe11UWcuEPRjD10KFchoF48wWyD87H6upGP2FUsShDgA6vgxz8WENmVJ0YFPYkGDm0nnThkz1of2VOnEbolkWIRAyz5SP7uMWZ4R1+NMsPQS73oY7BUezuWoUdvt6Twho1ntAtf8ZMdZF/b/s9ZstHq6U48uM1fqwh432owz2EQMt2YTaMI3LtL+cZL6+5QYw47lDxK/7hbfVeX19nZ2eLa5s+v5AzRwgZhHeP1ccZGRL21qj4YbK6fKjDXZwdvsh2XarlM7p9DON8vMYPQd7yqRvdxzJrMPJRO+ar9+MxfgjyuJ996DIH/J7hfgiyCnjXh3q8QAZcmH5W6NdZ1tXlZrAsC03TCIVCCHfjrMphid8V+iVIYzlhNKZpEggEiMfj6LpOPBHHLO9WqxtscgKvfcXP097bgRsG8o/BUIhoNMqdt93BlCnnseTRx0kk4gjvvfReXgIm+1VZMX4fv88DvgqscRbMTyBnQiwaZfMrr7Jk5Up2Ne+hcX2jPVNEGa0tRP6ULeBeJzZMxl9lys3sBpW4QSW3ut8CapwQTRkYF5ZHezIxGLTPjoylS5f9OhwKjYxHo4wZM2Y98LRpWnaiJjdtzjrTFylosiaBVqReOp22zeBhBNKdW7PvABv9Cqo+HJW8hdvpzJQ1xV/GYnFeWP08mzZvbhtRX78sbxhs2LRp1vmvv950+sSJnyikO5Mhly30YSweJ6Dr7GlqYvHDi0mlU0w+91ymTD3PTk+lUraIFXQSjkhVRJ3YZioWJRgsPOi0+dXN5HL55XogsEtoWqp9//4mabIkG9Y38tyqZ9EDASZNmsS06RcSdW6/ZjIZFj/wECufeYa9bW2ng0g2bnypce3adVz5058wdtxYuru7yWaztgdXjVT0oc9i82IYBvctWMiGjRs52NVN4akCgWlZtrm58ILz2b5jJ6+9+Qbpg122yYqEwow5fjSXXzYLoWncd/8i9uzdK9eg8bXJ5Nuyjmwu97vWfftuTcRizJg+nTm/mEumJ0O2JzuomVJTU3N0HXIEKiKINBuJZEGI9rY2Vj29ir+tX887W7cSCYdJJhL2bLGcEB5N1znQ0UE+n6cmmQwGg8FbpbUy8vnlBzpTWwMyRFSKZ5rUyjBRIRZhWT9zqntW07Tpnek0+/bv54br5zLrx5eTTqcG9VzPMS9I3ijccZMi6Jr+8ajcv28fSx5/ghfXrGV3S4vtWdXV1sqkU7GsS4H7gR295RTZfvlE7cPO12sRYoqRz9szRu5dnF6+EbjD+R95/P+uzJvu6iKXy7HoTws5dcKppNPlR/V4LYjna0jrR62FivQA6VSKD7ZuZcuWLWx65VV27G6SI57RDQ0Fj6nQmY86of+/6u1M+D8X9ttFxX8g8/SuL0VD/vfObePm3vz2rIzH2d3czLq1azntKxO8vvRB4bkgs6+ebf+Um7qebI79HQfsUSpnxOiRDbZZsg5FF57iiNFLX3snH/ifUvT3H/up+pG+X8h6pBem69X7aKXnLfvvgd4+LZxNSRuvOaPdMj9xbndz0e93OCO8mJlFz483Oo8/l4kgHA57d8FHieeCxKIDigjs5ZKi35eVSJchH19znkW/aTDtsWR8r1YYENFohC7p0VXRvqTanPE7nZ2ytPv/KZH+IfBDe+EvHP715YjXIx2H1S/8haVPLJEPLtiLtGZ7aL4fXpak2gSR3tHxfdaRXoYCs/qZ1fIFMzuBfznxwyWJx2N0pFLMX7CQiy+6mMcWP0I8kSAUCpY8ivGbatyuSresp893MWdGSA/sycPku8wRRb5M5prDFW7kDeKxGCPq62lpbeWuexewYvmT9ulyNezej5V3nUx1XquEcyDZl3CfUNV5/ZbmzITh9fXUD6njznl326fLiUTC3lxWkmNFEHlC/IZzIjynRPoMx6RJ/i2PvAZSqPTyEvEY4XCIW2+7nV07d1FbW1tRUY4VQXYDE51Xbqwskf6a86KYvUU79AEhO3/Y0KG0trczZ851tLW22nskhUKhUCgUCoVCoVAoFAqFQqFQKBQKhUKhUCgUCoVCoVAoFG4D/A9hASe1qCb65QAAAABJRU5ErkJggg==","createdAt":"2024-03-13T11:59:38.000Z","filename":"10d.png","filesize":2584,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"},{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAJ30lEQVR4nO2cf3BUVxXHv+/tr+y+3QQIRMNAxVYotPycUqsy/FMSWxA6qMUfowMV20KoirRTGa1WSpGpWBwBKTO0HYKQASql0CHQQihBCBAsQusPUFB+JCGQbH5sdje72V/POTd30yVslix57+2mcz8zTIZ975173jvvnnvuuec+CAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFA8GlG0vve2tradJVvVxxoanRj4YIStLR64LDnJDvtHgAzADwMYDSAQfzePQD+A+AvAPYC+Oft2tv/3j5d7iOOWVfpmacYwPcAzOtBkyEAvsCN9Qo3SimAtzOluZyphnXGBuAtAAdSGCMZMwHsBEDdID8Tin8aDTKZu6E5fZAxHcD/+F9D6S8uawKAuwGM5L6/lj/0c7Ik+SKRCMLhMCRZonMOA3Bq0GYu7ykPc5mGkO0GeRLALwF8rofj7nA4snHAgAEv5OTY0Nza+rHdZlM01uEDAHkUn2gsNynZ6rLu4pHP6ymMQQzuCAZ/oSjKgQnjxu1q8XgUSdbllo4a9fJmo0E+A+AsgKm9OVmSJIRCoeLnl/7s65PG3o8bjY0wmUxa6zQewLe0FpqMbDQI9YyB6VzQ3h5Ajt2O0s2lKCwoQENTM3ToKb/SWmAyss0gawCMSvcik0mGx+OB1WZDyYKnqMdAjcW01o0mlF/VWmh3sskgpMtP7vhiWUZ7IIAZs2bhwQnj4G5p0Va7Tp7WQ2gi2WSQ7/ZVQDgUYn9nzprJYuNARwdFXrjhduN6YyMzEv1G4w6kO8oaje6rjrcjm8Leb/ZVgMzHjZGj7kV7MAjFoWDS2LEYPnw4c2u1tXW4dOUKrrvdGDxoEEyyDFVV02kir6863o5sMsi9WghR1Ri83jYUTZ2KkmcWYdTom8U2NjRg/Zp1eLu8nAUAFrM5HaNoPce5hWzK9lKq4vNatBnuCGHQ4M5UlN/vR4wP8JIswal0TuKX/3oZyt8/gPyBaQV0nv3v7RughY49kU1jyCUthNDbbrPnoL3dz16GWEK0pcZUFo2FIxG8+NIyjL9vTLqDf0ALHVORSZd1P88TjaGXGsBntRBKA3ZXj0gycLNozN+OvLxcFBUV4fRHf09HvF8LHVORCYPQ2kMJT3VnBFmWoELF5AcnI3/QQITCYVgtlt6oUqO3vka7rN8DKM+kMeLE1BiGFBQg1+lEJBLt7WXv6q2XkT1kNYAlBraXEpNkwkdnzuLcxYswmc3wB6zIsdngVBTIkpQs8qLx4w299TLKILMAPGtQW70iGo3C7/dhxrRpKBxaiNqaWtTV1+NSTS3sOTnIcznZOQm8BsCrt15Ghb11AIbq3VY60MBvs9mQk/NJUUSwowM7tpZh46ZSdnxIfj5o8YtD6+9uvYscjBhD5mSbMcCjLXrYXq+X/fP5fGw2P++H87H6t6/AbDahqaUFcmcq/9tkDCP0MqKHlPPIql9AY0dubi5OVh3Hgh/9GLJset1qMXclFU9Vn9D1NowYQ8YY0IZm0NzF5/fhS1O+goXz5689dvz4YnJd8SFeb4MY0UPqtZr0GQX1EjKMy+WiMP25xGaTTTa1xAiD/JdXjPQ7JElqlGWpUFXRFW45nVoUtPSMEYP6WQPa0AVVVXOj0ZidIq74P70xwiBbjH6QGtJKS/ZGNmiEQXYDOG9AO3pABRf6d4sEjMpllaR7AQ2sNFewWq26D6QpKDO6QaMMUgngxd6eTL7abDZDURRWY6U4FcRiaS21akEVgD1GN2pktvdlAEt7c6LFaoXdbsfK5StQXPwIyjZvgdOpQNI/KIxzDECRUY0lYnT6fRWALwI4yAfMW6Ce4LDbUX3iJMp27sTVa3WoPFzJeoqUhradhSVpG/A6rw2jqslguhdrQSYWqP7KC86ouvwhXhhH+zlYrG+xsNxRdNu27T+3Wa1DFbsdI0aMoOrzXbGYyg6y9DgfZ7pDBnXlOiEnWI/yVOQGezAQyaT6oXO8hjdkzGNITiaXcNt4TzmY+KPDoWDf3nJUVVc3FuTnb49EozhSVTV3+ocf1j4wefItQgLBYFc9lkNRYDaZUFdbi01vboLX50XRtGkofvQRdpySiPFZeLaSFWVAzE057LDwZdTqk9UIhyM7TGbzVUmWve7m5tp4AfWRw5V4d/cetqg0ZcoUzJr9GFu/IILBIDZtfAM733mHCuMeACRX5dFjlRUVh/Dk009h5KiRCAQCrNRU1qdKvs9ktAwo0b3QYtD6tetw5OhR+NsDTDFWsKCqzN08NmM6Ll2+glN/Ow2fv525rByrDSOGD8MT8+ay4ur1r21A3fXrNAaNyXO5/kVthMLhlxqampY5HQ7MmT0bi59bgmBHEKGO0B31FMoE60lGDEJuw+nqNIS7sRG7d+3GB4cP49yFC2wZ1eV0st4SL5imNYlWj4etX+S6XBaLxbKMvFU0EtnR2ua9QGsX8WqTPJeLLLkBqrqQN7dHluXZbT4fmpqbsfTZJZj7gyfg85H7Sv9++r1BItHOFTcygkk2db2VzU1NKNuyFe8frEBNfT2LrAbmsUrN8VDV7/Ml08txOQm+fz6AN/nPFZCk4mgkwnoMzV34U34BwAp+DqX/z7O0ens72/q24Y/rMH7iePh86Vf16G0Q3ceQhhsNnQ2ZzPB5vbh44QLOnDmDqhMncbmmlt54DCss7IyYOh/mZgATATwff5i4Oe39tQTxF+marg06n7zyv+HLxtfi17NeqSiouXYNhyoqMGHSRL1v/Y7Q3SCLShaxvzSp6wiF0expZW8p9YhhQwuZW0rYyzGWGyNOd39XwPeex/lDiqZLu/9A7VAUZjJl79ZK3TVraY0/087cFPl4mb/tSTbVJO5SWsHf8ERoy4KL/5/SMf9OXyOJFTdkK7obpIdPXfRE4j6+7UnOoS8tfBnAfXx3btpQdTxVLhJ2VgMcyKp5SbYF4yv5TPl8D98dodXH7/BNmFVJjt/2fihw2LtvP7ZtLYMKiQ3SMovQDE9eJiXbDELR0fBu40gc+mDM3BS9ehiAKwA+TlXloigOeLxerF67Do9/43H8aVMpFKcTVqsl3c07upCN01UKyzq6/ebgPWIz/4ZJMuZxo4wD8ExPwqORKBSHAwX5+ahvaMDv1qzFn3e8xbLL2TB77y/fOnk0YX/fQ0mO27qVqq5KKY33BCrvyR8wECtXvcqyy1TAYMS6eSr6i0EoQ3yaZ4QXJzk+h7s04h+U8uqNUIrynIoDNpsVy5a/jKtXriIvLy+jRukvBqnhX/m5i38+qTunABzi6xkrUou6GXr4tAG0we3G4sU/ZXsQaY4kEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQGsA/B+mk0RPLzlumwAAAABJRU5ErkJggg==","createdAt":"2024-03-13T11:59:38.000Z","filename":"10n.png","filesize":2584,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"},{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAK40lEQVR4nO2cC3BU1RnHf3d3s5v3i0cSxBCVgGjjFJxStGXEWMRHO8P4qDJWOyogWrXMoLXTBz7qjBUHB9upClpROtpYatWKGq2OOlpaFAatBQUFSiAkgYAkm5Dn3tv57p5NVlgCmz27mzDnN5NJ9u7u2XPvf8/3Ot8NBoPBYDAYDAaDwWAwGAwGg8FgMBgMBoPBYDAYDAaDYbhj6Zh/a2tLSi5DXl4+a9euZeHCRRQWFuD1eg9/SRbwI+Ai4BvACKAZ+AxYA9QA7cmaX23tawmP4dMyk/QjX6zbgZ8DpYfNRkSZCMwG7gd+C/wOcIbiiXiGwBziwnEc9ycKOYf1wLIYYhxOqXrdWiAwFM9v2AnS3d1NZ2dnxFzJRd0MTIlzmGnA58mZYWIMK0FsO8TEiRM55ZQKWltb5dAzyhwNhgpgVVpPKAZDXRBZAdkR89Le3s6YMWO48MKZNDQ0XuzxeK5KcPxrge/rmaoehpogGcA84E1gK7AL2K1+b3UcR47fWF19vsfr9d7R3NyMz5dwXHKTnqnrYSgJskDZ9RXATKASGAUUqd+VlmXN7OrqfPKMM87Ydtddd07t7e2lsbExUVG+A2RGPS4GShI/ncExVAR5BXgMOPVYLxSH3tFxqGLu3BtzH3vsD9i2Q0NDQyKiiOAFwNnAq2o11qkVukTlNikj3YJI/vBhPHbc4/HQ09NDe3sbU6dOpabmWTIzs6iv3xMrUTweJIZ+QYXOlyif5Vcr9E4VxX1P50kPeH6p+qCj8BbwrXjfZFkWoVCItrYglZWVPPDA/Uqkdve5eIdTZutoSDT2D7WKkk46BZkDVA/2zXLhbdt2RZk+fTqLFi10TVcS+WMyB4+QLkEKgeWJDhIRRbjiisupqKigpSVpdbXLgZOSNXiEdAlyi9QKdQwkosgqyc3N46KLZtHcvL/PbEmJRUybiHZYuWWwfFPHIAORruLit3UOFlklF1xQzerVf3VXyYEDX5GRkYHf78dxbFVu8VFWVupGZJH3xMl2nfOORboEOVPnYBHTVVk5Hp8vgwMH9nPzzTcxfvxpZGVluc+1tgZZt24da9a8SmZmJmVlZUgeEwdiC0erKOxL9Vg76dgPkYqrdu8rIa8Is3LlM0yZMplp06bFfF1tbS3Llj1CU9Nexo4dG48oHVE5iRTSXle503v9Yye+H5IOQc4CPtHxudGIj5CVUFhY5B4NBlvdYxF/Is8FAgE3Z2lqamTOnGtpaTnorhTxMwkgeys/RZMg6XDqO4CErkAs5MKLb5CEUcRAHYsQSSiDwRZKSkpZunSJu6o6OjoS/WjZGPuVrvNIpSA+ZX97kmGyiFolA2PR2dnB5MmTmT79u+zdu1fHR/9GrfyESbYg04GngI+Bnapyu10V8NKGbHIJ5557jlsL0xQSL9ExSLKirFPUMr4hSeMnRMSUTZgwgaKiItexS4icIFU65pYMQWaoqml2EsbWijh5+RGnrkEQLddStyCSyb6jecyksWXLFjZu3Mjo0aPx+bzk5ORQXFzsrqBBmDEtdk+nIMXDSQyJuCSLnz9/HiUlo91K8ZYtW1m/fgP5+XmMHDkyVofLQAR1zEunID9TRcNhwaFD7VRXn8+sWbP6ptvV1Ult7RssX/4EO3fWUV5+cjyrpUbHeetKDEWIJrWxM2yQix19wcVkWZbHXS333nsfq1e/wKRJp7vPHUOU/wGn1da+NqgCWTS6Vsg1w00MYjTdBYNB93FBQSFLljzIvn3NbNiwgfLy8oGyeam9XC3FAB1z0pWH/EDTOGlFVotk9FJSER5//FFKS0vZs2ePezwG/wVkCa3TNW9dK6RC0zj9xNqKdUhJS65cfKnP5ecXMG/ejRsWLlz0UVZWVqCoqMgTCoV6VRPEJrUXrxVdgugxV1L2kKpt7tH3rpz2NpAKbexvrFba2tq48sorG32+jJsXL77HjcxKSkriLdvHhS6n/nkCLZ39eH0QyMR+50Xsui+xcpQwMsvuLhw7hO+S6yC/CLoSLgoeE/En4eQxc8ynn37aMH/+Atfhy1axiHM4Q+l2hK0JC+LYWNnZ2PU76Vl+N3R1QlZO+DmPF6d+G94Zs7Fyc3XVno6J+JSuri5ZEeOrqqoaVqx4nAULbmH79h1UVIxLtGwfE13r/qWER/CGSxeht1e7D61Tz8QqLccqG4eVk481voqM2x6EzGzoPJT4jI8T1XLULj6lqqqKJ59cQXFxEfX19TraWI9AlyDSRd426HfLRlJODvaWTwi9+TzWqJPcFdP39FdN+K74CdaoUpxgMCX+I4pOy7I2iTCyzzJp0iRqap5zi5KbN3/Wl8voQteZ9ao7kwaHJ9xxGHp/DRwKQkDtlIqpatiJZ8oMfJfMwZGyuaMl3I8HWf1dKJ8iokgH/qpVT7uZ/tatX1BXt8vtnNSBzi3cgNrvGBnXm8V35BdiN9XTs/i68IwC2eGwt7sTp7kR/90r8Zx5No7kB6ldHag211ejD8gmmCSPQk3N87z//gduM8XSpQ8l/GG699THqo2o479qXp/rzHseXUzonb9hjR0Pdsg1Y87e3fhu+AUZF/6wL/twOruguwOslAjzsro38QhEFCm1SJdLBB2mS7dX2q12CVfK/s8xXy2+QyKr3TsIffgW1sgxYTGEjnask8fjPetc7JYDOG1Bd8VY4tQl7B1cX1U8fHA0MVDJo+zHW1b49jpdkV8yNqjWqluSpVX0+gFfqbrVQ+++BG0tUDiq30eIH7E89Cy7A0eiKuk+3L0N360P4KuejaMaGZKE9PHOPZ6hRQidiWKy24CkznMecKkSKexf5Nvtz8STlemEvtzU033P9SOsvELwR90YK8tf4nxJAMV8tezHe+m13RlX39rl2E44W9dHSOVSbwN/UT0AcSOllkRJdufi5+on0lidJybJKgj3TvW+90pb74tP/Amf7xo3v7CjEi0xAeLAJTmU8lF27r+9M2ZfRiCrDf3O3U7mPxSIh1S3kgblwjsH99P73COE3vhzhVU8+hprRMnA33ivdzedh86xt2/GM64SPPri/qFGagXxeLACAXqeuI/evz+F5/Szi/B4HqS3t1O9YoK6bySaHrDOc81X3RfqsBFEE+pCSgQ1skz8xEYcZ2PU2ItiCDLT7eVyo7Ft0NMNPj/0dqd26ikidVmWGxZaYUkKRnzdX/Tzy8Me3x5pZrb8Wa5jd6Mrf2as954QpEYQiaqy87BysgltWo+99WOs/COaF29Td8RGeBj4fd+jDD9OW4srSmpywvSQ3FOTVSHFt4JCLJ+H3tefo/u+uTgHmiD3iAaVe6L+rlXmq5+MABxsxq7fcSK7kCT5EBHCH8DKDJsWZ9c2elY9hL3+XazRJ7mrxQ1l+5kS1e8rpZeLY44r/qNpV1KmPFTQIoiVl3/kwZBN6ON/Yn/4FqGP3nUzcau8MpzwHek/Ir6jUbWixkaqvx0qXRC7lfrKb9LRIkjvy0/3P5BSumNjf7Ye+z//cjNta9QYKC3vKxoexmnAZerQbNXjFBsxVV1qcypFu4apRo8gzz789QNysbJysIpLwvvk8k2OHVUJv1a/RYyB22n8fmhuDJdUpMp6Aoa+ekxW2bijPzmwWZF/KvNj4GlV6h74c7JysZt24exrBPFFJ6Ag6Q4gr1J5xsBV4Qj+TJyD+7Cb6k7o0NdgMBgMBoPBYDAYDAaDwWAwGAwGg8FgMBgMBoPBYDAMX4D/A8P/0diAJpvUAAAAAElFTkSuQmCC","createdAt":"2024-03-13T11:59:38.000Z","filename":"11d.png","filesize":2844,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"},{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAK40lEQVR4nO2cC3BU1RnHf3d3s5v3i0cSxBCVgGjjFJxStGXEWMRHO8P4qDJWOyogWrXMoLXTBz7qjBUHB9upClpROtpYatWKGq2OOlpaFAatBQUFSiAkgYAkm5Dn3tv57p5NVlgCmz27mzDnN5NJ9u7u2XPvf8/3Ot8NBoPBYDAYDAaDwWAwGAwGg8FgMBgMBoPBYDAYDAaDYbhj6Zh/a2tLSi5DXl4+a9euZeHCRRQWFuD1eg9/SRbwI+Ai4BvACKAZ+AxYA9QA7cmaX23tawmP4dMyk/QjX6zbgZ8DpYfNRkSZCMwG7gd+C/wOcIbiiXiGwBziwnEc9ycKOYf1wLIYYhxOqXrdWiAwFM9v2AnS3d1NZ2dnxFzJRd0MTIlzmGnA58mZYWIMK0FsO8TEiRM55ZQKWltb5dAzyhwNhgpgVVpPKAZDXRBZAdkR89Le3s6YMWO48MKZNDQ0XuzxeK5KcPxrge/rmaoehpogGcA84E1gK7AL2K1+b3UcR47fWF19vsfr9d7R3NyMz5dwXHKTnqnrYSgJskDZ9RXATKASGAUUqd+VlmXN7OrqfPKMM87Ydtddd07t7e2lsbExUVG+A2RGPS4GShI/ncExVAR5BXgMOPVYLxSH3tFxqGLu3BtzH3vsD9i2Q0NDQyKiiOAFwNnAq2o11qkVukTlNikj3YJI/vBhPHbc4/HQ09NDe3sbU6dOpabmWTIzs6iv3xMrUTweJIZ+QYXOlyif5Vcr9E4VxX1P50kPeH6p+qCj8BbwrXjfZFkWoVCItrYglZWVPPDA/Uqkdve5eIdTZutoSDT2D7WKkk46BZkDVA/2zXLhbdt2RZk+fTqLFi10TVcS+WMyB4+QLkEKgeWJDhIRRbjiisupqKigpSVpdbXLgZOSNXiEdAlyi9QKdQwkosgqyc3N46KLZtHcvL/PbEmJRUybiHZYuWWwfFPHIAORruLit3UOFlklF1xQzerVf3VXyYEDX5GRkYHf78dxbFVu8VFWVupGZJH3xMl2nfOORboEOVPnYBHTVVk5Hp8vgwMH9nPzzTcxfvxpZGVluc+1tgZZt24da9a8SmZmJmVlZUgeEwdiC0erKOxL9Vg76dgPkYqrdu8rIa8Is3LlM0yZMplp06bFfF1tbS3Llj1CU9Nexo4dG48oHVE5iRTSXle503v9Yye+H5IOQc4CPtHxudGIj5CVUFhY5B4NBlvdYxF/Is8FAgE3Z2lqamTOnGtpaTnorhTxMwkgeys/RZMg6XDqO4CErkAs5MKLb5CEUcRAHYsQSSiDwRZKSkpZunSJu6o6OjoS/WjZGPuVrvNIpSA+ZX97kmGyiFolA2PR2dnB5MmTmT79u+zdu1fHR/9GrfyESbYg04GngI+Bnapyu10V8NKGbHIJ5557jlsL0xQSL9ExSLKirFPUMr4hSeMnRMSUTZgwgaKiItexS4icIFU65pYMQWaoqml2EsbWijh5+RGnrkEQLddStyCSyb6jecyksWXLFjZu3Mjo0aPx+bzk5ORQXFzsrqBBmDEtdk+nIMXDSQyJuCSLnz9/HiUlo91K8ZYtW1m/fgP5+XmMHDkyVofLQAR1zEunID9TRcNhwaFD7VRXn8+sWbP6ptvV1Ult7RssX/4EO3fWUV5+cjyrpUbHeetKDEWIJrWxM2yQix19wcVkWZbHXS333nsfq1e/wKRJp7vPHUOU/wGn1da+NqgCWTS6Vsg1w00MYjTdBYNB93FBQSFLljzIvn3NbNiwgfLy8oGyeam9XC3FAB1z0pWH/EDTOGlFVotk9FJSER5//FFKS0vZs2ePezwG/wVkCa3TNW9dK6RC0zj9xNqKdUhJS65cfKnP5ecXMG/ejRsWLlz0UVZWVqCoqMgTCoV6VRPEJrUXrxVdgugxV1L2kKpt7tH3rpz2NpAKbexvrFba2tq48sorG32+jJsXL77HjcxKSkriLdvHhS6n/nkCLZ39eH0QyMR+50Xsui+xcpQwMsvuLhw7hO+S6yC/CLoSLgoeE/En4eQxc8ynn37aMH/+Atfhy1axiHM4Q+l2hK0JC+LYWNnZ2PU76Vl+N3R1QlZO+DmPF6d+G94Zs7Fyc3XVno6J+JSuri5ZEeOrqqoaVqx4nAULbmH79h1UVIxLtGwfE13r/qWER/CGSxeht1e7D61Tz8QqLccqG4eVk481voqM2x6EzGzoPJT4jI8T1XLULj6lqqqKJ59cQXFxEfX19TraWI9AlyDSRd426HfLRlJODvaWTwi9+TzWqJPcFdP39FdN+K74CdaoUpxgMCX+I4pOy7I2iTCyzzJp0iRqap5zi5KbN3/Wl8voQteZ9ao7kwaHJ9xxGHp/DRwKQkDtlIqpatiJZ8oMfJfMwZGyuaMl3I8HWf1dKJ8iokgH/qpVT7uZ/tatX1BXt8vtnNSBzi3cgNrvGBnXm8V35BdiN9XTs/i68IwC2eGwt7sTp7kR/90r8Zx5No7kB6ldHag211ejD8gmmCSPQk3N87z//gduM8XSpQ8l/GG699THqo2o479qXp/rzHseXUzonb9hjR0Pdsg1Y87e3fhu+AUZF/6wL/twOruguwOslAjzsro38QhEFCm1SJdLBB2mS7dX2q12CVfK/s8xXy2+QyKr3TsIffgW1sgxYTGEjnask8fjPetc7JYDOG1Bd8VY4tQl7B1cX1U8fHA0MVDJo+zHW1b49jpdkV8yNqjWqluSpVX0+gFfqbrVQ+++BG0tUDiq30eIH7E89Cy7A0eiKuk+3L0N360P4KuejaMaGZKE9PHOPZ6hRQidiWKy24CkznMecKkSKexf5Nvtz8STlemEvtzU033P9SOsvELwR90YK8tf4nxJAMV8tezHe+m13RlX39rl2E44W9dHSOVSbwN/UT0AcSOllkRJdufi5+on0lidJybJKgj3TvW+90pb74tP/Amf7xo3v7CjEi0xAeLAJTmU8lF27r+9M2ZfRiCrDf3O3U7mPxSIh1S3kgblwjsH99P73COE3vhzhVU8+hprRMnA33ivdzedh86xt2/GM64SPPri/qFGagXxeLACAXqeuI/evz+F5/Szi/B4HqS3t1O9YoK6bySaHrDOc81X3RfqsBFEE+pCSgQ1skz8xEYcZ2PU2ItiCDLT7eVyo7Ft0NMNPj/0dqd26ikidVmWGxZaYUkKRnzdX/Tzy8Me3x5pZrb8Wa5jd6Mrf2as954QpEYQiaqy87BysgltWo+99WOs/COaF29Td8RGeBj4fd+jDD9OW4srSmpywvSQ3FOTVSHFt4JCLJ+H3tefo/u+uTgHmiD3iAaVe6L+rlXmq5+MABxsxq7fcSK7kCT5EBHCH8DKDJsWZ9c2elY9hL3+XazRJ7mrxQ1l+5kS1e8rpZeLY44r/qNpV1KmPFTQIoiVl3/kwZBN6ON/Yn/4FqGP3nUzcau8MpzwHek/Ir6jUbWixkaqvx0qXRC7lfrKb9LRIkjvy0/3P5BSumNjf7Ye+z//cjNta9QYKC3vKxoexmnAZerQbNXjFBsxVV1qcypFu4apRo8gzz789QNysbJysIpLwvvk8k2OHVUJv1a/RYyB22n8fmhuDJdUpMp6Aoa+ekxW2bijPzmwWZF/KvNj4GlV6h74c7JysZt24exrBPFFJ6Ag6Q4gr1J5xsBV4Qj+TJyD+7Cb6k7o0NdgMBgMBoPBYDAYDAaDwWAwGAwGg8FgMBgMBoPBYDAMX4D/A8P/0diAJpvUAAAAAElFTkSuQmCC","createdAt":"2024-03-13T11:59:38.000Z","filename":"11n.png","filesize":2844,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"},{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAGbklEQVR4nO2bC7BVYxSAv6JLk2m8MmhIkSLPibghpBR5FsJFmLxHDOUR45U0JvIYl9vD1DRFI8oz15RHUqiGez2GGSR5REwTk7iFa/6ZtWfWrNnnnnPP3efsfVnfzJ7z//9Ze5//P2vv/19r/WvjOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOJmnTZodHDz45CQusyvwoXz2A5a09IK1tQuS6FdRtE3tl5PjblFG4KHWPpjWppBewKGmrbMqdwG2VfW9gcoy9S0RWpNCLgE+AT4AZqr2BlP+U8q3AF8Cy4BJZe5r0bQmhRyuyhcC1VLeqNq3yOdwYIJq71+G/iVClhUyGBio6ivM91fL+rFBtX0D3ArMMbKvq3Jv4DwztWWGrbPYKWAsMF7KjwHXAtOBCqDGyP2t6pUxa8ZU4EYpVwGzpPwscHYJx1AUWX1CDlHlQao8WZQQEW6obVS9Qo6I8OdfruojVPmItM3+OLKqkDpV7g50VfWwNlxRwDWekLVG00OVwxTYmEx3kyMLCukmd7L+8z4zMoNMfQpwWRPXrJE1RnMwsKeqv63KxwHPAX2LG0JyZEEhc2RuD6Zs+JN2B14C1isZq5DANODSmPZHgati2geaeqSQ8LtvAkOBN8zTWHbSVkgn4EBVPwb4Xqynpao9KGTnmPPDQv+iqv8EjMnxW6ep8ipZ0BvMkxnWo/2LHEsipK2Qn4E7YtqDU3eSqrc3dc1mU/4rRqa7KDsiePQ3GQMgMBt4paiRJEQWpqyJQB8TFGwbY5L3znG+XZjjFupjTX0rOSK+kCfmguZ1PXmyYmWtkEjt0cav0JwD9DRtHY2i9jAePeIANmWVhe/2Fb8kdbKgkHayRjwMXAf8mkNuN7G+5gJ7ieO4Qaw0zfvAPAk63gX8ARyW45pB+acCj4th0bE0QyyctPdDhsid2dwwRmMBfS9EJo7RtbULHizivERI+wm5P48yVgPjgIWm3f7RS8VUbkomPF13Aivz9On6PN+XlLRjWfWyxxGxRhy0hRJqDybwP/JdcNpmiMUUsVF8jllKZqbsg0SEKWsk8JTU7wF2Ea89OIRnAQcp+R9KPeimSFshwbH7HNhJTE4b0dWEfY1hwEeqbZJSBiJzTdiFVW2jlDIi1smxRJ7AbmJhBb8otemKDCikQf6QQtlo5OJMXOuHbI6RsaySJyd1smBlHQ+cGeOkxbGpwD9YU+jC3k/60a6Z10+UtBVyu8SPgpn6o4RCzgD2MY4bMq1VG8UNN6GXEF4Zbc4bY9apiOCzDAAekI2txdKPWTGyZSPtKatKlXcALpYj8BvwgijpRAmnWHrKmjJNFuO4MEwvMRDmSVbK6bJj2DlGNnBUskNsHmkrJNyN9+b4rqME/uyeRhwjC5AZKkc+Fhc9mgRIe8oaL7uDwVpaLhtTG/KcUy8W0fwmZOokNjUvz7XCevSxJNpNlymsKs85JSULe+r1as+7axOOW6OYyTOkPltCIm8BHZTcCJUmFKIAR0qIvlPMNStkjXktwfG0iKwEF9vL1BXu7B1zyExVyogIyntV1b+LWZTfk4hALmrlnC6JjqhIsqCQAeJf3GaCe9bHqCOeQszaRabeaK5fJWGaUcUOIinSVkiwrJ6P6UdtzOJaS37a5FBQvRwRq8yTFfGI5IOlRtoK+V3M24h1YgkNMXP+O8DXMedXSjglorMymy1aoSHWdYOETD41crnC/2UhbYUEK+ciYC3wpGSFzJe7VDtzNpKLbEzZKDDik8SZwfYa/UXJB0iuV7DurgTebeGYWkQWrKxFkmmi6WHqdnrpa5IgLFPlZpui2pdLNCB6dUFvWk0wucCpkdVEuT6q/K142hGnyBSWj8mS5xuxxUx7mUzAzqpCflHllcoiqhSfQi/cjTnKgfvMfvrLqrw28V4nQFaTrW+W9zy2SI5W4IQY83Wu7IufK/UwLX0FnK9kamSc1aKg9ZJMMZYMktUnZJN40GPVCznDjMwyyUTRVtr24lNYR1CnndZI6GVNifreIlrTCzt6iqlTUVmd0bidfIbI8NOqfXUZ+pcIWZ2y4hgnqaId5J2RCL2hVCHpoA0ybQWncz9JMWoVtCaFYMzYCD1lrTfvHD5Tnm4lx3/htehqlZmSaoKC4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4zj/exzHcRzHcZySAPwL8ComJ3FaigkAAAAASUVORK5CYII=","createdAt":"2024-03-13T11:59:38.000Z","filename":"13d.png","filesize":1703,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"},{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAGbklEQVR4nO2bC7BVYxSAv6JLk2m8MmhIkSLPibghpBR5FsJFmLxHDOUR45U0JvIYl9vD1DRFI8oz15RHUqiGez2GGSR5REwTk7iFa/6ZtWfWrNnnnnPP3efsfVnfzJ7z//9Ze5//P2vv/19r/WvjOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOJmnTZodHDz45CQusyvwoXz2A5a09IK1tQuS6FdRtE3tl5PjblFG4KHWPpjWppBewKGmrbMqdwG2VfW9gcoy9S0RWpNCLgE+AT4AZqr2BlP+U8q3AF8Cy4BJZe5r0bQmhRyuyhcC1VLeqNq3yOdwYIJq71+G/iVClhUyGBio6ivM91fL+rFBtX0D3ArMMbKvq3Jv4DwztWWGrbPYKWAsMF7KjwHXAtOBCqDGyP2t6pUxa8ZU4EYpVwGzpPwscHYJx1AUWX1CDlHlQao8WZQQEW6obVS9Qo6I8OdfruojVPmItM3+OLKqkDpV7g50VfWwNlxRwDWekLVG00OVwxTYmEx3kyMLCukmd7L+8z4zMoNMfQpwWRPXrJE1RnMwsKeqv63KxwHPAX2LG0JyZEEhc2RuD6Zs+JN2B14C1isZq5DANODSmPZHgati2geaeqSQ8LtvAkOBN8zTWHbSVkgn4EBVPwb4Xqynpao9KGTnmPPDQv+iqv8EjMnxW6ep8ipZ0BvMkxnWo/2LHEsipK2Qn4E7YtqDU3eSqrc3dc1mU/4rRqa7KDsiePQ3GQMgMBt4paiRJEQWpqyJQB8TFGwbY5L3znG+XZjjFupjTX0rOSK+kCfmguZ1PXmyYmWtkEjt0cav0JwD9DRtHY2i9jAePeIANmWVhe/2Fb8kdbKgkHayRjwMXAf8mkNuN7G+5gJ7ieO4Qaw0zfvAPAk63gX8ARyW45pB+acCj4th0bE0QyyctPdDhsid2dwwRmMBfS9EJo7RtbULHizivERI+wm5P48yVgPjgIWm3f7RS8VUbkomPF13Aivz9On6PN+XlLRjWfWyxxGxRhy0hRJqDybwP/JdcNpmiMUUsVF8jllKZqbsg0SEKWsk8JTU7wF2Ea89OIRnAQcp+R9KPeimSFshwbH7HNhJTE4b0dWEfY1hwEeqbZJSBiJzTdiFVW2jlDIi1smxRJ7AbmJhBb8otemKDCikQf6QQtlo5OJMXOuHbI6RsaySJyd1smBlHQ+cGeOkxbGpwD9YU+jC3k/60a6Z10+UtBVyu8SPgpn6o4RCzgD2MY4bMq1VG8UNN6GXEF4Zbc4bY9apiOCzDAAekI2txdKPWTGyZSPtKatKlXcALpYj8BvwgijpRAmnWHrKmjJNFuO4MEwvMRDmSVbK6bJj2DlGNnBUskNsHmkrJNyN9+b4rqME/uyeRhwjC5AZKkc+Fhc9mgRIe8oaL7uDwVpaLhtTG/KcUy8W0fwmZOokNjUvz7XCevSxJNpNlymsKs85JSULe+r1as+7axOOW6OYyTOkPltCIm8BHZTcCJUmFKIAR0qIvlPMNStkjXktwfG0iKwEF9vL1BXu7B1zyExVyogIyntV1b+LWZTfk4hALmrlnC6JjqhIsqCQAeJf3GaCe9bHqCOeQszaRabeaK5fJWGaUcUOIinSVkiwrJ6P6UdtzOJaS37a5FBQvRwRq8yTFfGI5IOlRtoK+V3M24h1YgkNMXP+O8DXMedXSjglorMymy1aoSHWdYOETD41crnC/2UhbYUEK+ciYC3wpGSFzJe7VDtzNpKLbEzZKDDik8SZwfYa/UXJB0iuV7DurgTebeGYWkQWrKxFkmmi6WHqdnrpa5IgLFPlZpui2pdLNCB6dUFvWk0wucCpkdVEuT6q/K142hGnyBSWj8mS5xuxxUx7mUzAzqpCflHllcoiqhSfQi/cjTnKgfvMfvrLqrw28V4nQFaTrW+W9zy2SI5W4IQY83Wu7IufK/UwLX0FnK9kamSc1aKg9ZJMMZYMktUnZJN40GPVCznDjMwyyUTRVtr24lNYR1CnndZI6GVNifreIlrTCzt6iqlTUVmd0bidfIbI8NOqfXUZ+pcIWZ2y4hgnqaId5J2RCL2hVCHpoA0ybQWncz9JMWoVtCaFYMzYCD1lrTfvHD5Tnm4lx3/htehqlZmSaoKC4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4zj/exzHcRzHcZySAPwL8ComJ3FaigkAAAAASUVORK5CYII=","createdAt":"2024-03-13T11:59:38.000Z","filename":"13n.png","filesize":1703,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"},{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACUUlEQVR4nO3aTYiNURjA8f81ykc+RykWVuzERllIysZQYmnH2oKi2Ngoa9kqydpGLDQjq1nYCGVBTREWjHwtRETSW2dqRvfeuh/nnMfc/69ud/We53nvc8+5zz3nRZIkSZIkSZIkSZIkSZIkSZIkSZIWrVbOG5uYODTI5TuBaWAN8LWP61cDn4G9wLNBEvnX5OTdYQ63wNJsIw9ufyoG6cPtx3gaZ6gFySlyQa4Cu4FtwJc+rl8PzADXM+SWTeSCfAeOBcijqCUjdK//BQsSTMklaxdwCfgN/Cz8MaxKHdcp4EPh2D0pWZAzwIGC8dp5A5yvnENXJQtyD9gDfEyzpKRlwApgqnDcnpUsyI30Uhf+qAdjQYKJ+sdwHXAEWFmhI+uk+fIuBx4Aj3MFiVqQC8DZAHm0MwtsyjV41CXrbYAcOnmXc/CoM+QycDu1qqVb5E6ao4ox4HXOIJE3F18EyKE4u6xgcs+Q7cDBtJX+J8itt9LBV7MkPg+QzwK5C3IL2Jo5Rr8Op62cUHIvWTPRbniel2EymSf3DDkK7Eibe1G6pbkv4dPKebSVuyC/gEeZYywqdlnB1P4fshY4DWxInVgErfT40E3gful8ahfkCnCicg6dHAe2AO9LBq29ZL2qHL+b5rj3U+mgtWfIReAOsBn4UTmXOa3UFT6s0RlG2Mt6kl4jD7useKLu9m4ETqalY9gnhmPpJPLaKO5l9as5LTyXOUbz4N6+zDF6FrUgs+n9W4Zd4lZ6kjFyhydJkiRJkiRJkiRJkiRJkiRJkiRpYMBfS4pFdt7boNAAAAAASUVORK5CYII=","createdAt":"2024-03-13T11:59:38.000Z","filename":"50d.png","filesize":650,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"},{"content":"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACUUlEQVR4nO3aTYiNURjA8f81ykc+RykWVuzERllIysZQYmnH2oKi2Ngoa9kqydpGLDQjq1nYCGVBTREWjHwtRETSW2dqRvfeuh/nnMfc/69ud/We53nvc8+5zz3nRZIkSZIkSZIkSZIkSZIkSZIkSZIWrVbOG5uYODTI5TuBaWAN8LWP61cDn4G9wLNBEvnX5OTdYQ63wNJsIw9ufyoG6cPtx3gaZ6gFySlyQa4Cu4FtwJc+rl8PzADXM+SWTeSCfAeOBcijqCUjdK//BQsSTMklaxdwCfgN/Cz8MaxKHdcp4EPh2D0pWZAzwIGC8dp5A5yvnENXJQtyD9gDfEyzpKRlwApgqnDcnpUsyI30Uhf+qAdjQYKJ+sdwHXAEWFmhI+uk+fIuBx4Aj3MFiVqQC8DZAHm0MwtsyjV41CXrbYAcOnmXc/CoM+QycDu1qqVb5E6ao4ox4HXOIJE3F18EyKE4u6xgcs+Q7cDBtJX+J8itt9LBV7MkPg+QzwK5C3IL2Jo5Rr8Op62cUHIvWTPRbniel2EymSf3DDkK7Eibe1G6pbkv4dPKebSVuyC/gEeZYywqdlnB1P4fshY4DWxInVgErfT40E3gful8ahfkCnCicg6dHAe2AO9LBq29ZL2qHL+b5rj3U+mgtWfIReAOsBn4UTmXOa3UFT6s0RlG2Mt6kl4jD7useKLu9m4ETqalY9gnhmPpJPLaKO5l9as5LTyXOUbz4N6+zDF6FrUgs+n9W4Zd4lZ6kjFyhydJkiRJkiRJkiRJkiRJkiRJkiRpYMBfS4pFdt7boNAAAAAASUVORK5CYII=","createdAt":"2024-03-13T11:59:38.000Z","filename":"50n.png","filesize":650,"mimetype":"image/png","package":"c3588c14-4083-4933-baab-7d3a0b4e4064","path":"weatherMedia","updatedAt":"2024-03-13T11:59:38.000Z"}],"Package":[{"id":"c3588c14-4083-4933-baab-7d3a0b4e4064","createdAt":"2024-03-11T19:20:14.000Z","updatedAt":"2024-03-13T12:17:27.000Z","createdBy":"admin","changedBy":"admin","git":{"packageJSON":"{\n  \"name\": \"WeatherPackage\",\n  \"version\": \"1.0.0\",\n  \"description\": \"WeatherPackage\",\n  \"author\": \"Neptune Software\",\n  \"license\": \"LicenseRef-LICENSE\",\n  \"private\": true,\n  \"scripts\": {\n    \"deploy\": \"ts-node src/deploy.ts\",\n    \"test\": \"jest --passWithNoTests\"\n  },\n  \"engines\": {\n    \"node\": \"18\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"^29.2.0\",\n    \"typescript\": \"^4.8.4\",\n    \"ts-node\": \"^10.9.1\",\n    \"axios\": \"^1.1.3\",\n    \"jest\": \"^29.2.2\",\n    \"ts-jest\": \"^29.0.3\"\n  }\n}\n","workflow":"name: Example deploy workflow\n\non:\n  push:\n\njobs:\n\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [18.x]\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Installing node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v1\n      with:\n        node-version: ${{ matrix.node-version }}\n\n    - run: npm install\n\n    # Comment out to run the deploy script when you push to the repository.\n    #- run: npm run deploy\n    #  env:\n    #    DXP_OE_SERVER_URL: ${{ secrets.CDCI_STAGING_URL }}\n    #    DXP_OE_SERVER_TOKEN: ${{ secrets.CDCI_STAGING_TOKEN }}\n    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    # Comment out to run test script after deployment.\n    #- run: npm run test\n    #  env:\n    #    DXP_OE_SERVER_URL: ${{ secrets.CDCI_STAGING_URL }}\n    #    DXP_OE_SERVER_TOKEN: ${{ secrets.CDCI_STAGING_TOKEN }}\n","deploy":"/**\n * Example deployment file.\n */\n\nimport axios from \"axios\";\nimport * as https from 'https';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nconst serverUrl = process.env.DXP_OE_SERVER_URL;\nconst serverToken = process.env.DXP_OE_SERVER_TOKEN;\nconst githubToken = process.env.GITHUB_TOKEN;\n\nconst deleteUrl = (server: string) => `${server}/api/functions/Package/DelPackageAndArtifacts`\nconst cloneUrl = (server: string) => `${server}/api/functions/Package/CloneRepository`;\nconst getUrl = (server: string) => `${server}/api/functions/Package/Get`;\nconst importUrl = (server: string) => `${server}/api/functions/Package/ImportRepository`;\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: false\n});\n\nasync function axiosPost(url: string, data: unknown, config: Record<string, unknown> = {}) {\n    return axios.post(url, data, { httpsAgent, headers: {\n            'Authorization': `Bearer ${serverToken}`,\n        }, ...config});\n}\n\nasync function readFile(\n    path: fs.PathLike,\n    options?: { encoding?: BufferEncoding; flag?: string } | BufferEncoding,\n): Promise<string | Buffer> {\n    return new Promise((resolve, reject) => {\n        fs.readFile(path, options, (err, data) => {\n            err ? reject(err) : resolve(data);\n        });\n    });\n}\n\nasync function readPackageFile() {\n    const content = await readFile(path.join(path.join(process.cwd(), 'artifacts'), 'dev_package.json'), 'utf-8') as string;\n    return JSON.parse(content);\n}\n\nasync function getPackageFromServer(id: string): Promise<boolean> {\n    try {\n        await axiosPost(getUrl(serverUrl), { id });\n        return true;\n    } catch (e) {\n        if (e.response.status === 404) {\n            return false;\n        }\n        console.error('Error getting package from server');\n        throw e;\n    }\n}\n\n(async () => {\n    try {\n        const devPackage = await readPackageFile();\n        const id = devPackage.id;\n        const url = devPackage.git.remote;\n\n        const packageExists = await getPackageFromServer(id);\n        if (!packageExists) {\n            console.log('Package does not exist on server, cloning...');\n            const cloneResult = await axiosPost(cloneUrl(serverUrl), {url, auth: {authType: 1, token: githubToken}});\n            console.log('Package has been cloned on server');\n            const errorLog = cloneResult.data.importLog.data.filter(entry => entry.transferStatus === 'Error');\n            if (errorLog.length > 0) {\n                console.warn(`One or more artifacts failed to deploy`, errorLog);\n            }\n            return process.exit(0);\n        }\n\n        console.log('Package exists on server, importing...');\n        const importResult = await axiosPost(importUrl(serverUrl), {id, branch: 'master', auth: {authType: 1, token: githubToken}, forceUpdate: true});\n        console.log('Package has been imported on server');\n        const errorLog = importResult.data.importLog.data.filter(entry => entry.transferStatus === 'Error');\n        if (errorLog.length > 0) {\n            console.warn(`One or more artifacts failed to deploy`, errorLog);\n        }\n\n    } catch (e) {\n        console.error('Failed to deploy package', e);\n    }\n    process.exit(0);\n})();\n","test":"/**\n * Example test file after deployment.\n */\n\nimport axios from \"axios\";\nimport * as https from 'https';\n\nconst serverUrl = process.env.DXP_OE_SERVER_URL;\nconst serverToken = process.env.DXP_OE_SERVER_TOKEN;\n\nconst healtzUrl = (server: string) => `${server}/healthz`;\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: false\n});\n\nasync function axiosGet(url: string, config: Record<string, unknown> = {}) {\n    return axios.get(url, { httpsAgent, headers: {\n            'Authorization': `Bearer ${serverToken}`,\n        }, ...config});\n}\n\ndescribe(`Running test script after deployment to ${serverUrl}`, () => {\n\n    test('Server healtz', async () => {\n        const response = await axiosGet(healtzUrl(serverUrl));\n        expect(response.status).toBe(200);\n    });\n\n    /**\n     * More tests...\n     */\n});\n"},"name":"WeatherPackage","description":null,"ver":"24.03.11.1920","enableCICD":false,"apps":[{"id":"8567e671-8044-4f81-86e3-1d1758a753f1","updatedAt":"2024-03-13T12:15:54.000Z","changedBy":"admin","application":"weatherapp","title":"","description":"","package":{"id":"c3588c14-4083-4933-baab-7d3a0b4e4064"},"name":"weatherapp"}],"api":[{"id":"c1df0e15-2bb4-4673-9f6d-96d31994e43f","updatedAt":"2024-03-13T11:16:07.000Z","changedBy":"admin","name":"weatherAPI","description":null,"apiGroup":null}],"odataSource":[],"odataMock":[],"dictionary":[{"id":"fb27873b-d7ab-4a72-9082-49f2a44b92a6","updatedAt":"2024-03-13T11:16:07.000Z","changedBy":"admin","name":"placesdata","description":null}],"jsclass":[],"jsscript_group":[],"theme":[],"pdf":[],"rulesengine":[],"reports":[],"api_authentication":[],"api_group":[],"tile":[{"id":"bd647f30-03cc-46f0-aaa7-fd2665f67749","updatedAt":"2024-03-13T11:24:34.000Z","changedBy":"admin","description":null,"name":"weatherApp"}],"category":[{"id":"16c0fe0d-ff35-4b19-8550-cd76a75eb426","updatedAt":"2024-03-13T11:27:25.000Z","changedBy":"admin","description":null,"name":"weatherGroup"}],"launchpad":[{"id":"b6eb065e-bf5a-49b3-a66f-c0218107fbf6","updatedAt":"2024-03-13T12:10:28.000Z","changedBy":"admin","name":"weatherLaunchpad","description":null}],"certificates":[],"role":[],"systems":[],"doc":[],"wf_notifications":[],"department":[],"script_scheduler":[],"wf_definition":[],"connector":[],"events":[],"code_snippets":[],"wf_determination":[],"wf_taskaction":[],"media_library":[{"id":"e958a2f6-9b0c-4fea-bf38-84935fef0ec6","createdAt":"2024-03-13T11:59:38.000Z","updatedAt":"2024-03-13T12:17:27.000Z","name":"weatherMedia","parent":null,"package":"c3588c14-4083-4933-baab-7d3a0b4e4064","createdBy":"N/A","type":"Folder","path":"weatherMedia"}],"log":[]}],"Tile":[{"id":"bd647f30-03cc-46f0-aaa7-fd2665f67749","createdAt":"2024-03-13T11:24:34.000Z","updatedAt":"2024-03-13T11:24:34.000Z","createdBy":"admin","changedBy":"admin","translation":[{"language":"PT","title":"Applicação Climática"}],"storeItem":{},"settings":null,"title":"Weather App","subTitle":null,"description":null,"categoryID":null,"sort":null,"urlApplication":null,"actionApplication":"weatherapp","actionParameters":null,"actionURL":null,"openDialog":false,"openWindow":false,"openFullscreen":false,"forceRow":false,"frameType":null,"type":null,"image":null,"icon":"sap-icon://cloud","backgroundType":null,"backgroundColor":null,"backgroundShade":null,"tileApplication":null,"hideHeaderL":null,"hideHeaderM":false,"hideHeaderS":false,"hideTileDesktop":false,"hideTileMobile":false,"hideTileTablet":false,"enableDocumentation":false,"navObject":"","navAction":"","dialogWidth":null,"dialogHeight":null,"tileApplicationStyleClass":null,"sidepanelApp":null,"sidepanelTitle":null,"tags":"","actiongroup":null,"styleClass":null,"titleAlignment":null,"titleLevel":null,"dataUrl":null,"dataInterval":null,"footer":null,"browserBlockWin":null,"browserBlockMac":null,"blackoutEnabled":false,"blackoutText":null,"blackoutDescription":null,"helpText":null,"helpEnabled":false,"openClickTile":false,"ver":"24.03.13.1124","actionWebApp":null,"name":"weatherApp","cardWidth":null,"cardHeight":null,"cardHeightFit":false,"cardImage":null,"cardButtonIcon":null,"cardButtonIconOnly":false,"imagePlacement":null,"imageRepeat":null,"imageSize":null,"imagePosition":null,"openText":null,"imageHeight":null,"bodyHeight":null,"roleTag":null,"sapICFNode":null,"actionType":"A","cockpitTile":null,"package":"c3588c14-4083-4933-baab-7d3a0b4e4064","roles":[],"tilegroups":[{"id":"16c0fe0d-ff35-4b19-8550-cd76a75eb426","createdAt":"2024-03-13T11:27:25.000Z","updatedAt":"2024-03-13T11:27:25.000Z","createdBy":"admin","changedBy":"admin","translation":[{"language":"PT","title":"Applicações Climáticas"}],"tilesOrder":["bd647f30-03cc-46f0-aaa7-fd2665f67749"],"tilegroupsOrder":[],"configMessage":{"type":"None"},"title":"Weather Apps","subTitle":null,"description":null,"titleAlignment":null,"enableFullScreen":null,"hideHeader":null,"backgroundType":"cards","backgroundColor":"","backgroundShade":null,"type":null,"image":null,"icon":null,"sort":null,"inclFav":false,"styleClass":null,"enableScroll":false,"enableShadeCalc":false,"numTiles":null,"enableMessage":false,"ver":"24.03.13.1127","headColor":null,"headTxtClr":null,"subheadTxtClr":null,"headBorderClr":null,"headBorderWidth":null,"imageTablet":null,"imageMobile":null,"imageCover":false,"imageTabletCover":false,"imageMobileCover":false,"imageMobileHeight":null,"imageTabletHeight":null,"imageHeight":null,"name":"weatherGroup","cardContentWidth":null,"cardContentAlign":null,"cardPerRow":null,"cardStyle":null,"cardHeightFit":false,"imagePlacement":null,"imageRepeat":null,"imageSize":null,"imageTabletPlacement":null,"imageTabletRepeat":null,"imageTabletSize":null,"imageMobilePlacement":null,"imageMobileRepeat":null,"imageMobileSize":null,"hideFromMenu":false,"roleTag":null,"cockpitTileGroup":null,"package":"c3588c14-4083-4933-baab-7d3a0b4e4064"}]}]}